id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/root/html604/TSelector.html:1492,Safety,avoid,avoiding,1492,"ed every time a new TTree is; attached. void TSelector::SlaveBegin(). Create e.g. histograms in this method.; This method is called (with or without PROOF) before looping on the; entries in the Tree. When using PROOF, this method is called on; each worker node.; void TSelector::Begin(). Mostly for backward compatibility; use; SlaveBegin() instead. Both methods are called before looping on the; entries in the Tree. When using PROOF, Begin() is called on the; client only. Bool_t TSelector::Notify(). This method is called at the first entry; of a new file in a chain. Bool_t TSelector::Process(Long64_t entry). This method is called; to process an entry. It is the user's responsability to read; the corresponding entry in memory (may be just a partial read).; Once the entry is in memory one can apply a selection and if the; entry is selected histograms can be filled. Processing stops; when this function returns kFALSE. This function combines the; next two functions in one, avoiding to have to maintain state; in the class to communicate between these two functions.; See WARNING below about entry.; This method is used by PROOF.; Bool_t TSelector::ProcessCut(Long64_t entry). This method is called; before processing entry. It is the user's responsability to read; the corresponding entry in memory (may be just a partial read).; The function returns kTRUE if the entry must be processed,; kFALSE otherwise. This method is obsolete, use Process().; See WARNING below about entry.; void TSelector::ProcessFill(Long64_t entry). This method is called; for all selected entries. User fills histograms in this function.; This method is obsolete, use Process().; See WARNING below about entry.; void TSelector::SlaveTerminate(). This method is called at the end of; the loop on all PROOF worker nodes. In local mode this method is; called on the client too.; void TSelector::Terminate(). This method is called at the end of; the loop on all entries. When using PROOF Terminate() is call on; the cl",MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelector.html:9836,Safety,Abort,Abort,9836,"s)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will",MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelector.html:9900,Safety,Abort,Abort,9900,"s)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will",MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelector.html:9971,Safety,abort,aborted,9971,"tatic TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older tha",MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelector.html:10039,Safety,abort,aborted,10039,"s)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TS",MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelector.html:10149,Safety,abort,aborted,10149,"s)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortfAbortAbort status; TList*fInputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TS",MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelector.html:10158,Safety,Abort,Abort,10158,"nputList of objects available during processing; TObject*fObject!Current object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TSelector object. Bool_t IsStandardDraw(const char* selec); Find out if this is a standard selection used for Draw actions; (eithe",MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelector.html:10241,Safety,abort,abort,10241,"object if processing object (vs. TTree); TStringfOptionOption given to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TSelector object. Bool_t IsStandardDraw(const char* selec); Find out if this is a standard selection used for Draw actions; (either TSelectorDraw, TProofDraw or deriving from them). Bool_t ProcessCut(Lon",MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelector.html:10308,Safety,abort,abort,10308,"to TTree::Process; TSelectorList*fOutput!List of objects created during processing; Long64_tfStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←. RooProofDriverSelector. TProofDraw; ←. TProofDrawEntryList. TProofDrawEventList. TProofDrawGraph. TProofDrawHist. TProofDrawListOfGraphs. TProofDrawListOfPolyMarkers3D. TProofDrawPolyMarker3D. TProofDrawProfile.  [more...]. Function documentation; TSelector(); Default selector ctor. ~TSelector(); Selector destructor. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Abort processing. If what = kAbortProcess, the Process() loop will be; aborted. If what = kAbortFile, the current file in a chain will be; aborted and the processing will continue with the next file, if there; is no next file then Process() will be aborted. Abort() can also be; called from Begin(), SlaveBegin(), Init() and Notify(). After abort; the SlaveTerminate() and Terminate() are always called. The abort flag; can be checked in these methods using GetAbort(). TSelector * GetSelector(const char* filename); The code in filename is loaded (interpreted or compiled, see below),; filename must contain a valid class implementation derived from TSelector. If filename is of the form file.C, the file will be interpreted.; If filename is of the form file.C++, the file file.C will be compiled; and dynamically loaded. The corresponding binary file and shared; library will be deleted at the end of the function.; If filename is of the form file.C+, the file file.C will be compiled; and dynamically loaded. At next call, if file.C is older than file.o; and file.so, the file.C is not compiled, only file.so is loaded. The static function returns a pointer to a TSelector object. Bool_t IsStandardDraw(const char* selec); Find out if this is a standard selection used for Draw actions; (either TSelectorDraw, TProofDraw or deriving from them). Bool_t ProcessCut(Long64_t ); This method is called before processing entry. It is the u",MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelector.html:13094,Safety,Abort,Abort,13094,"d with a TChain:; in the Process, ProcessCut, ProcessFill function, you must use; the pointer to the current Tree to call GetEntry(entry).; entry is always the local entry number in the current tree.; Assuming that fChain is the pointer to the TChain being processed,; use fChain->GetTree()->GetEntry(entry);. Bool_t Process(Long64_t ); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either t01::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. TSelector(const TSelector& ). TSelector& operator=(const TSelector& ). int Version() const; { return 0; }. void Init(TTree* ); { }. void Begin(TTree* ); { }. void SlaveBegin(TTree* ); { }. Bool_t Notify(); { return kTRUE; }. const char * GetOption() const; { return fOption; }. Long64_t GetStatus() const; { return fStatus; }. Int_t GetEntry(Long64_t , Int_t = 0); { return 0; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. void SetInputList(TList* input); { fInput = input; }. void SetStatus(Long64_t status); { fStatus = status; }. TList * GetInputList() const; { return fInput; }. TList * GetOutputList() const; { return fOutput; }. void SlaveTerminate(); { }. void Terminate(); { }. EAbort GetAbort() const; { return fAbort; }. void ResetAbort(); { fAbort = kContinue; }. » Author: Rene Brun 05/02/97 » Copyr",MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelector.html:5136,Security,Hash,Hash,5136,"virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*GetOption() const; virtual TList*GetOutputList() const; static TSelector*GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tIsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* pt",MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelector.html:7655,Testability,Test,TestBit,7655,"voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t); virtual Bool_tProcessCut(Long64_t); virtual voidProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidSetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelector(); virtual voidTObject::UseCurrentStyle(); virtual intVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelector.html:7694,Testability,Test,TestBits,7694,"voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t); virtual Bool_tProcessCut(Long64_t); virtual voidProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidSetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelector(); virtual voidTObject::UseCurrentStyle(); virtual intVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelector.html:3373,Usability,Clear,Clear,3373,,MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelector.html:12941,Usability,simpl,simple,12941," in this function. This method is obsolete, use Process(). WARNING when a selector is used with a TChain:; in the Process, ProcessCut, ProcessFill function, you must use; the pointer to the current Tree to call GetEntry(entry).; entry is always the local entry number in the current tree.; Assuming that fChain is the pointer to the TChain being processed,; use fChain->GetTree()->GetEntry(entry);. Bool_t Process(Long64_t ); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either t01::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. TSelector(const TSelector& ). TSelector& operator=(const TSelector& ). int Version() const; { return 0; }. void Init(TTree* ); { }. void Begin(TTree* ); { }. void SlaveBegin(TTree* ); { }. Bool_t Notify(); { return kTRUE; }. const char * GetOption() const; { return fOption; }. Long64_t GetStatus() const; { return fStatus; }. Int_t GetEntry(Long64_t , Int_t = 0); { return 0; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. void SetInputList(TList* input); { fInput = input; }. void SetStatus(Long64_t status); { fStatus = status; }. TList * GetInputList() const; { return fInput; }. TList * GetOutputList() const; { return fOutput; }. void SlaveTerminate(); { }. void Terminate(); { }. EAbort GetAbort() const; { return fA",MatchSource.WIKI,root/html604/TSelector.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelector.html
https://root.cern/root/html604/TSelectorCint.html:1437,Availability,Error,Error,1437,"irtual~TSelectorCint(); virtual voidAbort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual TClass*GetInterpretedClass() const; virtual TSelector*GetInterpretedSelector() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjec",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorCint.html:1566,Availability,error,error,1566,"onst char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual TClass*GetInterpretedClass() const; virtual TSelector*GetInterpretedSelector() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSel",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorCint.html:1650,Availability,error,error,1650,"tual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual TClass*GetInterpretedClass() const; virtual TSelector*GetInterpretedSelector() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*T",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorCint.html:7565,Availability,avail,available,7565,"lector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; ClassInfo_t*fClass!; CallFunc_t*fFuncAbort!; CallFunc_t*fFuncBegin!; CallFunc_t*fFuncCut!; CallFunc_t*fFuncFill!; CallFunc_t*fFuncGetAbort!; CallFunc_t*fFuncGetStat!; CallFunc_t*fFuncInit!; CallFunc_t*fFuncInp!; CallFunc_t*fFuncNotif!; CallFunc_t*fFuncObj!; CallFunc_t*fFuncOption!; CallFunc_t*fFuncOut!; CallFunc_t*fFuncProc!; CallFunc_t*fFuncResetAbort!; CallFunc_t*fFuncSlBegin!; CallFunc_t*fFuncSlTerm!; CallFunc_t*fFuncTerm!; CallFunc_t*fFuncVersion!; TList*TSelector::fInputList of objects available during processing; TSelector*fIntSelectorPointer to interpreted selector (if interpreted); Bool_tfIsOwnerTrue if fIntSelector shoudl be deleted when the this object is deleted.; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorCint. Function documentation; TSelectorCint(); Default constructor for a Selector. ~TSelectorCint(); destructor for a Selector. void SetFuncProto(CallFunc_t* cf, ClassInfo_t* cl, const char* fname, const char* argtype, Bool_t required = kTRUE); Set the function prototype. void Build(TSelector* iselector, ClassI",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorCint.html:8772,Availability,avail,available,8772,"ect is deleted.; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorCint. Function documentation; TSelectorCint(); Default constructor for a Selector. ~TSelectorCint(); destructor for a Selector. void SetFuncProto(CallFunc_t* cf, ClassInfo_t* cl, const char* fname, const char* argtype, Bool_t required = kTRUE); Set the function prototype. void Build(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t Process(Long64_t entry); Invoke the ProcessCut function via the interpreter. void SetOption(const char* option); Set the selector option. void SetObject(TObject* obj); Set the current object. void SetInputList(TList* input); Set the selector list of input objects. TList * GetOutputList() const; Return the list of output object. void SlaveTerminate(); Invoke the SlaveTerminate function via the interpreter if available. void Terminate(); Invoke the Terminate function via the interpreter. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Invoke the GetAbort function via the interpreter. TSelector::EAbort GetAbort() const; Invoke the GetAbort function via the interpreter. void ResetAb",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorCint.html:9440,Availability,avail,available,9440,"tor* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t Process(Long64_t entry); Invoke the ProcessCut function via the interpreter. void SetOption(const char* option); Set the selector option. void SetObject(TObject* obj); Set the current object. void SetInputList(TList* input); Set the selector list of input objects. TList * GetOutputList() const; Return the list of output object. void SlaveTerminate(); Invoke the SlaveTerminate function via the interpreter if available. void Terminate(); Invoke the Terminate function via the interpreter. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Invoke the GetAbort function via the interpreter. TSelector::EAbort GetAbort() const; Invoke the GetAbort function via the interpreter. void ResetAbort(); Invoke the GetAbort function via the interpreter. Long64_t GetStatus() const; Invoke the GetStatus function via the interpreter. TClass * GetInterpretedClass() const; Retrieve the TClass object for the interpreted class. TSelectorCint(). TSelector * GetInterpretedSelector() const; { return fIntSelector; }. » Author: Rene Brun 05/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorCint.html:119,Modifiability,inherit,inheritance,119,". TSelectorCint. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TSelectorCint. class TSelectorCint: public TSelector. This class is a special version of TSelector for user interpreted; classes. Function Members (Methods); public:. virtual~TSelectorCint(); virtual voidAbort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetD",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorCint.html:2908,Modifiability,Inherit,InheritsFrom,2908,"* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual TClass*GetInterpretedClass() const; virtual TSelector*GetInterpretedSelector() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); v",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorCint.html:2974,Modifiability,Inherit,InheritsFrom,2974,"ption_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual TClass*GetInterpretedClass() const; virtual TSelector*GetInterpretedSelector() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorCint.html:8019,Modifiability,Inherit,Inheritance,8019,"or::EAbortTSelector::fAbortAbort status; ClassInfo_t*fClass!; CallFunc_t*fFuncAbort!; CallFunc_t*fFuncBegin!; CallFunc_t*fFuncCut!; CallFunc_t*fFuncFill!; CallFunc_t*fFuncGetAbort!; CallFunc_t*fFuncGetStat!; CallFunc_t*fFuncInit!; CallFunc_t*fFuncInp!; CallFunc_t*fFuncNotif!; CallFunc_t*fFuncObj!; CallFunc_t*fFuncOption!; CallFunc_t*fFuncOut!; CallFunc_t*fFuncProc!; CallFunc_t*fFuncResetAbort!; CallFunc_t*fFuncSlBegin!; CallFunc_t*fFuncSlTerm!; CallFunc_t*fFuncTerm!; CallFunc_t*fFuncVersion!; TList*TSelector::fInputList of objects available during processing; TSelector*fIntSelectorPointer to interpreted selector (if interpreted); Bool_tfIsOwnerTrue if fIntSelector shoudl be deleted when the this object is deleted.; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorCint. Function documentation; TSelectorCint(); Default constructor for a Selector. ~TSelectorCint(); destructor for a Selector. void SetFuncProto(CallFunc_t* cf, ClassInfo_t* cl, const char* fname, const char* argtype, Bool_t required = kTRUE); Set the function prototype. void Build(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorCint.html:9525,Safety,Abort,Abort,9525,"tor* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); Initialize the CallFunc objects when selector is interpreted. int Version() const; Invoke the Version function via the interpreter. void Init(TTree* ); Invoke the Init function via the interpreter. void Begin(TTree* tree); Invoke the Begin function via the interpreter. void SlaveBegin(TTree* ); Invoke the SlaveBegin function via the interpreter if available. Bool_t Notify(); Invoke the Notify function via the interpreter. Bool_t ProcessCut(Long64_t entry); Invoke the ProcessCut function via the interpreter. void ProcessFill(Long64_t entry); Invoke the ProcessFill function via the interpreter. Bool_t Process(Long64_t entry); Invoke the ProcessCut function via the interpreter. void SetOption(const char* option); Set the selector option. void SetObject(TObject* obj); Set the current object. void SetInputList(TList* input); Set the selector list of input objects. TList * GetOutputList() const; Return the list of output object. void SlaveTerminate(); Invoke the SlaveTerminate function via the interpreter if available. void Terminate(); Invoke the Terminate function via the interpreter. void Abort(const char* why, TSelector::EAbort what = kAbortProcess); Invoke the GetAbort function via the interpreter. TSelector::EAbort GetAbort() const; Invoke the GetAbort function via the interpreter. void ResetAbort(); Invoke the GetAbort function via the interpreter. Long64_t GetStatus() const; Invoke the GetStatus function via the interpreter. TClass * GetInterpretedClass() const; Retrieve the TClass object for the interpreted class. TSelectorCint(). TSelector * GetInterpretedSelector() const; { return fIntSelector; }. » Author: Rene Brun 05/02/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorCint.html:2798,Security,Hash,Hash,2798,"st; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual TClass*GetInterpretedClass() const; virtual TSelector*GetInterpretedSelector() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorCint.html:5404,Testability,Test,TestBit,5404,"r new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSelectorCint&operator=(const TSelectorCint&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tProcessCut(Long64_t entry); virtual voidProcessFill(Long64_t entry); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorCint(); TSelectorCint(const TSelectorCint&); virtual voidTObject::UseCurrentStyle(); virtual intVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorCint.html:5443,Testability,Test,TestBits,5443,"r new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSelectorCint&operator=(const TSelectorCint&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tProcessCut(Long64_t entry); virtual voidProcessFill(Long64_t entry); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree*); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorCint(); TSelectorCint(const TSelectorCint&); virtual voidTObject::UseCurrentStyle(); virtual intVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorCint.html:897,Usability,Clear,Clear,897," virtual~TSelectorCint(); virtual voidAbort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(TSelector* iselector, ClassInfo_t* cl, Bool_t isowner = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortGetAbort() const; virtual Option_t*TObject::GetD",MatchSource.WIKI,root/html604/TSelectorCint.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorCint.html
https://root.cern/root/html604/TSelectorDraw.html:1352,Availability,Error,Error,1352," virtual~TSelectorDraw(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tGetAction() const; virtual Bool_tGetCleanElist() const; virtual Int_tGetDimension() const; ",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:1481,Availability,error,error,1481," char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tGetAction() const; virtual Bool_tGetCleanElist() const; virtual Int_tGetDimension() const; virtual Long64_tGetDrawFlag() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; Int_tGetMultiplicity() const; virtual const char*TObject::GetName() const; virtual Int_tGetNfill() const; TObject*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_t",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:1565,Availability,error,error,1565,"st char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tGetAction() const; virtual Bool_tGetCleanElist() const; virtual Int_tGetDimension() const; virtual Long64_tGetDrawFlag() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; Int_tGetMultiplicity() const; virtual const char*TObject::GetName() const; virtual Int_tGetNfill() const; TObject*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); TH1*GetOldHistogram() const; virtual const char*TSelector:",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:8387,Availability,avail,available,8387,Object::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; Int_tfAction! Action type; Bool_tfCleanElisttrue if original Tree elist must be saved; Long64_tfCurrentSubEntryCurrent subentry when fSelectMultiple is true. Used to fill TEntryListArray; Int_tfDimensionDimension of the current expression; Long64_tfDraw! Last entry loop number when object was drawn; Int_tfForceReadForce Read flag; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*fManagerPointer to the formula manager; Int_tfMultiplicityIndicator of the variability of the size of entries; Int_t*fNbins![fDimension] Number of bins per dimension; Int_tfNfill! Total number of histogram fills; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); Long64_tfOldEstimatevalue of Tree fEstimate when selector is called; TH1*fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension],MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:11993,Availability,avail,available,11993,"sponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus if the formula contains arrays, this number might be greater than; the number of entries in the trees.; By default TTree::Draw creates the arrays obtained; with all GetVal and GetW with a length corresponding to the; parameter fEstimate. By default fEstimate=10000 and can be modified; via TTree::SetEstimate. A possible recipee is to do; tree->SetEstimate(tree->GetEntries());; You must call SetEstimate if the expected number of selected rows; is greater than 10000.; See TTree::Draw for additional details. TTreeFormula* GetVar(Int_t i) const; Return the TTreeFormula corresponding to the i-th component; of the request formula (where the component are ':' separated). void InitArrays(Int_t newsize); Initialization of the primitive type arrays if the new size is bigger than the available space. UInt_t SplitNames(const TString& varexp, vector<TString>& names); Build Index array for names in varexp.; This will allocated a C style array of TString and Ints. Bool_t Notify(); This function is called at the first entry of a new tree in a chain. void ProcessFill(Long64_t entry); Called in the entry loop for all entries accepted by Select. void ProcessFillMultiple(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Complex case with multiplicity. void ProcessFillObject(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Case where the only variable returns an object (or pointer to). void SetEstimate(Long64_t n); Set number of entries to estimate variable limits. void TakeAction(); Execute action for object obj fNfill times. void TakeEstimate(); Estimate limits for 1-D, 2-D or 3-D objects. void Terminate(); Called at the end of a loop on a TTree. TSelectorDraw(const T",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:12126,Energy Efficiency,allocate,allocated,12126,"ws currently returns the actual number of values plotted; and thus if the formula contains arrays, this number might be greater than; the number of entries in the trees.; By default TTree::Draw creates the arrays obtained; with all GetVal and GetW with a length corresponding to the; parameter fEstimate. By default fEstimate=10000 and can be modified; via TTree::SetEstimate. A possible recipee is to do; tree->SetEstimate(tree->GetEntries());; You must call SetEstimate if the expected number of selected rows; is greater than 10000.; See TTree::Draw for additional details. TTreeFormula* GetVar(Int_t i) const; Return the TTreeFormula corresponding to the i-th component; of the request formula (where the component are ':' separated). void InitArrays(Int_t newsize); Initialization of the primitive type arrays if the new size is bigger than the available space. UInt_t SplitNames(const TString& varexp, vector<TString>& names); Build Index array for names in varexp.; This will allocated a C style array of TString and Ints. Bool_t Notify(); This function is called at the first entry of a new tree in a chain. void ProcessFill(Long64_t entry); Called in the entry loop for all entries accepted by Select. void ProcessFillMultiple(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Complex case with multiplicity. void ProcessFillObject(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Case where the only variable returns an object (or pointer to). void SetEstimate(Long64_t n); Set number of entries to estimate variable limits. void TakeAction(); Execute action for object obj fNfill times. void TakeEstimate(); Estimate limits for 1-D, 2-D or 3-D objects. void Terminate(); Called at the end of a loop on a TTree. TSelectorDraw(const TSelectorDraw& ). TSelectorDraw& operator=(const TSelectorDraw& ). Int_t GetAction() const; {return fAction;}. Bool_t GetCleanElist() const; {return fCleanElist;}. Int_t GetDimension() const; {return",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:119,Modifiability,inherit,inheritance,119,". TSelectorDraw. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEPLAYER; » TSelectorDraw. class TSelectorDraw: public TSelector. TSelectorDraw. A specialized TSelector for TTree::Draw. Function Members (Methods); public:. virtual~TSelectorDraw(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tGetAction() const; virtual Bool_tGetCleanElist() const; virtual Int_tGetDimension() const; ",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:3471,Modifiability,Inherit,InheritsFrom,3471," Bool_tTObject::GetObjectStat(); TH1*GetOldHistogram() const; virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; TTreeFormula*GetSelect() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; TTree*GetTree() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_t*GetV1() const; virtual Double_t*GetV2() const; virtual Double_t*GetV3() const; virtual Double_t*GetV4() const; virtual Double_t*GetVal(Int_t i) const; TTreeFormula*GetVar(Int_t i) const; TTreeFormula*GetVar1() const; TTreeFormula*GetVar2() const; TTreeFormula*GetVar3() const; TTreeFormula*GetVar4() const; virtual Double_t*GetW() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTSelector::Init(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, v",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:3537,Modifiability,Inherit,InheritsFrom,3537,"ual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; TTreeFormula*GetSelect() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; TTree*GetTree() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_t*GetV1() const; virtual Double_t*GetV2() const; virtual Double_t*GetV3() const; virtual Double_t*GetV4() const; virtual Double_t*GetVal(Int_t i) const; TTreeFormula*GetVar(Int_t i) const; TTreeFormula*GetVar1() const; TTreeFormula*GetVar2() const; TTreeFormula*GetVar3() const; TTreeFormula*GetVar4() const; virtual Double_t*GetW() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTSelector::Init(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::o",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:8511,Modifiability,variab,variability,8511,Object::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; Int_tfAction! Action type; Bool_tfCleanElisttrue if original Tree elist must be saved; Long64_tfCurrentSubEntryCurrent subentry when fSelectMultiple is true. Used to fill TEntryListArray; Int_tfDimensionDimension of the current expression; Long64_tfDraw! Last entry loop number when object was drawn; Int_tfForceReadForce Read flag; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*fManagerPointer to the formula manager; Int_tfMultiplicityIndicator of the variability of the size of entries; Int_t*fNbins![fDimension] Number of bins per dimension; Int_tfNfill! Total number of histogram fills; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); Long64_tfOldEstimatevalue of Tree fEstimate when selector is called; TH1*fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension],MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:9143,Modifiability,variab,variable,9143,"orce Read flag; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*fManagerPointer to the formula manager; Int_tfMultiplicityIndicator of the variability of the size of entries; Int_t*fNbins![fDimension] Number of bins per dimension; Int_tfNfill! Total number of histogram fills; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); Long64_tfOldEstimatevalue of Tree fEstimate when selector is called; TH1*fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input varia",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:9464,Modifiability,variab,variables,9464,"orce Read flag; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*fManagerPointer to the formula manager; Int_tfMultiplicityIndicator of the variability of the size of entries; Int_t*fNbins![fDimension] Number of bins per dimension; Int_tfNfill! Total number of histogram fills; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); Long64_tfOldEstimatevalue of Tree fEstimate when selector is called; TH1*fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input varia",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:9543,Modifiability,variab,variables,9543,"orce Read flag; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*fManagerPointer to the formula manager; Int_tfMultiplicityIndicator of the variability of the size of entries; Int_t*fNbins![fDimension] Number of bins per dimension; Int_tfNfill! Total number of histogram fills; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); Long64_tfOldEstimatevalue of Tree fEstimate when selector is called; TH1*fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input varia",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:9617,Modifiability,variab,variable,9617,"orce Read flag; TList*TSelector::fInputList of objects available during processing; TTreeFormulaManager*fManagerPointer to the formula manager; Int_tfMultiplicityIndicator of the variability of the size of entries; Int_t*fNbins![fDimension] Number of bins per dimension; Int_tfNfill! Total number of histogram fills; Bool_tfObjEvaltrue if fVar1 returns an object (or pointer to).; TObject*TSelector::fObject!Current object if processing object (vs. TTree); Long64_tfOldEstimatevalue of Tree fEstimate when selector is called; TH1*fOldHistogram! Pointer to previously used histogram; TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input varia",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:9899,Modifiability,Inherit,Inheritance,9899,"ogram; TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; Long64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:10327,Modifiability,variab,variables,10327,"eeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Return the last values corresponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus if the formula contains arrays, this number might be greater than; the number of entries",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:10856,Modifiability,variab,variable,10856,"lectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Return the last values corresponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus if the formula contains arrays, this number might be greater than; the number of entries in the trees.; By default TTree::Draw creates the arrays obtained; with all GetVal and GetW with a length corresponding to the; parameter fEstimate. By default fEstimate=10000 and can be modified; via TTree::SetEstimate. A possible recipee is to do; tree->SetEstimate(tree->GetEntries());; You must call SetEstimate if the expected number of selected rows; is greater than 10000.; See TTree::Draw for additional details. TTreeFormula* GetVar(Int_t i) const; Return the TTreeFormula corresponding to the i-th component; of the request formula (where the com",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:12612,Modifiability,variab,variable,12612,"expected number of selected rows; is greater than 10000.; See TTree::Draw for additional details. TTreeFormula* GetVar(Int_t i) const; Return the TTreeFormula corresponding to the i-th component; of the request formula (where the component are ':' separated). void InitArrays(Int_t newsize); Initialization of the primitive type arrays if the new size is bigger than the available space. UInt_t SplitNames(const TString& varexp, vector<TString>& names); Build Index array for names in varexp.; This will allocated a C style array of TString and Ints. Bool_t Notify(); This function is called at the first entry of a new tree in a chain. void ProcessFill(Long64_t entry); Called in the entry loop for all entries accepted by Select. void ProcessFillMultiple(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Complex case with multiplicity. void ProcessFillObject(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Case where the only variable returns an object (or pointer to). void SetEstimate(Long64_t n); Set number of entries to estimate variable limits. void TakeAction(); Execute action for object obj fNfill times. void TakeEstimate(); Estimate limits for 1-D, 2-D or 3-D objects. void Terminate(); Called at the end of a loop on a TTree. TSelectorDraw(const TSelectorDraw& ). TSelectorDraw& operator=(const TSelectorDraw& ). Int_t GetAction() const; {return fAction;}. Bool_t GetCleanElist() const; {return fCleanElist;}. Int_t GetDimension() const; {return fDimension;}. Long64_t GetDrawFlag() const; {return fDraw;}. TObject * GetObject() const; {return fObject;}. Int_t GetMultiplicity() const; {return fMultiplicity;}. Int_t GetNfill() const; {return fNfill;}. TH1 * GetOldHistogram() const; {return fOldHistogram;}. TTreeFormula * GetSelect() const; {return fSelect;}. Long64_t GetSelectedRows() const; {return fSelectedRows;}. TTree * GetTree() const; {return fTree;}. TTreeFormula * GetVar1() const; See TSelectorDraw::GetVar. {re",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:12720,Modifiability,variab,variable,12720," for additional details. TTreeFormula* GetVar(Int_t i) const; Return the TTreeFormula corresponding to the i-th component; of the request formula (where the component are ':' separated). void InitArrays(Int_t newsize); Initialization of the primitive type arrays if the new size is bigger than the available space. UInt_t SplitNames(const TString& varexp, vector<TString>& names); Build Index array for names in varexp.; This will allocated a C style array of TString and Ints. Bool_t Notify(); This function is called at the first entry of a new tree in a chain. void ProcessFill(Long64_t entry); Called in the entry loop for all entries accepted by Select. void ProcessFillMultiple(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Complex case with multiplicity. void ProcessFillObject(Long64_t entry); Called in the entry loop for all entries accepted by Select.; Case where the only variable returns an object (or pointer to). void SetEstimate(Long64_t n); Set number of entries to estimate variable limits. void TakeAction(); Execute action for object obj fNfill times. void TakeEstimate(); Estimate limits for 1-D, 2-D or 3-D objects. void Terminate(); Called at the end of a loop on a TTree. TSelectorDraw(const TSelectorDraw& ). TSelectorDraw& operator=(const TSelectorDraw& ). Int_t GetAction() const; {return fAction;}. Bool_t GetCleanElist() const; {return fCleanElist;}. Int_t GetDimension() const; {return fDimension;}. Long64_t GetDrawFlag() const; {return fDraw;}. TObject * GetObject() const; {return fObject;}. Int_t GetMultiplicity() const; {return fMultiplicity;}. Int_t GetNfill() const; {return fNfill;}. TH1 * GetOldHistogram() const; {return fOldHistogram;}. TTreeFormula * GetSelect() const; {return fSelect;}. Long64_t GetSelectedRows() const; {return fSelectedRows;}. TTree * GetTree() const; {return fTree;}. TTreeFormula * GetVar1() const; See TSelectorDraw::GetVar. {return GetVar(0);}. TTreeFormula * GetVar2() const; See TSelectorDraw::GetV",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:473,Safety,Abort,Abort,473," virtual~TSelectorDraw(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tGetAction() const; virtual Bool_tGetCleanElist() const; virtual Int_tGetDimension() const; ",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:3361,Security,Hash,Hash,3361,"GetNfill() const; TObject*GetObject() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); TH1*GetOldHistogram() const; virtual const char*TSelector::GetOption() const; virtual TList*TSelector::GetOutputList() const; TTreeFormula*GetSelect() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; TTree*GetTree() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_t*GetV1() const; virtual Double_t*GetV2() const; virtual Double_t*GetV3() const; virtual Double_t*GetV4() const; virtual Double_t*GetVal(Int_t i) const; TTreeFormula*GetVar(Int_t i) const; TTreeFormula*GetVar1() const; TTreeFormula*GetVar2() const; TTreeFormula*GetVar3() const; TTreeFormula*GetVar4() const; virtual Double_t*GetW() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTSelector::Init(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::oper",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:10816,Security,authoriz,authorized,10816,"e_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Return the last values corresponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus if the formula contains arrays, this number might be greater than; the number of entries in the trees.; By default TTree::Draw creates the arrays obtained; with all GetVal and GetW with a length corresponding to the; parameter fEstimate. By default fEstimate=10000 and can be modified; via TTree::SetEstimate. A possible recipee is to do; tree->SetEstimate(tree->GetEntries());; You must call SetEstimate if the expected number of selected rows; is greater than 10000.; See TTree::Draw for additional details. TTreeFormula* GetVar(Int_t i) const; Return the TTreeFormula corresponding to t",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:6256,Testability,Test,TestBit,6256,"bject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidProcessFill(Long64_t entry); virtual voidProcessFillMultiple(Long64_t entry); virtual voidProcessFillObject(Long64_t entry); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEstimate(Long64_t n); virtual voidTSelector::SetInputList(TList* input); virtual voidTSelector::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSelector::SetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTSelector::SlaveBegin(TTree*); virtual voidTSelector::SlaveTerminate(); virtual UInt_tSplitNames(const TString& varexp, vector<TString>& names); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTakeAction(); virtual voidTakeEstimate(); virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorDraw(); virtual voidTObject::UseCurrentStyle(); virtual intTSelector::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:6295,Testability,Test,TestBits,6295,"bject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidProcessFill(Long64_t entry); virtual voidProcessFillMultiple(Long64_t entry); virtual voidProcessFillObject(Long64_t entry); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEstimate(Long64_t n); virtual voidTSelector::SetInputList(TList* input); virtual voidTSelector::SetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTSelector::SetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTSelector::SlaveBegin(TTree*); virtual voidTSelector::SlaveTerminate(); virtual UInt_tSplitNames(const TString& varexp, vector<TString>& names); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTakeAction(); virtual voidTakeEstimate(); virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorDraw(); virtual voidTObject::UseCurrentStyle(); virtual intTSelector::Version() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:812,Usability,Clear,Clear,812," virtual~TSelectorDraw(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Int_tGetAction() const; virtual Bool_tGetCleanElist() const; virtual Int_tGetDimension() const; ",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:10194,Usability,Clear,ClearFormula,10194,"g64_tTSelector::fStatusSelector status; TTree*fTreePointer to current Tree; TObject*fTreeElistpointer to Tree Event list; TEntryListArray*fTreeElistArray! pointer to Tree Event list array; Double_t**fVal![fSelectedRows][fDimension] Local buffer for the variables; Int_tfValSize; TTreeFormula**fVar![fDimension] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Return the last values corresponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus i",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorDraw.html:10506,Usability,simpl,simplest,10506,"nsion] Array of pointers to variables formula; Bool_t*fVarMultiple![fDimension] true if fVar[i] has a variable index; Double_t*fVmax![fDimension] Maxima of varexp columns; Double_t*fVmin![fDimension] Minima of varexp columns; Double_t*fW![fSelectedRows]Local buffer for weights; Double_tfWeightTree weight (see TTree::SetWeight); static TSelectorDraw::(anonymous)kWarn. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelectorDraw. ←. TEvePointSelector. TEveSelectorToEventList. Function documentation; TSelectorDraw(); Default selector constructor. ~TSelectorDraw(); Selector destructor. void Begin(TTree* tree); Called everytime a loop on the tree(s) starts. void ClearFormula(); Delete internal buffers. Bool_t CompileVariables(const char* varexp = """", const char* selection = """"); Compile input variables and selection expression. varexp is an expression of the general form e1:e2:e3; where e1,etc is a formula referencing a combination of the columns; Example:; varexp = x simplest case: draw a 1-Dim distribution of column named x; = sqrt(x) : draw distribution of sqrt(x); = x*y/z; = y:sqrt(x) 2-Dim dsitribution of y versus sqrt(x). selection is an expression with a combination of the columns; Example:; selection = ""x<y && sqrt(z)>3.2""; in a selection all the C++ operators are authorized. Return kFALSE if any of the variable is not compilable. Double_t* GetVal(Int_t i) const; Return the last values corresponding to the i-th component; of the formula being processed (where the component are ':' separated).; The actual number of entries is:; GetSelectedRows() % tree->GetEstimate(); Note GetSelectedRows currently returns the actual number of values plotted; and thus if the formula contains arrays, this number might be greater than; the number of entries in the trees.; By default TTree::Draw creates the arrays obtained; with all GetVal and GetW with a length corresponding to the; parameter fEstimate. By default fEstimate=10000 and can be modified; via TTree::SetEstim",MatchSource.WIKI,root/html604/TSelectorDraw.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorDraw.html
https://root.cern/root/html604/TSelectorEntries.html:1302,Availability,Error,Error,1302," virtual~TSelectorEntries(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual con",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:1431,Availability,error,error,1431," char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Lon",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:1515,Availability,error,error,1515,"st char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; vir",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:7224,Availability,avail,available,7224,"r of selected entries; static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorEntries(TTree* tree = 0, const char* selection = 0); Default, constructor. TSelectorEntries(const char* selection); Constructor. ~TSelectorEntries(); Destructor. void Begin(TTree* tree); The Begin() function is called at the start of the query.; When running with PROOF Begin() is only called on the client.; The tree argument is deprecated (on PROOF 0 is passed). void SlaveBegin(TTree* tree); The SlaveBegin() function is called after the Begin() function.; When running with PROOF SlaveBegin() is called on each slave server.; The tree argument is deprecated (on PROOF 0 is passed). Int_t GetEntry(Long64_t entry, Int_t ",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:9212,Availability,avail,available,9212,". Int_t GetEntry(Long64_t entry, Int_t getall = 0); read entry. void Init(TTree* tree); The Init() function is called when the selector needs to initialize; a new tree or chain. Typically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. void SetSelection(const char* selection); set the selection expression. void SlaveTerminate(); The SlaveTerminate() function is called after all entries or objects; have been processed. When running with PROOF SlaveTerminate() is called; on each slave server. void Terminate(); The Terminate() function is the last function to be called during; a query. It always runs on the client, it can be used to present; the results graphically or save the results to file. TSelectorEntries(TTree* tree = 0, const char* selection = 0). Int_t Version() const; { return 2; }. Long64_t GetSelectedRows() const; { return fSe",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:8526,Integrability,rout,routine,8526," Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorEntries(TTree* tree = 0, const char* selection = 0); Default, constructor. TSelectorEntries(const char* selection); Constructor. ~TSelectorEntries(); Destructor. void Begin(TTree* tree); The Begin() function is called at the start of the query.; When running with PROOF Begin() is only called on the client.; The tree argument is deprecated (on PROOF 0 is passed). void SlaveBegin(TTree* tree); The SlaveBegin() function is called after the Begin() function.; When running with PROOF SlaveBegin() is called on each slave server.; The tree argument is deprecated (on PROOF 0 is passed). Int_t GetEntry(Long64_t entry, Int_t getall = 0); read entry. void Init(TTree* tree); The Init() function is called when the selector needs to initialize; a new tree or chain. Typically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the retu",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:2744,Modifiability,Inherit,InheritsFrom,2744,"ect::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree* tree); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* v",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:2810,Modifiability,Inherit,InheritsFrom,2810,"rtTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree* tree); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operato",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:6186,Modifiability,variab,variable,6186,"Style(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. TTree*fChain! pointer to the analyzed TTree or TChain; TTreeFormula*fSelectPointer to selection formula; Bool_tfSelectMultipletrue if selection has a variable index; Long64_tfSelectedRowsNumber of selected entries; static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:7519,Modifiability,Inherit,Inheritance,7519,"TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorEntries(TTree* tree = 0, const char* selection = 0); Default, constructor. TSelectorEntries(const char* selection); Constructor. ~TSelectorEntries(); Destructor. void Begin(TTree* tree); The Begin() function is called at the start of the query.; When running with PROOF Begin() is only called on the client.; The tree argument is deprecated (on PROOF 0 is passed). void SlaveBegin(TTree* tree); The SlaveBegin() function is called after the Begin() function.; When running with PROOF SlaveBegin() is called on each slave server.; The tree argument is deprecated (on PROOF 0 is passed). Int_t GetEntry(Long64_t entry, Int_t getall = 0); read entry. void Init(TTree* tree); The Init() function is called when the selector needs to initialize; a new tree or chain. Typically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be exte",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:7532,Modifiability,Inherit,Inherited,7532,"TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. Class Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorEntries(TTree* tree = 0, const char* selection = 0); Default, constructor. TSelectorEntries(const char* selection); Constructor. ~TSelectorEntries(); Destructor. void Begin(TTree* tree); The Begin() function is called at the start of the query.; When running with PROOF Begin() is only called on the client.; The tree argument is deprecated (on PROOF 0 is passed). void SlaveBegin(TTree* tree); The SlaveBegin() function is called after the Begin() function.; When running with PROOF SlaveBegin() is called on each slave server.; The tree argument is deprecated (on PROOF 0 is passed). Int_t GetEntry(Long64_t entry, Int_t getall = 0); read entry. void Init(TTree* tree); The Init() function is called when the selector needs to initialize; a new tree or chain. Typically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be exte",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:8541,Modifiability,extend,extended,8541," Charts. Inheritance; Inherited Members; Includes; Libraries. Function documentation; TSelectorEntries(TTree* tree = 0, const char* selection = 0); Default, constructor. TSelectorEntries(const char* selection); Constructor. ~TSelectorEntries(); Destructor. void Begin(TTree* tree); The Begin() function is called at the start of the query.; When running with PROOF Begin() is only called on the client.; The tree argument is deprecated (on PROOF 0 is passed). void SlaveBegin(TTree* tree); The SlaveBegin() function is called after the Begin() function.; When running with PROOF SlaveBegin() is called on each slave server.; The tree argument is deprecated (on PROOF 0 is passed). Int_t GetEntry(Long64_t entry, Int_t getall = 0); read entry. void Init(TTree* tree); The Init() function is called when the selector needs to initialize; a new tree or chain. Typically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the retu",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:8966,Performance,load,loaded,8966,"ROOF 0 is passed). void SlaveBegin(TTree* tree); The SlaveBegin() function is called after the Begin() function.; When running with PROOF SlaveBegin() is called on each slave server.; The tree argument is deprecated (on PROOF 0 is passed). Int_t GetEntry(Long64_t entry, Int_t getall = 0); read entry. void Init(TTree* tree); The Init() function is called when the selector needs to initialize; a new tree or chain. Typically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. void SetSelection(const char* selection); set the selection expression. void SlaveTerminate(); The SlaveTerminate() function is called after all entries or objects; have been processed. When running with PROOF SlaveTerminate() is called; on each slave server. void Terminate(); The Terminate() function is the last function to be called during; a query. It always runs on ",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:9198,Performance,load,loaded,9198,". Int_t GetEntry(Long64_t entry, Int_t getall = 0); read entry. void Init(TTree* tree); The Init() function is called when the selector needs to initialize; a new tree or chain. Typically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. void SetSelection(const char* selection); set the selection expression. void SlaveTerminate(); The SlaveTerminate() function is called after all entries or objects; have been processed. When running with PROOF SlaveTerminate() is called; on each slave server. void Terminate(); The Terminate() function is the last function to be called during; a query. It always runs on the client, it can be used to present; the results graphically or save the results to file. TSelectorEntries(TTree* tree = 0, const char* selection = 0). Int_t Version() const; { return 2; }. Long64_t GetSelectedRows() const; { return fSe",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:423,Safety,Abort,Abort,423," virtual~TSelectorEntries(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual con",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:9474,Safety,Abort,Abort,9474,"ormaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. void SetSelection(const char* selection); set the selection expression. void SlaveTerminate(); The SlaveTerminate() function is called after all entries or objects; have been processed. When running with PROOF SlaveTerminate() is called; on each slave server. void Terminate(); The Terminate() function is the last function to be called during; a query. It always runs on the client, it can be used to present; the results graphically or save the results to file. TSelectorEntries(TTree* tree = 0, const char* selection = 0). Int_t Version() const; { return 2; }. Long64_t GetSelectedRows() const; { return fSelectedRows; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. TList * GetOutputList() const; { return fOutput; }. » Author: Philippe Canal 09/06/2006 » Copyright (C) 1995-2000, Rene Brun and Fons Rademaker",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:2634,Security,Hash,Hash,2634,"thod, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; virtual Long64_tGetSelectedRows() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree* tree); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator d",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:5337,Testability,Test,TestBit,5337,"const TSelectorEntries&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelector::SetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidSetSelection(const char* selection); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree* tree); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorEntries(const char* selection); TSelectorEntries(const TSelectorEntries&); TSelectorEntries(TTree* tree = 0, const char* selection = 0); virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:5376,Testability,Test,TestBits,5376,"const TSelectorEntries&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTSelector::SetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidSetSelection(const char* selection); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree* tree); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorEntries(const char* selection); TSelectorEntries(const TSelectorEntries&); TSelectorEntries(TTree* tree = 0, const char* selection = 0); virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:762,Usability,Clear,Clear,762," virtual~TSelectorEntries(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree* tree); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tGetEntry(Long64_t entry, Int_t getall = 0); virtual con",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorEntries.html:9321,Usability,simpl,simple,9321,"ypically here the branch addresses and branch; pointers of the tree will be set.; It is normaly not necessary to make changes to the generated; code, but the routine can be extended by the user if needed.; Init() will be called many times when running on PROOF; (once per file to be processed). Bool_t Notify(); This function is called at the first entry of a new tree in a chain. Bool_t Process(Long64_t entry); The Process() function is called for each entry in the tree (or possibly; keyed object in the case of PROOF) to be processed. The entry argument; specifies which entry in the currently loaded tree is to be processed.; It can be passed to either TSelectorEntries::GetEntry() or TBranch::GetEntry(); to read either all or the required parts of the data. When processing; keyed objects with PROOF, the object is already loaded and is available; via the fObject pointer. This function should contain the ""body"" of the analysis. It can contain; simple or elaborate selection criteria, run algorithms on the data; of the event and typically fill histograms. The processing can be stopped by calling Abort(). Use fStatus to set the return value of TTree::Process(). The return value is currently not used. void SetSelection(const char* selection); set the selection expression. void SlaveTerminate(); The SlaveTerminate() function is called after all entries or objects; have been processed. When running with PROOF SlaveTerminate() is called; on each slave server. void Terminate(); The Terminate() function is the last function to be called during; a query. It always runs on the client, it can be used to present; the results graphically or save the results to file. TSelectorEntries(TTree* tree = 0, const char* selection = 0). Int_t Version() const; { return 2; }. Long64_t GetSelectedRows() const; { return fSelectedRows; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. TList * GetOutputList() const; { return fOutput; }. » ",MatchSource.WIKI,root/html604/TSelectorEntries.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorEntries.html
https://root.cern/root/html604/TSelectorList.html:2616,Availability,Error,Error,2616,"ect*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTHashList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*THashList::FindObject(const char* name) const; virtual TObject*THashList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*THashList::GetListForObject(const char* name) const; TList*THashList::GetListForObje",MatchSource.WIKI,root/html604/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorList.html
https://root.cern/root/html604/TSelectorList.html:2745,Availability,error,error,2745,"TCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTHashList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*THashList::FindObject(const char* name) const; virtual TObject*THashList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*THashList::GetListForObject(const char* name) const; TList*THashList::GetListForObject(const TObject* obj) const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_",MatchSource.WIKI,root/html604/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorList.html
https://root.cern/root/html604/TSelectorList.html:2829,Availability,error,error,2829,"assName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTHashList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*THashList::FindObject(const char* name) const; virtual TObject*THashList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*THashList::GetListForObject(const char* name) const; TList*THashList::GetListForObject(const TObject* obj) const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static ",MatchSource.WIKI,root/html604/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorList.html
https://root.cern/root/html604/TSelectorList.html:119,Modifiability,inherit,inheritance,119,". TSelectorList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TSelectorList. class TSelectorList: public THashList. TSelectorList. A TList derived class that makes sure that objects added to it; are not linked to the currently open file (like histograms,; eventlists and trees). Also it makes sure the name of the added; object is unique. This class is used in the TSelector for the; output list. Function Members (Methods); public:. virtual~TSelectorList(); voidTObject::AbstractMethod(const char* method) const; virtual voidTList::Add(TObject* obj); virtual voidTList::Add(TObject* obj, Option_t* opt); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidAddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddBefore(TObjLink* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; Float_tTHashList::AverageCollisions() const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compa",MatchSource.WIKI,root/html604/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorList.html
https://root.cern/root/html604/TSelectorList.html:4348,Modifiability,Inherit,InheritsFrom,4348,"tic Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*THashList::GetListForObject(const char* name) const; TList*THashList::GetListForObject(const TObject* obj) const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method)",MatchSource.WIKI,root/html604/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorList.html
https://root.cern/root/html604/TSelectorList.html:4414,Modifiability,Inherit,InheritsFrom,4414,"ries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*THashList::GetListForObject(const char* name) const; TList*THashList::GetListForObject(const TObject* obj) const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_tTSeqCollection::Merge(TCollection* list); virtual ",MatchSource.WIKI,root/html604/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorList.html
https://root.cern/root/html604/TSelectorList.html:11235,Modifiability,Inherit,Inheritance,11235,"itsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; THashTable*THashList::fTableHashtable used for quick lookup of objects; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. ←; THashList. ←; TSelectorList. Function documentation; Bool_t UnsetDirectory(TObject* obj); If the class of obj has the SetDirectory(TDirectory*) method; call it to unset the directory assiciation. The objects in the; selector list or owned by the list and not by the directory that; was active when they were created. Returns true in case of success. Bool_t CheckDuplicateName(TObject* obj); Check for duplicate object names in the list. If an object with; the same name is added then the merge function will fail that will; look up objects in different output lists by name. Returns true; in case name is unique. void AddFirst(TObject* obj); Add at the start of the list. void AddFirst(TObject* obj, Option_t* opt); Add at the start of the list. void AddLast(TObject* obj); Add at the end of the list. void AddLast(TObject* obj, Option_t* opt); Add at the end of the list. void AddAt(TObject* obj, Int_t idx); Add to the list. void ",MatchSource.WIKI,root/html604/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorList.html
https://root.cern/root/html604/TSelectorList.html:10729,Performance,cache,cache,10729,itsTObject::kHasUUID; static TCollection::(anonymous)TCollection::kInitCapacity; static TCollection::(anonymous)TCollection::kInitHashTableCapacity; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; THashTable*THashList::fTableHashtable used for quick lookup of objects; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. ←; THashList. ←; TSelectorList. Function documentation; Bool_t UnsetDirectory(TObject* obj); If the class of obj has the SetDirectory(TDirectory*) method; call it to unset the directory assiciation. The objects in the; selector list or owned by the list and not by the directory that; was active when they were created. Returns true in case of success. Bool_t CheckDuplicateName(TObject* obj); Check for duplicate object names in the list. If an object with; the same name is added then the merge function will fail that will; look up objects in different output lists by name. Returns true; in case name is uniqu,MatchSource.WIKI,root/html604/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorList.html
https://root.cern/root/html604/TSelectorList.html:4174,Security,Hash,Hash,4174,"stLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; TList*THashList::GetListForObject(const char* name) const; TList*THashList::GetListForObject(const TObject* obj) const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tTSeqCollection::IsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") con",MatchSource.WIKI,root/html604/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorList.html
https://root.cern/root/html604/TSelectorList.html:1487,Testability,Assert,AssertClass,1487," virtual~TSelectorList(); voidTObject::AbstractMethod(const char* method) const; virtual voidTList::Add(TObject* obj); virtual voidTList::Add(TObject* obj, Option_t* opt); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidAddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddBefore(TObjLink* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; Float_tTHashList::AverageCollisions() const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compa",MatchSource.WIKI,root/html604/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorList.html
https://root.cern/root/html604/TSelectorList.html:8313,Testability,Test,TestBit,8313,"bject::Read(const char* name); virtual voidTHashList::RecursiveRemove(TObject* obj); voidTHashList::Rehash(Int_t newCapacity); virtual TObject*THashList::Remove(TObject* obj); virtual TObject*THashList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorList(); TSelectorList(TSelectorList&&); TSelectorList(const TSelectorList&); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorList.html
https://root.cern/root/html604/TSelectorList.html:8352,Testability,Test,TestBits,8352,"bject::Read(const char* name); virtual voidTHashList::RecursiveRemove(TObject* obj); voidTHashList::Rehash(Int_t newCapacity); virtual TObject*THashList::Remove(TObject* obj); virtual TObject*THashList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTList::Sort(Bool_t order = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorList(); TSelectorList(TSelectorList&&); TSelectorList(const TSelectorList&); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorList.html
https://root.cern/root/html604/TSelectorList.html:1872,Usability,Clear,Clear,1872,"rtual voidAddAfter(TObjLink* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddBefore(TObjLink* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; Float_tTHashList::AverageCollisions() const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTHashList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTHashList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(",MatchSource.WIKI,root/html604/TSelectorList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorList.html
https://root.cern/root/html604/TSelectorScalar.html:1452,Availability,Error,Error,1452," virtual~TSelectorScalar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTParameter<Long64_t>::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Lo",MatchSource.WIKI,root/html604/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorScalar.html
https://root.cern/root/html604/TSelectorScalar.html:1581,Availability,error,error,1581," virtual~TSelectorScalar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTParameter<Long64_t>::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Lo",MatchSource.WIKI,root/html604/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorScalar.html
https://root.cern/root/html604/TSelectorScalar.html:1665,Availability,error,error,1665,":AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTParameter<Long64_t>::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TParameter<Long64_t>::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const Long64_t&TParameter<Long64_t>::GetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTParameter<Long64_t>::Hash() const; voidInc(Long_t n = 1); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const ch",MatchSource.WIKI,root/html604/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorScalar.html
https://root.cern/root/html604/TSelectorScalar.html:121,Modifiability,inherit,inheritance,121,". TSelectorScalar. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREE; » TSelectorScalar. class TSelectorScalar: public TParameter<Long64_t>. TSelectorScalar. Named scalar type, based on Long64_t, streamable, storable and; mergable. Ideally to be used in tree selectors in the PROOF; environment due to its merge functionality which allows a single; merged value to be returned to the user. Function Members (Methods); public:. virtual~TSelectorScalar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTParameter<Long64_t>::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Lo",MatchSource.WIKI,root/html604/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorScalar.html
https://root.cern/root/html604/TSelectorScalar.html:2647,Modifiability,Inherit,InheritsFrom,2647,"ams, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TParameter<Long64_t>::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const Long64_t&TParameter<Long64_t>::GetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTParameter<Long64_t>::Hash() const; voidInc(Long_t n = 1); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTParameter<Long64_t>::IsConst() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTParameter<Long64_t>::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTParameter<Long64_t>::ls(Option_t*) const; voidTObject::MayNotUse(const char* method) const; virtual Int_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(s",MatchSource.WIKI,root/html604/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorScalar.html
https://root.cern/root/html604/TSelectorScalar.html:2713,Modifiability,Inherit,InheritsFrom,2713,"ent, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TParameter<Long64_t>::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const Long64_t&TParameter<Long64_t>::GetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTParameter<Long64_t>::Hash() const; voidInc(Long_t n = 1); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTParameter<Long64_t>::IsConst() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTParameter<Long64_t>::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTParameter<Long64_t>::ls(Option_t*) const; voidTObject::MayNotUse(const char* method) const; virtual Int_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void",MatchSource.WIKI,root/html604/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorScalar.html
https://root.cern/root/html604/TSelectorScalar.html:6668,Modifiability,Inherit,Inheritance,6668,"nt level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TParameter<Long64_t>::EStatusBitsTParameter<Long64_t>::kFirst; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TParameter<Long64_t>::EStatusBitsTParameter<Long64_t>::kIsConst; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TParameter<Long64_t>::EStatusBitsTParameter<Long64_t>::kLast; static TParameter<Long64_t>::EStatusBitsTParameter<Long64_t>::kMax; static TParameter<Long64_t>::EStatusBitsTParameter<Long64_t>::kMin; static TParameter<Long64_t>::EStatusBitsTParameter<Long64_t>::kMultiply; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TParameter<Long64_t>. ←; TSelectorScalar. Function documentation; void Inc(Long_t n = 1); Increment scalar value by n. Int_t Merge(TCollection* list); Merge scalars with scalars in the list. The scalar values are added.; Returns the number of scalars that were in the list. TSelectorScalar(const char* name = """", Long64_t val = 0); { }. ~TSelectorScalar(); { }. » Author: Maarten Ballintijn 13/02/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/tree:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorScalar.html
https://root.cern/root/html604/TSelectorScalar.html:2514,Security,Hash,Hash,2514,"dTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TParameter<Long64_t>::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const Long64_t&TParameter<Long64_t>::GetVal() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTParameter<Long64_t>::Hash() const; voidInc(Long_t n = 1); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTParameter<Long64_t>::IsConst() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTParameter<Long64_t>::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTParameter<Long64_t>::ls(Option_t*) const; voidTObject::MayNotUse(const char* method) const; virtual Int_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator dele",MatchSource.WIKI,root/html604/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorScalar.html
https://root.cern/root/html604/TSelectorScalar.html:4881,Testability,Test,TestBit,4881,"const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSelectorScalar&operator=(const TSelectorScalar&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTParameter<Long64_t>::Print(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTParameter<Long64_t>::SetMergeMode(char mergemode = '+'); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTParameter<Long64_t>::SetVal(const Long64_t& val); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorScalar(const TSelectorScalar&); TSelectorScalar(const char* name = """", Long64_t val = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorScalar.html
https://root.cern/root/html604/TSelectorScalar.html:4920,Testability,Test,TestBits,4920,"const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSelectorScalar&operator=(const TSelectorScalar&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTParameter<Long64_t>::Print(Option_t*) const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTParameter<Long64_t>::SetMergeMode(char mergemode = '+'); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); voidTParameter<Long64_t>::SetVal(const Long64_t& val); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelectorScalar(const TSelectorScalar&); TSelectorScalar(const char* name = """", Long64_t val = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorScalar.html
https://root.cern/root/html604/TSelectorScalar.html:899,Usability,Clear,Clear,899," virtual~TSelectorScalar(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTParameter<Long64_t>::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Lo",MatchSource.WIKI,root/html604/TSelectorScalar.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelectorScalar.html
https://root.cern/root/html604/TSelVerifyDataSet.html:1373,Availability,Error,Error,1373," virtual~TSelVerifyDataSet(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(",MatchSource.WIKI,root/html604/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelVerifyDataSet.html
https://root.cern/root/html604/TSelVerifyDataSet.html:1502,Availability,error,error,1502,"const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual ",MatchSource.WIKI,root/html604/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelVerifyDataSet.html
https://root.cern/root/html604/TSelVerifyDataSet.html:1586,Availability,error,error,1586,"d(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; vi",MatchSource.WIKI,root/html604/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelVerifyDataSet.html
https://root.cern/root/html604/TSelVerifyDataSet.html:6950,Availability,avail,available,6950,Data Members; public:. static TSelector::EAbortTSelector::kAbortFile; static TSelector::EAbortTSelector::kAbortProcess; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TSelector::EAbortTSelector::kContinue; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. private:. Bool_tfAllf; Bool_tfChangedDs; Bool_tfCheckstg; Bool_tfDbg; Int_tfDisappeared; Bool_tfDoall; Int_tfFopt; Bool_tfFullproc; Bool_tfGetlistonly; Bool_tfLocateonly; TStringfMss; Bool_tfNoaction; Bool_tfNonStgf; Int_tfOpened; Bool_tfReopen; Int_tfRopt; Bool_tfScanlist; Int_tfSopt; Bool_tfStageonly; TStringfStageopts; Bool_tfStgf; TFileCollection*fSubDataSetSub-dataset being verified; Bool_tfTouch; Int_tfTouched. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelVerifyDataSet. Function documentation; TSelVerifyDataSet(TTree* ); Constructor. TSelVerifyDataSet(); Constructor. void InitMembers(); Initialize members. void SlaveBegin(TTree* tree); Worker Begin. Bool_t Process(Long64_t entry); Process ,MatchSource.WIKI,root/html604/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelVerifyDataSet.html
https://root.cern/root/html604/TSelVerifyDataSet.html:123,Modifiability,inherit,inheritance,123,". TSelVerifyDataSet. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TSelVerifyDataSet. class TSelVerifyDataSet: public TSelector. TSelVerifyDataSet. Selector to verify dataset in parallel on workers. Function Members (Methods); public:. virtual~TSelVerifyDataSet(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(",MatchSource.WIKI,root/html604/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelVerifyDataSet.html
https://root.cern/root/html604/TSelVerifyDataSet.html:2772,Modifiability,Inherit,InheritsFrom,2772,"nst char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); v",MatchSource.WIKI,root/html604/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelVerifyDataSet.html
https://root.cern/root/html604/TSelVerifyDataSet.html:2838,Modifiability,Inherit,InheritsFrom,2838,"Object* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new",MatchSource.WIKI,root/html604/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelVerifyDataSet.html
https://root.cern/root/html604/TSelVerifyDataSet.html:7666,Modifiability,Inherit,Inheritance,7666,":(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TSelector::EAbortTSelector::fAbortAbort status; TList*TSelector::fInputList of objects available during processing; TObject*TSelector::fObject!Current object if processing object (vs. TTree); TStringTSelector::fOptionOption given to TTree::Process; TSelectorList*TSelector::fOutput!List of objects created during processing; Long64_tTSelector::fStatusSelector status. private:. Bool_tfAllf; Bool_tfChangedDs; Bool_tfCheckstg; Bool_tfDbg; Int_tfDisappeared; Bool_tfDoall; Int_tfFopt; Bool_tfFullproc; Bool_tfGetlistonly; Bool_tfLocateonly; TStringfMss; Bool_tfNoaction; Bool_tfNonStgf; Int_tfOpened; Bool_tfReopen; Int_tfRopt; Bool_tfScanlist; Int_tfSopt; Bool_tfStageonly; TStringfStageopts; Bool_tfStgf; TFileCollection*fSubDataSetSub-dataset being verified; Bool_tfTouch; Int_tfTouched. Class Charts. Inheritance Chart:. TObject. ←; TSelector. ←; TSelVerifyDataSet. Function documentation; TSelVerifyDataSet(TTree* ); Constructor. TSelVerifyDataSet(); Constructor. void InitMembers(); Initialize members. void SlaveBegin(TTree* tree); Worker Begin. Bool_t Process(Long64_t entry); Process a single entry. void SlaveTerminate(); Worker Terminate. TSelVerifyDataSet(TTree* ). virtual ~TSelVerifyDataSet(); {}. Int_t Version() const; {return 1;}. void Begin(TTree* ); { }. void Init(TTree* ); { }. Bool_t Notify(); { return kTRUE; }. void SetOption(const char* option); { fOption = option; }. void SetObject(TObject* obj); { fObject = obj; }. void SetInputList(TList* input); {fInput = input;}. TList * GetOutputList() const; { return fOutput; }. void Terminate(); { }. » Author: Sangsu Ryu 28/06/2011 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: Tue Jun 2 16:32:38 2015 » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions re",MatchSource.WIKI,root/html604/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelVerifyDataSet.html
https://root.cern/root/html604/TSelVerifyDataSet.html:499,Safety,Abort,Abort,499," virtual~TSelVerifyDataSet(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(",MatchSource.WIKI,root/html604/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelVerifyDataSet.html
https://root.cern/root/html604/TSelVerifyDataSet.html:2662,Security,Hash,Hash,2662,"; virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTSelector::GetEntry(Long64_t, Int_t = 0); virtual const char*TObject::GetIconName() const; virtual TList*TSelector::GetInputList() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual const char*TSelector::GetOption() const; virtual TList*GetOutputList() const; static TSelector*TSelector::GetSelector(const char* filename); virtual Long64_tTSelector::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidInit(TTree*); virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; static Bool_tTSelector::IsStandardDraw(const char* selec); Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tNotify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete",MatchSource.WIKI,root/html604/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelVerifyDataSet.html
https://root.cern/root/html604/TSelVerifyDataSet.html:5302,Testability,Test,TestBit,5302,"ject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSelVerifyDataSet&operator=(const TSelVerifyDataSet&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree* tree); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelVerifyDataSet(); TSelVerifyDataSet(TTree*); TSelVerifyDataSet(const TSelVerifyDataSet&); virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelVerifyDataSet.html
https://root.cern/root/html604/TSelVerifyDataSet.html:5341,Testability,Test,TestBits,5341,"ject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSelVerifyDataSet&operator=(const TSelVerifyDataSet&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Bool_tProcess(Long64_t entry); virtual Bool_tTSelector::ProcessCut(Long64_t); virtual voidTSelector::ProcessFill(Long64_t); virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTSelector::ResetAbort(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetInputList(TList* input); virtual voidSetObject(TObject* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetOption(const char* option); virtual voidTSelector::SetStatus(Long64_t status); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSlaveBegin(TTree* tree); virtual voidSlaveTerminate(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; virtual voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSelVerifyDataSet(); TSelVerifyDataSet(TTree*); TSelVerifyDataSet(const TSelVerifyDataSet&); virtual voidTObject::UseCurrentStyle(); virtual Int_tVersion() const; virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelVerifyDataSet.html
https://root.cern/root/html604/TSelVerifyDataSet.html:833,Usability,Clear,Clear,833," virtual~TSelVerifyDataSet(); virtual voidTSelector::Abort(const char* why, TSelector::EAbort what = kAbortProcess); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidBegin(TTree*); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual TSelector::EAbortTSelector::GetAbort() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(",MatchSource.WIKI,root/html604/TSelVerifyDataSet.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSelVerifyDataSet.html
https://root.cern/root/html604/TSemaphore.html:1256,Availability,Error,Error,1256," virtual~TSemaphore(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool",MatchSource.WIKI,root/html604/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSemaphore.html
https://root.cern/root/html604/TSemaphore.html:1385,Availability,error,error,1385," virtual~TSemaphore(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool",MatchSource.WIKI,root/html604/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSemaphore.html
https://root.cern/root/html604/TSemaphore.html:1469,Availability,error,error,1469," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject",MatchSource.WIKI,root/html604/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSemaphore.html
https://root.cern/root/html604/TSemaphore.html:393,Integrability,synchroniz,synchronize,393,". TSemaphore. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TSemaphore. class TSemaphore: public TObject. TSemaphore. This class implements a counting semaphore. Use a semaphore; to synchronize threads. Function Members (Methods); public:. virtual~TSemaphore(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool",MatchSource.WIKI,root/html604/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSemaphore.html
https://root.cern/root/html604/TSemaphore.html:116,Modifiability,inherit,inheritance,116,". TSemaphore. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » THREAD; » TSemaphore. class TSemaphore: public TObject. TSemaphore. This class implements a counting semaphore. Use a semaphore; to synchronize threads. Function Members (Methods); public:. virtual~TSemaphore(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool",MatchSource.WIKI,root/html604/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSemaphore.html
https://root.cern/root/html604/TSemaphore.html:2349,Modifiability,Inherit,InheritsFrom,2349,"d, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSemaphore.html
https://root.cern/root/html604/TSemaphore.html:2415,Modifiability,Inherit,InheritsFrom,2415,"cute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); ",MatchSource.WIKI,root/html604/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSemaphore.html
https://root.cern/root/html604/TSemaphore.html:5793,Modifiability,variab,variable,5793,"DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TSemaphore&operator=(const TSemaphore& s); TSemaphore(const TSemaphore& s). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TConditionfCondsemaphore condition variable; TMutexfMutexsemaphare mutex; Int_tfValuecounter. Class Charts. Inheritance Chart:. TObject. ←; TSemaphore. Function documentation; TSemaphore(UInt_t initial = 1); Create counting semaphore. Int_t Wait(Int_t millisec = 0); If semaphore value is > 0 then decrement it and carry on. If it's; already 0 then block. If millisec > 0, apply a relative timeout; of millisec milliseconds. Returns 0 in case of success, or mutex errno. Int_t TryWait(); If semaphore value is > 0 then decrement it and return 0. If it's; already 0 then return 1 or mutex errno. Int_t Post(); If any threads are blocked in Wait(), wake one of them up and; increment the value of the semaphore. Returns 0 in case of success, or; mutex errno. TSemaphore(const TSemaphore& s). TSemaphore& operator=(const TSemaphore& s). virtual ~TSemaphore(); { }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-06-02 16:32; This page has been ",MatchSource.WIKI,root/html604/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSemaphore.html
https://root.cern/root/html604/TSemaphore.html:5866,Modifiability,Inherit,Inheritance,5866,"onst; voidTObject::MakeZombie(). private:. TSemaphore&operator=(const TSemaphore& s); TSemaphore(const TSemaphore& s). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TConditionfCondsemaphore condition variable; TMutexfMutexsemaphare mutex; Int_tfValuecounter. Class Charts. Inheritance Chart:. TObject. ←; TSemaphore. Function documentation; TSemaphore(UInt_t initial = 1); Create counting semaphore. Int_t Wait(Int_t millisec = 0); If semaphore value is > 0 then decrement it and carry on. If it's; already 0 then block. If millisec > 0, apply a relative timeout; of millisec milliseconds. Returns 0 in case of success, or mutex errno. Int_t TryWait(); If semaphore value is > 0 then decrement it and return 0. If it's; already 0 then return 1 or mutex errno. Int_t Post(); If any threads are blocked in Wait(), wake one of them up and; increment the value of the semaphore. Returns 0 in case of success, or; mutex errno. TSemaphore(const TSemaphore& s). TSemaphore& operator=(const TSemaphore& s). virtual ~TSemaphore(); { }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the docu",MatchSource.WIKI,root/html604/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSemaphore.html
https://root.cern/root/html604/TSemaphore.html:6148,Safety,timeout,timeout,6148,"onst TSemaphore& s); TSemaphore(const TSemaphore& s). Data Members; public:. static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. private:. TConditionfCondsemaphore condition variable; TMutexfMutexsemaphare mutex; Int_tfValuecounter. Class Charts. Inheritance Chart:. TObject. ←; TSemaphore. Function documentation; TSemaphore(UInt_t initial = 1); Create counting semaphore. Int_t Wait(Int_t millisec = 0); If semaphore value is > 0 then decrement it and carry on. If it's; already 0 then block. If millisec > 0, apply a relative timeout; of millisec milliseconds. Returns 0 in case of success, or mutex errno. Int_t TryWait(); If semaphore value is > 0 then decrement it and return 0. If it's; already 0 then return 1 or mutex errno. Int_t Post(); If any threads are blocked in Wait(), wake one of them up and; increment the value of the semaphore. Returns 0 in case of success, or; mutex errno. TSemaphore(const TSemaphore& s). TSemaphore& operator=(const TSemaphore& s). virtual ~TSemaphore(); { }. » Author: Fons Rademakers 02/07/97 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/thread:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSemaphore.html
https://root.cern/root/html604/TSemaphore.html:2239,Security,Hash,Hash,2239,"l voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSemaphore.html
https://root.cern/root/html604/TSemaphore.html:4329,Testability,Test,TestBit,4329,"tual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); Int_tPost(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tTryWait(); TSemaphore(UInt_t initial = 1); virtual voidTObject::UseCurrentStyle(); Int_tWait(Int_t millisec = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSemaphore.html
https://root.cern/root/html604/TSemaphore.html:4368,Testability,Test,TestBits,4368,"tual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); Int_tPost(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; Int_tTryWait(); TSemaphore(UInt_t initial = 1); virtual voidTObject::UseCurrentStyle(); Int_tWait(Int_t millisec = 0); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSemaphore.html
https://root.cern/root/html604/TSemaphore.html:716,Usability,Clear,Clear,716," virtual~TSemaphore(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool",MatchSource.WIKI,root/html604/TSemaphore.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSemaphore.html
https://root.cern/root/html604/TSeqCollection.html:611,Availability,avail,available,611,". TSeqCollection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TSeqCollection. class TSeqCollection: public TCollection. TSeqCollection. Sequenceable collection abstract base class. TSeqCollection's have; an ordering relation, i.e. there is a first and last element. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSeqCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddLast(TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual TObject*After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*At(Int_t idx) const; virtual TObject*Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection:",MatchSource.WIKI,root/html604/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSeqCollection.html
https://root.cern/root/html604/TSeqCollection.html:2287,Availability,Error,Error,2287,"Object*Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TCollection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TCollection::GetObjectR",MatchSource.WIKI,root/html604/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSeqCollection.html
https://root.cern/root/html604/TSeqCollection.html:2416,Availability,error,error,2416,"lection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TCollection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TCollection::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTC",MatchSource.WIKI,root/html604/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSeqCollection.html
https://root.cern/root/html604/TSeqCollection.html:2500,Availability,error,error,2500,"ame() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TCollection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TCollection::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UI",MatchSource.WIKI,root/html604/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSeqCollection.html
https://root.cern/root/html604/TSeqCollection.html:120,Modifiability,inherit,inheritance,120,". TSeqCollection. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TSeqCollection. class TSeqCollection: public TCollection. TSeqCollection. Sequenceable collection abstract base class. TSeqCollection's have; an ordering relation, i.e. there is a first and last element. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSeqCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddLast(TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual TObject*After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*At(Int_t idx) const; virtual TObject*Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection:",MatchSource.WIKI,root/html604/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSeqCollection.html
https://root.cern/root/html604/TSeqCollection.html:3827,Modifiability,Inherit,InheritsFrom,3827,"ection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TCollection::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tIndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tIsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*Last() const; Int_tLastIndex() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TCollection::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); static Int_tObjCompare(TObje",MatchSource.WIKI,root/html604/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSeqCollection.html
https://root.cern/root/html604/TSeqCollection.html:3893,Modifiability,Inherit,InheritsFrom,3893,"on::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TCollection::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tIndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tIsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*Last() const; Int_tLastIndex() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TCollection::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_tMerge(TCollection* list); virtual Bool_tTObject::Notify(); static Int_tObjCompare(TObject* a, TObject* b); voidTObject::Obsolete(const char* method, cons",MatchSource.WIKI,root/html604/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSeqCollection.html
https://root.cern/root/html604/TSeqCollection.html:9324,Modifiability,Inherit,Inheritance,9324,"Object::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TCollection::(anonymous)TCollection::kInitCapacity; static TCollection::(anonymous)TCollection::kInitHashTableCapacity; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tfSortedtrue if collection has been sorted; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←. TBtree. TList; ←. RooList. TGridJobStatusList. TGridResult. THashList; ←. TListOfDataMembers. TListOfEnums; ←. TListOfEnumsWithLock. TListOfFunctionTemplates.  [more...]. Function documentation; Int_t IndexOf(const TObject* obj) const; Return index of object in collection. Returns -1 when object not found.; Uses member IsEqual() to find object. Int_t GetLast() const; Returns index of last object in collection. Returns -1 when no; objects in collection. Int_t ObjCompare(TObject* a, TObject* b); Compare to objects in the collection. Use member Compare() of object a. void QSort(TObject** a, Int_t first, Int_t last); Sort array of TObject pointers using a quicksort algorithm.; The algorithm used is a non stable sort (i.e. already sorted; elements might switch/change places).; Uses ObjCompare() to compare objects. void QSort(TObject** a, Int_t nBs, TObject*** b, Int_t first, Int_t last); Sort array a of TObject pointers using a quick",MatchSource.WIKI,root/html604/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSeqCollection.html
https://root.cern/root/html604/TSeqCollection.html:3669,Security,Hash,Hash,3669,"Collection::FindObject(const char* name) const; virtual TObject*TCollection::FindObject(const TObject* obj) const; virtual TObject*First() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tGetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TCollection::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tIndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tIsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*Last() const; Int_tLastIndex() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TCollection::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseI",MatchSource.WIKI,root/html604/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSeqCollection.html
https://root.cern/root/html604/TSeqCollection.html:1213,Testability,Assert,AssertClass,1213," virtual~TSeqCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddLast(TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual TObject*After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*At(Int_t idx) const; virtual TObject*Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection:",MatchSource.WIKI,root/html604/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSeqCollection.html
https://root.cern/root/html604/TSeqCollection.html:7354,Testability,Test,TestBit,7354,"n_t* option, TPRegexp& regexp, Int_t recurse = 1) const; static voidQSort(TObject** a, Int_t first, Int_t last); static voidQSort(TObject** a, TObject** b, Int_t first, Int_t last); static voidQSort(TObject** a, Int_t nBs, TObject*** b, Int_t first, Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidTCollection::RecursiveRemove(TObject* obj); virtual TObject*TCollection::Remove(TObject* obj); virtual voidRemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*RemoveAt(Int_t idx); virtual voidRemoveBefore(TObject* before); virtual voidRemoveFirst(); virtual voidRemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSeqCollection(const TSeqCollection&); voidUnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSeqCollection.html
https://root.cern/root/html604/TSeqCollection.html:7393,Testability,Test,TestBits,7393,"n_t* option, TPRegexp& regexp, Int_t recurse = 1) const; static voidQSort(TObject** a, Int_t first, Int_t last); static voidQSort(TObject** a, TObject** b, Int_t first, Int_t last); static voidQSort(TObject** a, Int_t nBs, TObject*** b, Int_t first, Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidTCollection::RecursiveRemove(TObject* obj); virtual TObject*TCollection::Remove(TObject* obj); virtual voidRemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*RemoveAt(Int_t idx); virtual voidRemoveBefore(TObject* before); virtual voidRemoveFirst(); virtual voidRemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSeqCollection(const TSeqCollection&); voidUnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSeqCollection.html
https://root.cern/root/html604/TSeqCollection.html:1541,Usability,Clear,Clear,1541," virtual~TSeqCollection(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAddAfter(const TObject* after, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t idx); virtual voidAddBefore(const TObject* before, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddLast(TObject* obj); voidTCollection::AddVector(TObject* obj1); virtual TObject*After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*At(Int_t idx) const; virtual TObject*Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTCollection::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTCollection::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection:",MatchSource.WIKI,root/html604/TSeqCollection.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSeqCollection.html
https://root.cern/root/html604/TServerSocket.html:1874,Availability,Error,Error,1874,"owse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static UChar_tGetAcceptOptions(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual cons",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:2003,Availability,error,error,2003,"on = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static UChar_tGetAcceptOptions(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TIne",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:2087,Availability,error,error,2087,"dTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; static UChar_tGetAcceptOptions(); UInt_tTSocket::GetBytesRecv() const; UInt_tTSocket::GetBytesSent() const; static Int_tTSocket::GetClientProtocol(); Int_tTSocket::GetCompressionAlgorithm() const; Int_tTSocket::GetCompressionLevel() const; Int_tTSocket::GetCompressionSettings() const; virtual Int_tTSocket::GetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TName",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:4570,Availability,error,error,4570,":GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTSocket::Reconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*&); virtual Int_tRecv(Int_t&, Int_t&); virtual Int_tRecv(char*, Int_t); virtual Int_tRecv(char*, Int_t, Int_t&); virtual Int_tRecvRaw(void*, Int_t, ESendRecvOptions = kDefault); voidTObject::ResetBit",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:11929,Availability,error,error,11929," ""protocol"" version. private:. TSeqCollection*fSecContextsList of TSecContext with cleanup info; static UChar_tfgAcceptOptDefault accept options; static SrvClup_tfgSrvAuthClupHook; static SrvAuth_tfgSrvAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object for a named service. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object on a specified port. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections. If port is 0 a port scan will be done to; find a free port. This option is mutual exlusive with the reuse option.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:11968,Availability,error,error,11968,"vAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object for a named service. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object on a specified port. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections. If port is 0 a port scan will be done to; find a free port. This option is mutual exlusive with the reuse option.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:13052,Availability,error,error,13052,"all failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object on a specified port. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections. If port is 0 a port scan will be done to; find a free port. This option is mutual exlusive with the reuse option.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and n",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:13091,Availability,error,error,13091," closed on; program termination. TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object on a specified port. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections. If port is 0 a port scan will be done to; find a free port. This option is mutual exlusive with the reuse option.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authenticati",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:13953,Availability,error,error,13953,"t valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; ",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:14037,Availability,avail,available,14037,"t valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; ",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:14693,Availability,error,error,14693,"ll blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. TServerSocket(); { }. TServerSocket(const TServerSocket& ). void operator=(const TServerSocket& ). Int_t Send(const TMessage& ); { MayNotUse(""Send(const TMessage &)""); return 0; }. Int_t Send(Int_t ); { MayNotUse(""Send(Int_t)""); return 0; }. Int_t Send(Int_t , Int_t ); { MayNotUse(""Send(Int_t, Int_t)""); return 0; }. Int_t Send(const char* , Int_t = kMESS_STRING); { MayNotUse(""Send(const char *, Int_t)""); return 0; }. Int_t SendObject(const TObject* , Int",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:14817,Availability,error,error,14817,"o added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. TServerSocket(); { }. TServerSocket(const TServerSocket& ). void operator=(const TServerSocket& ). Int_t Send(const TMessage& ); { MayNotUse(""Send(const TMessage &)""); return 0; }. Int_t Send(Int_t ); { MayNotUse(""Send(Int_t)""); return 0; }. Int_t Send(Int_t , Int_t ); { MayNotUse(""Send(Int_t, Int_t)""); return 0; }. Int_t Send(const char* , Int_t = kMESS_STRING); { MayNotUse(""Send(const char *, Int_t)""); return 0; }. Int_t SendObject(const TObject* , Int_t = kMESS_OBJECT); { MayNotUse(""SendObject(const TObject *, Int_t)""); return 0; }. Int_t SendRaw(const void* ",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:10897,Integrability,protocol,protocol,10897,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TSeqCollection*fSecContextsList of TSecContext with cleanup info; static UChar_tfgAcceptOptDefault accept options; static SrvClup_tfgSrvAuthClupHook; static SrvAuth_tfgSrvAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* ",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:119,Modifiability,inherit,inheritance,119,". TServerSocket. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TServerSocket. class TServerSocket: public TSocket. TServerSocket. This class implements server sockets. A server socket waits for; requests to come in over the network. It performs some operation; based on that request and then possibly returns a full duplex socket; to the requester. The actual work is done via the TSystem class; (either TUnixSystem or TWinNTSystem). Function Members (Methods); public:. virtual~TServerSocket(); voidTObject::AbstractMethod(const char* method) const; virtual TSocket*Accept(UChar_t Opt = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:3909,Modifiability,Inherit,InheritsFrom,3909,"InetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTSocket::GetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::ope",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:3975,Modifiability,Inherit,InheritsFrom,3975,"LastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTSocket::GetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* ",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:11121,Modifiability,Inherit,Inheritance,11121,"tringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TSeqCollection*fSecContextsList of TSecContext with cleanup info; static UChar_tfgAcceptOptDefault accept options; static SrvClup_tfgSrvAuthClupHook; static SrvAuth_tfgSrvAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object for a named service. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:443,Performance,perform,performs,443,". TServerSocket. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TServerSocket. class TServerSocket: public TSocket. TServerSocket. This class implements server sockets. A server socket waits for; requests to come in over the network. It performs some operation; based on that request and then possibly returns a full duplex socket; to the requester. The actual work is done via the TSystem class; (either TUnixSystem or TWinNTSystem). Function Members (Methods); public:. virtual~TServerSocket(); voidTObject::AbstractMethod(const char* method) const; virtual TSocket*Accept(UChar_t Opt = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:11544,Performance,queue,queue,11544,"bject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TSeqCollection*fSecContextsList of TSecContext with cleanup info; static UChar_tfgAcceptOptDefault accept options; static SrvClup_tfgSrvAuthClupHook; static SrvAuth_tfgSrvAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object for a named service. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object on a specified port. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the ",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:12553,Performance,queue,queue,12553,"ength; for pending connections.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); Create a server socket object on a specified port. Set reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections. If port is 0 a port scan will be done to; find a free port. This option is mutual exlusive with the reuse option.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; ",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:13628,Performance,queue,queue,13628," mutual exlusive with the reuse option.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. ",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:5808,Safety,timeout,timeout,5808,"ct::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tTSocket::Reconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*&); virtual Int_tRecv(Int_t&, Int_t&); virtual Int_tRecv(char*, Int_t); virtual Int_tRecv(char*, Int_t, Int_t&); virtual Int_tRecvRaw(void*, Int_t, ESendRecvOptions = kDefault); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tTSocket::Select(Int_t interest = kRead, Long_t timeout = -1); virtual Int_tSend(const TMessage&); virtual Int_tSend(Int_t); virtual Int_tSend(Int_t, Int_t); virtual Int_tSend(const char*, Int_t = kMESS_STRING); virtual Int_tSendObject(const TObject*, Int_t = kMESS_OBJECT); virtual Int_tSendRaw(const void*, Int_t, ESendRecvOptions = kDefault); static voidSetAcceptOptions(UChar_t Opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecConte",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:3799,Security,Hash,Hash,3799,"ng_tTObject::GetDtorOnly(); Int_tTSocket::GetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressTSocket::GetInetAddress() const; TTimeStampTSocket::GetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tTSocket::GetOption(ESockOptions opt, Int_t& val); Int_tTSocket::GetPort() const; Int_tTSocket::GetRemoteProtocol() const; TSecContext*TSocket::GetSecContext() const; const char*TSocket::GetService() const; Int_tTSocket::GetServType() const; static ULong64_tTSocket::GetSocketBytesRecv(); static ULong64_tTSocket::GetSocketBytesSent(); Int_tTSocket::GetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSocket::GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTSocket::IsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTSocket::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidTSocket::NetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp);",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:10274,Security,Authenticat,Authenticate,10274,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TSeqCollection*fSecContextsList of TSecContext with cleanup info; static UChar_tfgAcceptOptDefault accept options; static SrvClup_tfgSrvAuthClupHook; static SrvAuth_tfgSrvAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* ",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:10672,Security,authenticat,authentication,10672,"TSocket::kPROOFD; static TSocket::EServiceTypeTSocket::kROOTD; static TSocket::EInterestTSocket::kRead; static TSocket::EServiceTypeTSocket::kSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestTSocket::kWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressTSocket::fAddressremote internet address and port #; TBitsTSocket::fBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tTSocket::fBytesRecvtotal bytes received over this socket; UInt_tTSocket::fBytesSenttotal bytes sent using this socket; Int_tTSocket::fCompressCompression level and algorithm; TTimeStampTSocket::fLastUsageTime stamp of last usage; TVirtualMutex*TSocket::fLastUsageMtxProtect last usage setting / reading; TInetAddressTSocket::fLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tTSocket::fRemoteProtocolprotocol of remote daemon; TSecContext*TSocket::fSecContextafter a successful Authenticate call; TSocket::EServiceTypeTSocket::fServTyperemote service type; TStringTSocket::fServicename of service (matches remote port #); Int_tTSocket::fSocketsocket descriptor; Int_tTSocket::fTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*TSocket::fUUIDslist of TProcessIDs already sent through the socket; TStringTSocket::fUrlneeds this for special authentication options; static ULong64_tTSocket::fgBytesRecvtotal bytes received by all socket objects; static ULong64_tTSocket::fgBytesSenttotal bytes sent by all socket objects; static Int_tTSocket::fgClientProtocolclient ""protocol"" version. private:. TSeqCollection*fSecContextsList of TSecContext with cleanup info; static UChar_tfgAcceptOptDefault accept options; static SrvClup_tfgSrvAuthClupHook; static SrvAuth_tfgSrvAuthHook. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←; TServerSocket. ←. TPServerSocket. Function documentation; TServerSocket(const char* ",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:13413,Security,authenticat,authentication,13413,"et reuse to true; to force reuse of the server socket (i.e. do not wait for the time; out to pass). Using backlog one can set the desirable queue length; for pending connections. If port is 0 a port scan will be done to; find a free port. This option is mutual exlusive with the reuse option.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Use IsValid() to check the validity of the; server socket. In case server socket is not valid use GetErrorCode(); to obtain the specific error value. These values are:; 0 = no error (socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; meth",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:14101,Security,authenticat,authentication,14101,"socket is valid); -1 = low level socket() call failed; -2 = low level bind() call failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void Show",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:14162,Security,authenticat,authentication,14162,"l failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:14207,Security,authenticat,authentication,14207,"l failed; -3 = low level listen() call failed; Every valid server socket is added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:14269,Security,authenticat,authentication,14269," added to the TROOT sockets list which; will make sure that any open sockets are properly closed on; program termination. ~TServerSocket(); Destructor: cleanup authentication stuff (if any) and close. TSocket * Accept(UChar_t Opt = 0); Accept a connection on a server socket. Returns a full-duplex; communication TSocket object. If no pending connections are; present on the queue and nonblocking mode has not been enabled; with SetOption(kNoBlock,1) the call blocks until a connection is; present. The returned socket must be deleted by the user. The socket; is also added to the TROOT sockets list which will make sure that; any open sockets are properly closed on program termination.; In case of error 0 is returned and in case non-blocking I/O is; enabled and no connections are available -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. T",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:15025,Security,authenticat,authentication,15025,"lable -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. TServerSocket(); { }. TServerSocket(const TServerSocket& ). void operator=(const TServerSocket& ). Int_t Send(const TMessage& ); { MayNotUse(""Send(const TMessage &)""); return 0; }. Int_t Send(Int_t ); { MayNotUse(""Send(Int_t)""); return 0; }. Int_t Send(Int_t , Int_t ); { MayNotUse(""Send(Int_t, Int_t)""); return 0; }. Int_t Send(const char* , Int_t = kMESS_STRING); { MayNotUse(""Send(const char *, Int_t)""); return 0; }. Int_t SendObject(const TObject* , Int_t = kMESS_OBJECT); { MayNotUse(""SendObject(const TObject *, Int_t)""); return 0; }. Int_t SendRaw(const void* , Int_t , ESendRecvOptions = kDefault); { MayNotUse(""SendRaw(const void *, Int_t, ESendRecvOptions)""); return 0; }. Int_t Recv(TMessage*& ); { MayNotUse(""Recv(TMessage *&)""); return 0; }. Int_t Recv(Int_t& , Int_t& ); { M",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:15074,Security,authenticat,authentication,15074,"lable -1 is returned. The opt can be used to require client authentication; valid options are. kSrvAuth = require client authentication; kSrvNoAuth = force no client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. TServerSocket(); { }. TServerSocket(const TServerSocket& ). void operator=(const TServerSocket& ). Int_t Send(const TMessage& ); { MayNotUse(""Send(const TMessage &)""); return 0; }. Int_t Send(Int_t ); { MayNotUse(""Send(Int_t)""); return 0; }. Int_t Send(Int_t , Int_t ); { MayNotUse(""Send(Int_t, Int_t)""); return 0; }. Int_t Send(const char* , Int_t = kMESS_STRING); { MayNotUse(""Send(const char *, Int_t)""); return 0; }. Int_t SendObject(const TObject* , Int_t = kMESS_OBJECT); { MayNotUse(""SendObject(const TObject *, Int_t)""); return 0; }. Int_t SendRaw(const void* , Int_t , ESendRecvOptions = kDefault); { MayNotUse(""SendRaw(const void *, Int_t, ESendRecvOptions)""); return 0; }. Int_t Recv(TMessage*& ); { MayNotUse(""Recv(TMessage *&)""); return 0; }. Int_t Recv(Int_t& , Int_t& ); { M",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:15157,Security,Authenticat,Authenticate,15157,"client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. TServerSocket(); { }. TServerSocket(const TServerSocket& ). void operator=(const TServerSocket& ). Int_t Send(const TMessage& ); { MayNotUse(""Send(const TMessage &)""); return 0; }. Int_t Send(Int_t ); { MayNotUse(""Send(Int_t)""); return 0; }. Int_t Send(Int_t , Int_t ); { MayNotUse(""Send(Int_t, Int_t)""); return 0; }. Int_t Send(const char* , Int_t = kMESS_STRING); { MayNotUse(""Send(const char *, Int_t)""); return 0; }. Int_t SendObject(const TObject* , Int_t = kMESS_OBJECT); { MayNotUse(""SendObject(const TObject *, Int_t)""); return 0; }. Int_t SendRaw(const void* , Int_t , ESendRecvOptions = kDefault); { MayNotUse(""SendRaw(const void *, Int_t, ESendRecvOptions)""); return 0; }. Int_t Recv(TMessage*& ); { MayNotUse(""Recv(TMessage *&)""); return 0; }. Int_t Recv(Int_t& , Int_t& ); { MayNotUse(""Recv(Int_t &, Int_t &)""); return 0; }. Int_t Recv(char* , Int_t ); { MayNotUse(""Recv(char *, Int_t)""); return 0; }. Int_t Recv(char* , Int_t , Int_t&",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:15188,Security,authenticat,authentication,15188,"client authentication. Example: use Opt = kSrvAuth to require client authentication. Default options are taken from fgAcceptOpt and are initially; equivalent to kSrvNoAuth; they can be changed with the static; method TServerSocket::SetAcceptOptions(Opt).; The active defaults can be visualized using the static method; TServerSocket::ShowAcceptOptions(). TInetAddress GetLocalInetAddress(); Return internet address of host to which the server socket is bound,; i.e. the local host. In case of error TInetAddress::IsValid() returns; kFALSE. Int_t GetLocalPort(); Get port # to which server socket is bound. In case of error returns -1. UChar_t GetAcceptOptions(); Return default options for Accept. void SetAcceptOptions(UChar_t Opt); Set default options for Accept according to modifier 'mod'.; Use:; kSrvAuth require client authentication; kSrvNoAuth do not require client authentication. void ShowAcceptOptions(); Print default options for Accept. Bool_t Authenticate(TSocket* ); Check authentication request from the client on new; open connection. TServerSocket(); { }. TServerSocket(const TServerSocket& ). void operator=(const TServerSocket& ). Int_t Send(const TMessage& ); { MayNotUse(""Send(const TMessage &)""); return 0; }. Int_t Send(Int_t ); { MayNotUse(""Send(Int_t)""); return 0; }. Int_t Send(Int_t , Int_t ); { MayNotUse(""Send(Int_t, Int_t)""); return 0; }. Int_t Send(const char* , Int_t = kMESS_STRING); { MayNotUse(""Send(const char *, Int_t)""); return 0; }. Int_t SendObject(const TObject* , Int_t = kMESS_OBJECT); { MayNotUse(""SendObject(const TObject *, Int_t)""); return 0; }. Int_t SendRaw(const void* , Int_t , ESendRecvOptions = kDefault); { MayNotUse(""SendRaw(const void *, Int_t, ESendRecvOptions)""); return 0; }. Int_t Recv(TMessage*& ); { MayNotUse(""Recv(TMessage *&)""); return 0; }. Int_t Recv(Int_t& , Int_t& ); { MayNotUse(""Recv(Int_t &, Int_t &)""); return 0; }. Int_t Recv(char* , Int_t ); { MayNotUse(""Recv(char *, Int_t)""); return 0; }. Int_t Recv(char* , Int_t , Int_t&",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:7355,Testability,Test,TestBit,7355,"RING); virtual Int_tSendObject(const TObject*, Int_t = kMESS_OBJECT); virtual Int_tSendRaw(const void*, Int_t, ESendRecvOptions = kDefault); static voidSetAcceptOptions(UChar_t Opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTSocket::SetUrl(const char* url); static voidShowAcceptOptions(); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); TServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:7394,Testability,Test,TestBits,7394,"RING); virtual Int_tSendObject(const TObject*, Int_t = kMESS_OBJECT); virtual Int_tSendRaw(const void*, Int_t, ESendRecvOptions = kDefault); static voidSetAcceptOptions(UChar_t Opt); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTSocket::SetCompressionAlgorithm(Int_t algorithm = 0); voidTSocket::SetCompressionLevel(Int_t level = 1); voidTSocket::SetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tTSocket::SetOption(ESockOptions opt, Int_t val); voidTSocket::SetRemoteProtocol(Int_t rproto); voidTSocket::SetSecContext(TSecContext* ctx); voidTSocket::SetService(const char* service); voidTSocket::SetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidTSocket::SetUrl(const char* url); static voidShowAcceptOptions(); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTSocket::Touch(); TServerSocket(Int_t port, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); TServerSocket(const char* service, Bool_t reuse = kFALSE, Int_t backlog = kDefaultBacklog, Int_t tcpwindowsize = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TServerSocket.html:986,Usability,Clear,Clear,986," virtual~TServerSocket(); voidTObject::AbstractMethod(const char* method) const; virtual TSocket*Accept(UChar_t Opt = 0); virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidTSocket::Close(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*TSocket::CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*TSocket::CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t",MatchSource.WIKI,root/html604/TServerSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TServerSocket.html
https://root.cern/root/html604/TSessionDescription.html:1327,Availability,Error,Error,1327," virtual~TSessionDescription(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char",MatchSource.WIKI,root/html604/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionDescription.html
https://root.cern/root/html604/TSessionDescription.html:1456,Availability,error,error,1456," virtual~TSessionDescription(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char",MatchSource.WIKI,root/html604/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionDescription.html
https://root.cern/root/html604/TSessionDescription.html:1540,Availability,error,error,1540," voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect",MatchSource.WIKI,root/html604/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionDescription.html
https://root.cern/root/html604/TSessionDescription.html:125,Modifiability,inherit,inheritance,125,". TSessionDescription. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionDescription. class TSessionDescription: public TObject. TSessionViewer. Widget used to manage PROOF or local sessions, PROOF connections,; queries construction and results handling. Function Members (Methods); public:. virtual~TSessionDescription(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char",MatchSource.WIKI,root/html604/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionDescription.html
https://root.cern/root/html604/TSessionDescription.html:2411,Modifiability,Inherit,InheritsFrom,2411,"ar* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionDescription.html
https://root.cern/root/html604/TSessionDescription.html:2477,Modifiability,Inherit,InheritsFrom,2477,"ject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionDescription&operator=(const TSessionDescrip",MatchSource.WIKI,root/html604/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionDescription.html
https://root.cern/root/html604/TSessionDescription.html:6584,Modifiability,Inherit,Inheritance,6584,"t; voidTObject::MakeZombie(). Data Members; public:. TQueryDescription*fActQuerycurrent (actual) query; TStringfAddressserver address; Bool_tfAttachedkTRUE if attached; Bool_tfAutoEnableenable packages at session startup time; TStringfConfigFileconfiguration file name; Bool_tfConnectedkTRUE if connected; Bool_tfLocalkTRUE if session is local; Int_tfLogLevellog (debug) level; TStringfNamesession name; Int_tfNbHistosnumber of feedback histos; TList*fPackageslist of packages; Int_tfPortcommunication port; TProof*fProofpointer on TProof used by this session; TProofMgr*fProofMgrProof sessions manager; TList*fQuerieslist of queries in this session; Bool_tfSynckTRUE if in sync mode; TStringfTagsession unique identifier; TStringfUserNameuser name (on server); static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TSessionDescription. Function documentation; const char * GetName() const; { return fQueryName; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionDescription.html
https://root.cern/root/html604/TSessionDescription.html:2301,Security,Hash,Hash,2301," ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionDescription.html
https://root.cern/root/html604/TSessionDescription.html:4491,Testability,Test,TestBit,4491,"dTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionDescription&operator=(const TSessionDescription&); TSessionDescription&operator=(TSessionDescription&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSessionDescription(); TSessionDescription(TSessionDescription&&); TSessionDescription(const TSessionDescription&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionDescription.html
https://root.cern/root/html604/TSessionDescription.html:4530,Testability,Test,TestBits,4530,"dTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionDescription&operator=(const TSessionDescription&); TSessionDescription&operator=(TSessionDescription&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSessionDescription(); TSessionDescription(TSessionDescription&&); TSessionDescription(const TSessionDescription&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionDescription.html
https://root.cern/root/html604/TSessionDescription.html:787,Usability,Clear,Clear,787," virtual~TSessionDescription(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*GetName() const; virtual char",MatchSource.WIKI,root/html604/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionDescription.html
https://root.cern/root/html604/TSessionDescription.html:5505,Usability,feedback,feedback,5505,"n = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. TQueryDescription*fActQuerycurrent (actual) query; TStringfAddressserver address; Bool_tfAttachedkTRUE if attached; Bool_tfAutoEnableenable packages at session startup time; TStringfConfigFileconfiguration file name; Bool_tfConnectedkTRUE if connected; Bool_tfLocalkTRUE if session is local; Int_tfLogLevellog (debug) level; TStringfNamesession name; Int_tfNbHistosnumber of feedback histos; TList*fPackageslist of packages; Int_tfPortcommunication port; TProof*fProofpointer on TProof used by this session; TProofMgr*fProofMgrProof sessions manager; TList*fQuerieslist of queries in this session; Bool_tfSynckTRUE if in sync mode; TStringfTagsession unique identifier; TStringfUserNameuser name (on server); static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TSessionDescription. Function documentation; const char * GetName() const; { return fQueryName; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » L",MatchSource.WIKI,root/html604/TSessionDescription.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionDescription.html
https://root.cern/root/html604/TSessionFrame.html:4139,Availability,Error,Error,4139,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:4268,Availability,error,error,4268," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const;",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:4352,Availability,error,error,4352,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() c",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:18208,Availability,mask,mask,18208,,MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:20565,Availability,down,down,20565,::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fApplyLogLevelapply log level button; TGTextButton*fApplyParallelapply parallel nodes button; TGTextButton*fBtnAddadd package button; TGTextButton*fBtnClearclear all packages button; TGTextButton*fBtnDisabledisable packages button; TGTextButton*fBtnDownmove package down button; TGTextButton*fBtnEnableenable packages button; TGTextButton*fBtnGetQueriesget entries button; TGTextButton*fBtnNewQuerynew query button; TGTextButton*fBtnRefreshrefresh list button; TGTextButton*fBtnRemoveremove package button; TGTextButton*fBtnRemoveDSetremove dataset button; TGTextButton*fBtnShowshow packages button; TGTextButton*fBtnShowEnabledshow enabled packages button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnUpmove package up button; TGTextButton*fBtnUploadupload packages button; TGTextButton*fBtnUploadDSetupload dataset button; TGTextButton*fBtnVerifyDSetverify dataset button; TGCheckButton*fChkEnableenable at session startup check; TGCheckButton*fChkMultimultiple selection check; TGCheckButton*fClearCheckclear text view after each command; TGTextBuffer*fCommandBufCommand line text buffer; TGTextEntry*fCommandTxtCommand line text entry; TGCanvas*fDSetViewdataset tree view; TGListTree*fDataSetTreedataset list tree; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFC; TGCompositeFrame*fFDfive tabs element; TGCompositeFrame*fFEfive tabs element; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; T,MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:23589,Availability,down,down,23589,"rify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE); Switch widgets status/visibility for local/remote sessions. void ShutdownSession(); Shutdown current session. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. TSessionFrame(TGWindow* parent, Int_t w, Int_t h). void CheckAutoEnPack(Bool_t checked = kTRUE). TGTab * GetTab() const; { return fTab; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has ",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:22392,Deployability,Update,UpdateListOfDataSets,22392,"dTxtCommand line text entry; TGCanvas*fDSetViewdataset tree view; TGListTree*fDataSetTreedataset list tree; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFC; TGCompositeFrame*fFDfive tabs element; TGCompositeFrame*fFEfive tabs element; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; TSessionFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionFrame(); Destructor. void Build(TSessionViewer* gui); Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected pack",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:22416,Deployability,Update,Update,22416,"dTxtCommand line text entry; TGCanvas*fDSetViewdataset tree view; TGListTree*fDataSetTreedataset list tree; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFC; TGCompositeFrame*fFDfive tabs element; TGCompositeFrame*fFEfive tabs element; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; TSessionFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionFrame(); Destructor. void Build(TSessionViewer* gui); Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected pack",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:22943,Deployability,Update,UpdatePackages,22943,"main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; TSessionFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionFrame(); Destructor. void Build(TSessionViewer* gui); Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:22961,Deployability,Update,Update,22961,"main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; TSessionFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionFrame(); Destructor. void Build(TSessionViewer* gui); Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:10316,Integrability,Message,Message,10316,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOnApplyLogLevel(); voidOnApplyParallel(); voidOnBtnAddClicked(); voidOnBtnDisconnectClicked(); voidOnBtnDownClicked(); voidOnBtnGetQueriesClicked(); voidOnBtnNewQueryClicked(); voidOnBtnRemoveClicked(); voidOnBtnRemoveDSet(); voidOnBtnShowLogClicked(); voidOnBtnUpClicked(); voidOnBtnUploadDSet(); voidOnBtnVerifyDSet(); voidOnClearPackages(); voidOnCommandLine(); voidOnDisablePackages(); voidOnEnablePackages(); voidOnMultipleSelection(Bool_t on); voidOnStartupEnable(Bool_t on); voidOnUploadPackages(); voidTObject::operator delete(void* ptr); voidTObject",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:119,Modifiability,inherit,inheritance,119,". TSessionFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionFrame. class TSessionFrame: public TGCompositeFrame. TSessionViewer. Widget used to manage PROOF or local sessions, PROOF connections,; queries construction and results handling. Function Members (Methods); public:. virtual~TSessionFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); voidCheckAutoEnPack(Bool_t checked = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char*",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:8899,Modifiability,Inherit,InheritsFrom,8899,"irtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:8965,Modifiability,Inherit,InheritsFrom,8965," Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:21988,Modifiability,Inherit,Inheritance,21988," TGTextButton*fBtnUpmove package up button; TGTextButton*fBtnUploadupload packages button; TGTextButton*fBtnUploadDSetupload dataset button; TGTextButton*fBtnVerifyDSetverify dataset button; TGCheckButton*fChkEnableenable at session startup check; TGCheckButton*fChkMultimultiple selection check; TGCheckButton*fClearCheckclear text view after each command; TGTextBuffer*fCommandBufCommand line text buffer; TGTextEntry*fCommandTxtCommand line text entry; TGCanvas*fDSetViewdataset tree view; TGListTree*fDataSetTreedataset list tree; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFC; TGCompositeFrame*fFDfive tabs element; TGCompositeFrame*fFEfive tabs element; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; TSessionFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionFrame(); Destructor. void Build(TSessionViewer* gui); Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUplo",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:8609,Security,Hash,Hash,8609,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:14001,Testability,log,log,14001,"_t parm2); virtual voidTGFrame::SetBackgroundColor(Pixel_t back); virtual voidTGWindow::SetBackgroundPixmap(Pixmap_t pixmap); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGCompositeFrame::SetCleanup(Int_t mode = kLocalCleanup); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLocal(Bool_t local = kTRUE); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; voidShutdownSession(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:14926,Testability,Test,TestBit,14926,"::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLocal(Bool_t local = kTRUE); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; voidShutdownSession(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionFrame(const TSessionFrame&); TSessionFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); voidUpdateListOfDataSets(); voidUpdatePackages(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:14965,Testability,Test,TestBits,14965,"::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLocal(Bool_t local = kTRUE); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; voidShutdownSession(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionFrame(const TSessionFrame&); TSessionFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); voidUpdateListOfDataSets(); voidUpdatePackages(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:20319,Testability,log,log,20319,::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fApplyLogLevelapply log level button; TGTextButton*fApplyParallelapply parallel nodes button; TGTextButton*fBtnAddadd package button; TGTextButton*fBtnClearclear all packages button; TGTextButton*fBtnDisabledisable packages button; TGTextButton*fBtnDownmove package down button; TGTextButton*fBtnEnableenable packages button; TGTextButton*fBtnGetQueriesget entries button; TGTextButton*fBtnNewQuerynew query button; TGTextButton*fBtnRefreshrefresh list button; TGTextButton*fBtnRemoveremove package button; TGTextButton*fBtnRemoveDSetremove dataset button; TGTextButton*fBtnShowshow packages button; TGTextButton*fBtnShowEnabledshow enabled packages button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnUpmove package up button; TGTextButton*fBtnUploadupload packages button; TGTextButton*fBtnUploadDSetupload dataset button; TGTextButton*fBtnVerifyDSetverify dataset button; TGCheckButton*fChkEnableenable at session startup check; TGCheckButton*fChkMultimultiple selection check; TGCheckButton*fClearCheckclear text view after each command; TGTextBuffer*fCommandBufCommand line text buffer; TGTextEntry*fCommandTxtCommand line text entry; TGCanvas*fDSetViewdataset tree view; TGListTree*fDataSetTreedataset list tree; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFC; TGCompositeFrame*fFDfive tabs element; TGCompositeFrame*fFEfive tabs element; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; T,MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:20986,Testability,log,log,20986,::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fApplyLogLevelapply log level button; TGTextButton*fApplyParallelapply parallel nodes button; TGTextButton*fBtnAddadd package button; TGTextButton*fBtnClearclear all packages button; TGTextButton*fBtnDisabledisable packages button; TGTextButton*fBtnDownmove package down button; TGTextButton*fBtnEnableenable packages button; TGTextButton*fBtnGetQueriesget entries button; TGTextButton*fBtnNewQuerynew query button; TGTextButton*fBtnRefreshrefresh list button; TGTextButton*fBtnRemoveremove package button; TGTextButton*fBtnRemoveDSetremove dataset button; TGTextButton*fBtnShowshow packages button; TGTextButton*fBtnShowEnabledshow enabled packages button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnUpmove package up button; TGTextButton*fBtnUploadupload packages button; TGTextButton*fBtnUploadDSetupload dataset button; TGTextButton*fBtnVerifyDSetverify dataset button; TGCheckButton*fChkEnableenable at session startup check; TGCheckButton*fChkMultimultiple selection check; TGCheckButton*fClearCheckclear text view after each command; TGTextBuffer*fCommandBufCommand line text buffer; TGTextEntry*fCommandTxtCommand line text entry; TGCanvas*fDSetViewdataset tree view; TGListTree*fDataSetTreedataset list tree; TGCompositeFrame*fFA; TGCompositeFrame*fFB; TGCompositeFrame*fFC; TGCompositeFrame*fFDfive tabs element; TGCompositeFrame*fFEfive tabs element; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; T,MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:22675,Testability,log,log,22675,"ement; TGLabel*fInfoLine[19]infos on session; TGTextView*fInfoTextViewsummary on current query; TGListBox*fLBPackagespackages listbox; TGNumberEntry*fLogLevellog level number entry; TGTab*fTabmain tab frame; TGTextEntry*fTxtParallelparallel nodes text entry; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionFrame. Function documentation; TSessionFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionFrame(); Destructor. void Build(TSessionViewer* gui); Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof se",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:23718,Testability,log,log,23718,"sion. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE); Switch widgets status/visibility for local/remote sessions. void ShutdownSession(); Shutdown current session. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. TSessionFrame(TGWindow* parent, Int_t w, Int_t h). void CheckAutoEnPack(Bool_t checked = kTRUE). TGTab * GetTab() const; { return fTab; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT sup",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:24163,Testability,log,log,24163,"void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE); Switch widgets status/visibility for local/remote sessions. void ShutdownSession(); Shutdown current session. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. TSessionFrame(TGWindow* parent, Int_t w, Int_t h). void CheckAutoEnPack(Bool_t checked = kTRUE). TGTab * GetTab() const; { return fTab; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:24195,Testability,log,log,24195,"void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE); Switch widgets status/visibility for local/remote sessions. void ShutdownSession(); Shutdown current session. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. TSessionFrame(TGWindow* parent, Int_t w, Int_t h). void CheckAutoEnPack(Bool_t checked = kTRUE). TGTab * GetTab() const; { return fTab; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:1465,Usability,Clear,Clear,1465," virtual~TSessionFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); voidCheckAutoEnPack(Bool_t checked = kTRUE); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char*",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionFrame.html:23240,Usability,Clear,Clear,23240,"; Build session frame. void ProofInfos(); Display information on current session. void OnBtnUploadDSet(); Open Upload Dataset dialog. void UpdateListOfDataSets(); Update list of dataset present on the cluster. void OnBtnRemoveDSet(); Remove dataset from the list and from the cluster. void OnBtnVerifyDSet(); Verify that the files in the selected dataset are present on the cluster. void OnApplyLogLevel(); Apply selected log level on current session. void OnApplyParallel(); Apply selected number of workers on current Proof session. void OnMultipleSelection(Bool_t on); Handle multiple selection check button. void OnStartupEnable(Bool_t on); Handle multiple selection check button. void UpdatePackages(); Update list of packages. void OnUploadPackages(); Upload selected package(s) to the current session. void OnEnablePackages(); Enable selected package(s) in the current session. void OnDisablePackages(); Disable selected package(s) in the current session. void OnClearPackages(); Clear (disable) all packages in the current session. void OnBtnAddClicked(); Open file dialog and add selected package file to the list. void OnBtnRemoveClicked(); Remove selected package from the list. void OnBtnUpClicked(); Move selected package entry one position up in the list. void OnBtnDownClicked(); Move selected package entry one position down in the list. void OnBtnDisconnectClicked(); Disconnect from current Proof session. void OnBtnShowLogClicked(); Show session log. void OnBtnNewQueryClicked(); Call ""New Query"" Dialog. void OnBtnGetQueriesClicked(); Get list of queries from current Proof server and populate the list tree. void OnCommandLine(); Command line handling. void SetLocal(Bool_t local = kTRUE); Switch widgets status/visibility for local/remote sessions. void ShutdownSession(); Shutdown current session. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. TSessionFrame(TGWindow* parent, Int_t w, Int_t h).",MatchSource.WIKI,root/html604/TSessionFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionFrame.html
https://root.cern/root/html604/TSessionInputFrame.html:4143,Availability,Error,Error,4143,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionInputFrame.html
https://root.cern/root/html604/TSessionInputFrame.html:4272,Availability,error,error,4272," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const;",MatchSource.WIKI,root/html604/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionInputFrame.html
https://root.cern/root/html604/TSessionInputFrame.html:4356,Availability,error,error,4356,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() c",MatchSource.WIKI,root/html604/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionInputFrame.html
https://root.cern/root/html604/TSessionInputFrame.html:17538,Availability,mask,mask,17538,,MatchSource.WIKI,root/html604/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionInputFrame.html
https://root.cern/root/html604/TSessionInputFrame.html:10304,Integrability,Message,Message,10304,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionInputFrame&operator=(const TSessionInputFrame&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """")",MatchSource.WIKI,root/html604/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionInputFrame.html
https://root.cern/root/html604/TSessionInputFrame.html:124,Modifiability,inherit,inheritance,124,". TSessionInputFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionInputFrame. class TSessionInputFrame: public TGCompositeFrame. TSessionViewer. Widget used to manage PROOF or local sessions, PROOF connections,; queries construction and results handling. Function Members (Methods); public:. virtual~TSessionInputFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddObject(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const c",MatchSource.WIKI,root/html604/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionInputFrame.html
https://root.cern/root/html604/TSessionInputFrame.html:8887,Modifiability,Inherit,InheritsFrom,8887,"irtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html604/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionInputFrame.html
https://root.cern/root/html604/TSessionInputFrame.html:8953,Modifiability,Inherit,InheritsFrom,8953," Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html604/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionInputFrame.html
https://root.cern/root/html604/TSessionInputFrame.html:19741,Modifiability,Inherit,Inheritance,19741,"Frame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGLVContainer*fLVContainercontainer for the input list view; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionInputFrame. Function documentation; TSessionInputFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionInputFrame(); Destructor. void Build(TSessionViewer* gui); Build query input information frame. void AddObject(TObject* obj); Add object to input list view. TGLVContainer * GetLVContainer(); { return fLVContainer; }. void RemoveAll(); { fLVContainer->RemoveAll(); }. TSessionInputFrame(TGWindow* parent, Int_t w, Int_t h). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionInputFrame.html
https://root.cern/root/html604/TSessionInputFrame.html:8597,Security,Hash,Hash,8597,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html604/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionInputFrame.html
https://root.cern/root/html604/TSessionInputFrame.html:14291,Testability,Test,TestBit,14291,"""); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionInputFrame(const TSessionInputFrame&); TSessionInputFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionInputFrame.html
https://root.cern/root/html604/TSessionInputFrame.html:14330,Testability,Test,TestBits,14330,"""); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionInputFrame(const TSessionInputFrame&); TSessionInputFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionInputFrame.html
https://root.cern/root/html604/TSessionInputFrame.html:1469,Usability,Clear,Clear,1469," virtual~TSessionInputFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddObject(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const c",MatchSource.WIKI,root/html604/TSessionInputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionInputFrame.html
https://root.cern/root/html604/TSessionLogView.html:4342,Availability,Error,Error,4342,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::G",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:4471,Availability,error,error,4471," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:4555,Availability,error,error,4555,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UIn",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:20197,Availability,mask,mask,20197,,MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:11198,Integrability,Message,Message,11198,"rtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); voidLoadBuffer(const char* buffer); voidLoadFile(const char* file); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionLogView&operator=(const TSessionLogView&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); voidPopup(); virtual voidTGCompositeFrame::Print(Option_t* optio",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:121,Modifiability,inherit,inheritance,121,". TSessionLogView. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionLogView. class TSessionLogView: public TGTransientFrame. TSessionLogView. Dialog used to display session logs from the session viewer. Function Members (Methods); public:. virtual~TSessionLogView(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidAddBuffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClearLogView(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, co",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:9713,Modifiability,Inherit,InheritsFrom,9713,"TGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:9779,Modifiability,Inherit,InheritsFrom,9779,"e::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); voidLoadBuffer(const ",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:23425,Modifiability,Inherit,Inheritance,23425,"me::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:23823,Performance,Load,Load,23823,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:23901,Performance,Load,LoadBuffer,23901,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:23933,Performance,Load,Load,23933,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:23972,Performance,Load,LoadFile,23972,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:24000,Performance,Load,Load,24000,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:9423,Security,Hash,Hash,9423,"virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:395,Testability,log,logs,395,". TSessionLogView. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionLogView. class TSessionLogView: public TGTransientFrame. TSessionLogView. Dialog used to display session logs from the session viewer. Function Members (Methods); public:. virtual~TSessionLogView(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); voidAddBuffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClearLogView(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, co",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:16101,Testability,Test,TestBit,16101,"pm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetTitle(); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionLogView(const TSessionLogView&); TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:16140,Testability,Test,TestBits,16140,"pm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetTitle(); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionLogView(const TSessionLogView&); TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:23884,Testability,log,log,23884,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:1587,Usability,Clear,Clear,1587,"Buffer(const char* buffer); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGTransientFrame::CenterOnParent(Bool_t croot = kTRUE, TGTransientFrame::EPlacement pos = kCenter); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); voidClearLogView(); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); Bool_tTQObject::D",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:23862,Usability,Clear,ClearLogView,23862,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionLogView.html:23878,Usability,Clear,Clear,23878,"fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TGTextButton*fCloseOK button; TGLayoutHints*fL1layout of TGTextEdit; TGLayoutHints*fL2layout of OK button; TGTextView*fTextViewText view widget; TSessionViewer*fViewerpointer on main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TGTransientFrame. ←; TSessionLogView. Function documentation; TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h); Create an editor in a dialog. ~TSessionLogView(). void SetTitle(); Set title in editor window. void Popup(); Show editor. void AddBuffer(const char* buffer); Load a text buffer in the editor. void ClearLogView(); Clear log window. void LoadBuffer(const char* buffer); Load a text buffer in the editor. void LoadFile(const char* file); Load a file in the editor. void CloseWindow(); Called when closed via window manager action. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process OK button. TSessionLogView(TSessionViewer* viewer, UInt_t w, UInt_t h). » Author: Bertrand Bellenot, Gerri Ganis 15/09/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionLogView.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionLogView.html
https://root.cern/root/html604/TSessionOutputFrame.html:4147,Availability,Error,Error,4147,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionOutputFrame.html
https://root.cern/root/html604/TSessionOutputFrame.html:4276,Availability,error,error,4276," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const;",MatchSource.WIKI,root/html604/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionOutputFrame.html
https://root.cern/root/html604/TSessionOutputFrame.html:4360,Availability,error,error,4360,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() c",MatchSource.WIKI,root/html604/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionOutputFrame.html
https://root.cern/root/html604/TSessionOutputFrame.html:17688,Availability,mask,mask,17688,,MatchSource.WIKI,root/html604/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionOutputFrame.html
https://root.cern/root/html604/TSessionOutputFrame.html:10308,Integrability,Message,Message,10308,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOnElementClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); voidOnElementDblClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionOutputFrame&operator=(const TSessionOutputFra",MatchSource.WIKI,root/html604/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionOutputFrame.html
https://root.cern/root/html604/TSessionOutputFrame.html:125,Modifiability,inherit,inheritance,125,". TSessionOutputFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionOutputFrame. class TSessionOutputFrame: public TGCompositeFrame. TSessionViewer. Widget used to manage PROOF or local sessions, PROOF connections,; queries construction and results handling. Function Members (Methods); public:. virtual~TSessionOutputFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddObject(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, con",MatchSource.WIKI,root/html604/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionOutputFrame.html
https://root.cern/root/html604/TSessionOutputFrame.html:8891,Modifiability,Inherit,InheritsFrom,8891,"irtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html604/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionOutputFrame.html
https://root.cern/root/html604/TSessionOutputFrame.html:8957,Modifiability,Inherit,InheritsFrom,8957," Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html604/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionOutputFrame.html
https://root.cern/root/html604/TSessionOutputFrame.html:19923,Modifiability,Inherit,Inheritance,19923,"ll signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGLVEntry*fEntryTmpused to transfer to feedback; TGLVContainer*fLVContaineroutput list view; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionOutputFrame. Function documentation; TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionOutputFrame(); Destructor. void Build(TSessionViewer* gui); Build query output information frame. void OnElementClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks on list view items. void OnElementDblClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle double-clicks on list view items. void AddObject(TObject* obj); Add object to output list view. TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h). TGLVContainer * GetLVContainer(); { return fLVContainer; }. void RemoveAll(); { fLVContainer->RemoveAll(); }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automat",MatchSource.WIKI,root/html604/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionOutputFrame.html
https://root.cern/root/html604/TSessionOutputFrame.html:8601,Security,Hash,Hash,8601,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html604/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionOutputFrame.html
https://root.cern/root/html604/TSessionOutputFrame.html:14438,Testability,Test,TestBit,14438," virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionOutputFrame(const TSessionOutputFrame&); TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionOutputFrame.html
https://root.cern/root/html604/TSessionOutputFrame.html:14477,Testability,Test,TestBits,14477," virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionOutputFrame(const TSessionOutputFrame&); TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionOutputFrame.html
https://root.cern/root/html604/TSessionOutputFrame.html:1473,Usability,Clear,Clear,1473," virtual~TSessionOutputFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); voidAddObject(TObject* obj); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, con",MatchSource.WIKI,root/html604/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionOutputFrame.html
https://root.cern/root/html604/TSessionOutputFrame.html:19805,Usability,feedback,feedback,19805,"me::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGLVEntry*fEntryTmpused to transfer to feedback; TGLVContainer*fLVContaineroutput list view; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionOutputFrame. Function documentation; TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionOutputFrame(); Destructor. void Build(TSessionViewer* gui); Build query output information frame. void OnElementClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks on list view items. void OnElementDblClicked(TGLVEntry* entry, Int_t btn, Int_t x, Int_t y); Handle double-clicks on list view items. void AddObject(TObject* obj); Add object to output list view. TSessionOutputFrame(TGWindow* parent, Int_t w, Int_t h). TGLVContainer * GetLVContainer(); { return fLVContainer; }. void RemoveAll(); { fLVContainer->RemoveAll(); }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last ",MatchSource.WIKI,root/html604/TSessionOutputFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionOutputFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:4114,Availability,Error,Error,4114,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFeedback(TList* objs); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTG",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:4243,Availability,error,error,4243," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFeedback(TList* objs); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFram",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:4327,Availability,error,error,4327,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFeedback(TList* objs); virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual In",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:18405,Availability,mask,mask,18405,,MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:22463,Deployability,update,update,22463," TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* de",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:22496,Deployability,Update,UpdateHistos,22496,"vas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query ",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:22523,Deployability,Update,Update,22523,"vas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query ",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:22602,Deployability,Update,Update,22602,"atusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TG",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:22952,Deployability,Update,Update,22952,"ueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyrig",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:23437,Deployability,Update,UpdateButtons,23437,"Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:23477,Deployability,Update,Update,23477,"Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:23533,Deployability,Update,UpdateInfos,23533,"Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:23548,Deployability,Update,Update,23548,"Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:10401,Integrability,Message,Message,10401,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; voidModified(Bool_t mod = kTRUE); virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOnBtnAbort(); voidOnBtnFinalize(); voidOnBtnRetrieve(); voidOnBtnShowLog(); voidOnBtnStop(); voidOnBtnSubmit(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionQueryFrame&operator=(const TSessionQ",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:124,Modifiability,inherit,inheritance,124,". TSessionQueryFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionQueryFrame. class TSessionQueryFrame: public TGCompositeFrame. TSessionViewer. Widget used to manage PROOF or local sessions, PROOF connections,; queries construction and results handling. Function Members (Methods); public:. virtual~TSessionQueryFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* re",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:8984,Modifiability,Inherit,InheritsFrom,8984,"dleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); voidIndicateStop(Bool_t aborted); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:9050,Modifiability,Inherit,InheritsFrom,9050,"t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); voidIndicateStop(Bool_t aborted); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:21989,Modifiability,Inherit,Inheritance,21989,"ame*fFBthree tabs element; TGCompositeFrame*fFCthree tabs element; TEditQueryFrame*fFDfourth tab element (edit query frame); Int_tfFilesnumber of files processed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void In",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:8878,Safety,abort,aborted,8878,"er(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); voidIndicateStop(Bool_t aborted); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:23016,Safety,abort,aborted,23016,"t. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:23374,Safety,Abort,Abort,23374,"Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:8660,Security,Hash,Hash,8660,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); voidIndicateStop(Bool_t aborted); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayout",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:15064,Testability,Test,TestBit,15064,"virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionQueryFrame(const TSessionQueryFrame&); TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); voidUpdateButtons(TQueryDescription* desc); voidUpdateHistos(TList* objs); voidUpdateInfos(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:15103,Testability,Test,TestBits,15103,"virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionQueryFrame(const TSessionQueryFrame&); TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); voidUpdateButtons(TQueryDescription* desc); voidUpdateHistos(TList* objs); voidUpdateInfos(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:20692,Testability,log,log,20692,"on; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAbortabort process button; TGTextButton*fBtnFinalizefinalize query button; TGTextButton*fBtnRetrieveretrieve query button; TGTextButton*fBtnSavesave query button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnStopstop process button; TGTextButton*fBtnSubmitsubmit query button; TQueryDescription*fDescquery description; TRootEmbeddedCanvas*fECanvasnode statistics embeded canvas; Long64_tfEntriesnumber of events/entries to process; TGCompositeFrame*fFAthree tabs element; TGCompositeFrame*fFBthree tabs element; TGCompositeFrame*fFCthree tabs element; TEditQueryFrame*fFDfourth tab element (edit query frame); Int_tfFilesnumber of files processed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); De",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:23312,Testability,log,log,23312,"Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:32; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:1440,Usability,Clear,Clear,1440," virtual~TSessionQueryFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* re",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:21417,Usability,progress bar,progress bar,21417,"on; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAbortabort process button; TGTextButton*fBtnFinalizefinalize query button; TGTextButton*fBtnRetrieveretrieve query button; TGTextButton*fBtnSavesave query button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnStopstop process button; TGTextButton*fBtnSubmitsubmit query button; TQueryDescription*fDescquery description; TRootEmbeddedCanvas*fECanvasnode statistics embeded canvas; Long64_tfEntriesnumber of events/entries to process; TGCompositeFrame*fFAthree tabs element; TGCompositeFrame*fFBthree tabs element; TGCompositeFrame*fFCthree tabs element; TEditQueryFrame*fFDfourth tab element (edit query frame); Int_tfFilesnumber of files processed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); De",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:21458,Usability,progress bar,progress bar,21458,"on; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAbortabort process button; TGTextButton*fBtnFinalizefinalize query button; TGTextButton*fBtnRetrieveretrieve query button; TGTextButton*fBtnSavesave query button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnStopstop process button; TGTextButton*fBtnSubmitsubmit query button; TQueryDescription*fDescquery description; TRootEmbeddedCanvas*fECanvasnode statistics embeded canvas; Long64_tfEntriesnumber of events/entries to process; TGCompositeFrame*fFAthree tabs element; TGCompositeFrame*fFBthree tabs element; TGCompositeFrame*fFCthree tabs element; TEditQueryFrame*fFDfourth tab element (edit query frame); Int_tfFilesnumber of files processed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); De",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:21768,Usability,progress bar,progress bar,21768,"on; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAbortabort process button; TGTextButton*fBtnFinalizefinalize query button; TGTextButton*fBtnRetrieveretrieve query button; TGTextButton*fBtnSavesave query button; TGTextButton*fBtnShowLogshow log button; TGTextButton*fBtnStopstop process button; TGTextButton*fBtnSubmitsubmit query button; TQueryDescription*fDescquery description; TRootEmbeddedCanvas*fECanvasnode statistics embeded canvas; Long64_tfEntriesnumber of events/entries to process; TGCompositeFrame*fFAthree tabs element; TGCompositeFrame*fFBthree tabs element; TGCompositeFrame*fFCthree tabs element; TEditQueryFrame*fFDfourth tab element (edit query frame); Int_tfFilesnumber of files processed; Long64_tfFirstfirst event/entry to process; TGTextView*fInfoTextViewsummary on current query; TGLabel*fLabInfosinfos on current process; TGLabel*fLabStatusactual process status; Bool_tfModifiedkTRUE if settings have changed; Long64_tfPrevProcessedused for progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); De",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:22383,Usability,Feedback,Feedback,22383,"r progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:22406,Usability,Feedback,Feedback,22406,"r progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:22437,Usability,Feedback,Feedback,22437,"r progress bar; Long64_tfPrevTotalused for progress bar; TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:22470,Usability,feedback,feedback,22470," TGLabel*fRaterate of process in events/sec; TCanvas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* de",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:22530,Usability,feedback,feedback,22530,"vas*fStatsCanvasnode statistics canvas; TSessionQueryFrame::EQueryStatusfStatusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query ",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:22609,Usability,progress bar,progress bar,22609,"atusstatus of actual query; TGTab*fTabmain tab frame; TGLabel*fTotaltotal progress info; TSessionViewer*fViewerpointer on main viewer; TGHProgressBar*frmProgcurrent process progress bar; static TSessionQueryFrame::EQueryStatuskAborted; static TSessionQueryFrame::EQueryStatuskDone; static TSessionQueryFrame::EQueryStatuskRunning; static TSessionQueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TG",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionQueryFrame.html:22959,Usability,progress bar,progress bar,22959,"ueryFrame::EQueryStatuskStopped. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionQueryFrame. Function documentation; TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionQueryFrame(); Destructor. void Build(TSessionViewer* gui); Build query information frame. void Modified(Bool_t mod = kTRUE); Notify changes in query editor settings. void Feedback(TList* objs); Feedback function connected to Feedback signal.; Used to update feedback histograms. void UpdateHistos(TList* objs); Update feedback histograms. void Progress(Long64_t total, Long64_t processed); Update progress bar and status labels. void Progress(Long64_t total, Long64_t processed, Long64_t bytesread, Float_t initTime, Float_t procTime, Float_t evtrti, Float_t mbrti, Int_t actw, Int_t tses, Float_t eses); New version of Progress (just forward to the old version; for the time being). void ProgressLocal(Long64_t total, Long64_t processed); Update progress bar and status labels. void IndicateStop(Bool_t aborted); Indicate that Cancel or Stop was clicked. void ResetProgressDialog(const char* selec, Int_t files, Long64_t first, Long64_t entries); Reset progress frame information fields. void OnBtnFinalize(); Finalize query. void OnBtnStop(); Stop processing query. void OnBtnShowLog(); Show query log. void OnBtnRetrieve(); Retrieve query. void OnBtnAbort(); Abort processing query. void OnBtnSubmit(); Submit query. void UpdateButtons(TQueryDescription* desc); Update buttons state for the current query status. void UpdateInfos(); Update query information (header) text view. TGTab * GetTab() const; { return fTab; }. TSessionQueryFrame(TGWindow* parent, Int_t w, Int_t h). TCanvas * GetStatsCanvas() const; { return fStatsCanvas; }. TEditQueryFrame * GetQueryEditFrame() const; { return fFD; }. void Progress(Long64_t total, Long64_t processed). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyrig",MatchSource.WIKI,root/html604/TSessionQueryFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionQueryFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:4118,Availability,Error,Error,4118,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetAddress() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*GetConfigText() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetD",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:4247,Availability,error,error,4247," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetAddress() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*GetConfigText() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize(",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:4331,Availability,error,error,4331,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetAddress() const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; const char*GetConfigText() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*T",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:18106,Availability,mask,mask,18106,,MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21008,Deployability,configurat,configuration,21008,":fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAdd""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { retu",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21076,Deployability,update,update,21076,"rame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAdd""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return f",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21209,Deployability,configurat,configuration,21209,"Add""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { r",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21281,Deployability,configurat,configuration,21281,"e*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21421,Deployability,configurat,configuration,21421,"kButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(co",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21493,Deployability,configurat,configuration,21493,"s text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str)",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21537,Deployability,Update,Update,21537,"tion name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str); { fTxtAddress->SetText(str); }. void SetPortNumber(Int_t port); { fNumPort->SetIntNumber(po",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21572,Deployability,Update,Update,21572,"tion name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str); { fTxtAddress->SetText(str); }. void SetPortNumber(Int_t port); { fNumPort->SetIntNumber(po",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:10400,Integrability,Message,Message,10400," const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsSync() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOnBtnAddClicked(); voidOnBtnConnectClicked(); voidOnBtnDeleteClicked(); voidOnBtnNewServerClicked(); voidOnConfigFileClicked(); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionServerFrame&operator=(const TSessionServerFrame&); vir",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21700,Integrability,message,messages,21700,"e main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str); { fTxtAddress->SetText(str); }. void SetPortNumber(Int_t port); { fNumPort->SetIntNumber(port); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. void SetConfigText(const char",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:125,Modifiability,inherit,inheritance,125,". TSessionServerFrame. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionServerFrame. class TSessionServerFrame: public TGCompositeFrame. TSessionViewer. Widget used to manage PROOF or local sessions, PROOF connections,; queries construction and results handling. Function Members (Methods); public:. virtual~TSessionServerFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:8961,Modifiability,Inherit,InheritsFrom,8961,"Frame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tHandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsSync() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_t",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:9027,Modifiability,Inherit,InheritsFrom,9027,"); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tHandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsSync() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout();",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:20710,Modifiability,Inherit,Inheritance,20710,"eFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAdd""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for sessio",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21008,Modifiability,config,configuration,21008,":fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAdd""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { retu",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21209,Modifiability,config,configuration,21209,"Add""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { r",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21281,Modifiability,config,configuration,21281,"e*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21421,Modifiability,config,configuration,21421,"kButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(co",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21493,Modifiability,config,configuration,21493,"s text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str)",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:8671,Security,Hash,Hash,8671,"Atom_t, Int_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tHandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:21144,Security,expose,expose,21144,"onymous)TGFrame::kDeleteWindowCalled. private:. TGTextButton*fBtnAdd""Add"" button; TGTextButton*fBtnConnect""Connect"" button; TGCompositeFrame*fFrmNewServermain group frame; TGNumberEntry*fLogLevellog (debug) level selector; TGNumberEntry*fNumPortport number selector; TGCheckButton*fSyncsync / async flag selector; TGTextEntry*fTxtAddressserver address text entry; TGTextEntry*fTxtConfigconfiguration file text entry; TGTextEntry*fTxtNameconnection name text entry; TGTextEntry*fTxtUsrNameuser name text entry; TSessionViewer*fViewerpointer on the main viewer. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TSessionServerFrame. Function documentation; TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); Constructor. ~TSessionServerFrame(); Destructor. void Build(TSessionViewer* gui); Build server configuration frame. void SettingsChanged(); Settings have changed, update GUI accordingly. Bool_t HandleExpose(Event_t* event); Handle expose event in server frame. void OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { retur",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:13812,Testability,log,log,13812,"undColor(Pixel_t back); virtual voidTGWindow::SetBackgroundPixmap(Pixmap_t pixmap); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTGCompositeFrame::SetCleanup(Int_t mode = kLocalCleanup); voidSetConfigText(const char* str); voidSetConnectEnabled(Bool_t on = kTRUE); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetName(const char* str); static voidTObject::SetObjectStat(Bool_t stat); voidSetPortNumber(Int_t port); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetSync(Bool_t sync); voidSettingsChanged(); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUserName(const char* str); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObjec",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:14817,Testability,Test,TestBit,14817,"positeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetName(const char* str); static voidTObject::SetObjectStat(Bool_t stat); voidSetPortNumber(Int_t port); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetSync(Bool_t sync); voidSettingsChanged(); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUserName(const char* str); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionServerFrame(const TSessionServerFrame&); TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); voidUpdate(TSessionDescription* desc); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:14856,Testability,Test,TestBits,14856,"positeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLogLevel(Int_t log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetName(const char* str); static voidTObject::SetObjectStat(Bool_t stat); voidSetPortNumber(Int_t port); virtual voidTGFrame::SetSize(const TGDimension& s); voidSetSync(Bool_t sync); voidSettingsChanged(); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUserName(const char* str); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionServerFrame(const TSessionServerFrame&); TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h); virtual voidTGFrame::UnmapWindow(); voidUpdate(TSessionDescription* desc); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:22611,Testability,log,log,22611,"id OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str); { fTxtAddress->SetText(str); }. void SetPortNumber(Int_t port); { fNumPort->SetIntNumber(port); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. void SetConfigText(const char* str); { fTxtConfig->SetText(str); }. void SetUserName(const char* str); { fTxtUsrName->SetText(str); }. void SetSync(Bool_t sync). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:22643,Testability,log,log,22643,"id OnConfigFileClicked(); Browse configuration files. void OnBtnDeleteClicked(); Delete selected session configuration (remove it from the list). void OnBtnConnectClicked(); Connect to selected server. void OnBtnNewServerClicked(); Reset server configuration fields. void OnBtnAddClicked(); Add newly created session configuration in the list of sessions. void Update(TSessionDescription* desc); Update fields with values from session description desc. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t parm2); Process messages for session server frame.; Used to navigate between text entry fields. const char * GetName() const; { return fQueryName; }. TSessionServerFrame(TGWindow* parent, Int_t w, Int_t h). const char * GetAddress() const; { return fTxtAddress->GetText(); }. Int_t GetPortNumber() const; { return fNumPort->GetIntNumber(); }. Int_t GetLogLevel() const; { return fLogLevel->GetIntNumber(); }. const char * GetConfigText() const; { return fTxtConfig->GetText(); }. const char * GetUserName() const; { return fTxtUsrName->GetText(); }. Bool_t IsSync() const; { return (Bool_t)(fSync->GetState() == kButtonDown); }. void SetAddEnabled(Bool_t on = kTRUE). void SetConnectEnabled(Bool_t on = kTRUE). void SetName(const char* str); { fTxtName->SetText(str); }. void SetAddress(const char* str); { fTxtAddress->SetText(str); }. void SetPortNumber(Int_t port); { fNumPort->SetIntNumber(port); }. void SetLogLevel(Int_t log); { fLogLevel->SetIntNumber(log); }. void SetConfigText(const char* str); { fTxtConfig->SetText(str); }. void SetUserName(const char* str); { fTxtUsrName->SetText(str); }. void SetSync(Bool_t sync). » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionServerFrame.html:1444,Usability,Clear,Clear,1444," virtual~TSessionServerFrame(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); voidBuild(TSessionViewer* gui); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void",MatchSource.WIKI,root/html604/TSessionServerFrame.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionServerFrame.html
https://root.cern/root/html604/TSessionViewer.html:4371,Availability,Error,Error,4371,"; voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnableTimer(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSessionDescription*GetActDesc() const; virtual Pixel_tTGFrame::GetBackground() const; const TGPicture*GetBasePict() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGPopupMenu*GetCascadeMenu() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resour",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:4500,Availability,error,error,4500,"ect::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnableTimer(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSessionDescription*GetActDesc() const; virtual Pixel_tTGFrame::GetBackground() const; const TGPicture*GetBasePict() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGPopupMenu*GetCascadeMenu() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; TGHProgressBar*GetConnectProg() const; TContextMenu*GetContextMenu() const; ",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:4584,Availability,error,error,4584,", Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); voidEnableTimer(); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; TSessionDescription*GetActDesc() const; virtual Pixel_tTGFrame::GetBackground() const; const TGPicture*GetBasePict() const; static const TGGC&TGFrame::GetBckgndGC(); TList*TGMainFrame::GetBindList() const; static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGPopupMenu*GetCascadeMenu() const; voidTGMainFrame::GetClassHints(const char*& className, const char*& resourceName) const; TGClient*TGObject::GetClient() const; TGHProgressBar*GetConnectProg() const; TContextMenu*GetContextMenu() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:21294,Availability,mask,mask,21294,,MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:26347,Deployability,configurat,configuration,26347,conbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; const TGPicture*fQueryConconnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←;,MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:26818,Deployability,configurat,configuration,26818,"in sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTim",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:26965,Deployability,Update,UpdateListOfProofs,26965,"ionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:26987,Deployability,Update,Update,26987,"ionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:27032,Deployability,Update,UpdateListOfSessions,27032,"tatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:27056,Deployability,Update,Update,27056,"tatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:27159,Deployability,configurat,configuration,27159,"oolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof sessio",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:27570,Deployability,configurat,configuration,27570," Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void Show",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:28519,Deployability,Update,UpdateListOfPackages,28519,"); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; ",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:28543,Deployability,Update,Update,28543,"); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; ",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:29176,Deployability,configurat,configuration,29176,"Session(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. ",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:12042,Integrability,Message,Message,12042,"IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); voidLogMessage(const char* msg, Bool_t all); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; voidMyHandleMenu(Int_t); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidOnCascadeMenu(); voidOnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); voidOnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSessionVi",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:29001,Integrability,message,message,29001," in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * G",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:29261,Integrability,message,messages,29261,"ser if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. const TGPicture * GetProofDisconPict() const; { return fProofDiscon; }. const TGPicture *",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:29328,Integrability,message,messages,29328,"rrently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. const TGPicture * GetProofDisconPict() const; { return fProofDiscon; }. const TGPicture * GetQueryConPict() const; { return fQueryCon; }. const TGPicture * GetQue",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:120,Modifiability,inherit,inheritance,120,". TSessionViewer. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GUI; » SESSIONVIEWER; » TSessionViewer. class TSessionViewer: public TGMainFrame. TSessionViewer. Widget used to manage PROOF or local sessions, PROOF connections,; queries construction and results handling. Function Members (Methods); public:. virtual~TSessionViewer(); voidTObject::AbstractMethod(const char* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); voidChangeRightLogo(const char* name); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); voidCleanupSession(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, ",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:10532,Modifiability,Inherit,InheritsFrom,10532,"ual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tHandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; Bool_tIsAutoSave() const; Bool_tIsBusy() const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameE",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:10598,Modifiability,Inherit,InheritsFrom,10598,"ol_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tHandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; Bool_tIsAutoSave() const; Bool_tIsBusy() const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidT",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:24367,Modifiability,config,config,24367, static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled; static TGMainFrame::(anonymous)TGMainFrame::kDontCallClose. private:. TSessionDescription*fActDescactual session description; TGFrame*fActFrameactual (displayed) frame; Bool_tfAutoSavekTRUE if config is to be saved on exit; const TGPicture*fBaseIconbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; con,MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:26347,Modifiability,config,configuration,26347,conbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; const TGPicture*fQueryConconnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←;,MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:26376,Modifiability,Inherit,Inheritance,26376,"nnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clic",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:26818,Modifiability,config,configuration,26818,"in sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTim",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:27159,Modifiability,config,configuration,27159,"oolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof sessio",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:27176,Modifiability,config,config,27176,"oolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof sessio",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:27570,Modifiability,config,configuration,27570," Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void Show",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:29176,Modifiability,config,configuration,29176,"Session(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. ",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:27965,Performance,Load,Load,27965,"oid UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, I",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:10242,Security,Hash,Hash,10242,", Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGMainFrame::HandleKey(Event_t* event); virtual Bool_tTGMainFrame::HandleMotion(Event_t* event); virtual Bool_tTGMainFrame::HandleSelection(Event_t* event); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGMainFrame::HandleSelectionRequest(Event_t* event); virtual Bool_tHandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; Bool_tIsAutoSave() const; Bool_tIsBusy() const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeF",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:16057,Testability,log,log,16057,"lassHints(const char* className, const char* resourceName); virtual voidTGCompositeFrame::SetCleanup(Int_t mode = kLocalCleanup); voidTGFrame::SetDNDSource(Bool_t onoff); voidTGFrame::SetDNDTarget(Bool_t onoff); virtual voidTGFrame::SetDragType(Int_t type); virtual voidTGFrame::SetDrawOption(Option_t* = """"); virtual voidTGFrame::SetDropType(Int_t type); static voidTObject::SetDtorOnly(void* obj); virtual voidTGCompositeFrame::SetEditable(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetEditDisabled(UInt_t on = 1); virtual voidTGFrame::SetForegroundColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGFrame::SetHeight(UInt_t h); voidTGMainFrame::SetIconName(const char* name); const TGPicture*TGMainFrame::SetIconPixmap(const char* iconName); voidTGMainFrame::SetIconPixmap(char** xpm_array); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); voidSetLogWindow(TSessionLogView* log); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); voidTGMainFrame::SetMWMHints(UInt_t value, UInt_t funcs, UInt_t input); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); voidShowEnabledPackages(); virtual voidTGCompositeFrame::S",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:17529,Testability,Test,TestBit,17529," virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); voidShowEnabledPackages(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); voidShowInfo(const char* txt); voidShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidShowPackages(); voidShowStatus(); voidStartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); voidStartViewer(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionViewer(const TSessionViewer&); TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGFrame::UnmapWindow(); voidUpdateListOfPackages(); voidUpdateListOfProofs(); voidUpdateListOfSessions(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidWriteConfiguration(const char* filename = 0).",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:17568,Testability,Test,TestBits,17568," virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGMainFrame::SetWindowName(const char* name = 0); voidTGMainFrame::SetWMPosition(Int_t x, Int_t y); voidTGMainFrame::SetWMSize(UInt_t w, UInt_t h); voidTGMainFrame::SetWMSizeHints(UInt_t wmin, UInt_t hmin, UInt_t wmax, UInt_t hmax, UInt_t winc, UInt_t hinc); voidTGMainFrame::SetWMState(EInitialState state); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); voidShowEnabledPackages(); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); voidShowInfo(const char* txt); voidShowLog(const char* queryref); virtual voidShowMembers(TMemberInspector& insp) const; voidShowPackages(); voidShowStatus(); voidStartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); voidStartViewer(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; voidTerminate(); Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSessionViewer(const TSessionViewer&); TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); virtual voidTGFrame::UnmapWindow(); voidUpdateListOfPackages(); voidUpdateListOfProofs(); voidUpdateListOfSessions(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; voidWriteConfiguration(const char* filename = 0).",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:24998,Testability,log,log,24998,conbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; const TGPicture*fQueryConconnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←;,MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:27748,Testability,log,logo,27748,"in Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the co",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:27924,Testability,Log,LogMessage,27924,"oid UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, I",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:27979,Testability,log,log,27979,"oid UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, I",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:27994,Testability,log,log,27994,"oid UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, I",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:28755,Testability,log,log,28755," right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessage(const char* msg, Bool_t all); Load/append a log msg in the log frame. void QueryResultReady(char* query); Handle signal ""query result ready"" coming from Proof session. void CleanupSession(); Clean-up Proof session. void ResetSession(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFr",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:31109,Testability,log,log,31109," TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. const TGPicture * GetProofDisconPict() const; { return fProofDiscon; }. const TGPicture * GetQueryConPict() const; { return fQueryCon; }. const TGPicture * GetQueryDisconPict() const; { return fQueryDiscon; }. const TGPicture * GetBasePict() const; { return fBaseIcon; }. TGPopupMenu * GetPopupSrv() const; { return fPopupSrv; }. TGPopupMenu * GetPopupQry() const; { return fPopupQry; }. TContextMenu * GetContextMenu() const; { return fContextMenu; }. TGStatusBar * GetStatusBar() const; { return fStatusBar; }. TGHProgressBar * GetConnectProg() const; { return fConnectProg; }. TGPopupMenu * GetCascadeMenu() const; { return fCascadeMenu; }. TGPopupMenu * GetOptionsMenu() const; { return fOptionsMenu; }. Bool_t IsBusy() const; { return fBusy; }. Bool_t IsAutoSave() const; { return fAutoSave; }. void SetBusy(Bool_t busy = kTRUE); { fBusy = busy; }. void SetChangePic(Bool_t change); { fChangePic = change;}. void SetLogWindow(TSessionLogView* log); { fLogWindow = log; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:31130,Testability,log,log,31130," TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. const TGPicture * GetProofDisconPict() const; { return fProofDiscon; }. const TGPicture * GetQueryConPict() const; { return fQueryCon; }. const TGPicture * GetQueryDisconPict() const; { return fQueryDiscon; }. const TGPicture * GetBasePict() const; { return fBaseIcon; }. TGPopupMenu * GetPopupSrv() const; { return fPopupSrv; }. TGPopupMenu * GetPopupQry() const; { return fPopupQry; }. TContextMenu * GetContextMenu() const; { return fContextMenu; }. TGStatusBar * GetStatusBar() const; { return fStatusBar; }. TGHProgressBar * GetConnectProg() const; { return fConnectProg; }. TGPopupMenu * GetCascadeMenu() const; { return fCascadeMenu; }. TGPopupMenu * GetOptionsMenu() const; { return fOptionsMenu; }. Bool_t IsBusy() const; { return fBusy; }. Bool_t IsAutoSave() const; { return fAutoSave; }. void SetBusy(Bool_t busy = kTRUE); { fBusy = busy; }. void SetChangePic(Bool_t change); { fChangePic = change;}. void SetLogWindow(TSessionLogView* log); { fLogWindow = log; }. » Author: Marek Biskup, Jakub Madejczyk, Bertrand Bellenot 10/08/2005 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/sessionviewer:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:1561,Usability,Clear,Clear,1561,"ar* method) const; virtual voidTGFrame::Activate(Bool_t); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; virtual Bool_tTGMainFrame::BindKey(const TGWindow* w, Int_t keycode, Int_t modifier) const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidBuild(); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); voidChangeRightLogo(const char* name); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); voidCleanupSession(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidCloseWindow(); voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTGFrame::Delete(Option_t* = """"); voidDeleteQuery(); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::DestroyWindow(); voidDisableTimer()",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:24663,Usability,progress bar,progress bar,24663,conbase list tree icon picture; Bool_tfBusyKTRUE if busy i.e : connecting; TGPopupMenu*fCascadeMenuoptions menu entry; Bool_tfChangePicKTRUE if animation active; TStringfConfigFileconfiguration file name; TGHProgressBar*fConnectProgconnection progress bar; TContextMenu*fContextMenuinput/output objects context menu; time_tfElapsedtime of connection; TGPopupMenu*fFileMenufile menu entry; TGPopupMenu*fHelpMenuhelp menu entry; TGHorizontalFrame*fHf; TSessionInputFrame*fInputFrameinput frame; const TGPicture*fLocallocal session icon picture; TSessionLogView*fLogWindowexternal log window; TGMenuBar*fMenuBarapplication main menu bar; TGPopupMenu*fOptionsMenuoptions menu entry; TSessionOutputFrame*fOutputFrameoutput frame; TGPopupMenu*fPopupQryquery related popup menu; TGPopupMenu*fPopupSrvserver related popup menu; const TGPicture*fProofConconnected server icon picture; const TGPicture*fProofDiscondisconnected server icon picture; const TGPicture*fQueryConconnected(?) query icon picture; const TGPicture*fQueryDiscondisconnected(?) query icon picture; TSessionQueryFrame*fQueryFrameright side query frame; TGPopupMenu*fQueryMenuquery menu entry; TGIcon*fRightIconassociated picture; TGPicture*fRightIconPicturelower bottom left icon used to show connection status; TSessionServerFrame*fServerFrameright side server frame; TSessionFrame*fSessionFrameright side session frame; TGListTree*fSessionHierarchymain sessions/queries hierarchy list tree; TGListTreeItem*fSessionItembase (main) session list tree item; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←;,MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:26943,Usability,feedback,feedback,26943,"tem; TGPopupMenu*fSessionMenusession menu entry; TList*fSessionslist of sessions; time_tfStarttime of connection; TGStatusBar*fStatusBarbottom status bar; TTimer*fTimertimer used to change icon picture; TGToolBar*fToolBarapplication tool bar; TGCanvas*fTreeViewmain right sessions/queries tree view; UserGroup_t*fUserGroupuser connected to session; TGVerticalFrame*fV1; TGVerticalFrame*fV2; TEnv*fViewerEnvviewer's configuration. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGMainFrame. ←; TSessionViewer. Function documentation; TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320); Main Session viewer constructor. TSessionViewer(const char* title, Int_t x, Int_t y, UInt_t w, UInt_t h); Main Session viewer constructor. void ReadConfiguration(const char* filename = 0); Read configuration file and populate list of sessions; list of queries and list of packages.; Read and set also global options as feedback histos. void UpdateListOfProofs(); Update list of existing Proof sessions. void UpdateListOfSessions(); Update list of existing Proof sessions. void WriteConfiguration(const char* filename = 0); Save actual configuration in config file ""filename"". void Build(); Build main session viewer frame and subframes. ~TSessionViewer(); Destructor. void OnListTreeClicked(TGListTreeItem* entry, Int_t btn, Int_t x, Int_t y); Handle mouse clicks in list tree. void OnListTreeDoubleClicked(TGListTreeItem* entry, Int_t btn); Handle mouse double clicks in list tree (connect to server). void Terminate(); Terminate Session : save configuration, clean temporary files and close; Proof connections. void CloseWindow(); Close main Session Viewer window. void ChangeRightLogo(const char* name); Change the right logo (used for animation). void EnableTimer(); Enable animation timer. void DisableTimer(); Disable animation timer. Bool_t HandleTimer(TTimer* ); Handle animation timer. void LogMessa",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TSessionViewer.html:29156,Usability,feedback,feedback,29156,"Session(); Reset Proof session. void DeleteQuery(); Delete query from list tree and ask user if they want to delete it also; from server. void EditQuery(); Edit currently selected query. void StartViewer(); Start TreeViewer from selected TChain. void ShowPackages(); Query the list of uploaded packages from proof and display it; into a new text window. void UpdateListOfPackages(); Update the list of packages. void ShowEnabledPackages(); Query list of enabled packages from proof and display it; into a new text window. void ShowLog(const char* queryref); Display the content of the temporary log file for queryref; into a new text window. void ShowInfo(const char* txt); Display text in status bar. void ShowStatus(); Retrieve and display Proof status. void StartupMessage(char* msg, Bool_t stat, Int_t curr, Int_t total); Handle startup message (connection progress) coming from Proof session. void MyHandleMenu(Int_t ); Handle session viewer custom popup menus. void OnCascadeMenu(); Handle feedback histograms configuration menu. Bool_t ProcessMessage(Long_t msg, Long_t parm1, Long_t ); Handle messages send to the TSessionViewer object. E.g. all menu entries; messages. TSessionViewer(const char* title = ""ROOT Session Viewer"", UInt_t w = 550, UInt_t h = 320). TSessionServerFrame * GetServerFrame() const; { return fServerFrame; }. TSessionFrame * GetSessionFrame() const; { return fSessionFrame; }. TSessionQueryFrame * GetQueryFrame() const; { return fQueryFrame; }. TSessionOutputFrame * GetOutputFrame() const; { return fOutputFrame; }. TSessionInputFrame * GetInputFrame() const; { return fInputFrame; }. TSessionDescription * GetActDesc() const; { return fActDesc; }. TList * GetSessions() const; { return fSessions; }. TGListTree * GetSessionHierarchy() const; { return fSessionHierarchy; }. TGListTreeItem * GetSessionItem() const; { return fSessionItem; }. const TGPicture * GetLocalPict() const; { return fLocal; }. const TGPicture * GetProofConPict() const; { return fProofCon; }. ",MatchSource.WIKI,root/html604/TSessionViewer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSessionViewer.html
https://root.cern/root/html604/TShape.html:1640,Availability,Error,Error,1640," virtual~TShape(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) c",MatchSource.WIKI,root/html604/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TShape.html
https://root.cern/root/html604/TShape.html:1769,Availability,error,error,1769,"hod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py)",MatchSource.WIKI,root/html604/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TShape.html
https://root.cern/root/html604/TShape.html:1853,Availability,error,error,1853,"; virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption()",MatchSource.WIKI,root/html604/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TShape.html
https://root.cern/root/html604/TShape.html:9391,Energy Efficiency,allocate,allocate,9391,"le_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNumberShape number; TStringTNamed::fTitleobject title; Int_tfVisibilityVisibility flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←. TBRIK; ←. TGTRA. TPARA. TTRAP. TTRD1. TTRD2. TPCON; ←. TPGON. TPolyLineShape. TSPHE.  [more...]. Function documentation; TShape(); Shape default constructor. TShape(const char* name, const char* title, const char* material); Shape normal constructor. TShape(const TShape& ); copy constructor. TShape& operator=(const TShape& ); assignement operator. ~TShape(); Shape default destructor. Int_t ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py); Distance to primitive. void Paint(Option_t* option = """"); This method is used only when a shape is painted outside a TNode. void SetPoints(Double_t* points) const; Set points. void Streamer(TBuffer& ); Stream an object of class TShape. void TransformPoints(Double_t* points, UInt_t NbPnts) const; Tranform points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections) const; We have to set kRawSize (unless already done) to allocate buffer space; before kRaw can be filled. Int_t GetBasicColor() const; Get basic solor. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Stub to avoid forcing implementation at this stage. void SetName(const char* name); { }. TMaterial * GetMaterial() const; {return fMaterial;}. Int_t GetNumber() const; {return fNumber;}. Int_t GetVisibility() const; {return fVisibility;}. void SetVisibility(Int_t vis); {fVisibility = vis;}. » Author: Nenad Buncic 17/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TShape.html
https://root.cern/root/html604/TShape.html:112,Modifiability,inherit,inheritance,112,". TShape. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » G3D; » TShape. class TShape: public TNamed, public TAttLine, public TAttFill, public TAtt3D. This is the base class for all geometry shapes.; The list of shapes currently supported correspond to the shapes; in Geant version 3:; TBRIK,TCONE,TCONS,TGTRA,TPARA,TPCON,TPGON; ,TTRAP,TTRD1,TTRD2,THYPE, TTUBE and TTUBS. The figure below shows instances of all these shapes. This figure; is generated by the ROOT 3-D viewer. /*. */. /*. */. Function Members (Methods); public:. virtual~TShape(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) c",MatchSource.WIKI,root/html604/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TShape.html
https://root.cern/root/html604/TShape.html:3165,Modifiability,Inherit,InheritsFrom,3165,"const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tGetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); ",MatchSource.WIKI,root/html604/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TShape.html
https://root.cern/root/html604/TShape.html:3231,Modifiability,Inherit,InheritsFrom,3231,"t; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tGetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator ne",MatchSource.WIKI,root/html604/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TShape.html
https://root.cern/root/html604/TShape.html:8411,Modifiability,Inherit,Inheritance,8411,"tatic TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNumberShape number; TStringTNamed::fTitleobject title; Int_tfVisibilityVisibility flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←. TBRIK; ←. TGTRA. TPARA. TTRAP. TTRD1. TTRD2. TPCON; ←. TPGON. TPolyLineShape. TSPHE.  [more...]. Function documentation; TShape(); Shape default constructor. TShape(const char* name, const char* title, const char* material); Shape normal constructor. TShape(const TShape& ); copy constructor. TShape& operator=(const TShape& ); assignement operator. ~TShape(); Shape default destructor. Int_t ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py); Distance to primitive. void Paint(Option_t* option = """"); This method is used only when a shape is painted outside a TNode. void SetPoints(Double_t* points) const; Set points. void Streamer(TBuffer& ); Stream an object of class TShape. void TransformPoints(Double_t* points, UInt_t NbPnts) const; Tranform points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections) const; We have to set kRawSize (unless already done) to allocate buffer space; before",MatchSource.WIKI,root/html604/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TShape.html
https://root.cern/root/html604/TShape.html:9551,Safety,avoid,avoid,9551,"le_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNumberShape number; TStringTNamed::fTitleobject title; Int_tfVisibilityVisibility flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←. TBRIK; ←. TGTRA. TPARA. TTRAP. TTRD1. TTRD2. TPCON; ←. TPGON. TPolyLineShape. TSPHE.  [more...]. Function documentation; TShape(); Shape default constructor. TShape(const char* name, const char* title, const char* material); Shape normal constructor. TShape(const TShape& ); copy constructor. TShape& operator=(const TShape& ); assignement operator. ~TShape(); Shape default destructor. Int_t ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py); Distance to primitive. void Paint(Option_t* option = """"); This method is used only when a shape is painted outside a TNode. void SetPoints(Double_t* points) const; Set points. void Streamer(TBuffer& ); Stream an object of class TShape. void TransformPoints(Double_t* points, UInt_t NbPnts) const; Tranform points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections) const; We have to set kRawSize (unless already done) to allocate buffer space; before kRaw can be filled. Int_t GetBasicColor() const; Get basic solor. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Stub to avoid forcing implementation at this stage. void SetName(const char* name); { }. TMaterial * GetMaterial() const; {return fMaterial;}. Int_t GetNumber() const; {return fNumber;}. Int_t GetVisibility() const; {return fVisibility;}. void SetVisibility(Int_t vis); {fVisibility = vis;}. » Author: Nenad Buncic 17/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TShape.html
https://root.cern/root/html604/TShape.html:3055,Security,Hash,Hash,3055,"tual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNumber() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tGetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delet",MatchSource.WIKI,root/html604/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TShape.html
https://root.cern/root/html604/TShape.html:6427,Testability,Test,TestBit,6427,"Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidSetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTransformPoints(Double_t* points, UInt_t NbPnts) const; TShape(); TShape(const TShape&); TShape(const char* name, const char* title, const char* material); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TShape.html
https://root.cern/root/html604/TShape.html:6466,Testability,Test,TestBits,6466,"Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidSetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual voidSetPoints(Double_t* points) const; virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidSetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidTAtt3D::Sizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTransformPoints(Double_t* points, UInt_t NbPnts) const; TShape(); TShape(const TShape&); TShape(const char* name, const char* title, const char* material); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TShape.html
https://root.cern/root/html604/TShape.html:9543,Testability,Stub,Stub,9543,"le_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tfNumberShape number; TStringTNamed::fTitleobject title; Int_tfVisibilityVisibility flag. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←. TBRIK; ←. TGTRA. TPARA. TTRAP. TTRD1. TTRD2. TPCON; ←. TPGON. TPolyLineShape. TSPHE.  [more...]. Function documentation; TShape(); Shape default constructor. TShape(const char* name, const char* title, const char* material); Shape normal constructor. TShape(const TShape& ); copy constructor. TShape& operator=(const TShape& ); assignement operator. ~TShape(); Shape default destructor. Int_t ShapeDistancetoPrimitive(Int_t numPoints, Int_t px, Int_t py); Distance to primitive. void Paint(Option_t* option = """"); This method is used only when a shape is painted outside a TNode. void SetPoints(Double_t* points) const; Set points. void Streamer(TBuffer& ); Stream an object of class TShape. void TransformPoints(Double_t* points, UInt_t NbPnts) const; Tranform points (LocalToMaster). void FillBuffer3D(TBuffer3D& buffer, Int_t reqSections) const; We have to set kRawSize (unless already done) to allocate buffer space; before kRaw can be filled. Int_t GetBasicColor() const; Get basic solor. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Stub to avoid forcing implementation at this stage. void SetName(const char* name); { }. TMaterial * GetMaterial() const; {return fMaterial;}. Int_t GetNumber() const; {return fNumber;}. Int_t GetVisibility() const; {return fVisibility;}. void SetVisibility(Int_t vis); {fVisibility = vis;}. » Author: Nenad Buncic 17/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/g3d:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TShape.html
https://root.cern/root/html604/TShape.html:990,Usability,Clear,Clear,990," virtual~TShape(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) c",MatchSource.WIKI,root/html604/TShape.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TShape.html
https://root.cern/root/html604/TSignalHandler.html:3634,Availability,Error,Error,3634,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ESignalsGetSignal() const; virtual const char*TObj",MatchSource.WIKI,root/html604/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSignalHandler.html
https://root.cern/root/html604/TSignalHandler.html:3763,Availability,error,error,3763," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ESignalsGetSignal() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidHandleDelayedSignal(); virtual Bool_tTObject::HandleTimer(",MatchSource.WIKI,root/html604/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSignalHandler.html
https://root.cern/root/html604/TSignalHandler.html:3847,Availability,error,error,3847,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ESignalsGetSignal() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidHandleDelayedSignal(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const",MatchSource.WIKI,root/html604/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSignalHandler.html
https://root.cern/root/html604/TSignalHandler.html:5789,Integrability,Message,Message,5789,"l_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTSysEvtHandler::IsActive() const; Bool_tIsAsync() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsSync() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTSysEvtHandler::Notified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSignalHandler&operator=(const TSignalHandler&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidTSysEvtHandler:",MatchSource.WIKI,root/html604/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSignalHandler.html
https://root.cern/root/html604/TSignalHandler.html:120,Modifiability,inherit,inheritance,120,". TSignalHandler. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » BASE; » TSignalHandler. class TSignalHandler: public TSysEvtHandler. TSysEvtHandler. Abstract base class for handling system events. Function Members (Methods); public:. virtual~TSignalHandler(); voidTObject::AbstractMethod(const char* method) const; voidTSysEvtHandler::Activate(); virtual voidTSysEvtHandler::Activated()SIGNAL ; virtual voidAdd(); virtual voidTSysEvtHandler::Added()SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; voidTSysEvtHandler::DeActivate(); virtual voidTSysEvtHandler::DeActivated()SIGNAL ; voidDelay(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const c",MatchSource.WIKI,root/html604/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSignalHandler.html
https://root.cern/root/html604/TSignalHandler.html:5074,Modifiability,Inherit,InheritsFrom,5074,"bject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ESignalsGetSignal() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidHandleDelayedSignal(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTSysEvtHandler::IsActive() const; Bool_tIsAsync() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsSync() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTSysEvtHandler::Notified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromV",MatchSource.WIKI,root/html604/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSignalHandler.html
https://root.cern/root/html604/TSignalHandler.html:5140,Modifiability,Inherit,InheritsFrom,5140,"ect::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ESignalsGetSignal() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidHandleDelayedSignal(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTSysEvtHandler::IsActive() const; Bool_tIsAsync() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsSync() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTSysEvtHandler::Notified()SIGNAL ; virtual Bool_tNotify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::",MatchSource.WIKI,root/html604/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSignalHandler.html
https://root.cern/root/html604/TSignalHandler.html:9956,Modifiability,Inherit,Inheritance,9956,"StatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDelayDelay handling of signal (use fDelay in Notify()); TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; ESignalsfSignalSignal to be handled; Bool_tTQObject::fSignalsBlocked! flag used for suppression of signals; Bool_tfSyncSynchronous or a-synchronous signal; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals. Class Charts. Inheritance Chart:. TObject. TQObject. ←; TSysEvtHandler. ←; TSignalHandler. Function documentation; TSignalHandler(ESignals sig, Bool_t sync = kTRUE); Create signal event handler. Bool_t Notify(); Notify when signal occurs. void Add(); Add signal handler to system signal handler list. void Remove(); Remove signal handler from system signal handler list. void HandleDelayedSignal(). TSignalHandler(); { }. TSignalHandler(ESignals sig, Bool_t sync = kTRUE). virtual ~TSignalHandler(); { Remove(); }. void Delay(); { fDelay = 1; }. ESignals GetSignal() const; { return fSignal; }. void SetSignal(ESignals sig); { fSignal = sig; }. Bool_t IsSync() const; { return fSync; }. Bool_t IsAsync() const; { return !fSync; }. » Author: Fons Rademakers 16/09/95 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/base:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please sen",MatchSource.WIKI,root/html604/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSignalHandler.html
https://root.cern/root/html604/TSignalHandler.html:4876,Security,Hash,Hash,4876,"::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; TList*TQObject::GetListOfClassSignals() const; TList*TQObject::GetListOfConnections() const; TList*TQObject::GetListOfSignals() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; ESignalsGetSignal() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidHandleDelayedSignal(); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTObject::Hash() const; virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTSysEvtHandler::IsActive() const; Bool_tIsAsync() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tIsSync() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTSysEvtHandler::Notified()SIGNAL ; virtual Bo",MatchSource.WIKI,root/html604/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSignalHandler.html
https://root.cern/root/html604/TSignalHandler.html:7552,Testability,Test,TestBit,7552,"t::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSignalHandler&operator=(const TSignalHandler&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidTSysEvtHandler::Removed()SIGNAL ; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetSignal(ESignals sig); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSignalHandler(const TSignalHandler&); TSignalHandler(ESignals sig, Bool_t sync = kTRUE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSignalHandler.html
https://root.cern/root/html604/TSignalHandler.html:7591,Testability,Test,TestBits,7591,"t::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSignalHandler&operator=(const TSignalHandler&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidRemove(); virtual voidTSysEvtHandler::Removed()SIGNAL ; voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetSignal(ESignals sig); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSignalHandler(const TSignalHandler&); TSignalHandler(ESignals sig, Bool_t sync = kTRUE); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSignalHandler.html
https://root.cern/root/html604/TSignalHandler.html:1087,Usability,Clear,Clear,1087," virtual~TSignalHandler(); voidTObject::AbstractMethod(const char* method) const; voidTSysEvtHandler::Activate(); virtual voidTSysEvtHandler::Activated()SIGNAL ; virtual voidAdd(); virtual voidTSysEvtHandler::Added()SIGNAL ; virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); virtual voidTObject::Copy(TObject& object) const; voidTSysEvtHandler::DeActivate(); virtual voidTSysEvtHandler::DeActivated()SIGNAL ; voidDelay(); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual voidTQObject::Destroyed()SIGNAL ; Bool_tTQObject::Disconnect(const c",MatchSource.WIKI,root/html604/TSignalHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSignalHandler.html
https://root.cern/root/html604/TSlave.html:1397,Availability,Error,Error,1397," virtual~TSlave(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetArchCompiler() const; Long64_tGetBytesRead() const; Float_tGetCpuTime() const; virtual Option_t*TOb",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:1526,Availability,error,error,1526," virtual~TSlave(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetArchCompiler() const; Long64_tGetBytesRead() const; Float_tGetCpuTime() const; virtual Option_t*TOb",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:1610,Availability,error,error,1610,"onst char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetArchCompiler() const; Long64_tGetBytesRead() const; Float_tGetCpuTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*GetGroup() const; virtual const char*TObject::GetIconName() const; const char*GetImage() const; TFileHandler*GetInputHandler() const; const char*GetMsd() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOrdinal() const; Int_tGetParallel() const; Int_tGetPerfIdx() const; Int_tGetPort() const; TProof*GetProof() const; const char*GetProofWorkDir() const; Int_tGetProtocol() const; ",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:10661,Availability,Ping,Ping,10661,"echnology specific and is overwritten by derived; classes. void Init(TSocket* s, Int_t stype); Init a PROOF slave object using the connection opened via s. Used to; avoid double opening when an attempt via TXSlave found a remote proofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { ret",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:10669,Availability,Ping,Ping,10669,"echnology specific and is overwritten by derived; classes. void Init(TSocket* s, Int_t stype); Init a PROOF slave object using the connection opened via s. Used to; avoid double opening when an attempt via TXSlave found a remote proofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { ret",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:10742,Availability,error,error,10742,"d; classes. void Init(TSocket* s, Int_t stype); Init a PROOF slave object using the connection opened via s. Used to; avoid double opening when an attempt via TXSlave found a remote proofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { return kTRUE; }. const char * GetName() const; { r",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:10861,Availability,error,error,10861,"void double opening when an attempt via TXSlave found a remote proofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { return kTRUE; }. const char * GetName() const; { return fName; }. const char * GetImage() const; { return fImage; }. const char * GetProofWorkDir() const; { return fProo",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:11307,Availability,recover,recovered,11307,"ave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { return kTRUE; }. const char * GetName() const; { return fName; }. const char * GetImage() const; { return fImage; }. const char * GetProofWorkDir() const; { return fProofWorkDir; }. const char * GetWorkDir() const; { return fWorkDir; }. const char * GetUser() const; { return fUser; }. const char * GetGroup() const; { return fGroup; }. Int_t GetPort() const; { return fPort; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetPerfIdx() const; { return fPerfIdx; }. Int_t GetProtocol() const; { return fProtocol; }. TSocket * GetSocket() const; { return fSocket; }. TProof ",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:8533,Integrability,protocol,protocol,8533,"::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TSlave::EStatusBitskOutputRequested; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TSlave::ESlaveTypekSlave; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfArchCompBuild architecture, compiler on worker (e.g. linux-gcc345); Long64_tfBytesReadbytes read by slave (info is obtained from slave); Float_tfCpuTimeCPU time spent executing commands (info obtained from slave); TStringfGroupslave's group id; TStringfImageslave's image name; TFileHandler*fInputinput handler related to this slave; TStringfMsdmass storage domain of slave; TStringfNameslave's hostname; TStringfOrdinalslave's ordinal number; Int_tfParallelnumber of active slaves; Int_tfPerfIdxrelative CPU performance index; Int_tfPortslave's port number; TProof*fProofproof cluster to which slave belongs; TStringfProofWorkDirbase proofserv working directory (info obtained from slave); Int_tfProtocolslave's protocol level; TStringfROOTVersROOT version run by worker; Float_tfRealTimereal time spent executing commands (info obtained from slave); TStringfSessionTagunique tag for ths worker process; TSlave::ESlaveTypefSlaveTypetype of slave (either kMaster or kSlave); TSocket*fSocketsocket to slave; Int_tfStatusremote return status; TStringfUserslave's user id; TStringfWorkDirslave's working directory (info obtained from slave). private:. static TSlave_tfgTXSlaveHook. Class Charts. Inheritance Chart:. TObject. ←; TSlave. ←. TSlaveLite. TXSlave. Function documentation; TSlave(const char* host, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1); Create a PROOF slave object. Called via the TProof ctor. TSlave(); Default constructor used by derived classes. void Init(const char* host, Int_t port, Int_t stype",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:11040,Integrability,message,message,11040," TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { return kTRUE; }. const char * GetName() const; { return fName; }. const char * GetImage() const; { return fImage; }. const char * GetProofWorkDir() const; { return fProofWorkDir; }. const char * GetWorkDir() const; { return fWorkDir; }. const char * GetUser() const; { return fUser; }. const char * GetGroup() const; { return fGroup; }. ",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:112,Modifiability,inherit,inheritance,112,". TSlave. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TSlave. class TSlave: public TObject. TSlave. This class describes a PROOF slave server.; It contains information like the slaves host name, ordinal number,; performance index, socket, etc. Objects of this class can only be; created via TProof member functions. Function Members (Methods); public:. virtual~TSlave(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetArchCompiler() const; Long64_tGetBytesRead() const; Float_tGetCpuTime() const; virtual Option_t*TOb",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:3122,Modifiability,Inherit,InheritsFrom,3122,"conName() const; const char*GetImage() const; TFileHandler*GetInputHandler() const; const char*GetMsd() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOrdinal() const; Int_tGetParallel() const; Int_tGetPerfIdx() const; Int_tGetPort() const; TProof*GetProof() const; const char*GetProofWorkDir() const; Int_tGetProtocol() const; Float_tGetRealTime() const; const char*GetROOTVersion() const; const char*GetSessionTag() const; Int_tGetSlaveType() const; TSocket*GetSocket() const; Int_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; const char*GetWorkDir() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:3188,Modifiability,Inherit,InheritsFrom,3188,"tHandler() const; const char*GetMsd() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOrdinal() const; Int_tGetParallel() const; Int_tGetPerfIdx() const; Int_tGetPort() const; TProof*GetProof() const; const char*GetProofWorkDir() const; Int_tGetProtocol() const; Float_tGetRealTime() const; const char*GetROOTVersion() const; const char*GetSessionTag() const; Int_tGetSlaveType() const; TSocket*GetSocket() const; Int_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; const char*GetWorkDir() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Op",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:9013,Modifiability,Inherit,Inheritance,9013,"rom slave); TStringfGroupslave's group id; TStringfImageslave's image name; TFileHandler*fInputinput handler related to this slave; TStringfMsdmass storage domain of slave; TStringfNameslave's hostname; TStringfOrdinalslave's ordinal number; Int_tfParallelnumber of active slaves; Int_tfPerfIdxrelative CPU performance index; Int_tfPortslave's port number; TProof*fProofproof cluster to which slave belongs; TStringfProofWorkDirbase proofserv working directory (info obtained from slave); Int_tfProtocolslave's protocol level; TStringfROOTVersROOT version run by worker; Float_tfRealTimereal time spent executing commands (info obtained from slave); TStringfSessionTagunique tag for ths worker process; TSlave::ESlaveTypefSlaveTypetype of slave (either kMaster or kSlave); TSocket*fSocketsocket to slave; Int_tfStatusremote return status; TStringfUserslave's user id; TStringfWorkDirslave's working directory (info obtained from slave). private:. static TSlave_tfgTXSlaveHook. Class Charts. Inheritance Chart:. TObject. ←; TSlave. ←. TSlaveLite. TXSlave. Function documentation; TSlave(const char* host, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1); Create a PROOF slave object. Called via the TProof ctor. TSlave(); Default constructor used by derived classes. void Init(const char* host, Int_t port, Int_t stype); Init a PROOF slave object. Called via the TSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void Init(TSocket* s, Int_t stype); Init a PROOF slave object using the connection opened via s. Used to; avoid double opening when an attempt via TXSlave found a remote proofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObjec",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:425,Performance,perform,performance,425,". TSlave. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TSlave. class TSlave: public TObject. TSlave. This class describes a PROOF slave server.; It contains information like the slaves host name, ordinal number,; performance index, socket, etc. Objects of this class can only be; created via TProof member functions. Function Members (Methods); public:. virtual~TSlave(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetArchCompiler() const; Long64_tGetBytesRead() const; Float_tGetCpuTime() const; virtual Option_t*TOb",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:8329,Performance,perform,performance,8329,"::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TSlave::EStatusBitskOutputRequested; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TSlave::ESlaveTypekSlave; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringfArchCompBuild architecture, compiler on worker (e.g. linux-gcc345); Long64_tfBytesReadbytes read by slave (info is obtained from slave); Float_tfCpuTimeCPU time spent executing commands (info obtained from slave); TStringfGroupslave's group id; TStringfImageslave's image name; TFileHandler*fInputinput handler related to this slave; TStringfMsdmass storage domain of slave; TStringfNameslave's hostname; TStringfOrdinalslave's ordinal number; Int_tfParallelnumber of active slaves; Int_tfPerfIdxrelative CPU performance index; Int_tfPortslave's port number; TProof*fProofproof cluster to which slave belongs; TStringfProofWorkDirbase proofserv working directory (info obtained from slave); Int_tfProtocolslave's protocol level; TStringfROOTVersROOT version run by worker; Float_tfRealTimereal time spent executing commands (info obtained from slave); TStringfSessionTagunique tag for ths worker process; TSlave::ESlaveTypefSlaveTypetype of slave (either kMaster or kSlave); TSocket*fSocketsocket to slave; Int_tfStatusremote return status; TStringfUserslave's user id; TStringfWorkDirslave's working directory (info obtained from slave). private:. static TSlave_tfgTXSlaveHook. Class Charts. Inheritance Chart:. TObject. ←; TSlave. ←. TSlaveLite. TXSlave. Function documentation; TSlave(const char* host, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1); Create a PROOF slave object. Called via the TProof ctor. TSlave(); Default constructor used by derived classes. void Init(const char* host, Int_t port, Int_t stype",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:10060,Performance,perform,performance,10060,"ject. ←; TSlave. ←. TSlaveLite. TXSlave. Function documentation; TSlave(const char* host, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1); Create a PROOF slave object. Called via the TProof ctor. TSlave(); Default constructor used by derived classes. void Init(const char* host, Int_t port, Int_t stype); Init a PROOF slave object. Called via the TSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void Init(TSocket* s, Int_t stype); Init a PROOF slave object using the connection opened via s. Used to; avoid double opening when an attempt via TXSlave found a remote proofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Se",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:6305,Safety,abort,abort,6305,"dTObject::SetUniqueID(UInt_t uid); virtual Int_tSetupServ(Int_t stype, const char* conffile); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTouch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidFlushSocket(); voidInit(TSocket* s, Int_t stype); virtual voidInterrupt(Int_t type); voidTObject::MakeZombie(); virtual Int_tPing(); virtual TObjString*SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); virtual Int_tSendGroupPriority(const char*, Int_t); virtual voidSetAlias(const char* alias); voidSetSocket(TSocket* s); virtual voidSetStatus(Int_t st); virtual voidStopProcess(Bool_t abort, Int_t timeout); TSlave(). private:. static TSlave*Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); voidInit(const char* host, Int_t port, Int_t stype); Int_tOldAuthSetup(Bool_t master, TString wconf); voidoperator=(const TSlave&); TSlave(const TSlave& s); TSlave(const char* host, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1). Data Members; public:. static TSlave::ESlaveStatuskActive; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHa",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:6318,Safety,timeout,timeout,6318,"dTObject::SetUniqueID(UInt_t uid); virtual Int_tSetupServ(Int_t stype, const char* conffile); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTouch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidFlushSocket(); voidInit(TSocket* s, Int_t stype); virtual voidInterrupt(Int_t type); voidTObject::MakeZombie(); virtual Int_tPing(); virtual TObjString*SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); virtual Int_tSendGroupPriority(const char*, Int_t); virtual voidSetAlias(const char* alias); voidSetSocket(TSocket* s); virtual voidSetStatus(Int_t st); virtual voidStopProcess(Bool_t abort, Int_t timeout); TSlave(). private:. static TSlave*Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); voidInit(const char* host, Int_t port, Int_t stype); Int_tOldAuthSetup(Bool_t master, TString wconf); voidoperator=(const TSlave&); TSlave(const TSlave& s); TSlave(const char* host, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1). Data Members; public:. static TSlave::ESlaveStatuskActive; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHa",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:9846,Safety,avoid,avoid,9846,"ve's user id; TStringfWorkDirslave's working directory (info obtained from slave). private:. static TSlave_tfgTXSlaveHook. Class Charts. Inheritance Chart:. TObject. ←; TSlave. ←. TSlaveLite. TXSlave. Function documentation; TSlave(const char* host, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1); Create a PROOF slave object. Called via the TProof ctor. TSlave(); Default constructor used by derived classes. void Init(const char* host, Int_t port, Int_t stype); Init a PROOF slave object. Called via the TSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void Init(TSocket* s, Int_t stype); Init a PROOF slave object using the connection opened via s. Used to; avoid double opening when an attempt via TXSlave found a remote proofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void Stop",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:10892,Safety,abort,abort,10892,"roofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { return kTRUE; }. const char * GetName() const; { return fName; }. const char * GetImage() const; { return fImage; }. const char * GetProofWorkDir() const; { return fProofWorkDir; }. const char * GetWorkDir() const; { return fWorkDir",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:10905,Safety,timeout,timeout,10905,"roofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { return kTRUE; }. const char * GetName() const; { return fName; }. const char * GetImage() const; { return fImage; }. const char * GetProofWorkDir() const; { return fProofWorkDir; }. const char * GetWorkDir() const; { return fWorkDir",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:10925,Safety,abort,abort,10925,"roofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { return kTRUE; }. const char * GetName() const; { return fName; }. const char * GetImage() const; { return fImage; }. const char * GetProofWorkDir() const; { return fProofWorkDir; }. const char * GetWorkDir() const; { return fWorkDir",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:11307,Safety,recover,recovered,11307,"ave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when reconnecting. void SetTXSlaveHook(TSlave_t xslavehook); Set hook to TXSlave ctor. TSlave(const TSlave& s); { }. void operator=(const TSlave& ); { }. void FlushSocket(); { }. Int_t SendGroupPriority(const char* , Int_t ); { return 0; }. void SetSocket(TSocket* s); { fSocket = s; }. void SetStatus(Int_t st); { fStatus = st; }. Bool_t IsSortable() const; { return kTRUE; }. const char * GetName() const; { return fName; }. const char * GetImage() const; { return fImage; }. const char * GetProofWorkDir() const; { return fProofWorkDir; }. const char * GetWorkDir() const; { return fWorkDir; }. const char * GetUser() const; { return fUser; }. const char * GetGroup() const; { return fGroup; }. Int_t GetPort() const; { return fPort; }. const char * GetOrdinal() const; { return fOrdinal; }. Int_t GetPerfIdx() const; { return fPerfIdx; }. Int_t GetProtocol() const; { return fProtocol; }. TSocket * GetSocket() const; { return fSocket; }. TProof ",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:3012,Security,Hash,Hash,3012,"Option() const; static Long_tTObject::GetDtorOnly(); const char*GetGroup() const; virtual const char*TObject::GetIconName() const; const char*GetImage() const; TFileHandler*GetInputHandler() const; const char*GetMsd() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOrdinal() const; Int_tGetParallel() const; Int_tGetPerfIdx() const; Int_tGetPort() const; TProof*GetProof() const; const char*GetProofWorkDir() const; Int_tGetProtocol() const; Float_tGetRealTime() const; const char*GetROOTVersion() const; const char*GetSessionTag() const; Int_tGetSlaveType() const; TSocket*GetSocket() const; Int_tGetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUser() const; const char*GetWorkDir() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(si",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:10329,Security,authenticat,authentication,10329,"ult constructor used by derived classes. void Init(const char* host, Int_t port, Int_t stype); Init a PROOF slave object. Called via the TSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TSlave ctor.; The Init method is technology specific and is overwritten by derived; classes. void Init(TSocket* s, Int_t stype); Init a PROOF slave object using the connection opened via s. Used to; avoid double opening when an attempt via TXSlave found a remote proofd. ~TSlave(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. Int_t Compare(const TObject* obj) const; Used to sort slaves by performance index. void Print(Option_t* option = """") const; Printf info about slave. void SetInputHandler(TFileHandler* ih); Adopt and register input handler for this slave. Handler will be deleted; by the slave. Int_t OldAuthSetup(Bool_t master, TString wconf); Setup authentication related stuff for old versions.; Provided for backward compatibility. TSlave * Create(const char* url, const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t nwk = 1); Static method returning the appropriate TSlave object for the remote; server. Int_t Ping(); Ping the remote master or slave servers.; Returns 0 if ok, -1 in case of error. void Interrupt(Int_t type); Send interrupt OOB byte to master or slave servers.; Returns 0 if ok, -1 in case of error. void StopProcess(Bool_t abort, Int_t timeout); Sent stop/abort request to PROOF server. TObjString * SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); Send message to intermediate coordinator. Only meaningful when there is one,; i.e. in XPD framework. void SetAlias(const char* alias); Set an alias for this session. If reconnection is supported, the alias; will be communicated to the remote coordinator so that it can be recovered; when r",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:5397,Testability,Test,TestBit,5397,"edFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetArchCompiler(const char* ac); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInputHandler(TFileHandler* ih); virtual voidSetInterruptHandler(Bool_t); static voidTObject::SetObjectStat(Bool_t stat); voidSetROOTVersion(const char* rv); voidSetSessionTag(const char* st); static voidSetTXSlaveHook(TSlave_t xslavehook); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Int_tSetupServ(Int_t stype, const char* conffile); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTouch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:5436,Testability,Test,TestBits,5436,"edFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetArchCompiler(const char* ac); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetInputHandler(TFileHandler* ih); virtual voidSetInterruptHandler(Bool_t); static voidTObject::SetObjectStat(Bool_t stat); voidSetROOTVersion(const char* rv); voidSetSessionTag(const char* st); static voidSetTXSlaveHook(TSlave_t xslavehook); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Int_tSetupServ(Int_t stype, const char* conffile); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTouch(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlave.html:827,Usability,Clear,Clear,827," virtual~TSlave(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetArchCompiler() const; Long64_tGetBytesRead() const; Float_tGetCpuTime() const; virtual Option_t*TOb",MatchSource.WIKI,root/html604/TSlave.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlave.html
https://root.cern/root/html604/TSlaveInfo.html:1411,Availability,Error,Error,1411," virtual~TSlaveInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDataDir() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html604/TSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveInfo.html
https://root.cern/root/html604/TSlaveInfo.html:1540,Availability,error,error,1540," virtual~TSlaveInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDataDir() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html604/TSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveInfo.html
https://root.cern/root/html604/TSlaveInfo.html:1624,Availability,error,error,1624,"veInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDataDir() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*GetMsd() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOrdinal() const; SysInfo_tGetSysInfo() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(c",MatchSource.WIKI,root/html604/TSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveInfo.html
https://root.cern/root/html604/TSlaveInfo.html:527,Integrability,message,messages,527,". TSlaveInfo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TSlaveInfo. class TSlaveInfo: public TObject. TProof. This class controls a Parallel ROOT Facility, PROOF, cluster.; It fires the worker servers, it keeps track of how many workers are; running, it keeps track of the workers running status, it broadcasts; messages to all workers, it collects results, etc. Function Members (Methods); public:. virtual~TSlaveInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDataDir() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html604/TSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveInfo.html
https://root.cern/root/html604/TSlaveInfo.html:116,Modifiability,inherit,inheritance,116,". TSlaveInfo. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TSlaveInfo. class TSlaveInfo: public TObject. TProof. This class controls a Parallel ROOT Facility, PROOF, cluster.; It fires the worker servers, it keeps track of how many workers are; running, it keeps track of the workers running status, it broadcasts; messages to all workers, it collects results, etc. Function Members (Methods); public:. virtual~TSlaveInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDataDir() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html604/TSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveInfo.html
https://root.cern/root/html604/TSlaveInfo.html:2613,Modifiability,Inherit,InheritsFrom,2613,"t_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDataDir() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*GetMsd() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOrdinal() const; SysInfo_tGetSysInfo() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSl",MatchSource.WIKI,root/html604/TSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveInfo.html
https://root.cern/root/html604/TSlaveInfo.html:2679,Modifiability,Inherit,InheritsFrom,2679,"t_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDataDir() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*GetMsd() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOrdinal() const; SysInfo_tGetSysInfo() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSlaveInfo&operator=(const TSlaveInfo&); TSlaveInfo&operator=(TSlaveI",MatchSource.WIKI,root/html604/TSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveInfo.html
https://root.cern/root/html604/TSlaveInfo.html:6621,Modifiability,Inherit,Inheritance,6621,"ative performance of this slave; TSlaveInfo::ESlaveStatusfStatusslave status; SysInfo_tfSysInfoInfomation about its hardware; static TSlaveInfo::ESlaveStatuskActive; static TSlaveInfo::ESlaveStatuskBad; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TSlaveInfo::ESlaveStatuskNotActive; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TSlaveInfo. Function documentation; Int_t Compare(const TObject* obj) const; Used to sort slaveinfos by ordinal. Bool_t IsEqual(const TObject* obj) const; Used to compare slaveinfos by ordinal. void Print(Option_t* option = """") const; Print slave info. If opt = ""active"" print only the active; slaves, if opt=""notactive"" print only the not active slaves,; if opt = ""bad"" print only the bad slaves, else; print all slaves. void SetSysInfo(SysInfo_t si); Setter for fSysInfo. TProofInterruptHandler& operator=(const TProofInterruptHandler&). TProofInputHandler& operator=(const TProofInputHandler&). TSlaveInfo(const char* ordinal = """", const char* host = """", Int_t perfidx = 0, const char* msd = """", const char* datadir = """"); { }. const char * GetDataDir() const; { return fDataDir; }. const char * GetMsd() const; { return fMsd; }. const char * GetName() const; { return fHostName; }. const char * GetOrdinal() const; { return fOrdinal; }. SysInfo_t GetSysInfo() const; { retu",MatchSource.WIKI,root/html604/TSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveInfo.html
https://root.cern/root/html604/TSlaveInfo.html:5636,Performance,perform,performance,5636,"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. TStringfDataDirdirectory for user data; TStringfHostNamehostname this slave is running on; TStringfMsdmass storage domain slave is in; TStringfOrdinalslave ordinal; Int_tfPerfIndexrelative performance of this slave; TSlaveInfo::ESlaveStatusfStatusslave status; SysInfo_tfSysInfoInfomation about its hardware; static TSlaveInfo::ESlaveStatuskActive; static TSlaveInfo::ESlaveStatuskBad; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TSlaveInfo::ESlaveStatuskNotActive; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. Class Charts. Inheritance Chart:. TObject. ←; TSlaveInfo. Function documentation; Int_t Compare(const TObject* obj) const; Used to sort slaveinfos by ordinal. Bool_t IsEqual(const TObject* obj) const; Used to compare slaveinfos by ordinal. void Print(Option_t* option = """") const; Print slave info. If opt = ""active"" print only the active; slaves, if opt=""notactive"" print only the not active slaves,; if opt = ""bad"" pr",MatchSource.WIKI,root/html604/TSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveInfo.html
https://root.cern/root/html604/TSlaveInfo.html:2503,Security,Hash,Hash,2503,"method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDataDir() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; const char*GetMsd() const; virtual const char*GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*GetOrdinal() const; SysInfo_tGetSysInfo() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tIsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(siz",MatchSource.WIKI,root/html604/TSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveInfo.html
https://root.cern/root/html604/TSlaveInfo.html:4739,Testability,Test,TestBit,4739,"tr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSlaveInfo&operator=(const TSlaveInfo&); TSlaveInfo&operator=(TSlaveInfo&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetOrdinal(const char* ord); voidSetStatus(TSlaveInfo::ESlaveStatus stat); voidSetSysInfo(SysInfo_t si); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSlaveInfo(TSlaveInfo&&); TSlaveInfo(const TSlaveInfo&); TSlaveInfo(const char* ordinal = """", const char* host = """", Int_t perfidx = 0, const char* msd = """", const char* datadir = """"); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveInfo.html
https://root.cern/root/html604/TSlaveInfo.html:4778,Testability,Test,TestBits,4778,"tr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSlaveInfo&operator=(const TSlaveInfo&); TSlaveInfo&operator=(TSlaveInfo&&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); static voidTObject::SetObjectStat(Bool_t stat); voidSetOrdinal(const char* ord); voidSetStatus(TSlaveInfo::ESlaveStatus stat); voidSetSysInfo(SysInfo_t si); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSlaveInfo(TSlaveInfo&&); TSlaveInfo(const TSlaveInfo&); TSlaveInfo(const char* ordinal = """", const char* host = """", Int_t perfidx = 0, const char* msd = """", const char* datadir = """"); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveInfo.html
https://root.cern/root/html604/TSlaveInfo.html:880,Usability,Clear,Clear,880," virtual~TSlaveInfo(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tCompare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*GetDataDir() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObjec",MatchSource.WIKI,root/html604/TSlaveInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveInfo.html
https://root.cern/root/html604/TSlaveLite.html:1378,Availability,Error,Error,1378," virtual~TSlaveLite(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTSlave::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TSlave::GetArchCompiler() const; Long64_tTSlave::GetBytesRead() const; Float_tTSlave::GetCpuTime() const; virtual Option_",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:1507,Availability,error,error,1507,"thod) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTSlave::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TSlave::GetArchCompiler() const; Long64_tTSlave::GetBytesRead() const; Float_tTSlave::GetCpuTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*TSlave::GetGroup() const; virtual const char*TObject::GetIconName() const; const char*TSlave::GetImage() const; TFileHandler*TSlave::GetInputHandler() const; const char*TSlave::GetMsd() const; virtual const char*TSlave::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*TSlave::GetOrdinal() const; Int_",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:1591,Availability,error,error,1591,"ect::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTSlave::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TSlave::GetArchCompiler() const; Long64_tTSlave::GetBytesRead() const; Float_tTSlave::GetCpuTime() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); const char*TSlave::GetGroup() const; virtual const char*TObject::GetIconName() const; const char*TSlave::GetImage() const; TFileHandler*TSlave::GetInputHandler() const; const char*TSlave::GetMsd() const; virtual const char*TSlave::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*TSlave::GetOrdinal() const; Int_tTSlave::GetParallel() const; Int_tTSlave::GetPerfIdx() const; Int_tTSlave::GetPort(",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:6365,Availability,Ping,Ping,6365," const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTSlave::Touch(); TSlaveLite(const TSlaveLite&); TSlaveLite(const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTSlave::FlushSocket(); virtual voidTSlave::Interrupt(Int_t type); voidTObject::MakeZombie(); virtual Int_tTSlave::Ping(); virtual TObjString*TSlave::SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); virtual Int_tTSlave::SendGroupPriority(const char*, Int_t); virtual voidTSlave::SetAlias(const char* alias); voidTSlave::SetSocket(TSocket* s); virtual voidTSlave::SetStatus(Int_t st); virtual voidTSlave::StopProcess(Bool_t abort, Int_t timeout). private:. voidInit(). Data Members; public:. static TSlave::ESlaveStatusTSlave::kActive; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TSlave::ESlaveStatusTSlave::kInactive; static TSlave::ESlaveStatusTSlave::kInvalid; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TSlave::ESlaveTypeTSlave::kMaster; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; ",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:9375,Availability,Error,ErrorHandler,9375,"active slaves; Int_tTSlave::fPerfIdxrelative CPU performance index; Int_tTSlave::fPortslave's port number; TProof*TSlave::fProofproof cluster to which slave belongs; TStringTSlave::fProofWorkDirbase proofserv working directory (info obtained from slave); Int_tTSlave::fProtocolslave's protocol level; TStringTSlave::fROOTVersROOT version run by worker; Float_tTSlave::fRealTimereal time spent executing commands (info obtained from slave); TStringTSlave::fSessionTagunique tag for ths worker process; TSlave::ESlaveTypeTSlave::fSlaveTypetype of slave (either kMaster or kSlave); TSocket*TSlave::fSocketsocket to slave; Int_tTSlave::fStatusremote return status; TStringTSlave::fUserslave's user id; TStringTSlave::fWorkDirslave's working directory (info obtained from slave). private:. TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfValid. Class Charts. Inheritance Chart:. TObject. ←; TSlave. ←; TSlaveLite. Function documentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TSlaveLite(const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1); Create a PROOF slave object. Called via the TProof ctor. void Init(); Init a PROOF worker object. Called via the TSlaveLite ctor. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TSlaveLite ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TSlaveLite(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. void Print(Option_t* option = """") const; Printf info about slave. TSlaveLite(const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1). » Author: G. Ganis Mar 2008 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:33; This page has been automati",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:8612,Integrability,protocol,protocol,8612,"vas; static TSlave::EStatusBitsTSlave::kOutputRequested; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TSlave::ESlaveTypeTSlave::kSlave; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTSlave::fArchCompBuild architecture, compiler on worker (e.g. linux-gcc345); Long64_tTSlave::fBytesReadbytes read by slave (info is obtained from slave); Float_tTSlave::fCpuTimeCPU time spent executing commands (info obtained from slave); TStringTSlave::fGroupslave's group id; TStringTSlave::fImageslave's image name; TFileHandler*TSlave::fInputinput handler related to this slave; TStringTSlave::fMsdmass storage domain of slave; TStringTSlave::fNameslave's hostname; TStringTSlave::fOrdinalslave's ordinal number; Int_tTSlave::fParallelnumber of active slaves; Int_tTSlave::fPerfIdxrelative CPU performance index; Int_tTSlave::fPortslave's port number; TProof*TSlave::fProofproof cluster to which slave belongs; TStringTSlave::fProofWorkDirbase proofserv working directory (info obtained from slave); Int_tTSlave::fProtocolslave's protocol level; TStringTSlave::fROOTVersROOT version run by worker; Float_tTSlave::fRealTimereal time spent executing commands (info obtained from slave); TStringTSlave::fSessionTagunique tag for ths worker process; TSlave::ESlaveTypeTSlave::fSlaveTypetype of slave (either kMaster or kSlave); TSocket*TSlave::fSocketsocket to slave; Int_tTSlave::fStatusremote return status; TStringTSlave::fUserslave's user id; TStringTSlave::fWorkDirslave's working directory (info obtained from slave). private:. TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfValid. Class Charts. Inheritance Chart:. TObject. ←; TSlave. ←; TSlaveLite. Function documentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TSlaveLite(const char* ord, Int_t perf, const char* image, TProof* pr",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:9362,Integrability,Interface,Interface,9362,"active slaves; Int_tTSlave::fPerfIdxrelative CPU performance index; Int_tTSlave::fPortslave's port number; TProof*TSlave::fProofproof cluster to which slave belongs; TStringTSlave::fProofWorkDirbase proofserv working directory (info obtained from slave); Int_tTSlave::fProtocolslave's protocol level; TStringTSlave::fROOTVersROOT version run by worker; Float_tTSlave::fRealTimereal time spent executing commands (info obtained from slave); TStringTSlave::fSessionTagunique tag for ths worker process; TSlave::ESlaveTypeTSlave::fSlaveTypetype of slave (either kMaster or kSlave); TSocket*TSlave::fSocketsocket to slave; Int_tTSlave::fStatusremote return status; TStringTSlave::fUserslave's user id; TStringTSlave::fWorkDirslave's working directory (info obtained from slave). private:. TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfValid. Class Charts. Inheritance Chart:. TObject. ←; TSlave. ←; TSlaveLite. Function documentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TSlaveLite(const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1); Create a PROOF slave object. Called via the TProof ctor. void Init(); Init a PROOF worker object. Called via the TSlaveLite ctor. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TSlaveLite ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TSlaveLite(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. void Print(Option_t* option = """") const; Printf info about slave. TSlaveLite(const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1). » Author: G. Ganis Mar 2008 » Copyright (C) 1995-2005, Rene Brun and Fons Rademakers. *; » Last changed: root/proof:$Id$ » Last generated: 2015-06-02 16:33; This page has been automati",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:116,Modifiability,inherit,inheritance,116,". TSlaveLite. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » PROOF; » PROOF; » TSlaveLite. class TSlaveLite: public TSlave. TSlaveLite. This is the version of TSlave for local worker servers.; See TSlave for details. Function Members (Methods); public:. virtual~TSlaveLite(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTSlave::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TSlave::GetArchCompiler() const; Long64_tTSlave::GetBytesRead() const; Float_tTSlave::GetCpuTime() const; virtual Option_",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:3287,Modifiability,Inherit,InheritsFrom,3287,"r*TSlave::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*TSlave::GetOrdinal() const; Int_tTSlave::GetParallel() const; Int_tTSlave::GetPerfIdx() const; Int_tTSlave::GetPort() const; TProof*TSlave::GetProof() const; const char*TSlave::GetProofWorkDir() const; Int_tTSlave::GetProtocol() const; Float_tTSlave::GetRealTime() const; const char*TSlave::GetROOTVersion() const; const char*TSlave::GetSessionTag() const; Int_tTSlave::GetSlaveType() const; TSocket*TSlave::GetSocket() const; Int_tTSlave::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSlave::GetUser() const; const char*TSlave::GetWorkDir() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTSlave::IsSortable() const; virtual Bool_tTSlave::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz)",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:3353,Modifiability,Inherit,InheritsFrom,3353,"_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*TSlave::GetOrdinal() const; Int_tTSlave::GetParallel() const; Int_tTSlave::GetPerfIdx() const; Int_tTSlave::GetPort() const; TProof*TSlave::GetProof() const; const char*TSlave::GetProofWorkDir() const; Int_tTSlave::GetProtocol() const; Float_tTSlave::GetRealTime() const; const char*TSlave::GetROOTVersion() const; const char*TSlave::GetSessionTag() const; Int_tTSlave::GetSlaveType() const; TSocket*TSlave::GetSocket() const; Int_tTSlave::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSlave::GetUser() const; const char*TSlave::GetWorkDir() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTSlave::IsSortable() const; virtual Bool_tTSlave::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSlaveLite&op",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:9201,Modifiability,Inherit,Inheritance,9201,"TStringTSlave::fNameslave's hostname; TStringTSlave::fOrdinalslave's ordinal number; Int_tTSlave::fParallelnumber of active slaves; Int_tTSlave::fPerfIdxrelative CPU performance index; Int_tTSlave::fPortslave's port number; TProof*TSlave::fProofproof cluster to which slave belongs; TStringTSlave::fProofWorkDirbase proofserv working directory (info obtained from slave); Int_tTSlave::fProtocolslave's protocol level; TStringTSlave::fROOTVersROOT version run by worker; Float_tTSlave::fRealTimereal time spent executing commands (info obtained from slave); TStringTSlave::fSessionTagunique tag for ths worker process; TSlave::ESlaveTypeTSlave::fSlaveTypetype of slave (either kMaster or kSlave); TSocket*TSlave::fSocketsocket to slave; Int_tTSlave::fStatusremote return status; TStringTSlave::fUserslave's user id; TStringTSlave::fWorkDirslave's working directory (info obtained from slave). private:. TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfValid. Class Charts. Inheritance Chart:. TObject. ←; TSlave. ←; TSlaveLite. Function documentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TSlaveLite(const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1); Create a PROOF slave object. Called via the TProof ctor. void Init(); Init a PROOF worker object. Called via the TSlaveLite ctor. Int_t SetupServ(Int_t stype, const char* conffile); Init a PROOF slave object. Called via the TSlaveLite ctor.; The Init method is technology specific and is overwritten by derived; classes. ~TSlaveLite(); Destroy slave. void Close(Option_t* opt = """"); Close slave socket. void Print(Option_t* option = """") const; Printf info about slave. TSlaveLite(const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1). » Author: G. Ganis Mar 2008 » Copyright (C) 1995-2005, Rene Brun a",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:8376,Performance,perform,performance,8376,"vas; static TSlave::EStatusBitsTSlave::kOutputRequested; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TSlave::ESlaveTypeTSlave::kSlave; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TStringTSlave::fArchCompBuild architecture, compiler on worker (e.g. linux-gcc345); Long64_tTSlave::fBytesReadbytes read by slave (info is obtained from slave); Float_tTSlave::fCpuTimeCPU time spent executing commands (info obtained from slave); TStringTSlave::fGroupslave's group id; TStringTSlave::fImageslave's image name; TFileHandler*TSlave::fInputinput handler related to this slave; TStringTSlave::fMsdmass storage domain of slave; TStringTSlave::fNameslave's hostname; TStringTSlave::fOrdinalslave's ordinal number; Int_tTSlave::fParallelnumber of active slaves; Int_tTSlave::fPerfIdxrelative CPU performance index; Int_tTSlave::fPortslave's port number; TProof*TSlave::fProofproof cluster to which slave belongs; TStringTSlave::fProofWorkDirbase proofserv working directory (info obtained from slave); Int_tTSlave::fProtocolslave's protocol level; TStringTSlave::fROOTVersROOT version run by worker; Float_tTSlave::fRealTimereal time spent executing commands (info obtained from slave); TStringTSlave::fSessionTagunique tag for ths worker process; TSlave::ESlaveTypeTSlave::fSlaveTypetype of slave (either kMaster or kSlave); TSocket*TSlave::fSocketsocket to slave; Int_tTSlave::fStatusremote return status; TStringTSlave::fUserslave's user id; TStringTSlave::fWorkDirslave's working directory (info obtained from slave). private:. TSignalHandler*fIntHandlerinterrupt signal handler (ctrl-c); Bool_tfValid. Class Charts. Inheritance Chart:. TObject. ←; TSlave. ←; TSlaveLite. Function documentation; void DoError(int level, const char* location, const char* fmt, va_list va) const; Interface to ErrorHandler (protected). TSlaveLite(const char* ord, Int_t perf, const char* image, TProof* pr",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:6690,Safety,abort,abort,6690," const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTSlave::Touch(); TSlaveLite(const TSlaveLite&); TSlaveLite(const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTSlave::FlushSocket(); virtual voidTSlave::Interrupt(Int_t type); voidTObject::MakeZombie(); virtual Int_tTSlave::Ping(); virtual TObjString*TSlave::SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); virtual Int_tTSlave::SendGroupPriority(const char*, Int_t); virtual voidTSlave::SetAlias(const char* alias); voidTSlave::SetSocket(TSocket* s); virtual voidTSlave::SetStatus(Int_t st); virtual voidTSlave::StopProcess(Bool_t abort, Int_t timeout). private:. voidInit(). Data Members; public:. static TSlave::ESlaveStatusTSlave::kActive; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TSlave::ESlaveStatusTSlave::kInactive; static TSlave::ESlaveStatusTSlave::kInvalid; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TSlave::ESlaveTypeTSlave::kMaster; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; ",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:6703,Safety,timeout,timeout,6703," const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTSlave::Touch(); TSlaveLite(const TSlaveLite&); TSlaveLite(const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTSlave::FlushSocket(); virtual voidTSlave::Interrupt(Int_t type); voidTObject::MakeZombie(); virtual Int_tTSlave::Ping(); virtual TObjString*TSlave::SendCoordinator(Int_t kind, const char* msg = 0, Int_t int2 = 0); virtual Int_tTSlave::SendGroupPriority(const char*, Int_t); virtual voidTSlave::SetAlias(const char* alias); voidTSlave::SetSocket(TSocket* s); virtual voidTSlave::SetStatus(Int_t st); virtual voidTSlave::StopProcess(Bool_t abort, Int_t timeout). private:. voidInit(). Data Members; public:. static TSlave::ESlaveStatusTSlave::kActive; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TSlave::ESlaveStatusTSlave::kInactive; static TSlave::ESlaveStatusTSlave::kInvalid; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TSlave::ESlaveTypeTSlave::kMaster; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; ",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:3177,Security,Hash,Hash,3177,"tImage() const; TFileHandler*TSlave::GetInputHandler() const; const char*TSlave::GetMsd() const; virtual const char*TSlave::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; const char*TSlave::GetOrdinal() const; Int_tTSlave::GetParallel() const; Int_tTSlave::GetPerfIdx() const; Int_tTSlave::GetPort() const; TProof*TSlave::GetProof() const; const char*TSlave::GetProofWorkDir() const; Int_tTSlave::GetProtocol() const; Float_tTSlave::GetRealTime() const; const char*TSlave::GetROOTVersion() const; const char*TSlave::GetSessionTag() const; Int_tTSlave::GetSlaveType() const; TSocket*TSlave::GetSocket() const; Int_tTSlave::GetStatus() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*TSlave::GetUser() const; const char*TSlave::GetWorkDir() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTSlave::IsSortable() const; virtual Bool_tTSlave::IsValid() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject:",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:5667,Testability,Test,TestBit,5667,"tor new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSlaveLite&operator=(const TSlaveLite&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTSlave::SetArchCompiler(const char* ac); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTSlave::SetInputHandler(TFileHandler* ih); virtual voidTSlave::SetInterruptHandler(Bool_t); static voidTObject::SetObjectStat(Bool_t stat); voidTSlave::SetROOTVersion(const char* rv); voidTSlave::SetSessionTag(const char* st); static voidTSlave::SetTXSlaveHook(TSlave_t xslavehook); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Int_tSetupServ(Int_t stype, const char* conffile); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTSlave::Touch(); TSlaveLite(const TSlaveLite&); TSlaveLite(const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:5706,Testability,Test,TestBits,5706,"tor new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSlaveLite&operator=(const TSlaveLite&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidPrint(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTSlave::SetArchCompiler(const char* ac); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTSlave::SetInputHandler(TFileHandler* ih); virtual voidTSlave::SetInterruptHandler(Bool_t); static voidTObject::SetObjectStat(Bool_t stat); voidTSlave::SetROOTVersion(const char* rv); voidTSlave::SetSessionTag(const char* st); static voidTSlave::SetTXSlaveHook(TSlave_t xslavehook); virtual voidTObject::SetUniqueID(UInt_t uid); virtual Int_tSetupServ(Int_t stype, const char* conffile); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual voidTSlave::Touch(); TSlaveLite(const TSlaveLite&); TSlaveLite(const char* ord, Int_t perf, const char* image, TProof* proof, Int_t stype, const char* workdir, const char* msd, Int_t = 1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlaveLite.html:711,Usability,Clear,Clear,711," virtual~TSlaveLite(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTSlave::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidDoError(int level, const char* location, const char* fmt, va_list va) const; virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; const char*TSlave::GetArchCompiler() const; Long64_tTSlave::GetBytesRead() const; Float_tTSlave::GetCpuTime() const; virtual Option_",MatchSource.WIKI,root/html604/TSlaveLite.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlaveLite.html
https://root.cern/root/html604/TSlider.html:7499,Availability,Error,Error,7499,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::G",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:7666,Availability,error,error,7666,"r* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTPad::GetCanvasID() const; virtual TCanvasImp*TPad::GetCanvasImp() const; Int_tTPad::GetC",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:7750,Availability,error,error,7750,"idTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTPad::EventPave()SIGNAL ; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTPad::ExecuteEventAxis(Int_t event, Int_t px, Int_t py, TAxis* axis); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TPad::FindObject(const char* name) const; virtual TObject*TPad::FindObject(const TObject* obj) const; virtual Double_tTPad::GetAbsHNDC() const; virtual Double_tTPad::GetAbsWNDC() const; virtual Double_tTPad::GetAbsXlowNDC() const; virtual Double_tTPad::GetAbsYlowNDC() const; Float_tTAttPad::GetAfile() const; virtual Double_tTPad::GetAspectRatio() const; Float_tTAttPad::GetAstat() const; virtual Rectangle_tTPad::GetBBox(); virtual TPointTPad::GetBBoxCenter(); virtual Short_tTPad::GetBorderMode() const; virtual Short_tTPad::GetBorderSize() const; Float_tTAttPad::GetBottomMargin() const; virtual TCanvas*TPad::GetCanvas() const; virtual Int_tTPad::GetCanvasID() const; virtual TCanvasImp*TPad::GetCanvasImp() const; Int_tTPad::GetCrosshair() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObj",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:27680,Availability,down,down,27680,,MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:820,Deployability,release,released,820,". TSlider. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TSlider. class TSlider: public TPad. TSlider. A TSlider object is a specialized TPad including a TSliderBox object; The TSliderBox can be moved in the pad.; Slider drawing options include the possibility to change the slider; starting and ending positions or only one of them. The current slider position can be retrieved via the functions; TSlider::GetMinimum and TSlider::GetMaximum; These two functions return numbers in the range [0,1]. if a method has been set (via SetMethod), the expression is; executed via the interpreter when the button 1 is released. if no method has been set, and an object is referenced (SetObject; has been called), while the slider is being moved/resized,; the object ExecuteEvent function is called. //. Example 1 using SetMethod macro xyslider.C. { ; Example of macro featuring two sliders; TFile *f = new TFile(""hsimple.root"");; TH2F *hpxpy = (TH2F*)f->Get(""hpxpy"");; TCanvas *c1 = new TCanvas(""c1"");; TPad *pad = new TPad(""pad"",""lego pad"",0.1,0.1,0.98,0.98);; pad->SetFillColor(33);; pad->Draw();; pad->cd();; gStyle->SetFrameFillColor(42);; hpxpy->SetFillColor(46);; hpxpy->Draw(""lego1"");; c1->cd();. Create two sliders in main canvas. When button1; of the mouse will be released, action.C will be called; TSlider *xslider = new TSlider(""xslider"",""x"",0.1,0.02,0.98,0.08);; xslider->SetMethod("".x action.C"");; TSlider *yslider = new TSlider(""yslider"",""y"",0.02,0.1,0.06,0.98);; yslider->SetMethod("".x action.C"");; } . macro action.C; { ; Int_t nx = hpxpy->GetXaxis()->GetNbins();; Int_t ny = hpxpy->GetYaxis()->GetNbins();; Int_t binxmin = nx*xslider->GetMinimum();; Int_t binxmax = nx*xslider->GetMaximum();; hpxpy->GetXaxis()->SetRange(binxmin,binxmax);; Int_t binymin = ny*yslider->GetMinimum();",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:1476,Deployability,release,released,1476,"ility to change the slider; starting and ending positions or only one of them. The current slider position can be retrieved via the functions; TSlider::GetMinimum and TSlider::GetMaximum; These two functions return numbers in the range [0,1]. if a method has been set (via SetMethod), the expression is; executed via the interpreter when the button 1 is released. if no method has been set, and an object is referenced (SetObject; has been called), while the slider is being moved/resized,; the object ExecuteEvent function is called. //. Example 1 using SetMethod macro xyslider.C. { ; Example of macro featuring two sliders; TFile *f = new TFile(""hsimple.root"");; TH2F *hpxpy = (TH2F*)f->Get(""hpxpy"");; TCanvas *c1 = new TCanvas(""c1"");; TPad *pad = new TPad(""pad"",""lego pad"",0.1,0.1,0.98,0.98);; pad->SetFillColor(33);; pad->Draw();; pad->cd();; gStyle->SetFrameFillColor(42);; hpxpy->SetFillColor(46);; hpxpy->Draw(""lego1"");; c1->cd();. Create two sliders in main canvas. When button1; of the mouse will be released, action.C will be called; TSlider *xslider = new TSlider(""xslider"",""x"",0.1,0.02,0.98,0.08);; xslider->SetMethod("".x action.C"");; TSlider *yslider = new TSlider(""yslider"",""y"",0.02,0.1,0.06,0.98);; yslider->SetMethod("".x action.C"");; } . macro action.C; { ; Int_t nx = hpxpy->GetXaxis()->GetNbins();; Int_t ny = hpxpy->GetYaxis()->GetNbins();; Int_t binxmin = nx*xslider->GetMinimum();; Int_t binxmax = nx*xslider->GetMaximum();; hpxpy->GetXaxis()->SetRange(binxmin,binxmax);; Int_t binymin = ny*yslider->GetMinimum();; Int_t binymax = ny*yslider->GetMaximum();; hpxpy->GetYaxis()->SetRange(binymin,binymax);; pad->cd();; hpxpy->Draw(""lego1"");; c1->Update();; } ; The canvas and the sliders created in the above macro are shown; in the picture below. //; /*. */. Example 2 using SetObject macro xyslider.C. Same example as above. Instead of SetMethod:; Myclass *obj = new Myclass(); // Myclass derived from TObject; xslider->SetObject(obj);; yslider->SetObject(obj);. When the slider ",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:2132,Deployability,Update,Update,2132,"nction is called. //. Example 1 using SetMethod macro xyslider.C. { ; Example of macro featuring two sliders; TFile *f = new TFile(""hsimple.root"");; TH2F *hpxpy = (TH2F*)f->Get(""hpxpy"");; TCanvas *c1 = new TCanvas(""c1"");; TPad *pad = new TPad(""pad"",""lego pad"",0.1,0.1,0.98,0.98);; pad->SetFillColor(33);; pad->Draw();; pad->cd();; gStyle->SetFrameFillColor(42);; hpxpy->SetFillColor(46);; hpxpy->Draw(""lego1"");; c1->cd();. Create two sliders in main canvas. When button1; of the mouse will be released, action.C will be called; TSlider *xslider = new TSlider(""xslider"",""x"",0.1,0.02,0.98,0.08);; xslider->SetMethod("".x action.C"");; TSlider *yslider = new TSlider(""yslider"",""y"",0.02,0.1,0.06,0.98);; yslider->SetMethod("".x action.C"");; } . macro action.C; { ; Int_t nx = hpxpy->GetXaxis()->GetNbins();; Int_t ny = hpxpy->GetYaxis()->GetNbins();; Int_t binxmin = nx*xslider->GetMinimum();; Int_t binxmax = nx*xslider->GetMaximum();; hpxpy->GetXaxis()->SetRange(binxmin,binxmax);; Int_t binymin = ny*yslider->GetMinimum();; Int_t binymax = ny*yslider->GetMaximum();; hpxpy->GetYaxis()->SetRange(binymin,binymax);; pad->cd();; hpxpy->Draw(""lego1"");; c1->Update();; } ; The canvas and the sliders created in the above macro are shown; in the picture below. //; /*. */. Example 2 using SetObject macro xyslider.C. Same example as above. Instead of SetMethod:; Myclass *obj = new Myclass(); // Myclass derived from TObject; xslider->SetObject(obj);; yslider->SetObject(obj);. When the slider will be changed, MyClass::ExecuteEvent will be; called with px=0 and py = 0. Function Members (Methods); public:. virtual~TSlider(); virtual voidTPad::AbsCoordinates(Bool_t set); virtual Double_tTPad::AbsPixeltoX(Int_t px); virtual voidTPad::AbsPixeltoXY(Int_t xpixel, Int_t ypixel, Double_t& x, Double_t& y); virtual Double_tTPad::AbsPixeltoY(Int_t py); voidTObject::AbstractMethod(const char* method) const; virtual voidTPad::AddExec(const char* name, const char* command); virtual voidTObject::AppendPad(Option_t* ",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:19642,Deployability,TOGGLE,TOGGLE,19642,"S(Color_t color, Style_t style, Width_t lwidth); virtual voidTPad::SetAttMarkerPS(Color_t color, Style_t style, Size_t msize); virtual voidTPad::SetAttTextPS(Int_t align, Float_t angle, Color_t color, Style_t font, Float_t tsize); virtual voidTPad::SetBBoxCenter(const TPoint& p); virtual voidTPad::SetBBoxCenterX(const Int_t x); virtual voidTPad::SetBBoxCenterY(const Int_t y); virtual voidTPad::SetBBoxX1(const Int_t x); virtual voidTPad::SetBBoxX2(const Int_t x); virtual voidTPad::SetBBoxY1(const Int_t y); virtual voidTPad::SetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTPad::SetBorderMode(Short_t bordermode)MENU ; virtual voidTPad::SetBorderSize(Short_t bordersize)MENU ; virtual voidTAttPad::SetBottomMargin(Float_t bottommargin); virtual voidTPad::SetCanvas(TCanvas* c); virtual voidTPad::SetCanvasSize(UInt_t ww, UInt_t wh); virtual voidTPad::SetCopyGLDevice(Bool_t copy); virtual voidTPad::SetCrosshair(Int_t crhair = 1)TOGGLE ; virtual voidTPad::SetCursor(ECursor cursor); virtual voidTPad::SetDoubleBuffer(Int_t mode = 1); virtual voidTPad::SetDrawOption(Option_t* option = """"); static voidTObject::SetDtorOnly(void* obj); virtual voidTPad::SetEditable(Bool_t mode = kTRUE)TOGGLE ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTPad::SetFillStyle(Style_t fstyle); virtual voidTPad::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTPad::SetGLDevice(Int_t dev); virtual voidTPad::SetGrid(Int_t valuex = 1, Int_t valuey",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:19897,Deployability,TOGGLE,TOGGLE,19897,"xCenter(const TPoint& p); virtual voidTPad::SetBBoxCenterX(const Int_t x); virtual voidTPad::SetBBoxCenterY(const Int_t y); virtual voidTPad::SetBBoxX1(const Int_t x); virtual voidTPad::SetBBoxX2(const Int_t x); virtual voidTPad::SetBBoxY1(const Int_t y); virtual voidTPad::SetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTPad::SetBorderMode(Short_t bordermode)MENU ; virtual voidTPad::SetBorderSize(Short_t bordersize)MENU ; virtual voidTAttPad::SetBottomMargin(Float_t bottommargin); virtual voidTPad::SetCanvas(TCanvas* c); virtual voidTPad::SetCanvasSize(UInt_t ww, UInt_t wh); virtual voidTPad::SetCopyGLDevice(Bool_t copy); virtual voidTPad::SetCrosshair(Int_t crhair = 1)TOGGLE ; virtual voidTPad::SetCursor(ECursor cursor); virtual voidTPad::SetDoubleBuffer(Int_t mode = 1); virtual voidTPad::SetDrawOption(Option_t* option = """"); static voidTObject::SetDtorOnly(void* obj); virtual voidTPad::SetEditable(Bool_t mode = kTRUE)TOGGLE ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTPad::SetFillStyle(Style_t fstyle); virtual voidTPad::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTPad::SetGLDevice(Int_t dev); virtual voidTPad::SetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetGridx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetGridy(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetLeftMargin(Float_t leftmargin); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:20186,Deployability,TOGGLE,TOGGLE,20186," Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTPad::SetBorderMode(Short_t bordermode)MENU ; virtual voidTPad::SetBorderSize(Short_t bordersize)MENU ; virtual voidTAttPad::SetBottomMargin(Float_t bottommargin); virtual voidTPad::SetCanvas(TCanvas* c); virtual voidTPad::SetCanvasSize(UInt_t ww, UInt_t wh); virtual voidTPad::SetCopyGLDevice(Bool_t copy); virtual voidTPad::SetCrosshair(Int_t crhair = 1)TOGGLE ; virtual voidTPad::SetCursor(ECursor cursor); virtual voidTPad::SetDoubleBuffer(Int_t mode = 1); virtual voidTPad::SetDrawOption(Option_t* option = """"); static voidTObject::SetDtorOnly(void* obj); virtual voidTPad::SetEditable(Bool_t mode = kTRUE)TOGGLE ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTPad::SetFillStyle(Style_t fstyle); virtual voidTPad::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTPad::SetGLDevice(Int_t dev); virtual voidTPad::SetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetGridx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetGridy(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetLeftMargin(Float_t leftmargin); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTPad::SetLogx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetLogy(Int_t value = 1)TOGGLE ",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:20696,Deployability,TOGGLE,TOGGLE,20696,"tual voidTPad::SetDoubleBuffer(Int_t mode = 1); virtual voidTPad::SetDrawOption(Option_t* option = """"); static voidTObject::SetDtorOnly(void* obj); virtual voidTPad::SetEditable(Bool_t mode = kTRUE)TOGGLE ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTPad::SetFillStyle(Style_t fstyle); virtual voidTPad::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTPad::SetGLDevice(Int_t dev); virtual voidTPad::SetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetGridx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetGridy(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetLeftMargin(Float_t leftmargin); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTPad::SetLogx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetLogy(Int_t value = 1)TOGGLE ; virtual voidTPad::SetLogz(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetMargin(Float_t left, Float_t right, Float_t bottom, Float_t top); virtual voidSetMaximum(Double_t max = 1); static voidTPad::SetMaxPickDistance(Int_t maxPick = 5); virtual voidSetMethod(const char* method)MENU ; virtual voidSetMinimum(Double_t min = 0); virtual voidTPad::SetName(const char* name)MENU ; virtual voidTPad::SetNumber(Int_t number); voidSetObject(TObject* obj = 0); static voidTObject::SetObjectStat(Bool_t stat); virtu",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:20748,Deployability,TOGGLE,TOGGLE,20748,"ual voidTPad::SetDrawOption(Option_t* option = """"); static voidTObject::SetDtorOnly(void* obj); virtual voidTPad::SetEditable(Bool_t mode = kTRUE)TOGGLE ; virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTPad::SetFillStyle(Style_t fstyle); virtual voidTPad::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTPad::SetGLDevice(Int_t dev); virtual voidTPad::SetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetGridx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetGridy(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetLeftMargin(Float_t leftmargin); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTPad::SetLogx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetLogy(Int_t value = 1)TOGGLE ; virtual voidTPad::SetLogz(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetMargin(Float_t left, Float_t right, Float_t bottom, Float_t top); virtual voidSetMaximum(Double_t max = 1); static voidTPad::SetMaxPickDistance(Int_t maxPick = 5); virtual voidSetMethod(const char* method)MENU ; virtual voidSetMinimum(Double_t min = 0); virtual voidTPad::SetName(const char* name)MENU ; virtual voidTPad::SetNumber(Int_t number); voidSetObject(TObject* obj = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPad::SetPad(Double_t xlow, Double_t ylow, Do",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:21132,Deployability,TOGGLE,TOGGLE,21132,"voidTPad::SetFixedAspectRatio(Bool_t fixed = kTRUE)TOGGLE ; voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTPad::SetGLDevice(Int_t dev); virtual voidTPad::SetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetGridx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetGridy(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetLeftMargin(Float_t leftmargin); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTPad::SetLogx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetLogy(Int_t value = 1)TOGGLE ; virtual voidTPad::SetLogz(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetMargin(Float_t left, Float_t right, Float_t bottom, Float_t top); virtual voidSetMaximum(Double_t max = 1); static voidTPad::SetMaxPickDistance(Int_t maxPick = 5); virtual voidSetMethod(const char* method)MENU ; virtual voidSetMinimum(Double_t min = 0); virtual voidTPad::SetName(const char* name)MENU ; virtual voidTPad::SetNumber(Int_t number); voidSetObject(TObject* obj = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPad::SetPad(Double_t xlow, Double_t ylow, Double_t xup, Double_t yup); virtual voidTPad::SetPad(const char* name, const char* title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color = 35, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTPad::SetPhi(Double_t phi = 30); virtual voidSetRange(Double_t xmin = 0, Double_t xmax = 1); virtual voidTAttPad::SetRightMargin(Float_t rightmargin); virt",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:21183,Deployability,TOGGLE,TOGGLE,21183,"TOGGLE ; voidTAttPad::SetFrameBorderMode(Int_t mode = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTPad::SetGLDevice(Int_t dev); virtual voidTPad::SetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetGridx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetGridy(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetLeftMargin(Float_t leftmargin); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTPad::SetLogx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetLogy(Int_t value = 1)TOGGLE ; virtual voidTPad::SetLogz(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetMargin(Float_t left, Float_t right, Float_t bottom, Float_t top); virtual voidSetMaximum(Double_t max = 1); static voidTPad::SetMaxPickDistance(Int_t maxPick = 5); virtual voidSetMethod(const char* method)MENU ; virtual voidSetMinimum(Double_t min = 0); virtual voidTPad::SetName(const char* name)MENU ; virtual voidTPad::SetNumber(Int_t number); voidSetObject(TObject* obj = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPad::SetPad(Double_t xlow, Double_t ylow, Double_t xup, Double_t yup); virtual voidTPad::SetPad(const char* name, const char* title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color = 35, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTPad::SetPhi(Double_t phi = 30); virtual voidSetRange(Double_t xmin = 0, Double_t xmax = 1); virtual voidTAttPad::SetRightMargin(Float_t rightmargin); virtual voidTPad::SetSelected(TObject* obj); virtual vo",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:21234,Deployability,TOGGLE,TOGGLE,21234," = 1); voidTAttPad::SetFrameBorderSize(Width_t size = 1); voidTAttPad::SetFrameFillColor(Color_t color = 1); voidTAttPad::SetFrameFillStyle(Style_t styl = 0); voidTAttPad::SetFrameLineColor(Color_t color = 1); voidTAttPad::SetFrameLineStyle(Style_t styl = 0); voidTAttPad::SetFrameLineWidth(Width_t width = 1); virtual voidTPad::SetGLDevice(Int_t dev); virtual voidTPad::SetGrid(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetGridx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetGridy(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetLeftMargin(Float_t leftmargin); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTPad::SetLogx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetLogy(Int_t value = 1)TOGGLE ; virtual voidTPad::SetLogz(Int_t value = 1)TOGGLE ; virtual voidTAttPad::SetMargin(Float_t left, Float_t right, Float_t bottom, Float_t top); virtual voidSetMaximum(Double_t max = 1); static voidTPad::SetMaxPickDistance(Int_t maxPick = 5); virtual voidSetMethod(const char* method)MENU ; virtual voidSetMinimum(Double_t min = 0); virtual voidTPad::SetName(const char* name)MENU ; virtual voidTPad::SetNumber(Int_t number); voidSetObject(TObject* obj = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPad::SetPad(Double_t xlow, Double_t ylow, Double_t xup, Double_t yup); virtual voidTPad::SetPad(const char* name, const char* title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color = 35, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTPad::SetPhi(Double_t phi = 30); virtual voidSetRange(Double_t xmin = 0, Double_t xmax = 1); virtual voidTAttPad::SetRightMargin(Float_t rightmargin); virtual voidTPad::SetSelected(TObject* obj); virtual voidTPad::SetTheta(Double_t theta = 30); virtual void",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:22333,Deployability,TOGGLE,TOGGLE,22333,"tual voidSetMaximum(Double_t max = 1); static voidTPad::SetMaxPickDistance(Int_t maxPick = 5); virtual voidSetMethod(const char* method)MENU ; virtual voidSetMinimum(Double_t min = 0); virtual voidTPad::SetName(const char* name)MENU ; virtual voidTPad::SetNumber(Int_t number); voidSetObject(TObject* obj = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPad::SetPad(Double_t xlow, Double_t ylow, Double_t xup, Double_t yup); virtual voidTPad::SetPad(const char* name, const char* title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color = 35, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTPad::SetPhi(Double_t phi = 30); virtual voidSetRange(Double_t xmin = 0, Double_t xmax = 1); virtual voidTAttPad::SetRightMargin(Float_t rightmargin); virtual voidTPad::SetSelected(TObject* obj); virtual voidTPad::SetTheta(Double_t theta = 30); virtual voidTPad::SetTicks(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetTickx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTicky(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) c",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:22385,Deployability,TOGGLE,TOGGLE,22385,"ad::SetMaxPickDistance(Int_t maxPick = 5); virtual voidSetMethod(const char* method)MENU ; virtual voidSetMinimum(Double_t min = 0); virtual voidTPad::SetName(const char* name)MENU ; virtual voidTPad::SetNumber(Int_t number); voidSetObject(TObject* obj = 0); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTPad::SetPad(Double_t xlow, Double_t ylow, Double_t xup, Double_t yup); virtual voidTPad::SetPad(const char* name, const char* title, Double_t xlow, Double_t ylow, Double_t xup, Double_t yup, Color_t color = 35, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTPad::SetPhi(Double_t phi = 30); virtual voidSetRange(Double_t xmin = 0, Double_t xmax = 1); virtual voidTAttPad::SetRightMargin(Float_t rightmargin); virtual voidTPad::SetSelected(TObject* obj); virtual voidTPad::SetTheta(Double_t theta = 30); virtual voidTPad::SetTicks(Int_t valuex = 1, Int_t valuey = 1); virtual voidTPad::SetTickx(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTicky(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tT",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:23619,Deployability,Update,Update,23619,"irtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSlider(); TSlider(const char* name, const char* title, Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 16, Short_t bordersize = 2, Short_t bordermode = -1); virtual voidTPad::Update(); virtual voidTPad::UseCurrentStyle()MENU ; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTPad::x3d(Option_t* type = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtual voidTPad::XYtoAbsPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual voidTPad::XYtoPixel(Double_t x, Double_t y, Int_t& xpixel, Int_t& ypixel) const; virtual Int_tTPad::YtoAbsPixel(Double_t y) co",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:13809,Integrability,Message,Message,13809,"dTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTPad::IsBatch() const; Bool_tTVirtualPad::IsBeingResized() const; virtual Bool_tTPad::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTPad::IsFolder() const; virtual Bool_tTPad::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTPad::IsRetained() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; virtual Bool_tTPad::IsVertical() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTPad::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTPad::Modified(Bool_t flag = 1)SIGNAL ; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; virtual Bool_tTPad::OpaqueMoving() const; virtual Bool_tTPad::OpaqueResizing() const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); static TVirtualPad*&TVirtualPad::Pad(); virtual Bool_tTVirtualPad::PadInHighlightMode() const; virtual Bool_tTVirtualPad::PadInSelectionMode() const; virtual Double_tTPad::PadtoX(Double_t x) const; vi",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:113,Modifiability,inherit,inheritance,113,". TSlider. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TSlider. class TSlider: public TPad. TSlider. A TSlider object is a specialized TPad including a TSliderBox object; The TSliderBox can be moved in the pad.; Slider drawing options include the possibility to change the slider; starting and ending positions or only one of them. The current slider position can be retrieved via the functions; TSlider::GetMinimum and TSlider::GetMaximum; These two functions return numbers in the range [0,1]. if a method has been set (via SetMethod), the expression is; executed via the interpreter when the button 1 is released. if no method has been set, and an object is referenced (SetObject; has been called), while the slider is being moved/resized,; the object ExecuteEvent function is called. //. Example 1 using SetMethod macro xyslider.C. { ; Example of macro featuring two sliders; TFile *f = new TFile(""hsimple.root"");; TH2F *hpxpy = (TH2F*)f->Get(""hpxpy"");; TCanvas *c1 = new TCanvas(""c1"");; TPad *pad = new TPad(""pad"",""lego pad"",0.1,0.1,0.98,0.98);; pad->SetFillColor(33);; pad->Draw();; pad->cd();; gStyle->SetFrameFillColor(42);; hpxpy->SetFillColor(46);; hpxpy->Draw(""lego1"");; c1->cd();. Create two sliders in main canvas. When button1; of the mouse will be released, action.C will be called; TSlider *xslider = new TSlider(""xslider"",""x"",0.1,0.02,0.98,0.08);; xslider->SetMethod("".x action.C"");; TSlider *yslider = new TSlider(""yslider"",""y"",0.02,0.1,0.06,0.98);; yslider->SetMethod("".x action.C"");; } . macro action.C; { ; Int_t nx = hpxpy->GetXaxis()->GetNbins();; Int_t ny = hpxpy->GetYaxis()->GetNbins();; Int_t binxmin = nx*xslider->GetMinimum();; Int_t binxmax = nx*xslider->GetMaximum();; hpxpy->GetXaxis()->SetRange(binxmin,binxmax);; Int_t binymin = ny*yslider->GetMinimum();",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:12898,Modifiability,Inherit,InheritsFrom,12898,"h() const; virtual Double_tTPad::GetWNDC() const; virtual UInt_tTPad::GetWw() const; virtual Double_tTPad::GetX1() const; virtual Double_tTPad::GetX2() const; Float_tTAttPad::GetXfile() const; virtual Double_tTPad::GetXlowNDC() const; Float_tTAttPad::GetXstat() const; virtual Double_tTPad::GetY1() const; virtual Double_tTPad::GetY2() const; Float_tTAttPad::GetYfile() const; virtual Double_tTPad::GetYlowNDC() const; Float_tTAttPad::GetYstat() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual Bool_tTPad::HasCrosshair() const; virtual Bool_tTPad::HasFixedAspectRatio() const; virtual ULong_tTPad::Hash() const; virtual Bool_tTPad::HasViewer3D() const; virtual voidTPad::HighLight(Color_t col = kRed, Bool_t set = kTRUE); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTPad::IsBatch() const; Bool_tTVirtualPad::IsBeingResized() const; virtual Bool_tTPad::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTPad::IsFolder() const; virtual Bool_tTPad::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTPad::IsRetained() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; virtual Bool_tTPad::IsVertical() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTPad::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTPad::Modified(Bool_t flag = 1)SIGNAL ; virtual voi",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:12964,Modifiability,Inherit,InheritsFrom,12964,"ad::GetWw() const; virtual Double_tTPad::GetX1() const; virtual Double_tTPad::GetX2() const; Float_tTAttPad::GetXfile() const; virtual Double_tTPad::GetXlowNDC() const; Float_tTAttPad::GetXstat() const; virtual Double_tTPad::GetY1() const; virtual Double_tTPad::GetY2() const; Float_tTAttPad::GetYfile() const; virtual Double_tTPad::GetYlowNDC() const; Float_tTAttPad::GetYstat() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual Bool_tTPad::HasCrosshair() const; virtual Bool_tTPad::HasFixedAspectRatio() const; virtual ULong_tTPad::Hash() const; virtual Bool_tTPad::HasViewer3D() const; virtual voidTPad::HighLight(Color_t col = kRed, Bool_t set = kTRUE); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTPad::IsBatch() const; Bool_tTVirtualPad::IsBeingResized() const; virtual Bool_tTPad::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTPad::IsFolder() const; virtual Bool_tTPad::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTPad::IsRetained() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; virtual Bool_tTPad::IsVertical() const; Bool_tTObject::IsZombie() const; virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTPad::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTPad::Modified(Bool_t flag = 1)SIGNAL ; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); virtual Int_",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:32660,Modifiability,Inherit,Inheritance,32660,"fXlowNDCX bottom left corner of pad in NDC [0,1]; Float_tTAttPad::fXstatX position where to draw the statistics; Double_tTPad::fXtoAbsPixelkConversion coefficient for X World to absolute pixel; Double_tTPad::fXtoPixelxpixel = fXtoPixelk + fXtoPixel*xworld; Double_tTPad::fXtoPixelkConversion coefficient for X World to pixel; Double_tTPad::fY1Y of lower Y coordinate; Double_tTPad::fY2Y of upper Y coordinate; Double_tTPad::fYUpNDC; Float_tTAttPad::fYfileY position where to draw the file name; Double_tTPad::fYlowNDCY bottom left corner of pad in NDC [0,1]; Float_tTAttPad::fYstatY position where to draw the statistics; Double_tTPad::fYtoAbsPixelkConversion coefficient for Y World to absolute pixel; Double_tTPad::fYtoPixelypixel = fYtoPixelk + fYtoPixel*yworld; Double_tTPad::fYtoPixelkConversion coefficient for Y World to pixel; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static Int_tTPad::fgMaxPickDistanceMaximum Pick Distance. Class Charts. Inheritance Chart:. TObject. TAttLine. TAttFill. TAttPad. TQObject. ←; TVirtualPad. TAttBBox2D. ←; TPad. ←; TSlider. Function documentation; TSlider(); slider default constructor. TSlider(const char* name, const char* title, Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 16, Short_t bordersize = 2, Short_t bordermode = -1); Slider normal constructor. x1,y1,x2,y2 are in pad user coordinates. ~TSlider(); slider default destructor. void Paint(Option_t* option = """"); Paint this slider with its current attributes. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetRange(Double_t xmin = 0, Double_t xmax = 1); -*-*-*-*-*-*Set Slider range in [0,1]; *-* =========================. TSlider(const TSlider& org). TSlider & operator=(const TSlider& rhs). TObject * GetObject() const; {return fObject;}. Double_t GetMinimum() const; {return fMinimum;}. Double_t GetMaximum() const; {return fMaximum;}. const char * GetMe",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:12590,Security,Hash,Hash,12590,"tUxmin() const; virtual Double_tTPad::GetUymax() const; virtual Double_tTPad::GetUymin() const; virtual TView*TPad::GetView() const; virtual TObject*TPad::GetView3D() const; virtual TVirtualViewer3D*TPad::GetViewer3D(Option_t* type = """"); virtual TVirtualPad*TPad::GetVirtCanvas() const; virtual UInt_tTPad::GetWh() const; virtual Double_tTPad::GetWNDC() const; virtual UInt_tTPad::GetWw() const; virtual Double_tTPad::GetX1() const; virtual Double_tTPad::GetX2() const; Float_tTAttPad::GetXfile() const; virtual Double_tTPad::GetXlowNDC() const; Float_tTAttPad::GetXstat() const; virtual Double_tTPad::GetY1() const; virtual Double_tTPad::GetY2() const; Float_tTAttPad::GetYfile() const; virtual Double_tTPad::GetYlowNDC() const; Float_tTAttPad::GetYstat() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual Bool_tTPad::HasCrosshair() const; virtual Bool_tTPad::HasFixedAspectRatio() const; virtual ULong_tTPad::Hash() const; virtual Bool_tTPad::HasViewer3D() const; virtual voidTPad::HighLight(Color_t col = kRed, Bool_t set = kTRUE); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTPad::IsBatch() const; Bool_tTVirtualPad::IsBeingResized() const; virtual Bool_tTPad::IsEditable() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTPad::IsFolder() const; virtual Bool_tTPad::IsModified() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTPad::IsRetained() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; virtual Bool_tTPad::IsVertical() const; Bool_tTObject::IsZombie() c",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:23358,Testability,Test,TestBit,23358,"tTicky(Int_t value = 1)TOGGLE ; virtual voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSlider(); TSlider(const char* name, const char* title, Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 16, Short_t bordersize = 2, Short_t bordermode = -1); virtual voidTPad::Update(); virtual voidTPad::UseCurrentStyle()MENU ; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTPad::x3d(Option_t* type = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:23397,Testability,Test,TestBits,23397," voidTPad::SetTitle(const char* title = """"); virtual voidTPad::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTAttPad::SetTopMargin(Float_t topmargin); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTPad::SetVertical(Bool_t vert = kTRUE); virtual voidTPad::SetView(TView* view = 0); virtual voidTPad::SetViewer3D(TVirtualViewer3D* viewer3d); virtual voidTAttPad::SetXfile(Float_t xfile); virtual voidTAttPad::SetXstat(Float_t xstat); virtual voidTAttPad::SetYfile(Float_t yfile); virtual voidTAttPad::SetYstat(Float_t ystat); virtual voidTPad::ShowGuidelines(TObject* object, const Int_t event, const char mode = 'i', const bool cling = true); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidTPad::StartEditing()SIGNAL ; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSlider(); TSlider(const char* name, const char* title, Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 16, Short_t bordersize = 2, Short_t bordermode = -1); virtual voidTPad::Update(); virtual voidTPad::UseCurrentStyle()MENU ; virtual Int_tTPad::UtoAbsPixel(Double_t u) const; virtual Int_tTPad::UtoPixel(Double_t u) const; virtual Int_tTPad::VtoAbsPixel(Double_t v) const; virtual Int_tTPad::VtoPixel(Double_t v) const; virtual TObject*TPad::WaitPrimitive(const char* pname = """", const char* emode = """"); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const; virtual voidTPad::x3d(Option_t* type = """"); virtual Int_tTPad::XtoAbsPixel(Double_t x) const; virtual Double_tTPad::XtoPad(Double_t x) const; virtual Int_tTPad::XtoPixel(Double_t x) const; virtu",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:29260,Testability,log,log,29260,"e if fixed aspect ratio; TFrame*TPad::fFrame! Pointer to 2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); Double_tfMaximumSlider maximum value in [0,1]; TStringfMethodcommand to be executed when slider is changed; Double_tfMinimumSlider minimum value in [0,1]; Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; TObject*fObject!Pointer to associated object; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TObject*TPad::fPadView3D! 3D View of this TPad; Double_tTPad::fPhiphi angle to view as lego/surface; Double_tTPad::fPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tTPad::fPixeltoXkConversion coefficient for pixel to X World; Double_tTPad::fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tTPad::fPixeltoYkConversion coefficient for pixel to Y World; Int_tTPad::fPixmapID! Off-screen pixmap i",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:29317,Testability,log,log,29317,"2-D frame (if one exists); Int_tTAttPad::fFrameBorderModepad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); Double_tfMaximumSlider maximum value in [0,1]; TStringfMethodcommand to be executed when slider is changed; Double_tfMinimumSlider minimum value in [0,1]; Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; TObject*fObject!Pointer to associated object; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TObject*TPad::fPadView3D! 3D View of this TPad; Double_tTPad::fPhiphi angle to view as lego/surface; Double_tTPad::fPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tTPad::fPixeltoXkConversion coefficient for pixel to X World; Double_tTPad::fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tTPad::fPixeltoYkConversion coefficient for pixel to Y World; Int_tTPad::fPixmapID! Off-screen pixmap identifier; TList*TPad::fPrimitives->List of primitives (s",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:29374,Testability,log,log,29374,"pad frame border mode; Width_tTAttPad::fFrameBorderSizepad frame border size; Color_tTAttPad::fFrameFillColorpad frame fill color; Style_tTAttPad::fFrameFillStylepad frame fill style; Color_tTAttPad::fFrameLineColorpad frame line color; Style_tTAttPad::fFrameLineStylepad frame line style; Width_tTAttPad::fFrameLineWidthpad frame line width; Int_tTPad::fGLDevice! OpenGL off-screen pixmap identifier; Bool_tTPad::fGridxSet to true if grid along X; Bool_tTPad::fGridySet to true if grid along Y; Double_tTPad::fHNDCHeight of pad along Y in NDC; Float_tTAttPad::fLeftMarginLeftMargin; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Int_tTPad::fLogx(=0 if X linear scale, =1 if log scale); Int_tTPad::fLogy(=0 if Y linear scale, =1 if log scale); Int_tTPad::fLogz(=0 if Z linear scale, =1 if log scale); Double_tfMaximumSlider maximum value in [0,1]; TStringfMethodcommand to be executed when slider is changed; Double_tfMinimumSlider minimum value in [0,1]; Bool_tTPad::fModifiedSet to true when pad is modified; TPad*TPad::fMother! pointer to mother of the list; TStringTPad::fNamePad name; Int_tTPad::fNumberpad number identifier; TObject*fObject!Pointer to associated object; Int_tTPad::fPadPaintSet to 1 while painting the pad; TObject*TPad::fPadPointer! free pointer; TObject*TPad::fPadView3D! 3D View of this TPad; Double_tTPad::fPhiphi angle to view as lego/surface; Double_tTPad::fPixeltoXxworld = fPixeltoXk + fPixeltoX*xpixel; Double_tTPad::fPixeltoXkConversion coefficient for pixel to X World; Double_tTPad::fPixeltoYyworld = fPixeltoYk + fPixeltoY*ypixel; Double_tTPad::fPixeltoYkConversion coefficient for pixel to Y World; Int_tTPad::fPixmapID! Off-screen pixmap identifier; TList*TPad::fPrimitives->List of primitives (subpads); Bool_tTVirtualPad::fResizing!true when resizing ",MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSlider.html:3612,Usability,Clear,Clear,3612,,MatchSource.WIKI,root/html604/TSlider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSlider.html
https://root.cern/root/html604/TSliderBox.html:1526,Availability,Error,Error,1526,"ual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTWbox::Copy(TObject& wbox) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTBox::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTWbox::Draw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTWbox::DrawWbox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 33, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTBox::GetBBox(); virtual TPointTBox::GetBBoxCenter(); Short_tTWbox::GetBorderMode() const; Short_tTWbox::GetBorderSize() const; Int_tTWbox::GetDarkColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; Int_tTWbox::GetLightColor() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetL",MatchSource.WIKI,root/html604/TSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSliderBox.html
https://root.cern/root/html604/TSliderBox.html:1655,Availability,error,error,1655,"Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTWbox::Copy(TObject& wbox) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTBox::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTWbox::Draw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTWbox::DrawWbox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 33, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTBox::GetBBox(); virtual TPointTBox::GetBBoxCenter(); Short_tTWbox::GetBorderMode() const; Short_tTWbox::GetBorderSize() const; Int_tTWbox::GetDarkColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; Int_tTWbox::GetLightColor() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; virtual char*TObjec",MatchSource.WIKI,root/html604/TSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSliderBox.html
https://root.cern/root/html604/TSliderBox.html:1739,Availability,error,error,1739,"t; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTWbox::Copy(TObject& wbox) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTBox::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTWbox::Draw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTWbox::DrawWbox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 33, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Rectangle_tTBox::GetBBox(); virtual TPointTBox::GetBBoxCenter(); Short_tTWbox::GetBorderMode() const; Short_tTWbox::GetBorderSize() const; Int_tTWbox::GetDarkColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; Int_tTWbox::GetLightColor() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); v",MatchSource.WIKI,root/html604/TSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSliderBox.html
https://root.cern/root/html604/TSliderBox.html:8886,Availability,down,down,8886,"t::EStatusBitsTObject::kCanDelete; static TBox::(anonymous)TBox::kCannotMove; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Short_tTWbox::fBorderModeBordermode (-1=down, 0 = no border, 1=up); Short_tTWbox::fBorderSizewindow box bordersize in pixels; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Bool_tTBox::fResizing!True if box is being resized; TSlider*fSliderPointer to slider; Double_tTBox::fX1X of 1st point; Double_tTBox::fX2X of 2nd point; Double_tTBox::fY1Y of 1st point; Double_tTBox::fY2Y of 2nd point. Class Charts. Inheritance Chart:. TObject. TAttLine. TAttFill. TAttBBox2D. ←; TBox. ←; TWbox. ←; TSliderBox. Function documentation; TSliderBox(); SliderBox default constructor. TSliderBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 18, Short_t bordersize = 2, Short_t bordermode = -1); SliderBox normal constructor. ~TSliderBox(); SliderBox default destructor. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Interaction with a slider. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. TSliderBox(const TSliderBox& sb); { }. TSliderBox& operator=(const TSliderBox& sb). void SetSlider(TSlider* slider); {fSlider=slider;}. » Author",MatchSource.WIKI,root/html604/TSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSliderBox.html
https://root.cern/root/html604/TSliderBox.html:116,Modifiability,inherit,inheritance,116,". TSliderBox. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF2D; » GPAD; » TSliderBox. class TSliderBox: public TWbox. TSliderBox. The moving box in a TSlider. Function Members (Methods); public:. virtual~TSliderBox(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTWbox::Copy(TObject& wbox) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTBox::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTWbox::Draw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTWbox::DrawWbox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 33, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) ",MatchSource.WIKI,root/html604/TSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSliderBox.html
https://root.cern/root/html604/TSliderBox.html:3221,Modifiability,Inherit,InheritsFrom,3221,"n() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; Int_tTWbox::GetLightColor() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTBox::GetX1() const; Double_tTBox::GetX2() const; Double_tTBox::GetY1() const; Double_tTBox::GetY2() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTBox::HideToolTip(Int_t event); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTBox::IsBeingResized() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTBox::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTBox::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void*",MatchSource.WIKI,root/html604/TSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSliderBox.html
https://root.cern/root/html604/TSliderBox.html:3287,Modifiability,Inherit,InheritsFrom,3287,"tFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; Int_tTWbox::GetLightColor() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTBox::GetX1() const; Double_tTBox::GetX2() const; Double_tTBox::GetY1() const; Double_tTBox::GetY2() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTBox::HideToolTip(Int_t event); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTBox::IsBeingResized() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTBox::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTBox::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operato",MatchSource.WIKI,root/html604/TSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSliderBox.html
https://root.cern/root/html604/TSliderBox.html:9409,Modifiability,Inherit,Inheritance,9409,"TObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Short_tTWbox::fBorderModeBordermode (-1=down, 0 = no border, 1=up); Short_tTWbox::fBorderSizewindow box bordersize in pixels; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Bool_tTBox::fResizing!True if box is being resized; TSlider*fSliderPointer to slider; Double_tTBox::fX1X of 1st point; Double_tTBox::fX2X of 2nd point; Double_tTBox::fY1Y of 1st point; Double_tTBox::fY2Y of 2nd point. Class Charts. Inheritance Chart:. TObject. TAttLine. TAttFill. TAttBBox2D. ←; TBox. ←; TWbox. ←; TSliderBox. Function documentation; TSliderBox(); SliderBox default constructor. TSliderBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 18, Short_t bordersize = 2, Short_t bordermode = -1); SliderBox normal constructor. ~TSliderBox(); SliderBox default destructor. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Interaction with a slider. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. TSliderBox(const TSliderBox& sb); { }. TSliderBox& operator=(const TSliderBox& sb). void SetSlider(TSlider* slider); {fSlider=slider;}. » Author: Rene Brun 23/11/96 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/gpad:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT sup",MatchSource.WIKI,root/html604/TSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSliderBox.html
https://root.cern/root/html604/TSliderBox.html:3067,Security,Hash,Hash,3067,"oxCenter(); Short_tTWbox::GetBorderMode() const; Short_tTWbox::GetBorderSize() const; Int_tTWbox::GetDarkColor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; Int_tTWbox::GetLightColor() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Double_tTBox::GetX1() const; Double_tTBox::GetX2() const; Double_tTBox::GetY1() const; Double_tTBox::GetY2() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTBox::HideToolTip(Int_t event); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTBox::IsBeingResized() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Int_tTBox::IsInside(Double_t x, Double_t y) const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTBox::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator de",MatchSource.WIKI,root/html604/TSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSliderBox.html
https://root.cern/root/html604/TSliderBox.html:7312,Testability,Test,TestBit,7312,"Int_t x); virtual voidTBox::SetBBoxY1(const Int_t y); virtual voidTBox::SetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTWbox::SetBorderMode(Short_t bordermode)MENU ; virtual voidTWbox::SetBorderSize(Short_t bordersize)MENU ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); static voidTObject::SetObjectStat(Bool_t stat); voidSetSlider(TSlider* slider); virtual voidTBox::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTBox::SetX1(Double_t x1); virtual voidTBox::SetX2(Double_t x2); virtual voidTBox::SetY1(Double_t y1); virtual voidTBox::SetY2(Double_t y2); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSliderBox(); TSliderBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 18, Short_t bordersize = 2, Short_t bordermode = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSliderBox.html
https://root.cern/root/html604/TSliderBox.html:7351,Testability,Test,TestBits,7351,"Int_t x); virtual voidTBox::SetBBoxY1(const Int_t y); virtual voidTBox::SetBBoxY2(const Int_t y); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTWbox::SetBorderMode(Short_t bordermode)MENU ; virtual voidTWbox::SetBorderSize(Short_t bordersize)MENU ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); static voidTObject::SetObjectStat(Bool_t stat); voidSetSlider(TSlider* slider); virtual voidTBox::SetToolTipText(const char* text, Long_t delayms = 1000); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTBox::SetX1(Double_t x1); virtual voidTBox::SetX2(Double_t x2); virtual voidTBox::SetY1(Double_t y1); virtual voidTBox::SetY2(Double_t y2); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSliderBox(); TSliderBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 18, Short_t bordersize = 2, Short_t bordermode = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSliderBox.html
https://root.cern/root/html604/TSliderBox.html:658,Usability,Clear,Clear,658," virtual~TSliderBox(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTWbox::Copy(TObject& wbox) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTBox::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTWbox::Draw(Option_t* option = """"); virtual TBox*TBox::DrawBox(Double_t x1, Double_t y1, Double_t x2, Double_t y2); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTWbox::DrawWbox(Double_t x1, Double_t y1, Double_t x2, Double_t y2, Color_t color = 33, Short_t bordersize = 5, Short_t bordermode = -1); virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) ",MatchSource.WIKI,root/html604/TSliderBox.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSliderBox.html
https://root.cern/root/html604/TSocket.html:1660,Availability,Error,Error,1660,"""); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetBytesRecv() const; UInt_tGetBytesSent() const; static Int_tGetClientProtocol(); Int_tGetCompressionAlgorithm() const; Int_tGetCompressionLevel() const; Int_tGetCompressionSettings() const; virtual Int_tGetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressGetInetAddress() const; TTimeStampGetLastUsage(); virtual",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:1789,Availability,error,error,1789,"Named::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetBytesRecv() const; UInt_tGetBytesSent() const; static Int_tGetClientProtocol(); Int_tGetCompressionAlgorithm() const; Int_tGetCompressionLevel() const; Int_tGetCompressionSettings() const; virtual Int_tGetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressGetInetAddress() const; TTimeStampGetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:1873,Availability,error,error,1873,"me = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; UInt_tGetBytesRecv() const; UInt_tGetBytesSent() const; static Int_tGetClientProtocol(); Int_tGetCompressionAlgorithm() const; Int_tGetCompressionLevel() const; Int_tGetCompressionSettings() const; virtual Int_tGetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressGetInetAddress() const; TTimeStampGetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); vi",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:4115,Availability,error,error,4115," ULong64_tGetSocketBytesSent(); Int_tGetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidNetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tReconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*& mess); virtual Int_tRecv(Int_t& status, Int_t& kind); virtual Int_tRecv(char* mess, Int_t max); virtual Int_tRecv(char* mess, Int_t max, Int_t& kind); virtual Int_tRecvRaw(void* buffer, Int_t length, ESendR",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:13751,Availability,down,down,13751," check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TSocket(const char* sockpath); Create a socket in the Unix domain on 'sockpath'.; Returns when connection has been accepted by the server. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TSocket(Int_t descriptor); Create a socket. The socket will adopt previously opened TCP socket with; descriptor desc. TSocket(Int_t descriptor, const char* sockpath); Create a socket. The socket will adopt previously opened Unix socket with; descriptor desc. The sockpath arg is for info purposes only. Use; this method to adopt e.g. a socket created via socketpair(). TSocket(const TSocket& s); TSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Sen",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:14060,Availability,error,error,14060,"idity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TSocket(Int_t descriptor); Create a socket. The socket will adopt previously opened TCP socket with; descriptor desc. TSocket(Int_t descriptor, const char* sockpath); Create a socket. The socket will adopt previously opened Unix socket with; descriptor desc. The sockpath arg is for info purposes only. Use; this method to adopt e.g. a socket created via socketpair(). TSocket(const TSocket& s); TSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:14194,Availability,error,error,14194,"operly; closed on program termination. TSocket(Int_t descriptor); Create a socket. The socket will adopt previously opened TCP socket with; descriptor desc. TSocket(Int_t descriptor, const char* sockpath); Create a socket. The socket will adopt previously opened Unix socket with; descriptor desc. The sockpath arg is for info purposes only. Use; this method to adopt e.g. a socket created via socketpair(). TSocket(const TSocket& s); TSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" fiel",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:14385,Availability,avail,available,14385,"; Create a socket. The socket will adopt previously opened Unix socket with; descriptor desc. The sockpath arg is for info purposes only. Use; this method to adopt e.g. a socket created via socketpair(). TSocket(const TSocket& s); TSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an ackno",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:14693,Availability,error,error,14693,"ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:14900,Availability,error,error,14900," dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent and -1 in; case of error. In case the kind has been or'ed with kMESS_ACK, the call; will only return after having received an acknowledgement, making the; sending process synchronous. Int_t Send(const TMessage& mess",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:15286,Availability,error,error,15286,"d, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent and -1 in; case of error. In case the kind has been or'ed with kMESS_ACK, the call; will only return after having received an acknowledgement, making the; sending process synchronous. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EP",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:15664,Availability,error,error,15664,"has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent and -1 in; case of error. In case the kind has been or'ed with kMESS_ACK, the call; will only return after having received an acknowledgement, making the; sending process synchronous. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET).; support for streaming TStreamerInfo added by Rene Brun May 2008; support for streaming TProcessID added by Rene Brun June 2008. Int_t SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); Send an object. Returns the number of bytes sent and -1 in case of error.; In case the ""kind"" has been or'ed with kMESS_ACK, the call will only; return after having re",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:15965,Availability,error,error,15965," been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent and -1 in; case of error. In case the kind has been or'ed with kMESS_ACK, the call; will only return after having received an acknowledgement, making the; sending process synchronous. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET).; support for streaming TStreamerInfo added by Rene Brun May 2008; support for streaming TProcessID added by Rene Brun June 2008. Int_t SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); Send an object. Returns the number of bytes sent and -1 in case of error.; In case the ""kind"" has been or'ed with kMESS_ACK, the call will only; return after having received an acknowledgement, making the sending; synchronous. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Send a raw buffer of specified length. Using option kOob one can send; OOB data. Returns the number of bytes sent or -1 in case of error.; Returns -4 in case of ",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:16526,Availability,error,error,16526,"NG); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent and -1 in; case of error. In case the kind has been or'ed with kMESS_ACK, the call; will only return after having received an acknowledgement, making the; sending process synchronous. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET).; support for streaming TStreamerInfo added by Rene Brun May 2008; support for streaming TProcessID added by Rene Brun June 2008. Int_t SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); Send an object. Returns the number of bytes sent and -1 in case of error.; In case the ""kind"" has been or'ed with kMESS_ACK, the call will only; return after having received an acknowledgement, making the sending; synchronous. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Send a raw buffer of specified length. Using option kOob one can send; OOB data. Returns the number of bytes sent or -1 in case of error.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). void SendStreamerInfos(const TMessage& mess); Check if TStreamerInfo must be sent. The list of TStreamerInfo of classes; in the object in the message is in the fInfos list of the message.; We send only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on th",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:16899,Availability,error,error,16899,"ge object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET).; support for streaming TStreamerInfo added by Rene Brun May 2008; support for streaming TProcessID added by Rene Brun June 2008. Int_t SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); Send an object. Returns the number of bytes sent and -1 in case of error.; In case the ""kind"" has been or'ed with kMESS_ACK, the call will only; return after having received an acknowledgement, making the sending; synchronous. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Send a raw buffer of specified length. Using option kOob one can send; OOB data. Returns the number of bytes sent or -1 in case of error.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). void SendStreamerInfos(const TMessage& mess); Check if TStreamerInfo must be sent. The list of TStreamerInfo of classes; in the object in the message is in the fInfos list of the message.; We send only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:17759,Availability,error,error,17759,"ndRecvOptions opt = kDefault); Send a raw buffer of specified length. Using option kOob one can send; OOB data. Returns the number of bytes sent or -1 in case of error.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). void SendStreamerInfos(const TMessage& mess); Check if TStreamerInfo must be sent. The list of TStreamerInfo of classes; in the object in the message is in the fInfos list of the message.; We send only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is nothing to be read). Int_t Recv(Int_t& status, Int_t& kind); Receives a status and a message type. Returns length of received; integers, 2*sizeof(Int_t) (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking; socket would block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. ",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:18095,Availability,error,error,18095,"ss); Check if TStreamerInfo must be sent. The list of TStreamerInfo of classes; in the object in the message is in the fInfos list of the message.; We send only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is nothing to be read). Int_t Recv(Int_t& status, Int_t& kind); Receives a status and a message type. Returns length of received; integers, 2*sizeof(Int_t) (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking; socket would block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns ",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:18385,Availability,error,error,18385,"sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is nothing to be read). Int_t Recv(Int_t& status, Int_t& kind); Receives a status and a message type. Returns length of received; integers, 2*sizeof(Int_t) (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking; socket would block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containin",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:18677,Availability,error,error,18677,"ING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is nothing to be read). Int_t Recv(Int_t& status, Int_t& kind); Receives a status and a message type. Returns length of received; integers, 2*sizeof(Int_t) (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking; socket would block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will b",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:19086,Availability,error,error,19086," or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is nothing to be read). Int_t Recv(Int_t& status, Int_t& kind); Receives a status and a message type. Returns length of received; integers, 2*sizeof(Int_t) (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking; socket would block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionAlgorithm(Int_t al",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:19850,Availability,error,error,19850,"e mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and algorithm:; settings = 100 * algorithm + level. level = 0, objects written to this file will not be compressed.; level = 1, minimal compression level but fast. level = 9, maximal compression level but slower and might use more memory.; (For the currently supported algorithms, the maximum level is 9); If compress is negative it indicates the compression level is not set yet. The enumeration ROOT::ECompressionAlgorithm associates each; algorithm with a number. There is a utility function to help; to set the value ",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:19893,Availability,error,error,19893,", Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and algorithm:; settings = 100 * algorithm + level. level = 0, objects written to this file will not be compressed.; level = 1, minimal compression level but fast. level = 9, maximal compression level but slower and might use more memory.; (For the currently supported algorithms, the maximum level is 9); If compress is negative it indicates the compression level is not set yet. The enumeration ROOT::ECompressionAlgorithm associates each; algorithm with a number. There is a utility function to help; to set the value of the argument. For example,; ROOT::C",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:19959,Availability,error,error,19959,". Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and algorithm:; settings = 100 * algorithm + level. level = 0, objects written to this file will not be compressed.; level = 1, minimal compression level but fast. level = 9, maximal compression level but slower and might use more memory.; (For the currently supported algorithms, the maximum level is 9); If compress is negative it indicates the compression level is not set yet. The enumeration ROOT::ECompressionAlgorithm associates each; algorithm with a number. There is a utility function to help; to set the value of the argument. For example,; ROOT::CompressionSettings(ROOT::kLZMA, 1); will build an integer which will set the compression to use; ",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:22428,Availability,error,error,22428,"hSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server. url: [[proto][p][auth]://][user@]host[:port][/service][?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server;; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd; ignored for proofd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [port] = is the remote port number; [service] = service name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* ",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:24270,Availability,error,error,24270,"ally. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning s",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:25314,Availability,error,error,25314,":CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. Int_t GetCompressionAlgorithm() const. Int_t GetCompressionLevel() const. Int_t GetCompressionSettings() const. friend class TProofServ; // to be able to call SetDescriptor(). TSocket(); { }. TSocket& operator=(const TSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. virtual ~TSocket(); { Close(); }. Int_t GetDescriptor() const; { return fSocket; }. TInetAddress GetInetAddress() const; { return fAddress; }. Int_t GetPort() const; { return fAddress.GetPort(); }. const char * GetService() const; { return fService; }. Int_t GetServType() const; { return (Int_t)fServType; }. UInt_t GetBytesSent() const; { return fBytesSent; }. UInt_t GetBytesRecv() const; { return fBytesRecv; }. Int_t GetRemoteProtocol() const; { return fRemoteProtocol; }. TSecContext * GetSe",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:25328,Availability,error,error,25328,":CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. Int_t GetCompressionAlgorithm() const. Int_t GetCompressionLevel() const. Int_t GetCompressionSettings() const. friend class TProofServ; // to be able to call SetDescriptor(). TSocket(); { }. TSocket& operator=(const TSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. virtual ~TSocket(); { Close(); }. Int_t GetDescriptor() const; { return fSocket; }. TInetAddress GetInetAddress() const; { return fAddress; }. Int_t GetPort() const; { return fAddress.GetPort(); }. const char * GetService() const; { return fService; }. Int_t GetServType() const; { return (Int_t)fServType; }. UInt_t GetBytesSent() const; { return fBytesSent; }. UInt_t GetBytesRecv() const; { return fBytesRecv; }. Int_t GetRemoteProtocol() const; { return fRemoteProtocol; }. TSecContext * GetSe",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:25354,Availability,error,error,25354,":CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. Int_t GetCompressionAlgorithm() const. Int_t GetCompressionLevel() const. Int_t GetCompressionSettings() const. friend class TProofServ; // to be able to call SetDescriptor(). TSocket(); { }. TSocket& operator=(const TSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. virtual ~TSocket(); { Close(); }. Int_t GetDescriptor() const; { return fSocket; }. TInetAddress GetInetAddress() const; { return fAddress; }. Int_t GetPort() const; { return fAddress.GetPort(); }. const char * GetService() const; { return fService; }. Int_t GetServType() const; { return (Int_t)fServType; }. UInt_t GetBytesSent() const; { return fBytesSent; }. UInt_t GetBytesRecv() const; { return fBytesRecv; }. Int_t GetRemoteProtocol() const; { return fRemoteProtocol; }. TSecContext * GetSe",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:10240,Integrability,protocol,protocol,10240,"ted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TSocket::EServiceTypekPROOFD; static TSocket::EServiceTypekROOTD; static TSocket::EInterestkRead; static TSocket::EServiceTypekSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestkWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressfAddressremote internet address and port #; TBitsfBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tfBytesRecvtotal bytes received over this socket; UInt_tfBytesSenttotal bytes sent using this socket; Int_tfCompressCompression level and algorithm; TTimeStampfLastUsageTime stamp of last usage; TVirtualMutex*fLastUsageMtxProtect last usage setting / reading; TInetAddressfLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tfRemoteProtocolprotocol of remote daemon; TSecContext*fSecContextafter a successful Authenticate call; TSocket::EServiceTypefServTyperemote service type; TStringfServicename of service (matches remote port #); Int_tfSocketsocket descriptor; Int_tfTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*fUUIDslist of TProcessIDs already sent through the socket; TStringfUrlneeds this for special authentication options; static ULong64_tfgBytesRecvtotal bytes received by all socket objects; static ULong64_tfgBytesSenttotal bytes sent by all socket objects; static Int_tfgClientProtocolclient ""protocol"" version. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←. TPSocket. TSSLSocket. TServerSocket; ←. TPServerSocket. TXSocket; ←. TXUnixSocket. Function documentation; TSocket(TInetAddress address, const char* service, Int_t tcpwindowsize = -1); Create a socket. Connect to the named service at address addr.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the windo",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:14746,Integrability,message,message,14746,"n(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent and -1 in; case of error. In case the kind has been or'ed with kMESS_ACK, the call; will ",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:15130,Integrability,message,message,15130,". Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent and -1 in; case of error. In case the kind has been or'ed with kMESS_ACK, the call; will only return after having received an acknowledgement, making the; sending process synchronous. Int_t Send(const TMessage& mess); Send a TMessage object. Returns the number of bytes in the TMessage; that were sent and -1 in case of error. In case the TMessage::What; has been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, makin",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:17173,Integrability,message,message,17173,"oBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET).; support for streaming TStreamerInfo added by Rene Brun May 2008; support for streaming TProcessID added by Rene Brun June 2008. Int_t SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); Send an object. Returns the number of bytes sent and -1 in case of error.; In case the ""kind"" has been or'ed with kMESS_ACK, the call will only; return after having received an acknowledgement, making the sending; synchronous. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Send a raw buffer of specified length. Using option kOob one can send; OOB data. Returns the number of bytes sent or -1 in case of error.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). void SendStreamerInfos(const TMessage& mess); Check if TStreamerInfo must be sent. The list of TStreamerInfo of classes; in the object in the message is in the fInfos list of the message.; We send only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is n",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:17210,Integrability,message,message,17210,"oBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET).; support for streaming TStreamerInfo added by Rene Brun May 2008; support for streaming TProcessID added by Rene Brun June 2008. Int_t SendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); Send an object. Returns the number of bytes sent and -1 in case of error.; In case the ""kind"" has been or'ed with kMESS_ACK, the call will only; return after having received an acknowledgement, making the sending; synchronous. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Send a raw buffer of specified length. Using option kOob one can send; OOB data. Returns the number of bytes sent or -1 in case of error.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). void SendStreamerInfos(const TMessage& mess); Check if TStreamerInfo must be sent. The list of TStreamerInfo of classes; in the object in the message is in the fInfos list of the message.; We send only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is n",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:17405,Integrability,message,message,17405,"ject(const TObject* obj, Int_t kind = kMESS_OBJECT); Send an object. Returns the number of bytes sent and -1 in case of error.; In case the ""kind"" has been or'ed with kMESS_ACK, the call will only; return after having received an acknowledgement, making the sending; synchronous. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Send a raw buffer of specified length. Using option kOob one can send; OOB data. Returns the number of bytes sent or -1 in case of error.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). void SendStreamerInfos(const TMessage& mess); Check if TStreamerInfo must be sent. The list of TStreamerInfo of classes; in the object in the message is in the fInfos list of the message.; We send only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is nothing to be read). Int_t Recv(Int_t& status, Int_t& kind); Receives a status and a message type. Returns length of received; integers, 2*sizeof(Int_t) (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:17576,Integrability,message,message,17576,"en or'ed with kMESS_ACK, the call will only; return after having received an acknowledgement, making the sending; synchronous. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Send a raw buffer of specified length. Using option kOob one can send; OOB data. Returns the number of bytes sent or -1 in case of error.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). void SendStreamerInfos(const TMessage& mess); Check if TStreamerInfo must be sent. The list of TStreamerInfo of classes; in the object in the message is in the fInfos list of the message.; We send only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is nothing to be read). Int_t Recv(Int_t& status, Int_t& kind); Receives a status and a message type. Returns length of received; integers, 2*sizeof(Int_t) (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking; socket would block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMe",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:17621,Integrability,message,message,17621," an acknowledgement, making the sending; synchronous. Int_t SendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Send a raw buffer of specified length. Using option kOob one can send; OOB data. Returns the number of bytes sent or -1 in case of error.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). void SendStreamerInfos(const TMessage& mess); Check if TStreamerInfo must be sent. The list of TStreamerInfo of classes; in the object in the message is in the fInfos list of the message.; We send only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is nothing to be read). Int_t Recv(Int_t& status, Int_t& kind); Receives a status and a message type. Returns length of received; integers, 2*sizeof(Int_t) (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking; socket would block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other sid",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:17926,Integrability,message,message,17926,"r.; Returns -4 in case of kNoBlock and errno == EWOULDBLOCK.; Returns -5 if pipe broken or reset by peer (EPIPE || ECONNRESET). void SendStreamerInfos(const TMessage& mess); Check if TStreamerInfo must be sent. The list of TStreamerInfo of classes; in the object in the message is in the fInfos list of the message.; We send only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is nothing to be read). Int_t Recv(Int_t& status, Int_t& kind); Receives a status and a message type. Returns length of received; integers, 2*sizeof(Int_t) (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking; socket would block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRe",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:17978,Integrability,message,message,17978,"-5 if pipe broken or reset by peer (EPIPE || ECONNRESET). void SendStreamerInfos(const TMessage& mess); Check if TStreamerInfo must be sent. The list of TStreamerInfo of classes; in the object in the message is in the fInfos list of the message.; We send only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is nothing to be read). Int_t Recv(Int_t& status, Int_t& kind); Receives a status and a message type. Returns length of received; integers, 2*sizeof(Int_t) (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking; socket would block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length byt",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:18250,Integrability,message,message,18250,"end only the TStreamerInfos not yet sent on this socket. void SendProcessIDs(const TMessage& mess); Check if TProcessIDs must be sent. The list of TProcessIDs; in the object in the message is found by looking in the TMessage bits.; We send only the TProcessIDs not yet send on this socket. Int_t Recv(char* mess, Int_t max); Receive a character string message of maximum max length. The expected; message must be of type kMESS_STRING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is nothing to be read). Int_t Recv(Int_t& status, Int_t& kind); Receives a status and a message type. Returns length of received; integers, 2*sizeof(Int_t) (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking; socket would block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:18593,Integrability,message,message,18593,"ING. Returns length of received string; (can be 0 if otherside of connection is closed) or -1 in case of error; or -4 in case a non-blocking socket would block (i.e. there is nothing; to be read). Int_t Recv(char* mess, Int_t max, Int_t& kind); Receive a character string message of maximum max length. Returns in; kind the message type. Returns length of received string+4 (can be 0 if; other side of connection is closed) or -1 in case of error or -4 in; case a non-blocking socket would block (i.e. there is nothing to be read). Int_t Recv(Int_t& status, Int_t& kind); Receives a status and a message type. Returns length of received; integers, 2*sizeof(Int_t) (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking; socket would block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will b",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:19336,Integrability,message,message,19336,"0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking; socket would block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and al",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:19383,Integrability,message,message,19383,"ld block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and algorithm:; settings = 100 * algorithm + level. level = 0, objects written to this file will not be compres",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:19439,Integrability,message,message,19439,"ld block (i.e. there is nothing to be read). Int_t Recv(TMessage*& mess); Receive a TMessage object. The user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and algorithm:; settings = 100 * algorithm + level. level = 0, objects written to this file will not be compres",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:19543,Integrability,message,message,19543,"he user must delete the TMessage object.; Returns length of message in bytes (can be 0 if other side of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and algorithm:; settings = 100 * algorithm + level. level = 0, objects written to this file will not be compressed.; level = 1, minimal compression level but fast. level = 9, maximal compression level but slower a",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:19587,Integrability,message,message,19587,"of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and algorithm:; settings = 100 * algorithm + level. level = 0, objects written to this file will not be compressed.; level = 1, minimal compression level but fast. level = 9, maximal compression level but slower and might use more memory.; (For the currently supported algorithms, the maximum level is 9); If comp",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:19640,Integrability,message,message,19640,"of connection; is closed) or -1 in case of error or -4 in case a non-blocking socket; would block (i.e. there is nothing to be read) or -5 if pipe broken; or reset by peer (EPIPE || ECONNRESET). In those case mess == 0. Int_t RecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and algorithm:; settings = 100 * algorithm + level. level = 0, objects written to this file will not be compressed.; level = 1, minimal compression level but fast. level = 9, maximal compression level but slower and might use more memory.; (For the currently supported algorithms, the maximum level is 9); If comp",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:19913,Integrability,depend,depends,19913,"); Receive a raw buffer of specified length bytes. Using option kPeek; one can peek at incoming data. Returns number of received bytes.; Returns -1 in case of error. In case of opt == kOob: -2 means; EWOULDBLOCK and -3 EINVAL. In case of non-blocking mode (kNoBlock); -4 means EWOULDBLOCK. Returns -5 if pipe broken or reset by; peer (EPIPE || ECONNRESET). Bool_t RecvStreamerInfos(TMessage* mess); Receive a message containing streamer infos. In case the message contains; streamer infos they are imported, the message will be deleted and the; method returns kTRUE. Bool_t RecvProcessIDs(TMessage* mess); Receive a message containing process ids. In case the message contains; process ids they are imported, the message will be deleted and the; method returns kTRUE. Int_t SetOption(ESockOptions opt, Int_t val); Set socket options. Int_t GetOption(ESockOptions opt, Int_t& val); Get socket options. Returns -1 in case of error. Int_t GetErrorCode() const; Returns error code. Meaning depends on context where it is called.; If no error condition returns 0 else a value < 0.; For example see TServerSocket ctor. void SetCompressionAlgorithm(Int_t algorithm = 0); See comments for function SetCompressionSettings. void SetCompressionLevel(Int_t level = 1); See comments for function SetCompressionSettings. void SetCompressionSettings(Int_t settings = 1); Used to specify the compression level and algorithm:; settings = 100 * algorithm + level. level = 0, objects written to this file will not be compressed.; level = 1, minimal compression level but fast. level = 9, maximal compression level but slower and might use more memory.; (For the currently supported algorithms, the maximum level is 9); If compress is negative it indicates the compression level is not set yet. The enumeration ROOT::ECompressionAlgorithm associates each; algorithm with a number. There is a utility function to help; to set the value of the argument. For example,; ROOT::CompressionSettings(ROOT::kLZMA, 1); will build a",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:22842,Integrability,protocol,protocol,22842," ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd; ignored for proofd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [port] = is the remote port number; [service] = service name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote ser",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:23078,Integrability,protocol,protocol,23078,"ice name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whet",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:24687,Integrability,protocol,protocol,24687,"d in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. Int_t GetCompressionAlgorithm() const. Int_t GetCompressi",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:24925,Integrability,protocol,protocol,24925,"up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. Int_t GetCompressionAlgorithm() const. Int_t GetCompressionLevel() const. Int_t GetCompressionSettings() const. friend class TProofServ; // to be able to call SetDescriptor(). TSocket(); { }. TSocket& operator=(const TSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. virtual ~TSocket(); { Close(); }. Int_t GetDescriptor() const; { return fSocket; }. TInetAd",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:25265,Integrability,protocol,protocol,25265,"urn from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. Int_t GetCompressionAlgorithm() const. Int_t GetCompressionLevel() const. Int_t GetCompressionSettings() const. friend class TProofServ; // to be able to call SetDescriptor(). TSocket(); { }. TSocket& operator=(const TSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. virtual ~TSocket(); { Close(); }. Int_t GetDescriptor() const; { return fSocket; }. TInetAddress GetInetAddress() const; { return fAddress; }. Int_t GetPort() const; { return fAddress.GetPort(); }. const char * GetService() const; { return fService; }. Int_t GetServType() const; { return (Int_t)fServType; }. UInt_t GetBytesSent() const; { return fBytesSent; }. UInt_t GetBytesRecv() const; { return fBytesRecv;",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:25341,Integrability,depend,depending,25341,":CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. Int_t GetCompressionAlgorithm() const. Int_t GetCompressionLevel() const. Int_t GetCompressionSettings() const. friend class TProofServ; // to be able to call SetDescriptor(). TSocket(); { }. TSocket& operator=(const TSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. virtual ~TSocket(); { Close(); }. Int_t GetDescriptor() const; { return fSocket; }. TInetAddress GetInetAddress() const; { return fAddress; }. Int_t GetPort() const; { return fAddress.GetPort(); }. const char * GetService() const; { return fService; }. Int_t GetServType() const; { return (Int_t)fServType; }. UInt_t GetBytesSent() const; { return fBytesSent; }. UInt_t GetBytesRecv() const; { return fBytesRecv; }. Int_t GetRemoteProtocol() const; { return fRemoteProtocol; }. TSecContext * GetSe",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:113,Modifiability,inherit,inheritance,113,". TSocket. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » NET; » NET; » TSocket. class TSocket: public TNamed. TSocket. This class implements client sockets. A socket is an endpoint for; communication between two machines.; The actual work is done via the TSystem class (either TUnixSystem; or TWinNTSystem). Function Members (Methods); public:. virtual~TSocket(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, c",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:3481,Modifiability,Inherit,InheritsFrom,3481," Long_tTObject::GetDtorOnly(); Int_tGetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressGetInetAddress() const; TTimeStampGetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tGetOption(ESockOptions opt, Int_t& val); Int_tGetPort() const; Int_tGetRemoteProtocol() const; TSecContext*GetSecContext() const; const char*GetService() const; Int_tGetServType() const; static ULong64_tGetSocketBytesRecv(); static ULong64_tGetSocketBytesSent(); Int_tGetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidNetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:3547,Modifiability,Inherit,InheritsFrom,3547,"const char*TObject::GetIconName() const; TInetAddressGetInetAddress() const; TTimeStampGetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tGetOption(ESockOptions opt, Int_t& val); Int_tGetPort() const; Int_tGetRemoteProtocol() const; TSecContext*GetSecContext() const; const char*GetService() const; Int_tGetServType() const; static ULong64_tGetSocketBytesRecv(); static ULong64_tGetSocketBytesSent(); Int_tGetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidNetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:10273,Modifiability,Inherit,Inheritance,10273,"over this socket; UInt_tfBytesSenttotal bytes sent using this socket; Int_tfCompressCompression level and algorithm; TTimeStampfLastUsageTime stamp of last usage; TVirtualMutex*fLastUsageMtxProtect last usage setting / reading; TInetAddressfLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tfRemoteProtocolprotocol of remote daemon; TSecContext*fSecContextafter a successful Authenticate call; TSocket::EServiceTypefServTyperemote service type; TStringfServicename of service (matches remote port #); Int_tfSocketsocket descriptor; Int_tfTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*fUUIDslist of TProcessIDs already sent through the socket; TStringfUrlneeds this for special authentication options; static ULong64_tfgBytesRecvtotal bytes received by all socket objects; static ULong64_tfgBytesSenttotal bytes sent by all socket objects; static Int_tfgClientProtocolclient ""protocol"" version. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←. TPSocket. TSSLSocket. TServerSocket; ←. TPServerSocket. TXSocket; ←. TXUnixSocket. Function documentation; TSocket(TInetAddress address, const char* service, Int_t tcpwindowsize = -1); Create a socket. Connect to the named service at address addr.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TSocket(TInetAddress address, Int_t port, Int_t tcpwindowsize = -1); Create a socket. Connect to the specified port # at address addr.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window ",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:5393,Safety,timeout,timeout,5393,"bject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual Int_tReconnect(); virtual voidTObject::RecursiveRemove(TObject* obj); virtual Int_tRecv(TMessage*& mess); virtual Int_tRecv(Int_t& status, Int_t& kind); virtual Int_tRecv(char* mess, Int_t max); virtual Int_tRecv(char* mess, Int_t max, Int_t& kind); virtual Int_tRecvRaw(void* buffer, Int_t length, ESendRecvOptions opt = kDefault); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); virtual Int_tSelect(Int_t interest = kRead, Long_t timeout = -1); virtual Int_tSend(const TMessage& mess); virtual Int_tSend(Int_t kind); virtual Int_tSend(Int_t status, Int_t kind); virtual Int_tSend(const char* mess, Int_t kind = kMESS_STRING); virtual Int_tSendObject(const TObject* obj, Int_t kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCompressionAlgorithm(Int_t algorithm = 0); voidSetCompressionLevel(Int_t level = 1); voidSetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetOption(ESockOptions opt, Int_t val); voidSetRemoteProtocol(Int_t rproto); voidSetSecContext(TSecContext* ctx); voidSetService(const char* ",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:14255,Safety,timeout,timeout,14255,"; Create a socket. The socket will adopt previously opened TCP socket with; descriptor desc. TSocket(Int_t descriptor, const char* sockpath); Create a socket. The socket will adopt previously opened Unix socket with; descriptor desc. The sockpath arg is for info purposes only. Use; this method to adopt e.g. a socket created via socketpair(). TSocket(const TSocket& s); TSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:14505,Safety,timeout,timeout,14505,"rposes only. Use; this method to adopt e.g. a socket created via socketpair(). TSocket(const TSocket& s); TSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:14572,Safety,timeout,timeout,14572," socket created via socketpair(). TSocket(const TSocket& s); TSocket copy ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage """,MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:14635,Safety,detect,detected,14635,"ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:14652,Safety,timeout,timeout,14652,"ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:14674,Safety,timeout,timeout,14674,"ctor. void Close(Option_t* opt = """"); Close the socket. If option is ""force"", calls shutdown(id,2) to; shut down the connection. This will close the connection also; for the parent of this process. Also called via the dtor (without; option ""force"", call explicitly Close(""force"") if this is desired). TInetAddress GetLocalInetAddress(); Return internet address of local host to which the socket is bound.; In case of error TInetAddress::IsValid() returns kFALSE. Int_t GetLocalPort(); Return the local port # to which the socket is bound.; In case of error return -1. Int_t Select(Int_t interest = kRead, Long_t timeout = -1); Waits for this socket to change status. If interest=kRead,; the socket will be watched to see if characters become available for; reading; if interest=kWrite the socket will be watched to; see if a write will not block.; The argument 'timeout' specifies a maximum time to wait in millisec.; Default no timeout.; Returns 1 if a change of status of interest has been detected within; timeout; 0 in case of timeout; < 0 if an error occured. Int_t Send(Int_t kind); Send a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(Int_t status, Int_t kind); Send a status and a single message opcode. Use kind (opcode) to set the; TMessage ""what"" field. Returns the number of bytes that were sent; (always 2*sizeof(Int_t)) and -1 in case of error. In case the kind has; been or'ed with kMESS_ACK, the call will only return after having; received an acknowledgement, making the sending process synchronous. Int_t Send(const char* mess, Int_t kind = kMESS_STRING); Send a character string buffer. Use kind to set the TMessage ""what"" field.; Returns the number of bytes in the string str that were sent",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:3371,Security,Hash,Hash,3371,"ssionSettings() const; virtual Int_tGetDescriptor() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Int_tGetErrorCode() const; virtual const char*TObject::GetIconName() const; TInetAddressGetInetAddress() const; TTimeStampGetLastUsage(); virtual TInetAddressGetLocalInetAddress(); virtual Int_tGetLocalPort(); virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Int_tGetOption(ESockOptions opt, Int_t& val); Int_tGetPort() const; Int_tGetRemoteProtocol() const; TSecContext*GetSecContext() const; const char*GetService() const; Int_tGetServType() const; static ULong64_tGetSocketBytesRecv(); static ULong64_tGetSocketBytesSent(); Int_tGetTcpWindowSize() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; const char*GetUrl() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tIsAuthenticated() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tIsValid() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; static voidNetError(const char* where, Int_t error); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator dele",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:9698,Security,Authenticat,Authenticate,9698,"ted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TSocket::EServiceTypekPROOFD; static TSocket::EServiceTypekROOTD; static TSocket::EInterestkRead; static TSocket::EServiceTypekSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestkWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressfAddressremote internet address and port #; TBitsfBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tfBytesRecvtotal bytes received over this socket; UInt_tfBytesSenttotal bytes sent using this socket; Int_tfCompressCompression level and algorithm; TTimeStampfLastUsageTime stamp of last usage; TVirtualMutex*fLastUsageMtxProtect last usage setting / reading; TInetAddressfLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tfRemoteProtocolprotocol of remote daemon; TSecContext*fSecContextafter a successful Authenticate call; TSocket::EServiceTypefServTyperemote service type; TStringfServicename of service (matches remote port #); Int_tfSocketsocket descriptor; Int_tfTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*fUUIDslist of TProcessIDs already sent through the socket; TStringfUrlneeds this for special authentication options; static ULong64_tfgBytesRecvtotal bytes received by all socket objects; static ULong64_tfgBytesSenttotal bytes sent by all socket objects; static Int_tfgClientProtocolclient ""protocol"" version. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←. TPSocket. TSSLSocket. TServerSocket; ←. TPServerSocket. TXSocket; ←. TXUnixSocket. Function documentation; TSocket(TInetAddress address, const char* service, Int_t tcpwindowsize = -1); Create a socket. Connect to the named service at address addr.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the windo",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:10042,Security,authenticat,authentication,10042,"ted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TSocket::EServiceTypekPROOFD; static TSocket::EServiceTypekROOTD; static TSocket::EInterestkRead; static TSocket::EServiceTypekSOCKD; static TObject::(anonymous)TObject::kSingleKey; static TSocket::EInterestkWrite; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TInetAddressfAddressremote internet address and port #; TBitsfBitsInfobits array to mark TStreamerInfo classes already sent; UInt_tfBytesRecvtotal bytes received over this socket; UInt_tfBytesSenttotal bytes sent using this socket; Int_tfCompressCompression level and algorithm; TTimeStampfLastUsageTime stamp of last usage; TVirtualMutex*fLastUsageMtxProtect last usage setting / reading; TInetAddressfLocalAddresslocal internet address and port #; TStringTNamed::fNameobject identifier; Int_tfRemoteProtocolprotocol of remote daemon; TSecContext*fSecContextafter a successful Authenticate call; TSocket::EServiceTypefServTyperemote service type; TStringfServicename of service (matches remote port #); Int_tfSocketsocket descriptor; Int_tfTcpWindowSizeTCP window size (default 65535);; TStringTNamed::fTitleobject title; TList*fUUIDslist of TProcessIDs already sent through the socket; TStringfUrlneeds this for special authentication options; static ULong64_tfgBytesRecvtotal bytes received by all socket objects; static ULong64_tfgBytesSenttotal bytes sent by all socket objects; static Int_tfgClientProtocolclient ""protocol"" version. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSocket. ←. TPSocket. TSSLSocket. TServerSocket; ←. TPServerSocket. TXSocket; ←. TXUnixSocket. Function documentation; TSocket(TInetAddress address, const char* service, Int_t tcpwindowsize = -1); Create a socket. Connect to the named service at address addr.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the windo",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:12426,Security,authenticat,authentication,12426," remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TSocket(const char* host, const char* service, Int_t tcpwindowsize = -1); Create a socket. Connect to named service on the remote host.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TSocket(const char* host, Int_t port, Int_t tcpwindowsize = -1); Create a socket; see CreateAuthSocket for the form of url.; Connect to the specified port # on the remote host.; If user is specified in url, try authentication as user.; Use tcpwindowsize to specify the size of the receive buffer, it has; to be specified here to make sure the window scale option is set (for; tcpwindowsize > 65KB and for platforms supporting window scaling).; Returns when connection has been accepted by remote side. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TSocket(const char* sockpath); Create a socket in the Unix domain on 'sockpath'.; Returns when connection has been accepted by the server. Use IsValid(); to check the validity of the socket. Every socket is added to the TROOT; sockets list which will make sure that any open sockets are properly; closed on program termination. TSocket(Int_t descriptor); Create a socket. The socket will adopt previously opened TCP socket with; descriptor desc. TSocket(Int_t descriptor, const char* sockpath); Create a socket. Th",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:21309,Security,Authenticat,Authenticate,21309,"gs = 100 * algorithm + level. level = 0, objects written to this file will not be compressed.; level = 1, minimal compression level but fast. level = 9, maximal compression level but slower and might use more memory.; (For the currently supported algorithms, the maximum level is 9); If compress is negative it indicates the compression level is not set yet. The enumeration ROOT::ECompressionAlgorithm associates each; algorithm with a number. There is a utility function to help; to set the value of the argument. For example,; ROOT::CompressionSettings(ROOT::kLZMA, 1); will build an integer which will set the compression to use; the LZMA algorithm and compression level 1. These are defined; in the header file Compression.h. Note that the compression settings may be changed at any time.; The new compression settings will only apply to branches created; or attached after the setting is changed and other objects written; after the setting is changed. Bool_t Authenticate(const char* user); Authenticated the socket with specified user. TSocket * CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server. url: [[proto][p][auth]://][user@]host[:port][/service][?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server;; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd; ignored for proofd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [port] = is the remote port number; [service] = service name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An already opened connection can be used by passing its socket",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:21341,Security,Authenticat,Authenticated,21341,"gs = 100 * algorithm + level. level = 0, objects written to this file will not be compressed.; level = 1, minimal compression level but fast. level = 9, maximal compression level but slower and might use more memory.; (For the currently supported algorithms, the maximum level is 9); If compress is negative it indicates the compression level is not set yet. The enumeration ROOT::ECompressionAlgorithm associates each; algorithm with a number. There is a utility function to help; to set the value of the argument. For example,; ROOT::CompressionSettings(ROOT::kLZMA, 1); will build an integer which will set the compression to use; the LZMA algorithm and compression level 1. These are defined; in the header file Compression.h. Note that the compression settings may be changed at any time.; The new compression settings will only apply to branches created; or attached after the setting is changed and other objects written; after the setting is changed. Bool_t Authenticate(const char* user); Authenticated the socket with specified user. TSocket * CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server. url: [[proto][p][auth]://][user@]host[:port][/service][?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server;; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd; ignored for proofd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [port] = is the remote port number; [service] = service name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An already opened connection can be used by passing its socket",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:21548,Security,authenticat,authenticates,21548,"level = 9, maximal compression level but slower and might use more memory.; (For the currently supported algorithms, the maximum level is 9); If compress is negative it indicates the compression level is not set yet. The enumeration ROOT::ECompressionAlgorithm associates each; algorithm with a number. There is a utility function to help; to set the value of the argument. For example,; ROOT::CompressionSettings(ROOT::kLZMA, 1); will build an integer which will set the compression to use; the LZMA algorithm and compression level 1. These are defined; in the header file Compression.h. Note that the compression settings may be changed at any time.; The new compression settings will only apply to branches created; or attached after the setting is changed and other objects written; after the setting is changed. Bool_t Authenticate(const char* user); Authenticated the socket with specified user. TSocket * CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server. url: [[proto][p][auth]://][user@]host[:port][/service][?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server;; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd; ignored for proofd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [port] = is the remote port number; [service] = service name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateA",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:21999,Security,authenticat,authentication,21999,"ion to use; the LZMA algorithm and compression level 1. These are defined; in the header file Compression.h. Note that the compression settings may be changed at any time.; The new compression settings will only apply to branches created; or attached after the setting is changed and other objects written; after the setting is changed. Bool_t Authenticate(const char* user); Authenticated the socket with specified user. TSocket * CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server. url: [[proto][p][auth]://][user@]host[:port][/service][?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server;; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd; ignored for proofd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [port] = is the remote port number; [service] = service name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket ",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:22545,Security,authenticat,authenticated,22545," server. url: [[proto][p][auth]://][user@]host[:port][/service][?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server;; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd; ignored for proofd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [port] = is the remote port number; [service] = service name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote serve",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:22814,Security,authenticat,authentication,22814," ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd; ignored for proofd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [port] = is the remote port number; [service] = service name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote ser",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:22936,Security,authenticat,authenticated,22936," Globus, SSH or UidGid authentication; [port] = is the remote port number; [service] = service name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Glob",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:23050,Security,authenticat,authentication,23050,"ice name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whet",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:23276,Security,authenticat,authenticated,23276,"onnection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). ",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:23318,Security,authenticat,authentication,23318,"onnection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). ",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:23542,Security,authenticat,authenticates,23542,"thSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""pa",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:23995,Security,authenticat,authentication,23995,"werty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:24390,Security,authenticat,authenticated,24390,"rt, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of byt",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:24659,Security,authenticat,authentication,24659,"d in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. Int_t GetCompressionAlgorithm() const. Int_t GetCompressi",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:24783,Security,authenticat,authenticated,24783,"using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. Int_t GetCompressionAlgorithm() const. Int_t GetCompressionLevel() const. Int_t GetCompressionSettings() const. friend class TProofServ; // to be able to call SetDescriptor(). TSocket(); { }. TSocket& operator=(const TSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. v",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:24897,Security,authenticat,authentication,24897,"up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. Int_t GetCompressionAlgorithm() const. Int_t GetCompressionLevel() const. Int_t GetCompressionSettings() const. friend class TProofServ; // to be able to call SetDescriptor(). TSocket(); { }. TSocket& operator=(const TSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. virtual ~TSocket(); { Close(); }. Int_t GetDescriptor() const; { return fSocket; }. TInetAd",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:25123,Security,authenticat,authenticated,25123,"tion can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. Int_t GetCompressionAlgorithm() const. Int_t GetCompressionLevel() const. Int_t GetCompressionSettings() const. friend class TProofServ; // to be able to call SetDescriptor(). TSocket(); { }. TSocket& operator=(const TSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. virtual ~TSocket(); { Close(); }. Int_t GetDescriptor() const; { return fSocket; }. TInetAddress GetInetAddress() const; { return fAddress; }. Int_t GetPort() const; { return fAddress.GetPort(); }. const char * GetService() const; { return fService; }. Int_t GetServType() const; { return (Int_t)fServType; }. UInt_t GetBytes",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:25165,Security,authenticat,authentication,25165,"tion can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. Int_t GetCompressionAlgorithm() const. Int_t GetCompressionLevel() const. Int_t GetCompressionSettings() const. friend class TProofServ; // to be able to call SetDescriptor(). TSocket(); { }. TSocket& operator=(const TSocket& ). Option_t * GetOption() const; { return TObject::GetOption(); }. virtual ~TSocket(); { Close(); }. Int_t GetDescriptor() const; { return fSocket; }. TInetAddress GetInetAddress() const; { return fAddress; }. Int_t GetPort() const; { return fAddress.GetPort(); }. const char * GetService() const; { return fService; }. Int_t GetServType() const; { return (Int_t)fServType; }. UInt_t GetBytes",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:6844,Testability,Test,TestBit,6844," kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCompressionAlgorithm(Int_t algorithm = 0); voidSetCompressionLevel(Int_t level = 1); voidSetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetOption(ESockOptions opt, Int_t val); voidSetRemoteProtocol(Int_t rproto); voidSetSecContext(TSecContext* ctx); voidSetService(const char* service); voidSetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUrl(const char* url); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTouch(); TSocket(const char* sockpath); TSocket(Int_t descriptor); TSocket(const TSocket& s); TSocket(Int_t descriptor, const char* sockpath); TSocket(TInetAddress address, const char* service, Int_t tcpwindowsize = -1); TSocket(TInetAddress address, Int_t port, Int_t tcpwindowsize = -1); TSocket(const char* host, const char* service, Int_t tcpwindowsize = -1); TSocket(const char* host, Int_t port, Int_t tcpwindowsize = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:6883,Testability,Test,TestBits,6883," kind = kMESS_OBJECT); virtual Int_tSendRaw(const void* buffer, Int_t length, ESendRecvOptions opt = kDefault); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetCompressionAlgorithm(Int_t algorithm = 0); voidSetCompressionLevel(Int_t level = 1); voidSetCompressionSettings(Int_t settings = 1); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); virtual Int_tSetOption(ESockOptions opt, Int_t val); voidSetRemoteProtocol(Int_t rproto); voidSetSecContext(TSecContext* ctx); voidSetService(const char* service); voidSetServType(Int_t st); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetUrl(const char* url); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTouch(); TSocket(const char* sockpath); TSocket(Int_t descriptor); TSocket(const TSocket& s); TSocket(Int_t descriptor, const char* sockpath); TSocket(TInetAddress address, const char* service, Int_t tcpwindowsize = -1); TSocket(TInetAddress address, Int_t port, Int_t tcpwindowsize = -1); TSocket(const char* host, const char* service, Int_t tcpwindowsize = -1); TSocket(const char* host, Int_t port, Int_t tcpwindowsize = -1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:799,Usability,Clear,Clear,799," virtual~TSocket(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual voidClose(Option_t* opt = """"); virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; static TSocket*CreateAuthSocket(const char* url, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); static TSocket*CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, c",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:22732,Usability,simpl,simple,22732," ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd; ignored for proofd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [port] = is the remote port number; [service] = service name used to determine the port; (for backward compatibility, specification of; port as priority); options = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by; TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""rootds://qwerty@machine.fq.dn:5051""). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel"" sockets; are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""pk://qwerty@machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. TSocket * CreateAuthSocket(const char* user, const char* host, Int_t port, Int_t size = 0, Int_t tcpwindowsize = -1, TSocket* s = 0, Int_t* err = 0); Creates a socket or a parallel socket and authenticates to the; remote server specified in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote ser",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSocket.html:24577,Usability,simpl,simple,24577,"d in 'url' on remote 'port' as 'user'. url: [[proto][p][auth]://]host[/?options]. where proto = ""sockd"", ""rootd"", ""proofd""; indicates the type of remote server; if missing ""sockd"" is assumed (""sockd"" indicates; any remote server session using TServerSocket); [p] = for parallel sockets (forced internally for; rootd); [auth] = ""up"", ""s"", ""k"", ""g"", ""h"", ""ug"" to force UsrPwd,; SRP, Krb5, Globus, SSH or UidGid authentication; [options] = ""m"" or ""s"", when proto=proofd indicates whether; we are master or slave (used internally by TSlave). An already opened connection can be used by passing its socket; in opensock. If 'err' is defined, '*err' on return from a failed call contains an error; code (see NetErrors.h). Example:. TSocket::CreateAuthSocket(""qwerty"",""rootdps://machine.fq.dn"",5051). creates an authenticated socket to a rootd server running; on remote machine machine.fq.dn on port 5051; ""parallel""; sockets are forced internally because rootd expects; parallel sockets; however a simple socket will be created; in this case because the size is 0 (the default);; authentication will attempt protocol SRP first. TSocket::CreateAuthSocket(""qwerty"",""pk://machine.fq.dn:5052"",3). creates an authenticated parallel socket of size 3 to a sockd; server running on remote machine machine.fq.dn on port 5052;; authentication will attempt protocol Kerberos first. NB: may hang if the remote server is not of the correct type;; at present TSocket has no way to find out the type of the; remote server automatically. Returns pointer to an authenticated socket or 0 if creation or; authentication is unsuccessful. Int_t GetClientProtocol(); Static method returning supported client protocol. void NetError(const char* where, Int_t error); Print error string depending on error code. ULong64_t GetSocketBytesSent(); Get total number of bytes sent via all sockets. ULong64_t GetSocketBytesRecv(); Get total number of bytes received via all sockets. Int_t GetCompressionAlgorithm() const. Int_t GetCompressi",MatchSource.WIKI,root/html604/TSocket.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSocket.html
https://root.cern/root/html604/TSortedList.html:2335,Availability,Error,Error,2335,"ual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int",MatchSource.WIKI,root/html604/TSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSortedList.html
https://root.cern/root/html604/TSortedList.html:2464,Availability,error,error,2464,"); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Opti",MatchSource.WIKI,root/html604/TSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSortedList.html
https://root.cern/root/html604/TSortedList.html:2548,Availability,error,error,2548,"ject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TList::FindObject(const char* name) const; virtual TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual ",MatchSource.WIKI,root/html604/TSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSortedList.html
https://root.cern/root/html604/TSortedList.html:117,Modifiability,inherit,inheritance,117,". TSortedList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TSortedList. class TSortedList: public TList. A sorted doubly linked list. All sortable classes inheriting from; TObject can be inserted in a TSortedList. Function Members (Methods); public:. virtual~TSortedList(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidAddAfter(const TObject*, TObject* obj); virtual voidAddAfter(TObjLink*, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t); virtual voidAddBefore(const TObject*, TObject* obj); virtual voidAddBefore(TObjLink*, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimiti",MatchSource.WIKI,root/html604/TSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSortedList.html
https://root.cern/root/html604/TSortedList.html:366,Modifiability,inherit,inheriting,366,". TSortedList. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » CORE; » CONT; » TSortedList. class TSortedList: public TList. A sorted doubly linked list. All sortable classes inheriting from; TObject can be inserted in a TSortedList. Function Members (Methods); public:. virtual~TSortedList(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidAddAfter(const TObject*, TObject* obj); virtual voidAddAfter(TObjLink*, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t); virtual voidAddBefore(const TObject*, TObject* obj); virtual voidAddBefore(TObjLink*, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimiti",MatchSource.WIKI,root/html604/TSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSortedList.html
https://root.cern/root/html604/TSortedList.html:3939,Modifiability,Inherit,InheritsFrom,3939,"ject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tIsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_t",MatchSource.WIKI,root/html604/TSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSortedList.html
https://root.cern/root/html604/TSortedList.html:4005,Modifiability,Inherit,InheritsFrom,4005,"; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tIsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIterator*TList::MakeIterator(Bool_t dir = kIterForward) const; virtual TIterator*TCollection::MakeReverseIterator() const; voidTObject::MayNotUse(const char* method) const; Long64_tTSeqCollection::Merge(TCollection* list); virtual Bool_tTObject::N",MatchSource.WIKI,root/html604/TSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSortedList.html
https://root.cern/root/html604/TSortedList.html:10596,Modifiability,Inherit,Inheritance,10596,"tic TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. ←; TSortedList. Function documentation; void Add(TObject* obj); Add object in sorted list. Uses object Compare() member to find right; position. void Add(TObject* obj, Option_t* opt); Add object in sorted list. Uses object Compare() member to find right; position and also store option. See TList::Add for explanation of; usage of option. TSortedList(Bool_t order = kSortAscending); { fAscending = order; }. Bool_t IsSorted() const; { return kTRUE; }. void AddFirst(TObject* obj); ---- the following methods are overridden to preserve sorting order. { Add(obj); }. void AddFirst(TObject* obj, Option_t* opt); { Add(obj, opt); }. void AddLast(TObject* obj); { Add(obj); }. void AddLast(TObject* obj, Option_t* opt); { Add(obj, opt); }. void AddAt(TObject* obj, Int_t ); { Add(obj); }. void AddAfter(const TObject* , TObject* obj); { Add(obj); }. void AddAfter(TObjLink* , TObject* obj); { Add(obj); }. void AddBefore(const TObject* , TO",MatchSource.WIKI,root/html604/TSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSortedList.html
https://root.cern/root/html604/TSortedList.html:10162,Performance,cache,cache,10162,"CannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TCollection::(anonymous)TCollection::kInitCapacity; static TCollection::(anonymous)TCollection::kInitHashTableCapacity; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Bool_tTList::fAscending! sorting order (when calling Sort() or for TSortedList); TObjLink*TList::fCache! cache to speedup sequential calling of Before() and After() functions; TObjLink*TList::fFirst! pointer to first entry in linked list; TObjLink*TList::fLast! pointer to last entry in linked list; TStringTCollection::fNamename of the collection; Int_tTCollection::fSizenumber of elements in collection; Bool_tTSeqCollection::fSortedtrue if collection has been sorted; static TCollection::(anonymous)TCollection::kIsOwner. Class Charts. Inheritance Chart:. TObject. ←; TCollection. ←; TSeqCollection. ←; TList. ←; TSortedList. Function documentation; void Add(TObject* obj); Add object in sorted list. Uses object Compare() member to find right; position. void Add(TObject* obj, Option_t* opt); Add object in sorted list. Uses object Compare() member to find right; position and also store option. See TList::Add for explanation of; usage of option. TSortedList(Bool_t order = kSortAscending); { fAscending = order; }. Bool_t IsSorted() const; { return kTRUE; }. void AddFirst(TObject* obj); ---- the following methods are overridden to preserve sorting order. { Add(obj); }. void AddFirst(TObject* obj, Option_t* opt); { Add(obj, opt); }. void AddLast(TObject",MatchSource.WIKI,root/html604/TSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSortedList.html
https://root.cern/root/html604/TSortedList.html:3765,Security,Hash,Hash,3765,"l TObject*TList::FindObject(const TObject* obj) const; virtual TObject*TList::First() const; virtual TObjLink*TList::FirstLink() const; static voidTCollection::GarbageCollect(TObject* obj); static TCollection*TCollection::GetCurrentCollection(); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Int_tTCollection::GetEntries() const; virtual const char*TObject::GetIconName() const; virtual Int_tTSeqCollection::GetLast() const; virtual const char*TCollection::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; virtual TObject**TList::GetObjectRef(const TObject* obj) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Int_tTCollection::GetSize() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Int_tTCollection::GrowBy(Int_t delta) const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTCollection::Hash() const; virtual Int_tTSeqCollection::IndexOf(const TObject* obj) const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; Bool_tTCollection::IsArgNull(const char* where, const TObject* obj) const; Bool_tTList::IsAscending(); virtual Bool_tTCollection::IsEmpty() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTCollection::IsFolder() const; Bool_tTObject::IsOnHeap() const; Bool_tTCollection::IsOwner() const; virtual Bool_tTCollection::IsSortable() const; virtual Bool_tIsSorted() const; Bool_tTObject::IsZombie() const; virtual TObject*TList::Last() const; Int_tTSeqCollection::LastIndex() const; virtual TObjLink*TList::LastLink() const; virtual voidTCollection::ls(Option_t* option = """") const; virtual TIte",MatchSource.WIKI,root/html604/TSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSortedList.html
https://root.cern/root/html604/TSortedList.html:1259,Testability,Assert,AssertClass,1259," virtual~TSortedList(); voidTObject::AbstractMethod(const char* method) const; virtual voidAdd(TObject* obj); virtual voidAdd(TObject* obj, Option_t* opt); virtual voidAddAfter(const TObject*, TObject* obj); virtual voidAddAfter(TObjLink*, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t); virtual voidAddBefore(const TObject*, TObject* obj); virtual voidAddBefore(TObjLink*, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimiti",MatchSource.WIKI,root/html604/TSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSortedList.html
https://root.cern/root/html604/TSortedList.html:7813,Testability,Test,TestBit,7813,"*** b, Int_t first, Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidTList::RecursiveRemove(TObject* obj); virtual TObject*TList::Remove(TObject* obj); virtual TObject*TList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSort(Bool_t = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSortedList(Bool_t order = kSortAscending); TSortedList(TSortedList&&); TSortedList(const TSortedList&); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSortedList.html
https://root.cern/root/html604/TSortedList.html:7852,Testability,Test,TestBits,7852,"*** b, Int_t first, Int_t last); virtual Int_tTObject::Read(const char* name); virtual voidTList::RecursiveRemove(TObject* obj); virtual TObject*TList::Remove(TObject* obj); virtual TObject*TList::Remove(TObjLink* lnk); virtual voidTSeqCollection::RemoveAfter(TObject* after); voidTCollection::RemoveAll(); virtual voidTCollection::RemoveAll(TCollection* col); virtual TObject*TSeqCollection::RemoveAt(Int_t idx); virtual voidTSeqCollection::RemoveBefore(TObject* before); virtual voidTSeqCollection::RemoveFirst(); virtual voidTList::RemoveLast(); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidTCollection::SetCurrentCollection(); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidTCollection::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTCollection::SetOwner(Bool_t enable = kTRUE); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidSort(Bool_t = kSortAscending); static voidTCollection::StartGarbageCollection(); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSortedList(Bool_t order = kSortAscending); TSortedList(TSortedList&&); TSortedList(const TSortedList&); voidTSeqCollection::UnSort(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTCollection::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSortedList.html
https://root.cern/root/html604/TSortedList.html:1595,Usability,Clear,Clear,1595,"j, Option_t* opt); virtual voidAddAfter(const TObject*, TObject* obj); virtual voidAddAfter(TObjLink*, TObject* obj); virtual voidTCollection::AddAll(const TCollection* col); virtual voidAddAt(TObject* obj, Int_t); virtual voidAddBefore(const TObject*, TObject* obj); virtual voidAddBefore(TObjLink*, TObject* obj); virtual voidAddFirst(TObject* obj); virtual voidAddFirst(TObject* obj, Option_t* opt); virtual voidAddLast(TObject* obj); virtual voidAddLast(TObject* obj, Option_t* opt); voidTCollection::AddVector(TObject* obj1); virtual TObject*TList::After(const TObject* obj) const; virtual voidTObject::AppendPad(Option_t* option = """"); Bool_tTCollection::AssertClass(TClass* cl) const; virtual TObject*TList::At(Int_t idx) const; virtual TObject*TList::Before(const TObject* obj) const; TIterTCollection::begin() const; virtual voidTCollection::Browse(TBrowser* b); Int_tTCollection::Capacity() const; static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTList::Clear(Option_t* option = """"); virtual TObject*TCollection::Clone(const char* newname = """") const; virtual Int_tTCollection::Compare(const TObject* obj) const; Bool_tTCollection::Contains(const char* name) const; Bool_tTCollection::Contains(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTList::Delete(Option_t* option = """"); virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTCollection::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTCollection::Dump() const; static voidTCollection::EmptyGarbageCollection(); TIterTCollection::end() const; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_",MatchSource.WIKI,root/html604/TSortedList.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSortedList.html
https://root.cern/root/html604/TSpectrum.html:1428,Availability,avail,available,1428,"nd estimation; One-dimensional smoothing; One-dimensional deconvolution; One-dimensional peak search. Author:. Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA; email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following references:. M.Morhac et al.: Background elimination methods for; multidimensional coincidence gamma-ray spectra. Nuclear; Instruments and Methods in Physics Research A 401 (1997) 113-132.; M.Morhac et al.: Efficient one- and two-dimensional Gold; deconvolution and its application to gamma-ray spectra; decomposition. Nuclear Instruments and Methods in Physics; Research A 401 (1997) 385-408.; M.Morhac et al.: Identification of peaks in multidimensional; coincidence gamma-ray spectra. Nuclear Instruments and Methods in; Research Physics A 443(2000), 108-125. These NIM papers are also available as doc or ps files from:. Spectrum.doc; SpectrumDec.ps.gz; SpectrumSrc.ps.gz; SpectrumBck.ps.gz. . Function Members (Methods); public:. virtual~TSpectrum(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TH1*Background(const TH1* hist, Int_t niter = 20, Option_t* option = """"); const char*Background(Double_t* spectrum, Int_t ssize, Int_t numberIterations, Int_t direction, Int_t filterOrder, bool smoothing, Int_t smoothWindow, bool compton); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; const char*Deconvolution(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); co",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:2926,Availability,Error,Error,2926,"hWindow, bool compton); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; const char*Deconvolution(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); const char*DeconvolutionRL(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:3055,Availability,error,error,3055,"const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; const char*Deconvolution(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); const char*DeconvolutionRL(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tT",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:3139,Availability,error,error,3139,"ne(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; const char*Deconvolution(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); const char*DeconvolutionRL(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfm",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:15167,Availability,error,error,15167,"olution; (smaller distance between peaks.; May be set later through SetResolution.; ; . const char * Background(Double_t* spectrum, Int_t ssize, Int_t numberIterations, Int_t direction, Int_t filterOrder, bool smoothing, Int_t smoothWindow, bool compton). This function calculates background spectrum from source spectrum.; The result is placed in the vector pointed by spe1945ctrum pointer.; The goal is to separate the useful information (peaks) from useless; information (background). method is based on Sensitive Nonlinear Iterative Peak (SNIP) clipping; algorithm.; new value in the channel ""i"" is calculated. where p = 1, 2, ..., numberIterations. In fact it represents second order; difference filter (-1,2,-1).; One can also change the; direction of the change of the clipping window, the order of the clipping; filter, to include smoothing, to set width of smoothing window and to include; the estimation of Compton edges. On successful completion it returns 0. On; error it returns pointer to the string describing error.; Parameters:. spectrum: pointer to the vector of source spectrum; ssize: length of the spectrum vector; numberIterations: maximal width of clipping window,; direction: direction of change of clipping window.; Possible values: kBackIncreasingWindow, kBackDecreasingWindow; filterOrder: order of clipping filter.; Possible values: kBackOrder2, kBackOrder4, kBackOrder6, kBackOrder8; smoothing: logical variable whether the smoothing operation in the; estimation of background will be included.; Possible values: kFALSE, kTRUE; smoothWindow: width of smoothing window.; Possible values: kBackSmoothing3, kBackSmoothing5, kBackSmoothing7,; kBackSmoothing9, kBackSmoothing11, kBackSmoothing13, kBackSmoothing15.; compton: logical variable whether the estimation of Compton edge will be; included. Possible values: kFALSE, kTRUE. References:. C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the; quantitative analysis of PIXE spectra in geoscience app",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:15217,Availability,error,error,15217,"olution; (smaller distance between peaks.; May be set later through SetResolution.; ; . const char * Background(Double_t* spectrum, Int_t ssize, Int_t numberIterations, Int_t direction, Int_t filterOrder, bool smoothing, Int_t smoothWindow, bool compton). This function calculates background spectrum from source spectrum.; The result is placed in the vector pointed by spe1945ctrum pointer.; The goal is to separate the useful information (peaks) from useless; information (background). method is based on Sensitive Nonlinear Iterative Peak (SNIP) clipping; algorithm.; new value in the channel ""i"" is calculated. where p = 1, 2, ..., numberIterations. In fact it represents second order; difference filter (-1,2,-1).; One can also change the; direction of the change of the clipping window, the order of the clipping; filter, to include smoothing, to set width of smoothing window and to include; the estimation of Compton edges. On successful completion it returns 0. On; error it returns pointer to the string describing error.; Parameters:. spectrum: pointer to the vector of source spectrum; ssize: length of the spectrum vector; numberIterations: maximal width of clipping window,; direction: direction of change of clipping window.; Possible values: kBackIncreasingWindow, kBackDecreasingWindow; filterOrder: order of clipping filter.; Possible values: kBackOrder2, kBackOrder4, kBackOrder6, kBackOrder8; smoothing: logical variable whether the smoothing operation in the; estimation of background will be included.; Possible values: kFALSE, kTRUE; smoothWindow: width of smoothing window.; Possible values: kBackSmoothing3, kBackSmoothing5, kBackSmoothing7,; kBackSmoothing9, kBackSmoothing11, kBackSmoothing13, kBackSmoothing15.; compton: logical variable whether the estimation of Compton edge will be; included. Possible values: kFALSE, kTRUE. References:. C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the; quantitative analysis of PIXE spectra in geoscience app",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:26843,Availability,error,error,26843," nbins; i++) d2->SetBinContent(i + 1,source[i]);; d2->SetLineColor(kBlue);; d2->Draw(""SAME L"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->Background(source,nbins,40,kBackDecreasingWindow,kBackOrder6,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d3->SetBinContent(i + 1,source[i]);; d3->SetLineColor(kGreen);; d3->Draw(""SAME L"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->Background(source,nbins,40,kBackDecreasingWindow,kBackOrder8,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d4->SetBinContent(i + 1,source[i]);; d4->SetLineColor(kMagenta);; d4->Draw(""SAME L"");; }. Example 6 script Background_smooth.c:. The estimate of the background can be influenced by noise present in the; spectrum. We proposed the algorithm of the background estimate with; simultaneous smoothing. In the original algorithm without smoothing, the; estimated background snatches the lower spikes in the noise. Consequently,; the areas of peaks are biased by this error. Figure 7 Principle of background estimation algorithm with simultaneous; smoothing. Figure 8 Illustration of non-smoothing (red line) and smoothing algorithm of; background estimation (blue line). Script:. // Example to illustrate the background estimator (class TSpectrum) including; // Compton edges. To execute this example, do:; // root > .x Background_smooth.C; #include ; void Background_smooth() {; Int_t i;; Double_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Double_t[nbins];; TH1F *h = new TH1F(""h"","""",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""back4;1"");; TCanvas *background = gROOT->GetListOfCanvases()->FindObject(""background"");; if (!background) background = new TCanvas(""background"",; ""Estimation of background with noise"",10,10,1000,700);; h->SetAxisRange(3460,3830);; h->Dr",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:30413,Availability,error,error,30413,"TH1F(""d1"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""back3;1"");; TCanvas *background = gROOT->GetListOfCanvases()->FindObject(""background"");; if (!background) background = new TCanvas(""background"",; ""Estimation of background with Compton edges under peaks"",10,10,1000,700);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->Background(source,nbins,10,kBackDecreasingWindow,kBackOrder8,kTRUE,; kBackSmoothing5,,kTRUE);; for (i = 0; i < nbins; i++) d1->SetBinContent(i + 1,source[i]);; d1->SetLineColor(kRed);; d1->Draw(""SAME L"");; }. . const char* SmoothMarkov(Double_t* source, Int_t ssize, Int_t averWindow). One-dimensional markov spectrum smoothing function. This function calculates smoothed spectrum from source spectrum based on; Markov chain method. The result is placed in the array pointed by source; pointer. On successful completion it returns 0. On error it returns pointer; to the string describing error.; ; Function parameters:; ; source: pointer to the array of source spectrum; ssize: length of source array; averWindow: width of averaging smoothing window; ; The goal of this function is the suppression of the statistical fluctuations.; The algorithm is based on discrete Markov chain, which has very simple; invariant distribution:; . being defined; from the normalization condition; .; n is the length of the smoothed spectrum and; . Reference:; ; Z.K. Silagadze, A new algorithm for automatic photopeak searches.; NIM A 376 (1996), 451.; . Example 14 - script Smoothing.c; . Fig. 23 Original noisy spectrum; . Fig. 24 Smoothed spectrum m=3; . Fig. 25 Smoothed spectrum; . Fig.26 Smoothed spectrum m=10; ; Script:; ; // Example to illustrate smoothing using Markov algorithm (class TSpectrum).; // To execute this example, do; // root > .x Smoothing.C; void Smoothing() {; Int_t i;; Double_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * sourc",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:30464,Availability,error,error,30464,"TH1F(""d1"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""back3;1"");; TCanvas *background = gROOT->GetListOfCanvases()->FindObject(""background"");; if (!background) background = new TCanvas(""background"",; ""Estimation of background with Compton edges under peaks"",10,10,1000,700);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->Background(source,nbins,10,kBackDecreasingWindow,kBackOrder8,kTRUE,; kBackSmoothing5,,kTRUE);; for (i = 0; i < nbins; i++) d1->SetBinContent(i + 1,source[i]);; d1->SetLineColor(kRed);; d1->Draw(""SAME L"");; }. . const char* SmoothMarkov(Double_t* source, Int_t ssize, Int_t averWindow). One-dimensional markov spectrum smoothing function. This function calculates smoothed spectrum from source spectrum based on; Markov chain method. The result is placed in the array pointed by source; pointer. On successful completion it returns 0. On error it returns pointer; to the string describing error.; ; Function parameters:; ; source: pointer to the array of source spectrum; ssize: length of source array; averWindow: width of averaging smoothing window; ; The goal of this function is the suppression of the statistical fluctuations.; The algorithm is based on discrete Markov chain, which has very simple; invariant distribution:; . being defined; from the normalization condition; .; n is the length of the smoothed spectrum and; . Reference:; ; Z.K. Silagadze, A new algorithm for automatic photopeak searches.; NIM A 376 (1996), 451.; . Example 14 - script Smoothing.c; . Fig. 23 Original noisy spectrum; . Fig. 24 Smoothed spectrum m=3; . Fig. 25 Smoothed spectrum; . Fig.26 Smoothed spectrum m=10; ; Script:; ; // Example to illustrate smoothing using Markov algorithm (class TSpectrum).; // To execute this example, do; // root > .x Smoothing.C; void Smoothing() {; Int_t i;; Double_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * sourc",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:32441,Availability,error,error,32441,"H1F *h = new TH1F(""h"",""Smoothed spectrum for m=3"",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""smooth1;1"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; TCanvas *Smooth1 = gROOT->GetListOfCanvases()->FindObject(""Smooth1"");; if (!Smooth1) Smooth1 = new TCanvas(""Smooth1"",""Smooth1"",10,10,1000,700);; TSpectrum *s = new TSpectrum();; s->SmoothMarkov(source,1024,3); //3, 7, 10; for (i = 0; i < nbins; i++) h->SetBinContent(i + 1,source[i]);; h->SetAxisRange(330,880);; h->Draw(""L"");; }; ; . const char * Deconvolution(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost). One-dimensional deconvolution function. This function calculates deconvolution from source spectrum according to; response spectrum using Gold deconvolution algorithm. The result is placed; in the vector pointed by source pointer. On successful completion it; returns 0. On error it returns pointer to the string describing error. If; desired after every numberIterations one can apply boosting operation; (exponential function with exponent given by boost coefficient) and repeat; it numberRepetitions times.; ; Function parameters:; ; source: pointer to the vector of source spectrum; response: pointer to the vector of response spectrum; ssize: length of source and response spectra; numberIterations, for details we refer to the reference given below; numberRepetitions, for repeated boosted deconvolution; boost, boosting coefficient; ; The goal of this function is the improvement of the resolution in spectra,; decomposition of multiplets. The mathematical formulation of; the convolution system is:; . where h(i) is the impulse response function, x, y are input and output; vectors, respectively, N is the length of x and h vectors. In matrix form; we have:; . Let us assume that we know the response and the output vector (spectrum) of; the above given system. The deconvolution represents s",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:32491,Availability,error,error,32491,"H1F *h = new TH1F(""h"",""Smoothed spectrum for m=3"",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""smooth1;1"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; TCanvas *Smooth1 = gROOT->GetListOfCanvases()->FindObject(""Smooth1"");; if (!Smooth1) Smooth1 = new TCanvas(""Smooth1"",""Smooth1"",10,10,1000,700);; TSpectrum *s = new TSpectrum();; s->SmoothMarkov(source,1024,3); //3, 7, 10; for (i = 0; i < nbins; i++) h->SetBinContent(i + 1,source[i]);; h->SetAxisRange(330,880);; h->Draw(""L"");; }; ; . const char * Deconvolution(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost). One-dimensional deconvolution function. This function calculates deconvolution from source spectrum according to; response spectrum using Gold deconvolution algorithm. The result is placed; in the vector pointed by source pointer. On successful completion it; returns 0. On error it returns pointer to the string describing error. If; desired after every numberIterations one can apply boosting operation; (exponential function with exponent given by boost coefficient) and repeat; it numberRepetitions times.; ; Function parameters:; ; source: pointer to the vector of source spectrum; response: pointer to the vector of response spectrum; ssize: length of source and response spectra; numberIterations, for details we refer to the reference given below; numberRepetitions, for repeated boosted deconvolution; boost, boosting coefficient; ; The goal of this function is the improvement of the resolution in spectra,; decomposition of multiplets. The mathematical formulation of; the convolution system is:; . where h(i) is the impulse response function, x, y are input and output; vectors, respectively, N is the length of x and h vectors. In matrix form; we have:; . Let us assume that we know the response and the output vector (spectrum) of; the above given system. The deconvolution represents s",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:41205,Availability,error,error,41205," s->Deconvolution(source,response,256,10000,1,1);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }; . Example 10 - script Deconvolution_wide_boost.c :. Further let us employ boosting operation into deconvolution (Fig. 17).; . Figure 17 The original source spectrum is drawn with black color, the; spectrum after the deconvolution with red color. Number of iterations = 200,; number of repetitions = 50 and boosting coefficient = 1.2.; . Peak # Original/Estimated (max) position Original/Estimated area ; ; 1 50/49 10159/10419 ; ; 2 70/70 60957/58933 ; ; 3 80/79 20319/19935 ; ; 4 100/100 101596/105413 ; ; 5 110/117 10159/6676 ; . Table 2 Results of the estimation of peaks in spectrum shown in Figure 17.; ; One can observe that peaks are decomposed practically to delta functions.; Number of peaks is correct, positions of big peaks as well as their areas; are relatively well estimated. However there is a considerable error in; the estimation of the position of small right hand peak.; ; Script:; . // Example to illustrate deconvolution function (class TSpectrum).; // To execute this example, do; // root > .x Deconvolution_wide_boost.C; #include ; void Deconvolution_wide_boost() {; Int_t i;; Double_t nbins = 256;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Double_t[nbins];; Double_t * response = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Deconvolution"",nbins,xmin,xmax);; TH1F *d = new TH1F(""d"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""decon3;1"");; TFile *fr = new TFile(""spectra\\TSpectrum.root"");; d=(TH1F*) fr->Get(""decon_response_wide;1"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; for (i = 0; i < nbins; i++) response[i]=d->GetBinContent(i + 1);; TCanvas *Decon1 = gROOT->GetListOfCanvases()->FindObject(""Decon1"");; if (!Decon1) Decon1 = new TCanvas(""Decon1"",; ""Deconvolution of closely positioned overlapping peaks using b",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:42949,Availability,error,error,42949,"1);; for (i = 0; i < nbins; i++) response[i]=d->GetBinContent(i + 1);; TCanvas *Decon1 = gROOT->GetListOfCanvases()->FindObject(""Decon1"");; if (!Decon1) Decon1 = new TCanvas(""Decon1"",; ""Deconvolution of closely positioned overlapping peaks using boosted Gold deconvolution method"",10,10,1000,700);; h->SetMaximum(110000);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; s->Deconvolution(source,response,256,200,50,1.2);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }; ; . const char * DeconvolutionRL(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost). One-dimensional deconvolution function. This function calculates deconvolution from source spectrum according to; response spectrum using Richardson-Lucy deconvolution algorithm. The result; is placed in the vector pointed by source pointer. On successful completion; it returns 0. On error it returns pointer to the string describing error.; If desired after every numberIterations one can apply boosting operation; (exponential function with exponent given by boost coefficient) and repeat; it numberRepetitions times (see Gold deconvolution).; ; Function parameters:; ; source: pointer to the vector of source spectrum; response: pointer to the vector of response spectrum; ssize: length of source and response spectra; numberIterations, for details we refer to the reference given above; numberRepetitions, for repeated boosted deconvolution; boost, boosting coefficient; . Richardson-Lucy deconvolution algorithm:. For discrete systems it has the form:; . for positive input data and response matrix this iterative method forces; the deconvoluted spectra to be non-negative. The Richardson-Lucy; iteration converges to the maximum likelihood solution for Poisson statistics; in the data.; ; References:. Abreu M.C. et al., A four-dimensional deconvolution method to correct NA38; experimental data, NIM A 4",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:42999,Availability,error,error,42999,"1);; for (i = 0; i < nbins; i++) response[i]=d->GetBinContent(i + 1);; TCanvas *Decon1 = gROOT->GetListOfCanvases()->FindObject(""Decon1"");; if (!Decon1) Decon1 = new TCanvas(""Decon1"",; ""Deconvolution of closely positioned overlapping peaks using boosted Gold deconvolution method"",10,10,1000,700);; h->SetMaximum(110000);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; s->Deconvolution(source,response,256,200,50,1.2);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }; ; . const char * DeconvolutionRL(Double_t* source, const Double_t* response, Int_t ssize, Int_t numberIterations, Int_t numberRepetitions, Double_t boost). One-dimensional deconvolution function. This function calculates deconvolution from source spectrum according to; response spectrum using Richardson-Lucy deconvolution algorithm. The result; is placed in the vector pointed by source pointer. On successful completion; it returns 0. On error it returns pointer to the string describing error.; If desired after every numberIterations one can apply boosting operation; (exponential function with exponent given by boost coefficient) and repeat; it numberRepetitions times (see Gold deconvolution).; ; Function parameters:; ; source: pointer to the vector of source spectrum; response: pointer to the vector of response spectrum; ssize: length of source and response spectra; numberIterations, for details we refer to the reference given above; numberRepetitions, for repeated boosted deconvolution; boost, boosting coefficient; . Richardson-Lucy deconvolution algorithm:. For discrete systems it has the form:; . for positive input data and response matrix this iterative method forces; the deconvoluted spectra to be non-negative. The Richardson-Lucy; iteration converges to the maximum likelihood solution for Poisson statistics; in the data.; ; References:. Abreu M.C. et al., A four-dimensional deconvolution method to correct NA38; experimental data, NIM A 4",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:48358,Availability,error,error,48358,");; TCanvas *Decon1 = gROOT->GetListOfCanvases()->FindObject(""Decon1"");; if (!Decon1) Decon1 = new TCanvas(""Decon1"",; ""Deconvolution of closely positioned overlapping peaks using boosted Richardson-Lucy deconvolution method"",; 10,10,1000,700);; h->SetMaximum(110000);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; s->DeconvolutionRL(source,response,256,200,50,1.2);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }; ; . const char * Unfolding(Double_t* source, const Double_t** respMatrix, Int_t ssizex, Int_t ssizey, Int_t numberIterations, Int_t numberRepetitions, Double_t boost). One-dimensional unfolding function. This function unfolds source spectrum according to response matrix columns.; The result is placed in the vector pointed by source pointer.; The coefficients of the resulting vector represent contents of the columns; (weights) in the input vector. On successful completion it returns 0. On; error it returns pointer to the string describing error. If desired after; every numberIterations one can apply boosting operation (exponential; function with exponent given by boost coefficient) and repeat it; numberRepetitions times. For details we refer to [1].; ; Function parameters:; ; source: pointer to the vector of source spectrum; respMatrix: pointer to the matrix of response spectra; ssizex: length of source spectrum and # of columns of the response; matrix. ssizex must be >= ssizey.; ssizey: length of destination spectrum and # of rows of the response; matrix.; numberIterations: number of iterations; numberRepetitions: number of repetitions for boosted deconvolution.; It must be greater or equal to one.; boost: boosting coefficient, applies only if numberRepetitions is; greater than one.; . Unfolding:. The goal is the decomposition of spectrum to a given set of component; spectra.; ; The mathematical formulation of the discrete linear system is:; . References:. Jandel M., Morh�č M., Kliman J., Krupa ",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:48408,Availability,error,error,48408,");; TCanvas *Decon1 = gROOT->GetListOfCanvases()->FindObject(""Decon1"");; if (!Decon1) Decon1 = new TCanvas(""Decon1"",; ""Deconvolution of closely positioned overlapping peaks using boosted Richardson-Lucy deconvolution method"",; 10,10,1000,700);; h->SetMaximum(110000);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; s->DeconvolutionRL(source,response,256,200,50,1.2);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }; ; . const char * Unfolding(Double_t* source, const Double_t** respMatrix, Int_t ssizex, Int_t ssizey, Int_t numberIterations, Int_t numberRepetitions, Double_t boost). One-dimensional unfolding function. This function unfolds source spectrum according to response matrix columns.; The result is placed in the vector pointed by source pointer.; The coefficients of the resulting vector represent contents of the columns; (weights) in the input vector. On successful completion it returns 0. On; error it returns pointer to the string describing error. If desired after; every numberIterations one can apply boosting operation (exponential; function with exponent given by boost coefficient) and repeat it; numberRepetitions times. For details we refer to [1].; ; Function parameters:; ; source: pointer to the vector of source spectrum; respMatrix: pointer to the matrix of response spectra; ssizex: length of source spectrum and # of columns of the response; matrix. ssizex must be >= ssizey.; ssizey: length of destination spectrum and # of rows of the response; matrix.; numberIterations: number of iterations; numberRepetitions: number of repetitions for boosted deconvolution.; It must be greater or equal to one.; boost: boosting coefficient, applies only if numberRepetitions is; greater than one.; . Unfolding:. The goal is the decomposition of spectrum to a given set of component; spectra.; ; The mathematical formulation of the discrete linear system is:; . References:. Jandel M., Morh�č M., Kliman J., Krupa ",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:52685,Deployability,continuous,continuous,52685,"n. The highest peak is the first in; the list. On success it returns number of found peaks.; ; Function parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets.; The algorithm should be able to recognize close positioned peaks.; ability to identify peaks with different sigma.; . Fig. 27 An example of one-dimensional synthetic spectrum with found peaks; denoted by markers.; ; References:. M.A. Mariscotti: A method for identification of peaks in the presence of; background and its application to spectrum analysis. NIM 50 (1967),; 309-320.; M. Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�,; I. Turzo.:Identification of peaks in; multidimensional coincidence gamma-ray spectra. NIM, ",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:52946,Deployability,continuous,continuous,52946,"gma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets.; The algorithm should be able to recognize close positioned peaks.; ability to identify peaks with different sigma.; . Fig. 27 An example of one-dimensional synthetic spectrum with found peaks; denoted by markers.; ; References:. M.A. Mariscotti: A method for identification of peaks in the presence of; background and its application to spectrum analysis. NIM 50 (1967),; 309-320.; M. Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�,; I. Turzo.:Identification of peaks in; multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM; A 376 (1996), 451.; . Examples of peak searching method:. The SearchHighRes function provides users with the possibility to vary the; input parameters and with the access to the outpu",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:59491,Deployability,release,release,59491,"0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->SearchHighRes(source, dest, nbins, 8, 2, kTRUE, 10, kTRUE, 3);; for (i = 0; i < nbins; i++) d2->SetBinContent(i + 1,dest[i]);; d2->SetLineColor(kBlue);; d2->Draw(""SAME"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->SearchHighRes(source, dest, nbins, 8, 2, kTRUE, 100, kTRUE, 3);; for (i = 0; i < nbins; i++) d3->SetBinContent(i + 1,dest[i]);; d3->SetLineColor(kGreen);; d3->Draw(""SAME"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->SearchHighRes(source, dest, nbins, 8, 2, kTRUE, 1000, kTRUE, 3);; for (i = 0; i < nbins; i++) d4->SetBinContent(i + 1,dest[i]);; d4->SetLineColor(kMagenta);; d4->Draw(""SAME"");; printf(""Found %d candidate peaks\n"",nfound);; }; ; ; . Int_t Search1HighRes(Double_t* source, Double_t* destVector, Int_t ssize, Double_t sigma, Double_t threshold, bool backgroundRemove, Int_t deconIterations, bool markov, Int_t averWindow). Old name of SearcHighRes introduced for back compatibility.; This function will be removed after the June 2006 release; ; . Int_t StaticSearch(const TH1* hist, Double_t sigma = 2, Option_t* option = ""goff"", Double_t threshold = 0.050000000000000003). Static function, interface to TSpectrum::Search.; ; . TH1 * StaticBackground(const TH1* hist, Int_t niter = 20, Option_t* option = """"). Static function, interface to TSpectrum::Background.; ; . TSpectrum(const TSpectrum& ). TSpectrum& operator=(const TSpectrum& ). TH1 * GetHistogram() const; {return fHistogram;}. Int_t GetNPeaks() const; {return fNPeaks;}. Double_t * GetPositionX() const; {return fPositionX;}. Double_t * GetPositionY() const; {return fPositionY;}. » Author: Miroslav Morhac 27/05/99 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:1046,Energy Efficiency,Efficient,Efficient,1046,"; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum. class TSpectrum: public TNamed. Advanced Spectra Processing; This class contains advanced spectra processing functions for:. One-dimensional background estimation; One-dimensional smoothing; One-dimensional deconvolution; One-dimensional peak search. Author:. Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA; email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following references:. M.Morhac et al.: Background elimination methods for; multidimensional coincidence gamma-ray spectra. Nuclear; Instruments and Methods in Physics Research A 401 (1997) 113-132.; M.Morhac et al.: Efficient one- and two-dimensional Gold; deconvolution and its application to gamma-ray spectra; decomposition. Nuclear Instruments and Methods in Physics; Research A 401 (1997) 385-408.; M.Morhac et al.: Identification of peaks in multidimensional; coincidence gamma-ray spectra. Nuclear Instruments and Methods in; Research Physics A 443(2000), 108-125. These NIM papers are also available as doc or ps files from:. Spectrum.doc; SpectrumDec.ps.gz; SpectrumSrc.ps.gz; SpectrumBck.ps.gz. . Function Members (Methods); public:. virtual~TSpectrum(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TH1*Background(const TH1* hist, Int_t niter = 20, Option_t* option = """"); const char*Background(Double_t* spectrum, Int_t ssize, Int_t numberIterations, Int_t direction, Int_t filterOrder, bool smoothing, Int_t smoothWindow, bool compton); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* ",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:19565,Energy Efficiency,green,green,19565,"nbins,xmin,xmax);; TH1F *d = new TH1F(""d"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; back=(TH1F*) f->Get(""back1;1"");; TCanvas *Background = gROOT->GetListOfCanvases()->FindObject(""Background"");; if (!Background) Background =; new TCanvas(""Background"",""Estimation of background with decreasing window"",; 10,10,1000,700);; back->Draw(""L"");; TSpectrum *s = new TSpectrum();; for (i = 0; i < nbins; i++) source[i]=back->GetBinContent(i + 1);; s->Background(source,nbins,6,kBackDecreasingWindow,kBackOrder2,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }. Example 3 script Background_width.c:. The question is how to choose the width of the clipping window, i.e.,; numberIterations parameter. The influence of this parameter on the estimated; background is illustrated in Figure 3. Figure 3 Example of the influence of clipping window width on the estimated; background for numberIterations=4 (red line), 6 (blue line) 8 (green line) using; decreasing clipping window algorithm. in general one should set this parameter so that the value; 2*numberIterations+1 was greater than the widths of preserved objects (peaks). Script:. // Example to illustrate the influence of the clipping window width on the; // estimated background. To execute this example, do:; // root > .x Background_width.C; #include ; void Background_width() {; Int_t i;; Double_t nbins = 256;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Double_t[nbins];; TH1F *h = new TH1F(""h"","""",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""back1;1"");; TCanvas *background = gROOT->GetListOfCanvases()->FindObject(""background"");; if (!background) background = new TCanvas(""background"",; ""Influence of clipping window wi",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:21696,Energy Efficiency,green,green,21696,"h->GetBinContent(i + 1);; s->Background(source,nbins,4,kBackDecreasingWindow,kBackOrder2,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d1->SetBinContent(i + 1,source[i]);; d1->SetLineColor(kRed);; d1->Draw(""SAME L"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->Background(source,nbins,6,kBackDecreasingWindow,kBackOrder2,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d2->SetBinContent(i + 1,source[i]);; d2->SetLineColor(kBlue);; d2->Draw(""SAME L"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->Background(source,nbins,8,kBackDecreasingWindow,kBackOrder2,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d3->SetBinContent(i + 1,source[i]);; d3->SetLineColor(kGreen);; d3->Draw(""SAME L"");; }. Example 4 script Background_width2.c:. another example for very complex spectrum is given in Figure 4. Figure 4 Example of the influence of clipping window width on the estimated; background for numberIterations=10 (red line), 20 (blue line), 30 (green line); and 40 (magenta line) using decreasing clipping window algorithm. Script:. // Example to illustrate the influence of the clipping window width on the; // estimated background. To execute this example, do:; // root > .x Background_width2.C; #include ; void Background_width2() {; Int_t i;; Double_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = 4096;; Double_t * source = new Double_t[nbins];; TH1F *h = new TH1F(""h"","""",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TH1F *d4 = new TH1F(""d4"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""back2;1"");; TCanvas *background = gROOT->GetListOfCanvases()->FindObject(""background"");; if (!background) background = new TCanvas(""background"",; ""Influence of clipping window width on the estimated background"",; 10,10,1000,700);; h->SetAxisRange(0,1000);",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:24295,Energy Efficiency,green,green,24295,"eColor(kBlue);; d2->Draw(""SAME L"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->Background(source,nbins,30,kBackDecreasingWindow,kBackOrder2,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d3->SetBinContent(i + 1,source[i]);; d3->SetLineColor(kGreen);; d3->Draw(""SAME L"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->Background(source,nbins,10,kBackDecreasingWindow,kBackOrder2,kFALSE,; kBackSmoothing3,kFALSE);; for (i = 0; i < nbins; i++) d4->SetBinContent(i + 1,source[i]);; d4->SetLineColor(kMagenta);; d4->Draw(""SAME L"");; }. Example 5 script Background_order.c:. Second order difference filter removes linear (quasi-linear) background and; preserves symmetrical peaks. However if the shape of the background is more; complex one can employ higher-order clipping filters (see example in Figure 5). Figure 5 Example of the influence of clipping filter difference order on the; estimated background for fNnumberIterations=40, 2-nd order red line, 4-th order; blue line, 6-th order green line and 8-th order magenta line, and using; decreasing clipping window algorithm. Script:. // Example to illustrate the influence of the clipping filter difference order; // on the estimated background. To execute this example, do; // root > .x Background_order.C; #include ; void Background_order() {; Int_t i;; Double_t nbins = 4096;; Double_t xmin = 0;; Double_t xmax = 4096;; Double_t * source = new Double_t[nbins];; TH1F *h = new TH1F(""h"","""",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TH1F *d4 = new TH1F(""d4"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""back2;1"");; TCanvas *background = gROOT->GetListOfCanvases()->FindObject(""background"");; if (!background) background = new TCanvas(""background"",; ""Influence of clipping filter difference order on the estimated background"",;",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:34612,Energy Efficiency,Efficient,Efficient,34612,"-posed problem) as well as time; consuming operation. The Gold deconvolution algorithm proves to work very; well, other methods (Fourier, VanCittert etc) oscillate. It is suitable to; process positive definite data (e.g. histograms).; ; Gold deconvolution algorithm:. Where L is given number of iterations (numberIterations parameter).; ; Boosted deconvolution:. Set the initial solution:; ; ; Set required number of repetitions R and iterations L.; Set r = 1.; Using Gold deconvolution algorithm for k=1,2,...,L find; ; ; If r = R stop calculation, else; ; Apply boosting operation, i.e., set; ; ; i=0,1,...N-1 and p is boosting coefficient >0.; r = r + 1; continue in 4.; . References:. Gold R., ANL-6984, Argonne National Laboratories, Argonne Ill, 1964.; Coote G.E., Iterative smoothing and deconvolution of one- and two-dimensional; elemental distribution data, NIM B 130 (1997) 118.; M. Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�,; I. Turzo: Efficient one- and two-dimensional Gold deconvolution and; its application to gamma-ray spectra decomposition. NIM, A401 (1997) 385-408.; Morh�č M., Matou�ek V., Kliman J., Efficient algorithm of multidimensional; deconvolution and its application to nuclear data processing, Digital Signal; Processing 13 (2003) 144.; . Example 8 - script Deconvolution.c :. response function (usually peak) should be shifted left to the first; non-zero channel (bin) (see Figure 9); . Figure 9 Response spectrum.; . Figure 10 Principle how the response matrix is composed inside of the; Deconvolution function.; . Figure 11 Example of Gold deconvolution. The original source spectrum is; drawn with black color, the spectrum after the deconvolution (10000; iterations) with red color.; ; Script:; . // Example to illustrate deconvolution function (class TSpectrum).; // To execute this example, do; // root > .x Deconvolution.C; #include ; void Deconvolution() {; Int_t i;; Double_t nbins = 256;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new D",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:34785,Energy Efficiency,Efficient,Efficient,34785,"ositive definite data (e.g. histograms).; ; Gold deconvolution algorithm:. Where L is given number of iterations (numberIterations parameter).; ; Boosted deconvolution:. Set the initial solution:; ; ; Set required number of repetitions R and iterations L.; Set r = 1.; Using Gold deconvolution algorithm for k=1,2,...,L find; ; ; If r = R stop calculation, else; ; Apply boosting operation, i.e., set; ; ; i=0,1,...N-1 and p is boosting coefficient >0.; r = r + 1; continue in 4.; . References:. Gold R., ANL-6984, Argonne National Laboratories, Argonne Ill, 1964.; Coote G.E., Iterative smoothing and deconvolution of one- and two-dimensional; elemental distribution data, NIM B 130 (1997) 118.; M. Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�,; I. Turzo: Efficient one- and two-dimensional Gold deconvolution and; its application to gamma-ray spectra decomposition. NIM, A401 (1997) 385-408.; Morh�č M., Matou�ek V., Kliman J., Efficient algorithm of multidimensional; deconvolution and its application to nuclear data processing, Digital Signal; Processing 13 (2003) 144.; . Example 8 - script Deconvolution.c :. response function (usually peak) should be shifted left to the first; non-zero channel (bin) (see Figure 9); . Figure 9 Response spectrum.; . Figure 10 Principle how the response matrix is composed inside of the; Deconvolution function.; . Figure 11 Example of Gold deconvolution. The original source spectrum is; drawn with black color, the spectrum after the deconvolution (10000; iterations) with red color.; ; Script:; . // Example to illustrate deconvolution function (class TSpectrum).; // To execute this example, do; // root > .x Deconvolution.C; #include ; void Deconvolution() {; Int_t i;; Double_t nbins = 256;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Double_t[nbins];; Double_t * response = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Deconvolution"",nbins,xmin,xmax);; TH1F *d = new TH1F(""d"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:36862,Energy Efficiency,green,green,36862,"""d"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""decon1;1"");; TFile *fr = new TFile(""spectra\\TSpectrum.root"");; d=(TH1F*) fr->Get(""decon_response;1"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; for (i = 0; i < nbins; i++) response[i]=d->GetBinContent(i + 1);; TCanvas *Decon1 = gROOT->GetListOfCanvases()->FindObject(""Decon1"");; if (!Decon1) Decon1 = new TCanvas(""Decon1"",""Decon1"",10,10,1000,700);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; s->Deconvolution(source,response,256,1000,1,1);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,source[i]);; d->SetLineColor(kRed);; d->Draw(""SAME L"");; }; . Examples of Gold deconvolution method:. First let us study the influence of the number of iterations on the; deconvolved spectrum (Figure 12).; . Figure 12 Study of Gold deconvolution algorithm.The original source spectrum; is drawn with black color, spectrum after 100 iterations with red color,; spectrum after 1000 iterations with blue color, spectrum after 10000; iterations with green color and spectrum after 100000 iterations with; magenta color.; ; For relatively narrow peaks in the above given example the Gold; deconvolution method is able to decompose overlapping peaks practically to; delta - functions. In the next example we have chosen a synthetic data; (spectrum, 256 channels) consisting of 5 very closely positioned, relatively; wide peaks (sigma =5), with added noise (Figure 13). Thin lines represent; pure Gaussians (see Table 1); thick line is a resulting spectrum with; additive noise (10% of the amplitude of small peaks).; . Figure 13 Testing example of synthetic spectrum composed of 5 Gaussians with; added noise.; . Peak # Position Height Area . 1 50 500 10159 . 2 70 3000 60957 . 3 80 1000 20319 . 4 100 5000 101596 . 5 110 500 10159 . Table 1 Positions, heights and areas of peaks in the spectrum shown in; Figure 13.; ; In ideal case, we should obtain the result given in Figure 14. The areas",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:56303,Energy Efficiency,green,green,56303,"TRUE, 3, kTRUE, 3);; Double_t *xpeaks = s->GetPositionX();; for (i = 0; i < nfound; i++) {; a=xpeaks[i];; bin = 1 + Int_t(a + 0.5);; fPositionX[i] = h->GetBinCenter(bin);; fPositionY[i] = h->GetBinContent(bin);; }; TPolyMarker * pm = (TPolyMarker*)h->GetListOfFunctions()->FindObject(""TPolyMarker"");; if (pm) {; h->GetListOfFunctions()->Remove(pm);; delete pm;; }; pm = new TPolyMarker(nfound, fPositionX, fPositionY);; h->GetListOfFunctions()->Add(pm);; pm->SetMarkerStyle(23);; pm->SetMarkerColor(kRed);; pm->SetMarkerSize(1.3);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,dest[i]);; d->SetLineColor(kRed);; d->Draw(""SAME"");; printf(""Found %d candidate peaks\n"",nfound);; for(i=0;i; ; Example 16 - script SearchHR3.c:; ; ; Peak # Position Sigma ; 1 118 26 ; 2 162 41 ; 3 310 4 ; 4 330 8 ; 5 482 22 ; 6 491 26 ; 7 740 21 ; 8 852 15 ; 9 954 12 ; 10 989 13 ; ; ; Table 4 Positions and sigma of peaks in the following examples.; ; ; ; Fig. 30 Influence of number of iterations (3-red, 10-blue, 100- green,; 1000-magenta), sigma=8, smoothing width=3.; ; ; ; Fig. 31 Influence of sigma (3-red, 8-blue, 20- green, 43-magenta),; num. iter.=10, sm. width=3.; ; ; ; Fig. 32 Influence smoothing width (0-red, 3-blue, 7- green, 20-magenta), num.; iter.=10, sigma=8.; ; Script:; ; // Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum).; // To execute this example, do; // root > .x SearchHR3.C; #include ; void SearchHR3() {; Double_t fPositionX[100];; Double_t fPositionY[100];; Int_t fNPeaks = 0;; Int_t i,nfound,bin;; Double_t nbins = 1024,a;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Influence of # of iterations in deconvolution in peak searching"",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xm",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:56408,Energy Efficiency,green,green,56408,"i];; bin = 1 + Int_t(a + 0.5);; fPositionX[i] = h->GetBinCenter(bin);; fPositionY[i] = h->GetBinContent(bin);; }; TPolyMarker * pm = (TPolyMarker*)h->GetListOfFunctions()->FindObject(""TPolyMarker"");; if (pm) {; h->GetListOfFunctions()->Remove(pm);; delete pm;; }; pm = new TPolyMarker(nfound, fPositionX, fPositionY);; h->GetListOfFunctions()->Add(pm);; pm->SetMarkerStyle(23);; pm->SetMarkerColor(kRed);; pm->SetMarkerSize(1.3);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,dest[i]);; d->SetLineColor(kRed);; d->Draw(""SAME"");; printf(""Found %d candidate peaks\n"",nfound);; for(i=0;i; ; Example 16 - script SearchHR3.c:; ; ; Peak # Position Sigma ; 1 118 26 ; 2 162 41 ; 3 310 4 ; 4 330 8 ; 5 482 22 ; 6 491 26 ; 7 740 21 ; 8 852 15 ; 9 954 12 ; 10 989 13 ; ; ; Table 4 Positions and sigma of peaks in the following examples.; ; ; ; Fig. 30 Influence of number of iterations (3-red, 10-blue, 100- green,; 1000-magenta), sigma=8, smoothing width=3.; ; ; ; Fig. 31 Influence of sigma (3-red, 8-blue, 20- green, 43-magenta),; num. iter.=10, sm. width=3.; ; ; ; Fig. 32 Influence smoothing width (0-red, 3-blue, 7- green, 20-magenta), num.; iter.=10, sigma=8.; ; Script:; ; // Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum).; // To execute this example, do; // root > .x SearchHR3.C; #include ; void SearchHR3() {; Double_t fPositionX[100];; Double_t fPositionY[100];; Int_t fNPeaks = 0;; Int_t i,nfound,bin;; Double_t nbins = 1024,a;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Influence of # of iterations in deconvolution in peak searching"",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TH1F *d4 = new TH1F(""d4"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:56517,Energy Efficiency,green,green,56517,"in);; }; TPolyMarker * pm = (TPolyMarker*)h->GetListOfFunctions()->FindObject(""TPolyMarker"");; if (pm) {; h->GetListOfFunctions()->Remove(pm);; delete pm;; }; pm = new TPolyMarker(nfound, fPositionX, fPositionY);; h->GetListOfFunctions()->Add(pm);; pm->SetMarkerStyle(23);; pm->SetMarkerColor(kRed);; pm->SetMarkerSize(1.3);; for (i = 0; i < nbins; i++) d->SetBinContent(i + 1,dest[i]);; d->SetLineColor(kRed);; d->Draw(""SAME"");; printf(""Found %d candidate peaks\n"",nfound);; for(i=0;i; ; Example 16 - script SearchHR3.c:; ; ; Peak # Position Sigma ; 1 118 26 ; 2 162 41 ; 3 310 4 ; 4 330 8 ; 5 482 22 ; 6 491 26 ; 7 740 21 ; 8 852 15 ; 9 954 12 ; 10 989 13 ; ; ; Table 4 Positions and sigma of peaks in the following examples.; ; ; ; Fig. 30 Influence of number of iterations (3-red, 10-blue, 100- green,; 1000-magenta), sigma=8, smoothing width=3.; ; ; ; Fig. 31 Influence of sigma (3-red, 8-blue, 20- green, 43-magenta),; num. iter.=10, sm. width=3.; ; ; ; Fig. 32 Influence smoothing width (0-red, 3-blue, 7- green, 20-magenta), num.; iter.=10, sigma=8.; ; Script:; ; // Example to illustrate the influence of number of iterations in deconvolution in high resolution peak searching function (class TSpectrum).; // To execute this example, do; // root > .x SearchHR3.C; #include ; void SearchHR3() {; Double_t fPositionX[100];; Double_t fPositionY[100];; Int_t fNPeaks = 0;; Int_t i,nfound,bin;; Double_t nbins = 1024,a;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Influence of # of iterations in deconvolution in peak searching"",nbins,xmin,xmax);; TH1F *d1 = new TH1F(""d1"","""",nbins,xmin,xmax);; TH1F *d2 = new TH1F(""d2"","""",nbins,xmin,xmax);; TH1F *d3 = new TH1F(""d3"","""",nbins,xmin,xmax);; TH1F *d4 = new TH1F(""d4"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""search3;1"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; TCanvas ",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:59648,Integrability,interface,interface,59648,"0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->SearchHighRes(source, dest, nbins, 8, 2, kTRUE, 10, kTRUE, 3);; for (i = 0; i < nbins; i++) d2->SetBinContent(i + 1,dest[i]);; d2->SetLineColor(kBlue);; d2->Draw(""SAME"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->SearchHighRes(source, dest, nbins, 8, 2, kTRUE, 100, kTRUE, 3);; for (i = 0; i < nbins; i++) d3->SetBinContent(i + 1,dest[i]);; d3->SetLineColor(kGreen);; d3->Draw(""SAME"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->SearchHighRes(source, dest, nbins, 8, 2, kTRUE, 1000, kTRUE, 3);; for (i = 0; i < nbins; i++) d4->SetBinContent(i + 1,dest[i]);; d4->SetLineColor(kMagenta);; d4->Draw(""SAME"");; printf(""Found %d candidate peaks\n"",nfound);; }; ; ; . Int_t Search1HighRes(Double_t* source, Double_t* destVector, Int_t ssize, Double_t sigma, Double_t threshold, bool backgroundRemove, Int_t deconIterations, bool markov, Int_t averWindow). Old name of SearcHighRes introduced for back compatibility.; This function will be removed after the June 2006 release; ; . Int_t StaticSearch(const TH1* hist, Double_t sigma = 2, Option_t* option = ""goff"", Double_t threshold = 0.050000000000000003). Static function, interface to TSpectrum::Search.; ; . TH1 * StaticBackground(const TH1* hist, Int_t niter = 20, Option_t* option = """"). Static function, interface to TSpectrum::Background.; ; . TSpectrum(const TSpectrum& ). TSpectrum& operator=(const TSpectrum& ). TH1 * GetHistogram() const; {return fHistogram;}. Int_t GetNPeaks() const; {return fNPeaks;}. Double_t * GetPositionX() const; {return fPositionX;}. Double_t * GetPositionY() const; {return fPositionY;}. » Author: Miroslav Morhac 27/05/99 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:59784,Integrability,interface,interface,59784,"0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->SearchHighRes(source, dest, nbins, 8, 2, kTRUE, 10, kTRUE, 3);; for (i = 0; i < nbins; i++) d2->SetBinContent(i + 1,dest[i]);; d2->SetLineColor(kBlue);; d2->Draw(""SAME"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->SearchHighRes(source, dest, nbins, 8, 2, kTRUE, 100, kTRUE, 3);; for (i = 0; i < nbins; i++) d3->SetBinContent(i + 1,dest[i]);; d3->SetLineColor(kGreen);; d3->Draw(""SAME"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->SearchHighRes(source, dest, nbins, 8, 2, kTRUE, 1000, kTRUE, 3);; for (i = 0; i < nbins; i++) d4->SetBinContent(i + 1,dest[i]);; d4->SetLineColor(kMagenta);; d4->Draw(""SAME"");; printf(""Found %d candidate peaks\n"",nfound);; }; ; ; . Int_t Search1HighRes(Double_t* source, Double_t* destVector, Int_t ssize, Double_t sigma, Double_t threshold, bool backgroundRemove, Int_t deconIterations, bool markov, Int_t averWindow). Old name of SearcHighRes introduced for back compatibility.; This function will be removed after the June 2006 release; ; . Int_t StaticSearch(const TH1* hist, Double_t sigma = 2, Option_t* option = ""goff"", Double_t threshold = 0.050000000000000003). Static function, interface to TSpectrum::Search.; ; . TH1 * StaticBackground(const TH1* hist, Int_t niter = 20, Option_t* option = """"). Static function, interface to TSpectrum::Background.; ; . TSpectrum(const TSpectrum& ). TSpectrum& operator=(const TSpectrum& ). TH1 * GetHistogram() const; {return fHistogram;}. Int_t GetNPeaks() const; {return fNPeaks;}. Double_t * GetPositionX() const; {return fPositionX;}. Double_t * GetPositionY() const; {return fPositionY;}. » Author: Miroslav Morhac 27/05/99 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:115,Modifiability,inherit,inheritance,115,". TSpectrum. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum. class TSpectrum: public TNamed. Advanced Spectra Processing; This class contains advanced spectra processing functions for:. One-dimensional background estimation; One-dimensional smoothing; One-dimensional deconvolution; One-dimensional peak search. Author:. Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA; email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following references:. M.Morhac et al.: Background elimination methods for; multidimensional coincidence gamma-ray spectra. Nuclear; Instruments and Methods in Physics Research A 401 (1997) 113-132.; M.Morhac et al.: Efficient one- and two-dimensional Gold; deconvolution and its application to gamma-ray spectra; decomposition. Nuclear Instruments and Methods in Physics; Research A 401 (1997) 385-408.; M.Morhac et al.: Identification of peaks in multidimensional; coincidence gamma-ray spectra. Nuclear Instruments and Methods in; Research Physics A 443(2000), 108-125. These NIM papers are also available as doc or ps files from:. Spectrum.doc; SpectrumDec.ps.gz; SpectrumSrc.ps.gz; SpectrumBck.ps.gz. . Function Members (Methods); public:. virtual~TSpectrum(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TH1*Background(const TH1* hist, Int_t niter = 20, Option_t* option = """"); const char*Background(Double_t* spectrum, Int_t ssize, Int_t numberIterations, Int_t direction, Int_t filterOrder, bool smoothing, Int_t smoothWindow, bool compton); virtual voidTObject::Browse(TBrowser* b); static",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:4175,Modifiability,Inherit,InheritsFrom,4175,"ent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:4241,Modifiability,Inherit,InheritsFrom,4241,"onst char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidTObject::Paint(Option_t* option = """"); vi",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:10002,Modifiability,Inherit,Inheritance,10002,"BitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TH1*fHistogramresulting histogram; Int_tfMaxPeaksMaximum number of peaks to be found; Int_tfNPeaksnumber of peaks found; TStringTNamed::fNameobject identifier; Double_t*fPosition[fNPeaks] array of current peak positions; Double_t*fPositionX[fNPeaks] X position of peaks; Double_t*fPositionY[fNPeaks] Y position of peaks; Double_tfResolutionresolution of the neighboring peaks; TStringTNamed::fTitleobject title; static Int_tfgAverageWindowAverage window of searched peaks; static Int_tfgIterationsMaximum number of decon iterations (default=3). Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrum. Function documentation; TSpectrum(). Constructor.; ; . TSpectrum(Int_t maxpositions, Double_t resolution = 1). ; maxpositions: maximum number of peaks; resolution: determines resolution of the neighboring peaks; default value is 1 correspond to 3 sigma distance; between peaks. Higher values allow higher resolution; (smaller distance between peaks.; May be set later through SetResolution.; ; . ~TSpectrum(). Destructor.; ; . void SetAverageWindow(Int_t w = 3). Static function: Set average window of searched peaks; (see TSpectrum::SearchHighRes).; ; . void SetDeconIterations(Int_t n = 3). Static function: Set max number of decon iterations in deconvolution; operation (see TSpectrum::SearchHighRes).; ; . TH1 * Background(const TH1* hist, Int_t niter = 20, Option_t* option = """"). One-dimensional background estimation function. This function calculates the background spectrum in the input histogram h.; The background is returned as a histogram.; ;",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:15624,Modifiability,variab,variable,15624,"rmation (peaks) from useless; information (background). method is based on Sensitive Nonlinear Iterative Peak (SNIP) clipping; algorithm.; new value in the channel ""i"" is calculated. where p = 1, 2, ..., numberIterations. In fact it represents second order; difference filter (-1,2,-1).; One can also change the; direction of the change of the clipping window, the order of the clipping; filter, to include smoothing, to set width of smoothing window and to include; the estimation of Compton edges. On successful completion it returns 0. On; error it returns pointer to the string describing error.; Parameters:. spectrum: pointer to the vector of source spectrum; ssize: length of the spectrum vector; numberIterations: maximal width of clipping window,; direction: direction of change of clipping window.; Possible values: kBackIncreasingWindow, kBackDecreasingWindow; filterOrder: order of clipping filter.; Possible values: kBackOrder2, kBackOrder4, kBackOrder6, kBackOrder8; smoothing: logical variable whether the smoothing operation in the; estimation of background will be included.; Possible values: kFALSE, kTRUE; smoothWindow: width of smoothing window.; Possible values: kBackSmoothing3, kBackSmoothing5, kBackSmoothing7,; kBackSmoothing9, kBackSmoothing11, kBackSmoothing13, kBackSmoothing15.; compton: logical variable whether the estimation of Compton edge will be; included. Possible values: kFALSE, kTRUE. References:. C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the; quantitative analysis of PIXE spectra in geoscience applications. NIM, B34; (1988), 396-402.; M. Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo:; Background elimination methods for multidimensional gamma-ray spectra. NIM,; A401 (1997) 113-132.; D. D. Burgess, R. J. Tervo: Background estimation for gamma-ray; spectroscopy. NIM 214 (1983), 431-434. Example 1 script Background_incr.c:. Figure 1 Example of the estimation of background for number of iterations=6.; Original spectru",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:15949,Modifiability,variab,variable,15949,"ping window, the order of the clipping; filter, to include smoothing, to set width of smoothing window and to include; the estimation of Compton edges. On successful completion it returns 0. On; error it returns pointer to the string describing error.; Parameters:. spectrum: pointer to the vector of source spectrum; ssize: length of the spectrum vector; numberIterations: maximal width of clipping window,; direction: direction of change of clipping window.; Possible values: kBackIncreasingWindow, kBackDecreasingWindow; filterOrder: order of clipping filter.; Possible values: kBackOrder2, kBackOrder4, kBackOrder6, kBackOrder8; smoothing: logical variable whether the smoothing operation in the; estimation of background will be included.; Possible values: kFALSE, kTRUE; smoothWindow: width of smoothing window.; Possible values: kBackSmoothing3, kBackSmoothing5, kBackSmoothing7,; kBackSmoothing9, kBackSmoothing11, kBackSmoothing13, kBackSmoothing15.; compton: logical variable whether the estimation of Compton edge will be; included. Possible values: kFALSE, kTRUE. References:. C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the; quantitative analysis of PIXE spectra in geoscience applications. NIM, B34; (1988), 396-402.; M. Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo:; Background elimination methods for multidimensional gamma-ray spectra. NIM,; A401 (1997) 113-132.; D. D. Burgess, R. J. Tervo: Background estimation for gamma-ray; spectroscopy. NIM 214 (1983), 431-434. Example 1 script Background_incr.c:. Figure 1 Example of the estimation of background for number of iterations=6.; Original spectrum is shown in black color, estimated background in red color. Script:. // Example to illustrate the background estimator (class TSpectrum).; // To execute this example, do; // root > .x Background_incr.C; #include ; void Background_incr() {; Int_t i;; Double_t nbins = 256;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Doubl",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:38219,Modifiability,variab,variables,38219," consisting of 5 very closely positioned, relatively; wide peaks (sigma =5), with added noise (Figure 13). Thin lines represent; pure Gaussians (see Table 1); thick line is a resulting spectrum with; additive noise (10% of the amplitude of small peaks).; . Figure 13 Testing example of synthetic spectrum composed of 5 Gaussians with; added noise.; . Peak # Position Height Area . 1 50 500 10159 . 2 70 3000 60957 . 3 80 1000 20319 . 4 100 5000 101596 . 5 110 500 10159 . Table 1 Positions, heights and areas of peaks in the spectrum shown in; Figure 13.; ; In ideal case, we should obtain the result given in Figure 14. The areas of; the Gaussian components of the spectrum are concentrated completely to; delta-functions. When solving the overdetermined system of linear equations; with data from Figure 13 in the sense of minimum least squares criterion; without any regularization we obtain the result with large oscillations; (Figure 15). From mathematical point of view, it is the optimal solution in; the unconstrained space of independent variables. From physical point of; view we are interested only in a meaningful solution. Therefore, we have to; employ regularization techniques (e.g. Gold deconvolution) and/or to; confine the space of allowed solutions to subspace of positive solutions.; . Figure 14 The same spectrum like in Figure 13, outlined bars show the; contents of present components (peaks).; . Figure 15 Least squares solution of the system of linear equations without; regularization.; ; Example 9 - script Deconvolution_wide.c. When we employ Gold deconvolution algorithm we obtain the result given in; Fig. 16. One can observe that the resulting spectrum is smooth. On the; other hand the method is not able to decompose completely the peaks in the; spectrum.; . Figure 16 Example of Gold deconvolution for closely positioned wide peaks.; The original source spectrum is drawn with black color, the spectrum after; the deconvolution (10000 iterations) with red color.; ; ",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:52165,Modifiability,variab,variable,52165,", Int_t averWindow). One-dimensional high-resolution peak search function. This function searches for peaks in source spectrum. It is based on; deconvolution method. First the background is removed (if desired), then; Markov smoothed spectrum is calculated (if desired), then the response; function is generated according to given sigma and deconvolution is; carried out. The order of peaks is arranged according to their heights in; the spectrum after background elimination. The highest peak is the first in; the list. On success it returns number of found peaks.; ; Function parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets.; The algorithm should be able to recognize close ",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:52325,Modifiability,variab,variable,52325," is removed (if desired), then; Markov smoothed spectrum is calculated (if desired), then the response; function is generated according to given sigma and deconvolution is; carried out. The order of peaks is arranged according to their heights in; the spectrum after background elimination. The highest peak is the first in; the list. On success it returns number of found peaks.; ; Function parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets.; The algorithm should be able to recognize close positioned peaks.; ability to identify peaks with different sigma.; . Fig. 27 An example of one-dimensional synthetic spectrum with found peaks; denoted by markers.; ; References:. M.A. M",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:12682,Performance,perform,performed,12682,"Smoothing11""; ""BackSmoothing13""; ""BackSmoothing15""; ""Compton"" if selected the estimation of Compton edge; will be included.; ""same"" : if this option is specified, the resulting background; histogram is superimposed on the picture in the current pad.; . NOTE that the background is only evaluated in the current range of h.; ie, if h has a bin range (set via h->GetXaxis()->SetRange(binmin,binmax),; the returned histogram will be created with the same number of bins; as the input histogram h, but only bins from binmin to binmax will be filled; with the estimated background.; ; . void Print(Option_t* option = """") const. Print the array of positions.; ; . Int_t Search(const TH1* hist, Double_t sigma = 2, Option_t* option = """", Double_t threshold = 0.050000000000000003). One-dimensional peak search function. This function searches for peaks in source spectrum in hin; The number of found peaks and their positions are written into; the members fNpeaks and fPositionX.; The search is performed in the current histogram range.; ; Function parameters:; ; hin: pointer to the histogram of source spectrum; sigma: sigma of searched peaks, for details we refer to manual; threshold: (default=0.05) peaks with amplitude less than; threshold*highest_peak are discarded. 0; By default, the background is removed before deconvolution.; Specify the option ""nobackground"" to not remove the background.; ; By default the ""Markov"" chain algorithm is used.; Specify the option ""noMarkov"" to disable this algorithm; Note that by default the source spectrum is replaced by a new spectrum; ; By default a polymarker object is created and added to the list of; functions of the histogram. The histogram is drawn with the specified; option and the polymarker object drawn on top of the histogram.; The polymarker coordinates correspond to the npeaks peaks found in; the histogram.; ; A pointer to the polymarker object can be retrieved later via:; ; TList *functions = hin->GetListOfFunctions();; TPolyMarker *pm = (",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:54021,Performance,tune,tune,54021,"s of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets.; The algorithm should be able to recognize close positioned peaks.; ability to identify peaks with different sigma.; . Fig. 27 An example of one-dimensional synthetic spectrum with found peaks; denoted by markers.; ; References:. M.A. Mariscotti: A method for identification of peaks in the presence of; background and its application to spectrum analysis. NIM 50 (1967),; 309-320.; M. Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�,; I. Turzo.:Identification of peaks in; multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM; A 376 (1996), 451.; . Examples of peak searching method:. The SearchHighRes function provides users with the possibility to vary the; input parameters and with the access to the output deconvolved data in the; destination spectrum. Based on the output data one can tune the parameters.; ; Example 15 - script SearchHR1.c:; . Fig. 28 One-dimensional spectrum with found peaks denoted by markers, 3; iterations steps in the deconvolution.; . Fig. 29 One-dimensional spectrum with found peaks denoted by markers, 8; iterations steps in the deconvolution.; ; Script:; ; // Example to illustrate high resolution peak searching function (class TSpectrum).; // To execute this example, do; // root > .x SearchHR1.C; #include ; void SearchHR1() {; Double_t fPositionX[100];; Double_t fPositionY[100];; Int_t fNPeaks = 0;; Int_t i,nfound,bin;; Double_t nbins = 1024,a;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""High resolution peak searching, number of iterations = 3"",nbins,xmin,xmax);; TH1F *d = new TH1F(""d"","""",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""search2;1"");; for (i = 0; i < nbins; i++) source[i]=h->Ge",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:53070,Safety,detect,detect,53070,"th; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets.; The algorithm should be able to recognize close positioned peaks.; ability to identify peaks with different sigma.; . Fig. 27 An example of one-dimensional synthetic spectrum with found peaks; denoted by markers.; ; References:. M.A. Mariscotti: A method for identification of peaks in the presence of; background and its application to spectrum analysis. NIM 50 (1967),; 309-320.; M. Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�,; I. Turzo.:Identification of peaks in; multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM; A 376 (1996), 451.; . Examples of peak searching method:. The SearchHighRes function provides users with the possibility to vary the; input parameters and with the access to the output deconvolved data in the; destination spectrum. Based on the output data one can tune the parameters.; ; Example 15 - scr",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:4065,Security,Hash,Hash,4065,"virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:53920,Security,access,access,53920,"ntified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets.; The algorithm should be able to recognize close positioned peaks.; ability to identify peaks with different sigma.; . Fig. 27 An example of one-dimensional synthetic spectrum with found peaks; denoted by markers.; ; References:. M.A. Mariscotti: A method for identification of peaks in the presence of; background and its application to spectrum analysis. NIM 50 (1967),; 309-320.; M. Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�,; I. Turzo.:Identification of peaks in; multidimensional coincidence gamma-ray spectra. NIM, A443 (2000) 108-125.; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM; A 376 (1996), 451.; . Examples of peak searching method:. The SearchHighRes function provides users with the possibility to vary the; input parameters and with the access to the output deconvolved data in the; destination spectrum. Based on the output data one can tune the parameters.; ; Example 15 - script SearchHR1.c:; . Fig. 28 One-dimensional spectrum with found peaks denoted by markers, 3; iterations steps in the deconvolution.; . Fig. 29 One-dimensional spectrum with found peaks denoted by markers, 8; iterations steps in the deconvolution.; ; Script:; ; // Example to illustrate high resolution peak searching function (class TSpectrum).; // To execute this example, do; // root > .x SearchHR1.C; #include ; void SearchHR1() {; Double_t fPositionX[100];; Double_t fPositionY[100];; Int_t fNPeaks = 0;; Int_t i,nfound,bin;; Double_t nbins = 1024,a;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Double_t[nbins];; Double_t * dest = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""High resolution peak searching, number of iterations = 3"",nbins,xmin,xmax);; TH1F *d = new TH1F(""d"","""",nbins,xmin,xmax);; TFile *f = ",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:7271,Testability,Test,TestBit,7271,"(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetResolution(Double_t resolution = 1); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; const char*SmoothMarkov(Double_t* source, Int_t ssize, Int_t averWindow); static TH1*StaticBackground(const TH1* hist, Int_t niter = 20, Option_t* option = """"); static Int_tStaticSearch(const TH1* hist, Double_t sigma = 2, Option_t* option = ""goff"", Double_t threshold = 0.050000000000000003); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpectrum(); TSpectrum(Int_t maxpositions, Double_t resolution = 1); const char*Unfolding(Double_t* source, const Double_t** respMatrix, Int_t ssizex, Int_t ssizey, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TSpectrum&operator=(const TSpectrum&); TSpectrum(const TSpectrum&). Data Members; public:. static TSpectrum::(anonymous)kBackDecreasingWindow; static TSpectrum::(anonymous)kBackIncreasingWindow; static TSpectrum::(anonymous)kBackOrder2; static TSpectrum::(anonymous)kBackOrder4; static TSpectrum::(anonymous)kBackOrder6; static TSpectrum::(anonymous)kBackOrder8; static TSpectrum::(anonymous)kBackSmoothing11; static TSpectrum::(anonymous)kBackSmoothing",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:7310,Testability,Test,TestBits,7310,"(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetResolution(Double_t resolution = 1); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; const char*SmoothMarkov(Double_t* source, Int_t ssize, Int_t averWindow); static TH1*StaticBackground(const TH1* hist, Int_t niter = 20, Option_t* option = """"); static Int_tStaticSearch(const TH1* hist, Double_t sigma = 2, Option_t* option = ""goff"", Double_t threshold = 0.050000000000000003); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpectrum(); TSpectrum(Int_t maxpositions, Double_t resolution = 1); const char*Unfolding(Double_t* source, const Double_t** respMatrix, Int_t ssizex, Int_t ssizey, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). private:. TSpectrum&operator=(const TSpectrum&); TSpectrum(const TSpectrum&). Data Members; public:. static TSpectrum::(anonymous)kBackDecreasingWindow; static TSpectrum::(anonymous)kBackIncreasingWindow; static TSpectrum::(anonymous)kBackOrder2; static TSpectrum::(anonymous)kBackOrder4; static TSpectrum::(anonymous)kBackOrder6; static TSpectrum::(anonymous)kBackOrder8; static TSpectrum::(anonymous)kBackSmoothing11; static TSpectrum::(anonymous)kBackSmoothing",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:15616,Testability,log,logical,15616,"rmation (peaks) from useless; information (background). method is based on Sensitive Nonlinear Iterative Peak (SNIP) clipping; algorithm.; new value in the channel ""i"" is calculated. where p = 1, 2, ..., numberIterations. In fact it represents second order; difference filter (-1,2,-1).; One can also change the; direction of the change of the clipping window, the order of the clipping; filter, to include smoothing, to set width of smoothing window and to include; the estimation of Compton edges. On successful completion it returns 0. On; error it returns pointer to the string describing error.; Parameters:. spectrum: pointer to the vector of source spectrum; ssize: length of the spectrum vector; numberIterations: maximal width of clipping window,; direction: direction of change of clipping window.; Possible values: kBackIncreasingWindow, kBackDecreasingWindow; filterOrder: order of clipping filter.; Possible values: kBackOrder2, kBackOrder4, kBackOrder6, kBackOrder8; smoothing: logical variable whether the smoothing operation in the; estimation of background will be included.; Possible values: kFALSE, kTRUE; smoothWindow: width of smoothing window.; Possible values: kBackSmoothing3, kBackSmoothing5, kBackSmoothing7,; kBackSmoothing9, kBackSmoothing11, kBackSmoothing13, kBackSmoothing15.; compton: logical variable whether the estimation of Compton edge will be; included. Possible values: kFALSE, kTRUE. References:. C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the; quantitative analysis of PIXE spectra in geoscience applications. NIM, B34; (1988), 396-402.; M. Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo:; Background elimination methods for multidimensional gamma-ray spectra. NIM,; A401 (1997) 113-132.; D. D. Burgess, R. J. Tervo: Background estimation for gamma-ray; spectroscopy. NIM 214 (1983), 431-434. Example 1 script Background_incr.c:. Figure 1 Example of the estimation of background for number of iterations=6.; Original spectru",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:15941,Testability,log,logical,15941,"ping window, the order of the clipping; filter, to include smoothing, to set width of smoothing window and to include; the estimation of Compton edges. On successful completion it returns 0. On; error it returns pointer to the string describing error.; Parameters:. spectrum: pointer to the vector of source spectrum; ssize: length of the spectrum vector; numberIterations: maximal width of clipping window,; direction: direction of change of clipping window.; Possible values: kBackIncreasingWindow, kBackDecreasingWindow; filterOrder: order of clipping filter.; Possible values: kBackOrder2, kBackOrder4, kBackOrder6, kBackOrder8; smoothing: logical variable whether the smoothing operation in the; estimation of background will be included.; Possible values: kFALSE, kTRUE; smoothWindow: width of smoothing window.; Possible values: kBackSmoothing3, kBackSmoothing5, kBackSmoothing7,; kBackSmoothing9, kBackSmoothing11, kBackSmoothing13, kBackSmoothing15.; compton: logical variable whether the estimation of Compton edge will be; included. Possible values: kFALSE, kTRUE. References:. C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the; quantitative analysis of PIXE spectra in geoscience applications. NIM, B34; (1988), 396-402.; M. Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo:; Background elimination methods for multidimensional gamma-ray spectra. NIM,; A401 (1997) 113-132.; D. D. Burgess, R. J. Tervo: Background estimation for gamma-ray; spectroscopy. NIM 214 (1983), 431-434. Example 1 script Background_incr.c:. Figure 1 Example of the estimation of background for number of iterations=6.; Original spectrum is shown in black color, estimated background in red color. Script:. // Example to illustrate the background estimator (class TSpectrum).; // To execute this example, do; // root > .x Background_incr.C; #include ; void Background_incr() {; Int_t i;; Double_t nbins = 256;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Doubl",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:37439,Testability,Test,Testing,37439,"}; . Examples of Gold deconvolution method:. First let us study the influence of the number of iterations on the; deconvolved spectrum (Figure 12).; . Figure 12 Study of Gold deconvolution algorithm.The original source spectrum; is drawn with black color, spectrum after 100 iterations with red color,; spectrum after 1000 iterations with blue color, spectrum after 10000; iterations with green color and spectrum after 100000 iterations with; magenta color.; ; For relatively narrow peaks in the above given example the Gold; deconvolution method is able to decompose overlapping peaks practically to; delta - functions. In the next example we have chosen a synthetic data; (spectrum, 256 channels) consisting of 5 very closely positioned, relatively; wide peaks (sigma =5), with added noise (Figure 13). Thin lines represent; pure Gaussians (see Table 1); thick line is a resulting spectrum with; additive noise (10% of the amplitude of small peaks).; . Figure 13 Testing example of synthetic spectrum composed of 5 Gaussians with; added noise.; . Peak # Position Height Area . 1 50 500 10159 . 2 70 3000 60957 . 3 80 1000 20319 . 4 100 5000 101596 . 5 110 500 10159 . Table 1 Positions, heights and areas of peaks in the spectrum shown in; Figure 13.; ; In ideal case, we should obtain the result given in Figure 14. The areas of; the Gaussian components of the spectrum are concentrated completely to; delta-functions. When solving the overdetermined system of linear equations; with data from Figure 13 in the sense of minimum least squares criterion; without any regularization we obtain the result with large oscillations; (Figure 15). From mathematical point of view, it is the optimal solution in; the unconstrained space of independent variables. From physical point of; view we are interested only in a meaningful solution. Therefore, we have to; employ regularization techniques (e.g. Gold deconvolution) and/or to; confine the space of allowed solutions to subspace of positive solutions.",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:52157,Testability,log,logical,52157,", Int_t averWindow). One-dimensional high-resolution peak search function. This function searches for peaks in source spectrum. It is based on; deconvolution method. First the background is removed (if desired), then; Markov smoothed spectrum is calculated (if desired), then the response; function is generated according to given sigma and deconvolution is; carried out. The order of peaks is arranged according to their heights in; the spectrum after background elimination. The highest peak is the first in; the list. On success it returns number of found peaks.; ; Function parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets.; The algorithm should be able to recognize close ",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:52317,Testability,log,logical,52317," is removed (if desired), then; Markov smoothed spectrum is calculated (if desired), then the response; function is generated according to given sigma and deconvolution is; carried out. The order of peaks is arranged according to their heights in; the spectrum after background elimination. The highest peak is the first in; the list. On success it returns number of found peaks.; ; Function parameters:. source: pointer to the vector of source spectrum.; destVector: pointer to the vector of resulting deconvolved spectrum.; ssize: length of source spectrum.; sigma: sigma of searched peaks, for details we refer to manual.; threshold: threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual.; backgroundRemove: logical variable, set if the removal of; background before deconvolution is desired.; deconIterations-number of iterations in deconvolution operation.; markov: logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow: averanging window of searched peaks, for details; we refer to manual (applies only for Markov method).; . Peaks searching:. The goal of this function is to identify automatically the peaks in spectrum; with the presence of the continuous background and statistical; fluctuations - noise.; ; The common problems connected with correct peak identification are:; ; non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified.; non-sensitivity of the algorithm to continuous; background.; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them.; resolution, decomposition of Double_tts and multiplets.; The algorithm should be able to recognize close positioned peaks.; ability to identify peaks with different sigma.; . Fig. 27 An example of one-dimensional synthetic spectrum with found peaks; denoted by markers.; ; References:. M.A. M",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:2085,Usability,Clear,Clear,2085," virtual~TSpectrum(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TH1*Background(const TH1* hist, Int_t niter = 20, Option_t* option = """"); const char*Background(Double_t* spectrum, Int_t ssize, Int_t numberIterations, Int_t direction, Int_t filterOrder, bool smoothing, Int_t smoothWindow, bool compton); virtual voidTObject::Browse(TBrowser* b); static",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum.html:30772,Usability,simpl,simple,30772,"0);; h->Draw(""L"");; TSpectrum *s = new TSpectrum();; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; s->Background(source,nbins,10,kBackDecreasingWindow,kBackOrder8,kTRUE,; kBackSmoothing5,,kTRUE);; for (i = 0; i < nbins; i++) d1->SetBinContent(i + 1,source[i]);; d1->SetLineColor(kRed);; d1->Draw(""SAME L"");; }. . const char* SmoothMarkov(Double_t* source, Int_t ssize, Int_t averWindow). One-dimensional markov spectrum smoothing function. This function calculates smoothed spectrum from source spectrum based on; Markov chain method. The result is placed in the array pointed by source; pointer. On successful completion it returns 0. On error it returns pointer; to the string describing error.; ; Function parameters:; ; source: pointer to the array of source spectrum; ssize: length of source array; averWindow: width of averaging smoothing window; ; The goal of this function is the suppression of the statistical fluctuations.; The algorithm is based on discrete Markov chain, which has very simple; invariant distribution:; . being defined; from the normalization condition; .; n is the length of the smoothed spectrum and; . Reference:; ; Z.K. Silagadze, A new algorithm for automatic photopeak searches.; NIM A 376 (1996), 451.; . Example 14 - script Smoothing.c; . Fig. 23 Original noisy spectrum; . Fig. 24 Smoothed spectrum m=3; . Fig. 25 Smoothed spectrum; . Fig.26 Smoothed spectrum m=10; ; Script:; ; // Example to illustrate smoothing using Markov algorithm (class TSpectrum).; // To execute this example, do; // root > .x Smoothing.C; void Smoothing() {; Int_t i;; Double_t nbins = 1024;; Double_t xmin = 0;; Double_t xmax = nbins;; Double_t * source = new Double_t[nbins];; TH1F *h = new TH1F(""h"",""Smoothed spectrum for m=3"",nbins,xmin,xmax);; TFile *f = new TFile(""spectra\\TSpectrum.root"");; h=(TH1F*) f->Get(""smooth1;1"");; for (i = 0; i < nbins; i++) source[i]=h->GetBinContent(i + 1);; TCanvas *Smooth1 = gROOT->GetListOfCanvases()->FindObject(""Smooth1"");; if ",MatchSource.WIKI,root/html604/TSpectrum.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum.html
https://root.cern/root/html604/TSpectrum2.html:1641,Availability,avail,available,1641,"L PEAK SEARCH FUNCTIONS; TWO-DIMENSIONAL PEAK SEARCH FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:; [1] M.Morhac et al.: Background elimination methods for; multidimensional coincidence gamma-ray spectra. Nuclear; Instruments and Methods in Physics Research A 401 (1997) 113-; 132. [2] M.Morhac et al.: Efficient one- and two-dimensional Gold; deconvolution and its application to gamma-ray spectra; decomposition. Nuclear Instruments and Methods in Physics; Research A 401 (1997) 385-408. [3] M.Morhac et al.: Identification of peaks in multidimensional; coincidence gamma-ray spectra. Nuclear Instruments and Methods in; Research Physics A 443(2000), 108-125. These NIM papers are also available as Postscript files from:. ftp://root.cern.ch/root/SpectrumDec.ps.gz; ftp://root.cern.ch/root/SpectrumSrc.ps.gz; ftp://root.cern.ch/root/SpectrumBck.ps.gz. NEW FUNCTIONS January 2006. . All figures in this page were prepared using DaqProVis; system, Data Acquisition, Processing and Visualization system, which is being; developed at the Institute of Physics, Slovak Academy of Sciences, Bratislava,; Slovakia: �; http://www.fu.sav.sk/nph/projects/DaqProVis/; under construction; http://www.fu.sav.sk/nph/projects/ProcFunc/; . Function Members (Methods); public:. virtual~TSpectrum2(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual TH1*Background(const TH1* hist, Int_t niter = 20, Option_t* option = """"); const char*Background(Double_t** spectrum, Int_t ssizex, Int_t ssizey, Int_t numberIterationsX, Int_t numberIterationsY, Int_t direction, Int_t filterType); virtual voidTObject::Browse(TBrowser* b); static TClass*Clas",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:3416,Availability,Error,Error,3416,"on = """"); const char*Background(Double_t** spectrum, Int_t ssizex, Int_t ssizey, Int_t numberIterationsX, Int_t numberIterationsY, Int_t direction, Int_t filterType); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; const char*Deconvolution(Double_t** source, Double_t** resp, Int_t ssizex, Int_t ssizey, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:3545,Availability,error,error,3545,", Int_t direction, Int_t filterType); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; const char*Deconvolution(Double_t** source, Double_t** resp, Int_t ssizex, Int_t ssizey, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tT",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:3629,Availability,error,error,3629,"ic TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; const char*Deconvolution(Double_t** source, Double_t** resp, Int_t ssizex, Int_t ssizey, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfm",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:15837,Availability,error,error,15837,"thod is based on Sensitive; Nonlinear Iterative Peak (SNIP) clipping algorithm [1]; �        ; there exist two algorithms for the; estimation of new value in the channel ��;  ; Algorithm; based on Successive Comparisons; It; is an extension of one-dimensional SNIP algorithm to another dimension. For; details we refer to [2].;  ; Algorithm; based on One Step Filtering; New; value in the estimated channel is calculated as.  ;  .  ; .;  ; where; p = 1, 2, �, number_of_iterations. ;  ; Function:; const; char*; TSpectrum2::Background; (double; **spectrum, int ssizex, int; ssizey, int numberIterationsX, int; numberIterationsY, int direction, int; filterType)� ;  ; This; function calculates background spectrum from the source spectrum.� The result; is placed in the matrix pointed by spectrum pointer.� One can also switch the; direction of the change of the clipping window and to select one of the two; above given algorithms. On successful completion it returns 0. On error it; returns pointer to the string describing error.;  ; Parameters:; ������� spectrum-pointer; to the matrix of source spectrum����������������� ; ������� ssizex, ssizey-lengths; of the spectrum matrix�������������������������������� ; ������� numberIterationsX, numberIterationsYmaximal; widths of clipping; ����� ��window,��������������������������������. ������� direction-; direction of change of clipping window����������������� ; �������������� - possible; values=kBackIncreasingWindow��������������������� ; �������������������������������������������; kBackDecreasingWindow��������������������� ; ������� filterType-type; of the clipping algorithm,����������������������������� ; ����������������� -possible values=kBack SuccessiveFiltering; ���������������������������������������������; kBackOneStepFiltering����������������������������� ;  ; References:; [1]�; C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the; quantitative analysis of PIXE spectra in geoscience applications. NIM, B",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:15888,Availability,error,error,15888,"thod is based on Sensitive; Nonlinear Iterative Peak (SNIP) clipping algorithm [1]; �        ; there exist two algorithms for the; estimation of new value in the channel ��;  ; Algorithm; based on Successive Comparisons; It; is an extension of one-dimensional SNIP algorithm to another dimension. For; details we refer to [2].;  ; Algorithm; based on One Step Filtering; New; value in the estimated channel is calculated as.  ;  .  ; .;  ; where; p = 1, 2, �, number_of_iterations. ;  ; Function:; const; char*; TSpectrum2::Background; (double; **spectrum, int ssizex, int; ssizey, int numberIterationsX, int; numberIterationsY, int direction, int; filterType)� ;  ; This; function calculates background spectrum from the source spectrum.� The result; is placed in the matrix pointed by spectrum pointer.� One can also switch the; direction of the change of the clipping window and to select one of the two; above given algorithms. On successful completion it returns 0. On error it; returns pointer to the string describing error.;  ; Parameters:; ������� spectrum-pointer; to the matrix of source spectrum����������������� ; ������� ssizex, ssizey-lengths; of the spectrum matrix�������������������������������� ; ������� numberIterationsX, numberIterationsYmaximal; widths of clipping; ����� ��window,��������������������������������. ������� direction-; direction of change of clipping window����������������� ; �������������� - possible; values=kBackIncreasingWindow��������������������� ; �������������������������������������������; kBackDecreasingWindow��������������������� ; ������� filterType-type; of the clipping algorithm,����������������������������� ; ����������������� -possible values=kBack SuccessiveFiltering; ���������������������������������������������; kBackOneStepFiltering����������������������������� ;  ; References:; [1]�; C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the; quantitative analysis of PIXE spectra in geoscience applications. NIM, B",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:23771,Availability,error,error,23771,"; ssizex-x length of source; ssizey-y length of source; averWindow-width of averaging smoothing window. . Smoothing;  ; Goal: Suppression of; statistical fluctuations; �        ; the algorithm is based on discrete; Markov chain, which has very simple invariant distribution;  ; ����������� �����; ������� ��being defined from the normalization condition ;  ; �������� n; is the length of the smoothed spectrum and .  ;  ;  . is the probability of the change of; the peak position from channel i to the channel i+1. �is the normalization constant so; that �and m is a width of smoothing window. We have extended this; algortihm to two dimensions. ;  ; Function:; const char*; TSpectrum2::SmoothMarkov(double; **fSpectrum, int ssizex, int; ssizey, �int averWindow)� ;  ; This; function calculates smoothed spectrum from the source spectrum based on Markov; chain method. The result is placed in the vector pointed by source pointer. On; successful completion it returns 0. On error it returns pointer to the string; describing error.;  ; Parameters:; ������� fSpectrum-pointer; to the matrix of source spectrum����������������� ; ������� ssizex, ssizey; -lengths of the spectrum matrix�������������������������������� ; ������� averWindow-width; of averaging smoothing window ;  ; Reference:; [1]; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376; (1996), 451.� . . Example 4 � script Smooth.c; :. Fig. 9 Original noisy; spectrum.��� Fig. 10 Smoothed spectrum m=3; Peaks can hardly be; observed.� ���Peaks become apparent. Fig. 11 Smoothed spectrum; m=5 Fig.12 Smoothed spectrum m=7;  ; Script:; // Example to illustrate the Markov smoothing (class; TSpectrum).; // To execute this example, do; // root > .x Smooth.C; #include <TSpectrum> ; void Smooth() {; �� Int_t i, j;; �� Double_t nbinsx = 256;; �� Double_t nbinsy = 256;�� ; �� Double_t xmin� = 0;; �� Double_t xmax� = (Double_t)nbinsx;; �� Double_t ymin� = 0;; �� Double_t ymax� = (Double_t)nbinsy;�� ; �� Double_t** so",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:23822,Availability,error,error,23822,"; ssizex-x length of source; ssizey-y length of source; averWindow-width of averaging smoothing window. . Smoothing;  ; Goal: Suppression of; statistical fluctuations; �        ; the algorithm is based on discrete; Markov chain, which has very simple invariant distribution;  ; ����������� �����; ������� ��being defined from the normalization condition ;  ; �������� n; is the length of the smoothed spectrum and .  ;  ;  . is the probability of the change of; the peak position from channel i to the channel i+1. �is the normalization constant so; that �and m is a width of smoothing window. We have extended this; algortihm to two dimensions. ;  ; Function:; const char*; TSpectrum2::SmoothMarkov(double; **fSpectrum, int ssizex, int; ssizey, �int averWindow)� ;  ; This; function calculates smoothed spectrum from the source spectrum based on Markov; chain method. The result is placed in the vector pointed by source pointer. On; successful completion it returns 0. On error it returns pointer to the string; describing error.;  ; Parameters:; ������� fSpectrum-pointer; to the matrix of source spectrum����������������� ; ������� ssizex, ssizey; -lengths of the spectrum matrix�������������������������������� ; ������� averWindow-width; of averaging smoothing window ;  ; Reference:; [1]; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376; (1996), 451.� . . Example 4 � script Smooth.c; :. Fig. 9 Original noisy; spectrum.��� Fig. 10 Smoothed spectrum m=3; Peaks can hardly be; observed.� ���Peaks become apparent. Fig. 11 Smoothed spectrum; m=5 Fig.12 Smoothed spectrum m=7;  ; Script:; // Example to illustrate the Markov smoothing (class; TSpectrum).; // To execute this example, do; // root > .x Smooth.C; #include <TSpectrum> ; void Smooth() {; �� Int_t i, j;; �� Double_t nbinsx = 256;; �� Double_t nbinsy = 256;�� ; �� Double_t xmin� = 0;; �� Double_t xmax� = (Double_t)nbinsx;; �� Double_t ymin� = 0;; �� Double_t ymax� = (Double_t)nbinsy;�� ; �� Double_t** so",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:27841,Availability,error,error,27841,"rdetermined system of linear equations, i.e.,� the; calculation of the matrix x.; �        ; from numerical stability point of; view the operation of deconvolution is extremely critical (ill-posed� problem); as well as time consuming operation. ; �        ; the Gold deconvolution algorithm; proves to work very well even for 2-dimensional systems. Generalization of the; algorithm for 2-dimensional systems was presented in [1], [2].; �        ; for Gold deconvolution algorithm; as well as for boosted deconvolution algorithm we refer also to TSpectrum ;  ; Function:; const; char* TSpectrum2::Deconvolution(double **source,; const double; **resp, int ssizex,; int ssizey, int numberIterations,; int numberRepetitions,; double boost);  ; This; function calculates deconvolution from source spectrum according to response; spectrum using Gold deconvolution algorithm. The result is placed in the matrix; pointed by source pointer. On successful completion it returns 0. On error it; returns pointer to the string describing error. If desired after every; numberIterations one can apply boosting operation (exponential function with; exponent given by boost coefficient) and repeat it numberRepetitions times.;  ; Parameters:; ������� source-pointer; to the matrix of source spectrum����������������� ; ������� resp-pointer; to the matrix of response spectrum����������������� ; ������� ssizex, ssizey-lengths; of the spectrum matrix�������������������������������� ; ������� numberIterations-number of iterations ; ������� numberRepetitions-number of repetitions; for boosted deconvolution. It must be ; ������� greater or equal to one.; ������� boost-boosting coefficient, applies only; if numberRepetitions is greater than one.� ; ������� Recommended range <1,2>.;  ; References:; �[1]; M. Morh�č, J. Kliman, V.; Matou�ek, M. Veselsk�, I. Turzo.:; Efficient one- and two-dimensional Gold deconvolution and its application to; gamma-ray spectra decomposition. NIM, A401 (1997) 385-408.; [2]; Morh�č ",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:27892,Availability,error,error,27892,"rdetermined system of linear equations, i.e.,� the; calculation of the matrix x.; �        ; from numerical stability point of; view the operation of deconvolution is extremely critical (ill-posed� problem); as well as time consuming operation. ; �        ; the Gold deconvolution algorithm; proves to work very well even for 2-dimensional systems. Generalization of the; algorithm for 2-dimensional systems was presented in [1], [2].; �        ; for Gold deconvolution algorithm; as well as for boosted deconvolution algorithm we refer also to TSpectrum ;  ; Function:; const; char* TSpectrum2::Deconvolution(double **source,; const double; **resp, int ssizex,; int ssizey, int numberIterations,; int numberRepetitions,; double boost);  ; This; function calculates deconvolution from source spectrum according to response; spectrum using Gold deconvolution algorithm. The result is placed in the matrix; pointed by source pointer. On successful completion it returns 0. On error it; returns pointer to the string describing error. If desired after every; numberIterations one can apply boosting operation (exponential function with; exponent given by boost coefficient) and repeat it numberRepetitions times.;  ; Parameters:; ������� source-pointer; to the matrix of source spectrum����������������� ; ������� resp-pointer; to the matrix of response spectrum����������������� ; ������� ssizex, ssizey-lengths; of the spectrum matrix�������������������������������� ; ������� numberIterations-number of iterations ; ������� numberRepetitions-number of repetitions; for boosted deconvolution. It must be ; ������� greater or equal to one.; ������� boost-boosting coefficient, applies only; if numberRepetitions is greater than one.� ; ������� Recommended range <1,2>.;  ; References:; �[1]; M. Morh�č, J. Kliman, V.; Matou�ek, M. Veselsk�, I. Turzo.:; Efficient one- and two-dimensional Gold deconvolution and its application to; gamma-ray spectra decomposition. NIM, A401 (1997) 385-408.; [2]; Morh�č ",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:17330,Deployability,continuous,continuously,17330,"��������� ; �������������������������������������������; kBackDecreasingWindow��������������������� ; ������� filterType-type; of the clipping algorithm,����������������������������� ; ����������������� -possible values=kBack SuccessiveFiltering; ���������������������������������������������; kBackOneStepFiltering����������������������������� ;  ; References:; [1]�; C. G Ryan et al.: SNIP, a statistics-sensitive background treatment for the; quantitative analysis of PIXE spectra in geoscience applications. NIM, B34; (1988), 396-402.; [2]; �M. Morh�č, J. Kliman, V.; Matou�ek, M. Veselsk�, I. Turzo.:; Background elimination methods for multidimensional gamma-ray spectra. NIM,; A401 (1997) 113-132. . Example 1� script Back_gamma64.c; :. Fig.; 1 Original two-dimensional gamma-gamma-ray spectrum. Fig.; 2 Background estimated from data from Fig. 1 using decreasing clipping window with; widths 4, 4 and algorithm based on successive comparisons. The estimate; includes not only continuously changing background but also one-dimensional; ridges. Fig.; 3 Resulting peaks after subtraction of the estimated background (Fig. 2) from original; two-dimensional gamma-gamma-ray spectrum (Fig. 1).;  ;  ; Script:; // Example to illustrate the background estimator (class; TSpectrum).; // To execute this example, do; // root > .x Back_gamma64.C;  ; #include <TSpectrum> ;  ; void Back_gamma64() {; �� Int_t i, j;; �� Double_t nbinsx = 64;; �� Double_t nbinsy = 64;�� ; �� Double_t xmin� = 0;; �� Double_t xmax� = (Double_t)nbinsx;; �� Double_t ymin� = 0;; �� Double_t ymax� = (Double_t)nbinsy;�� ; �� Double_t ** source = new Double_t*[nbinsx];�� ; �� for (i=0;i<nbinsx;i++); ����� source[i]=new Double_t[nbinsy];���� ; �� TH2F *back = new TH2F(""back"",""Background estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; �� TFile *f = new; TFile(""spectra2\\TSpectrum2.root"");; �� back=(TH2F*) f->Get(""back1;1"");; �� TCanvas *Background = new; TCanvas(""Background"",""Estimation of background with increasing; wind",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:36562,Deployability,continuous,continuous,36562,"unction is generated; according to given sigma and deconvolution is carried out. Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal:; to identify automatically the peaks in spectrum with the presence of the; continuous background, one-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected with correct peak; identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified; non-sensitivity of the algorithm to continuous; background; non-sensitivity to one-fold coincidences (coincidences; peak � background in both dimensions) and their crossings; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them; resolution, decomposition of doublets and multiplets.; The algorithm should be able to recognize close positioned peaks. ; ability to identify peaks with different sigma.  ; Function:; Int_t TSpectrum2::SearchHighRes (double **source,double **dest, int ssizex, int ssizey, double sigma, double threshold,; bool backgroundRemove,int deconIterations,; bool markov,; int averWindow); ��;  ; This; function searches f",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:36893,Deployability,continuous,continuous,36893," peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal:; to identify automatically the peaks in spectrum with the presence of the; continuous background, one-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected with correct peak; identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified; non-sensitivity of the algorithm to continuous; background; non-sensitivity to one-fold coincidences (coincidences; peak � background in both dimensions) and their crossings; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them; resolution, decomposition of doublets and multiplets.; The algorithm should be able to recognize close positioned peaks. ; ability to identify peaks with different sigma.  ; Function:; Int_t TSpectrum2::SearchHighRes (double **source,double **dest, int ssizex, int ssizey, double sigma, double threshold,; bool backgroundRemove,int deconIterations,; bool markov,; int averWindow); ��;  ; This; function searches for peaks in source spectrum. It is based on deconvolution; method. First the background is removed (if desired), then Markov smoothed; spectrum is calculated (if desired), then the response function is generated; according to given sigma and deconvolution is carried out. The order of peaks; is arranged according to their heights in the spectrum after background; elimination. The highest pea",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:1256,Energy Efficiency,Efficient,Efficient,1256,"TNamed. THIS CLASS CONTAINS ADVANCED SPECTRA PROCESSING FUNCTIONS. ONE-DIMENSIONAL BACKGROUND ESTIMATION FUNCTIONS; TWO-DIMENSIONAL BACKGROUND ESTIMATION FUNCTIONS; ONE-DIMENSIONAL SMOOTHING FUNCTIONS; TWO-DIMENSIONAL SMOOTHING FUNCTIONS; ONE-DIMENSIONAL DECONVOLUTION FUNCTIONS; TWO-DIMENSIONAL DECONVOLUTION FUNCTIONS; ONE-DIMENSIONAL PEAK SEARCH FUNCTIONS; TWO-DIMENSIONAL PEAK SEARCH FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:; [1] M.Morhac et al.: Background elimination methods for; multidimensional coincidence gamma-ray spectra. Nuclear; Instruments and Methods in Physics Research A 401 (1997) 113-; 132. [2] M.Morhac et al.: Efficient one- and two-dimensional Gold; deconvolution and its application to gamma-ray spectra; decomposition. Nuclear Instruments and Methods in Physics; Research A 401 (1997) 385-408. [3] M.Morhac et al.: Identification of peaks in multidimensional; coincidence gamma-ray spectra. Nuclear Instruments and Methods in; Research Physics A 443(2000), 108-125. These NIM papers are also available as Postscript files from:. ftp://root.cern.ch/root/SpectrumDec.ps.gz; ftp://root.cern.ch/root/SpectrumSrc.ps.gz; ftp://root.cern.ch/root/SpectrumBck.ps.gz. NEW FUNCTIONS January 2006. . All figures in this page were prepared using DaqProVis; system, Data Acquisition, Processing and Visualization system, which is being; developed at the Institute of Physics, Slovak Academy of Sciences, Bratislava,; Slovakia: �; http://www.fu.sav.sk/nph/projects/DaqProVis/; under construction; http://www.fu.sav.sk/nph/projects/ProcFunc/; . Function Members (Methods); public:. virtual~TSpectrum2(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:28718,Energy Efficiency,Efficient,Efficient,28718," pointed by source pointer. On successful completion it returns 0. On error it; returns pointer to the string describing error. If desired after every; numberIterations one can apply boosting operation (exponential function with; exponent given by boost coefficient) and repeat it numberRepetitions times.;  ; Parameters:; ������� source-pointer; to the matrix of source spectrum����������������� ; ������� resp-pointer; to the matrix of response spectrum����������������� ; ������� ssizex, ssizey-lengths; of the spectrum matrix�������������������������������� ; ������� numberIterations-number of iterations ; ������� numberRepetitions-number of repetitions; for boosted deconvolution. It must be ; ������� greater or equal to one.; ������� boost-boosting coefficient, applies only; if numberRepetitions is greater than one.� ; ������� Recommended range <1,2>.;  ; References:; �[1]; M. Morh�č, J. Kliman, V.; Matou�ek, M. Veselsk�, I. Turzo.:; Efficient one- and two-dimensional Gold deconvolution and its application to; gamma-ray spectra decomposition. NIM, A401 (1997) 385-408.; [2]; Morh�č M., Matou�ek V., Kliman J., Efficient algorithm of multidimensional; deconvolution and its application to nuclear data processing, Digital Signal; Processing 13 (2003) 144. ;  . . Example 5 � script Decon.c; :; �        ; response function (usually peak); should be shifted to the beginning of the coordinate system (see Fig. 13);  . Fig.; 13 2-dimensional response spectrum. Fig.; 14 2-dimensional gamma-gamma-ray input spectrum (before deconvolution). Fig.; 15 Spectrum from Fig. 14 after deconvolution (1000 iterations);  ; Script:; // Example to illustrate the Gold deconvolution (class; TSpectrum2).; // To execute this example, do; // root > .x Decon.C;  ; #include <TSpectrum2> ;  ; void Decon() {; �� Int_t i, j;; �� Double_t nbinsx = 256;; �� Double_t nbinsy = 256;�� ; �� Double_t xmin� = 0;; �� Double_t xmax� = (Double_t)nbinsx;; �� Double_t ymin� = 0;; �� Double_t ymax� = (Double_t)nbinsy;�",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:28896,Energy Efficiency,Efficient,Efficient,28896,"ation (exponential function with; exponent given by boost coefficient) and repeat it numberRepetitions times.;  ; Parameters:; ������� source-pointer; to the matrix of source spectrum����������������� ; ������� resp-pointer; to the matrix of response spectrum����������������� ; ������� ssizex, ssizey-lengths; of the spectrum matrix�������������������������������� ; ������� numberIterations-number of iterations ; ������� numberRepetitions-number of repetitions; for boosted deconvolution. It must be ; ������� greater or equal to one.; ������� boost-boosting coefficient, applies only; if numberRepetitions is greater than one.� ; ������� Recommended range <1,2>.;  ; References:; �[1]; M. Morh�č, J. Kliman, V.; Matou�ek, M. Veselsk�, I. Turzo.:; Efficient one- and two-dimensional Gold deconvolution and its application to; gamma-ray spectra decomposition. NIM, A401 (1997) 385-408.; [2]; Morh�č M., Matou�ek V., Kliman J., Efficient algorithm of multidimensional; deconvolution and its application to nuclear data processing, Digital Signal; Processing 13 (2003) 144. ;  . . Example 5 � script Decon.c; :; �        ; response function (usually peak); should be shifted to the beginning of the coordinate system (see Fig. 13);  . Fig.; 13 2-dimensional response spectrum. Fig.; 14 2-dimensional gamma-gamma-ray input spectrum (before deconvolution). Fig.; 15 Spectrum from Fig. 14 after deconvolution (1000 iterations);  ; Script:; // Example to illustrate the Gold deconvolution (class; TSpectrum2).; // To execute this example, do; // root > .x Decon.C;  ; #include <TSpectrum2> ;  ; void Decon() {; �� Int_t i, j;; �� Double_t nbinsx = 256;; �� Double_t nbinsy = 256;�� ; �� Double_t xmin� = 0;; �� Double_t xmax� = (Double_t)nbinsx;; �� Double_t ymin� = 0;; �� Double_t ymax� = (Double_t)nbinsy;�� ; �� Double_t** source = new Double_t*[nbinsx];�� ; �� for (i=0;i<nbinsx;i++); ����������������������������������� source[i]=new; Double_t[nbinsy];���� ; �� TH2F *decon = new TH2F(""decon"",""Gold",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:49295,Integrability,interface,interface,49295,"rce = new Double_t*[nbinsx];�� ; �� for (i=0;i<nbinsx;i++); ����������������������������������� source[i]=new; Double_t[nbinsy];; �� Double_t** dest = new Double_t*[nbinsx];�� ; �� for (i=0;i<nbinsx;i++); ����������������������������������� dest[i]=new; Double_t[nbinsy];; �� TH2F *search = new TH2F(""search"",""High; resolution peak searching"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; �� TFile *f = new; TFile(""spectra2\\TSpectrum2.root"");; �� search=(TH2F*) f->Get(""search3;1"");; �� TCanvas *Searching = new; TCanvas(""Searching"",""High resolution peak; searching"",10,10,1000,700);; �� TSpectrum2 *s = new TSpectrum2();; �� for (i = 0; i < nbinsx; i++){; ���� for (j = 0; j < nbinsy; j++){; �� �������� ����source[i][j] = search->GetBinContent(i +; 1,j + 1); ; �� �������� �}; �� }�� ; �� nfound = s->SearchHighRes(source, dest, nbinsx,; nbinsy, 2, 5, kFALSE, 10, kFALSE, 1);�� ; �� printf(""Found %d candidate peaks\n"",nfound);; �� for(i=0;i<nfound;i++); ����������� �printf(""posx= %d, posy= %d, value=; %d\n"",(Int_t)(fPositionX[i]+0.5), (Int_t)(fPositionY[i]+0.5),; (Int_t)source[(Int_t)(fPositionX[i]+0.5)][(Int_t)(fPositionY[i]+0.5)]);������� ; }. Int_t StaticSearch(const TH1* hist, Double_t sigma = 2, Option_t* option = ""goff"", Double_t threshold = 0.050000000000000003); static function, interface to TSpectrum2::Search. TH1 * StaticBackground(const TH1* hist, Int_t niter = 20, Option_t* option = """"); static function, interface to TSpectrum2::Background. TSpectrum2(). TH1 * GetHistogram() const; {return fHistogram;}. Int_t GetNPeaks() const; {return fNPeaks;}. Double_t * GetPositionX() const; {return fPositionX;}. Double_t * GetPositionY() const; {return fPositionY;}. » Author: Miroslav Morhac 17/01/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:49427,Integrability,interface,interface,49427,"rce = new Double_t*[nbinsx];�� ; �� for (i=0;i<nbinsx;i++); ����������������������������������� source[i]=new; Double_t[nbinsy];; �� Double_t** dest = new Double_t*[nbinsx];�� ; �� for (i=0;i<nbinsx;i++); ����������������������������������� dest[i]=new; Double_t[nbinsy];; �� TH2F *search = new TH2F(""search"",""High; resolution peak searching"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; �� TFile *f = new; TFile(""spectra2\\TSpectrum2.root"");; �� search=(TH2F*) f->Get(""search3;1"");; �� TCanvas *Searching = new; TCanvas(""Searching"",""High resolution peak; searching"",10,10,1000,700);; �� TSpectrum2 *s = new TSpectrum2();; �� for (i = 0; i < nbinsx; i++){; ���� for (j = 0; j < nbinsy; j++){; �� �������� ����source[i][j] = search->GetBinContent(i +; 1,j + 1); ; �� �������� �}; �� }�� ; �� nfound = s->SearchHighRes(source, dest, nbinsx,; nbinsy, 2, 5, kFALSE, 10, kFALSE, 1);�� ; �� printf(""Found %d candidate peaks\n"",nfound);; �� for(i=0;i<nfound;i++); ����������� �printf(""posx= %d, posy= %d, value=; %d\n"",(Int_t)(fPositionX[i]+0.5), (Int_t)(fPositionY[i]+0.5),; (Int_t)source[(Int_t)(fPositionX[i]+0.5)][(Int_t)(fPositionY[i]+0.5)]);������� ; }. Int_t StaticSearch(const TH1* hist, Double_t sigma = 2, Option_t* option = ""goff"", Double_t threshold = 0.050000000000000003); static function, interface to TSpectrum2::Search. TH1 * StaticBackground(const TH1* hist, Int_t niter = 20, Option_t* option = """"); static function, interface to TSpectrum2::Background. TSpectrum2(). TH1 * GetHistogram() const; {return fHistogram;}. Int_t GetNPeaks() const; {return fNPeaks;}. Double_t * GetPositionX() const; {return fPositionX;}. Double_t * GetPositionY() const; {return fPositionY;}. » Author: Miroslav Morhac 17/01/2006 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:116,Modifiability,inherit,inheritance,116,". TSpectrum2. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum2. class TSpectrum2: public TNamed. THIS CLASS CONTAINS ADVANCED SPECTRA PROCESSING FUNCTIONS. ONE-DIMENSIONAL BACKGROUND ESTIMATION FUNCTIONS; TWO-DIMENSIONAL BACKGROUND ESTIMATION FUNCTIONS; ONE-DIMENSIONAL SMOOTHING FUNCTIONS; TWO-DIMENSIONAL SMOOTHING FUNCTIONS; ONE-DIMENSIONAL DECONVOLUTION FUNCTIONS; TWO-DIMENSIONAL DECONVOLUTION FUNCTIONS; ONE-DIMENSIONAL PEAK SEARCH FUNCTIONS; TWO-DIMENSIONAL PEAK SEARCH FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:; [1] M.Morhac et al.: Background elimination methods for; multidimensional coincidence gamma-ray spectra. Nuclear; Instruments and Methods in Physics Research A 401 (1997) 113-; 132. [2] M.Morhac et al.: Efficient one- and two-dimensional Gold; deconvolution and its application to gamma-ray spectra; decomposition. Nuclear Instruments and Methods in Physics; Research A 401 (1997) 385-408. [3] M.Morhac et al.: Identification of peaks in multidimensional; coincidence gamma-ray spectra. Nuclear Instruments and Methods in; Research Physics A 443(2000), 108-125. These NIM papers are also available as Postscript files from:. ftp://root.cern.ch/root/SpectrumDec.ps.gz; ftp://root.cern.ch/root/SpectrumSrc.ps.gz; ftp://root.cern.ch/root/SpectrumBck.ps.gz. NEW FUNCTIONS January 2006. . All figures in this page were prepared using DaqProVis; system, Data Acquisition, Processing and Visualization system, which is being; developed at the Institute of",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:4665,Modifiability,Inherit,InheritsFrom,4665,"ent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:4731,Modifiability,Inherit,InheritsFrom,4731,"onst char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSpectrum2&operator=(const TSpectrum2&); virtual void",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:9788,Modifiability,Inherit,Inheritance,9788,"BitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TH1*fHistogramresulting histogram; Int_tfMaxPeaksMaximum number of peaks to be found; Int_tfNPeaksnumber of peaks found; TStringTNamed::fNameobject identifier; Double_t*fPosition[fNPeaks] array of current peak positions; Double_t*fPositionX[fNPeaks] X position of peaks; Double_t*fPositionY[fNPeaks] Y position of peaks; Double_tfResolutionresolution of the neighboring peaks; TStringTNamed::fTitleobject title; static Int_tfgAverageWindowAverage window of searched peaks; static Int_tfgIterationsMaximum number of decon iterations (default=3). Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrum2. Function documentation; TSpectrum2(); Constructor. TSpectrum2(Int_t maxpositions, Double_t resolution = 1); maxpositions: maximum number of peaks; resolution: determines resolution of the neighboring peaks; default value is 1 correspond to 3 sigma distance; between peaks. Higher values allow higher resolution; (smaller distance between peaks.; May be set later through SetResolution. ~TSpectrum2(); Destructor. void SetAverageWindow(Int_t w = 3); static function: Set average window of searched peaks; see TSpectrum2::SearchHighRes. void SetDeconIterations(Int_t n = 3); static function: Set max number of decon iterations in deconvolution operation; see TSpectrum2::SearchHighRes. TH1 * Background(const TH1* hist, Int_t niter = 20, Option_t* option = """"). TWO-DIMENSIONAL BACKGROUND ESTIMATION FUNCTION; This function calculates the background spectrum in the input histogram h.; The background is returned as a histogram. Function parameters:; -h: i",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:23399,Modifiability,extend,extended,23399,""");� ; �� }. const char* SmoothMarkov(Double_t** source, Int_t ssizex, Int_t ssizey, Int_t averWindow). TWO-DIMENSIONAL MARKOV SPECTRUM SMOOTHING FUNCTION. This function calculates smoothed spectrum from source spectrum; based on Markov chain method.; The result is placed in the array pointed by source pointer. Function parameters:; source-pointer to the array of source spectrum; ssizex-x length of source; ssizey-y length of source; averWindow-width of averaging smoothing window. . Smoothing;  ; Goal: Suppression of; statistical fluctuations; �        ; the algorithm is based on discrete; Markov chain, which has very simple invariant distribution;  ; ����������� �����; ������� ��being defined from the normalization condition ;  ; �������� n; is the length of the smoothed spectrum and .  ;  ;  . is the probability of the change of; the peak position from channel i to the channel i+1. �is the normalization constant so; that �and m is a width of smoothing window. We have extended this; algortihm to two dimensions. ;  ; Function:; const char*; TSpectrum2::SmoothMarkov(double; **fSpectrum, int ssizex, int; ssizey, �int averWindow)� ;  ; This; function calculates smoothed spectrum from the source spectrum based on Markov; chain method. The result is placed in the vector pointed by source pointer. On; successful completion it returns 0. On error it returns pointer to the string; describing error.;  ; Parameters:; ������� fSpectrum-pointer; to the matrix of source spectrum����������������� ; ������� ssizex, ssizey; -lengths of the spectrum matrix�������������������������������� ; ������� averWindow-width; of averaging smoothing window ;  ; Reference:; [1]; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376; (1996), 451.� . . Example 4 � script Smooth.c; :. Fig. 9 Original noisy; spectrum.��� Fig. 10 Smoothed spectrum m=3; Peaks can hardly be; observed.� ���Peaks become apparent. Fig. 11 Smoothed spectrum; m=5 Fig.12 Smoothed spectrum m=7;  ; Script:",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:36067,Modifiability,variab,variable,36067,"+); ������ decon->SetBinContent(i + 1,j + 1, source[i][j]);��. �� }; �� decon->Draw(""SURF"");� ; �� };  . Int_t SearchHighRes(Double_t** source, Double_t** dest, Int_t ssizex, Int_t ssizey, Double_t sigma, Double_t threshold, Bool_t backgroundRemove, Int_t deconIterations, Bool_t markov, Int_t averWindow). TWO-DIMENSIONAL HIGH-RESOLUTION PEAK SEARCH FUNCTION; This function searches for peaks in source spectrum; It is based on deconvolution method. First the background is; removed (if desired), then Markov spectrum is calculated; (if desired), then the response function is generated; according to given sigma and deconvolution is carried out. Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal:; to identify automatically the peaks in spectrum with the presence of the; continuous background, one-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected with correct peak; identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified; non-sensitivity of the algorithm to continuous; background; non-sensitivity to one-fold coincidences (coincidences; peak � background",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:36224,Modifiability,variab,variable,36224,"+); ������ decon->SetBinContent(i + 1,j + 1, source[i][j]);��. �� }; �� decon->Draw(""SURF"");� ; �� };  . Int_t SearchHighRes(Double_t** source, Double_t** dest, Int_t ssizex, Int_t ssizey, Double_t sigma, Double_t threshold, Bool_t backgroundRemove, Int_t deconIterations, Bool_t markov, Int_t averWindow). TWO-DIMENSIONAL HIGH-RESOLUTION PEAK SEARCH FUNCTION; This function searches for peaks in source spectrum; It is based on deconvolution method. First the background is; removed (if desired), then Markov spectrum is calculated; (if desired), then the response function is generated; according to given sigma and deconvolution is carried out. Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal:; to identify automatically the peaks in spectrum with the presence of the; continuous background, one-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected with correct peak; identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified; non-sensitivity of the algorithm to continuous; background; non-sensitivity to one-fold coincidences (coincidences; peak � background",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:38465,Modifiability,variab,variable,38465,"le sigma, double threshold,; bool backgroundRemove,int deconIterations,; bool markov,; int averWindow); ��;  ; This; function searches for peaks in source spectrum. It is based on deconvolution; method. First the background is removed (if desired), then Markov smoothed; spectrum is calculated (if desired), then the response function is generated; according to given sigma and deconvolution is carried out. The order of peaks; is arranged according to their heights in the spectrum after background; elimination. The highest peak is the first in the list. On success it returns; number of found peaks.;  ; Parameters:; ������� source-pointer to the matrix of source; spectrum����������������� ; ������� dest-resulting spectrum after deconvolution; ������� ssizex, ssizey-lengths of the source and; destination spectra��������������� ; ������� sigma-sigma of searched peaks; threshold- threshold; value in % for selected peaks, peaks with amplitude less than; threshold*highest_peak/100 are ignored; backgroundRemove- background_remove-logical variable, true if the removal of; background before deconvolution is desired� ; deconIterations-number of iterations in; deconvolution operation; markov-logical variable, if it is true,; first the source spectrum is replaced by new spectrum calculated using Markov; chains method ; averWindow-width of; averaging smoothing window ;  ; References:; [1]; M.A. Mariscotti: A method for identification of peaks in the presence of; background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2]; �M. Morh�č, J. Kliman, V.; Matou�ek, M. Veselsk�, I. Turzo.:Identification; of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); 108-125.; [3]; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376; (1996), 451. . Examples of peak searching; method;  ; SearchHighRes function provides users with the possibility; to vary the input parameters and with the access to the output deconvolved data; in the",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:38626,Modifiability,variab,variable,38626,"le sigma, double threshold,; bool backgroundRemove,int deconIterations,; bool markov,; int averWindow); ��;  ; This; function searches for peaks in source spectrum. It is based on deconvolution; method. First the background is removed (if desired), then Markov smoothed; spectrum is calculated (if desired), then the response function is generated; according to given sigma and deconvolution is carried out. The order of peaks; is arranged according to their heights in the spectrum after background; elimination. The highest peak is the first in the list. On success it returns; number of found peaks.;  ; Parameters:; ������� source-pointer to the matrix of source; spectrum����������������� ; ������� dest-resulting spectrum after deconvolution; ������� ssizex, ssizey-lengths of the source and; destination spectra��������������� ; ������� sigma-sigma of searched peaks; threshold- threshold; value in % for selected peaks, peaks with amplitude less than; threshold*highest_peak/100 are ignored; backgroundRemove- background_remove-logical variable, true if the removal of; background before deconvolution is desired� ; deconIterations-number of iterations in; deconvolution operation; markov-logical variable, if it is true,; first the source spectrum is replaced by new spectrum calculated using Markov; chains method ; averWindow-width of; averaging smoothing window ;  ; References:; [1]; M.A. Mariscotti: A method for identification of peaks in the presence of; background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2]; �M. Morh�č, J. Kliman, V.; Matou�ek, M. Veselsk�, I. Turzo.:Identification; of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); 108-125.; [3]; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376; (1996), 451. . Examples of peak searching; method;  ; SearchHighRes function provides users with the possibility; to vary the input parameters and with the access to the output deconvolved data; in the",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:12436,Performance,perform,performed,12436,"9""; ""BackSmoothing11""; ""BackSmoothing13""; ""BackSmoothing15""; - ""Compton"" if selected the estimation of Compton edge; will be included.; - ""same"" : if this option is specified, the resulting background; histogram is superimposed on the picture in the current pad. NOTE that the background is only evaluated in the current range of h.; ie, if h has a bin range (set via h->GetXaxis()->SetRange(binmin,binmax),; the returned histogram will be created with the same number of bins; as the input histogram h, but only bins from binmin to binmax will be filled; with the estimated background. void Print(Option_t* option = """") const; Print the array of positions. Int_t Search(const TH1* hist, Double_t sigma = 2, Option_t* option = """", Double_t threshold = 0.050000000000000003). TWO-DIMENSIONAL PEAK SEARCH FUNCTION; This function searches for peaks in source spectrum in hin; The number of found peaks and their positions are written into; the members fNpeaks and fPositionX.; The search is performed in the current histogram range. Function parameters:; hin: pointer to the histogram of source spectrum; sigma: sigma of searched peaks, for details we refer to manual; threshold: (default=0.05) peaks with amplitude less than; threshold*highest_peak are discarded. 0<threshold<1. By default, the background is removed before deconvolution.; Specify the option ""nobackground"" to not remove the background. //. By default the ""Markov"" chain algorithm is used.; Specify the option ""noMarkov"" to disable this algorithm; Note that by default the source spectrum is replaced by a new spectrum//. By default a polymarker object is created and added to the list of; functions of the histogram. The histogram is drawn with the specified; option and the polymarker object drawn on top of the histogram.; The polymarker coordinates correspond to the npeaks peaks found in; the histogram.; A pointer to the polymarker object can be retrieved later via:; TList *functions = hin->GetListOfFunctions();; TPolyMarker *pm",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:39478,Performance,tune,tune,39478,"le, true if the removal of; background before deconvolution is desired� ; deconIterations-number of iterations in; deconvolution operation; markov-logical variable, if it is true,; first the source spectrum is replaced by new spectrum calculated using Markov; chains method ; averWindow-width of; averaging smoothing window ;  ; References:; [1]; M.A. Mariscotti: A method for identification of peaks in the presence of; background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2]; �M. Morh�č, J. Kliman, V.; Matou�ek, M. Veselsk�, I. Turzo.:Identification; of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); 108-125.; [3]; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376; (1996), 451. . Examples of peak searching; method;  ; SearchHighRes function provides users with the possibility; to vary the input parameters and with the access to the output deconvolved data; in the destination spectrum. Based on the output data one can tune the; parameters. ; Example 8 � script Src.c:. Fig.; 20 Two-dimensional spectrum with found peaks denoted by markers (,; threshold=5%, 3 iterations steps in the deconvolution). Fig.; 21 Spectrum from Fig. 20 after background elimination and deconvolution; Script:; // Example to illustrate high resolution peak searching; function (class TSpectrum).; // To execute this example, do; // root > .x Src.C;  ; #include <TSpectrum2>;  ; void Src() {; �� Int_t i, j, nfound;; �� Double_t nbinsx = 64;; �� Double_t nbinsy = 64;�� ; �� Double_t xmin� = 0;; �� Double_t xmax� = (Double_t)nbinsx;; �� Double_t ymin� = 0;; �� Double_t ymax� = (Double_t)nbinsy;�� ; �� Double_t** source = new Double_t*[nbinsx];�� ; �� for (i=0;i<nbinsx;i++); ����������������������������������� source[i]=new; Double_t[nbinsy];; �� Double_t** dest = new Double_t*[nbinsx];�� ; �� for (i=0;i<nbinsx;i++); ����������������������������������� dest[i]=new; Double_t[nbinsy];; �� TH2F *search = new TH2F(""search"",""High; res",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:37131,Safety,detect,detect,37131,"Iterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal:; to identify automatically the peaks in spectrum with the presence of the; continuous background, one-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected with correct peak; identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified; non-sensitivity of the algorithm to continuous; background; non-sensitivity to one-fold coincidences (coincidences; peak � background in both dimensions) and their crossings; ability to identify peaks close to the edges of the; spectrum region. Usually peak finders fail to detect them; resolution, decomposition of doublets and multiplets.; The algorithm should be able to recognize close positioned peaks. ; ability to identify peaks with different sigma.  ; Function:; Int_t TSpectrum2::SearchHighRes (double **source,double **dest, int ssizex, int ssizey, double sigma, double threshold,; bool backgroundRemove,int deconIterations,; bool markov,; int averWindow); ��;  ; This; function searches for peaks in source spectrum. It is based on deconvolution; method. First the background is removed (if desired), then Markov smoothed; spectrum is calculated (if desired), then the response function is generated; according to given sigma and deconvolution is carried out. The order of peaks; is arranged according to their heights in the spectrum after background; elimination. The highest peak is the first in the list. On success it returns; number of found peaks.;  ; Parameters:; ������� source-pointer to the matrix of source; spectrum����������������� ; ������� dest-resulting spectrum ",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:4555,Security,Hash,Hash,4555,"virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:39377,Security,access,access,39377,"ed peaks, peaks with amplitude less than; threshold*highest_peak/100 are ignored; backgroundRemove- background_remove-logical variable, true if the removal of; background before deconvolution is desired� ; deconIterations-number of iterations in; deconvolution operation; markov-logical variable, if it is true,; first the source spectrum is replaced by new spectrum calculated using Markov; chains method ; averWindow-width of; averaging smoothing window ;  ; References:; [1]; M.A. Mariscotti: A method for identification of peaks in the presence of; background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2]; �M. Morh�č, J. Kliman, V.; Matou�ek, M. Veselsk�, I. Turzo.:Identification; of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); 108-125.; [3]; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376; (1996), 451. . Examples of peak searching; method;  ; SearchHighRes function provides users with the possibility; to vary the input parameters and with the access to the output deconvolved data; in the destination spectrum. Based on the output data one can tune the; parameters. ; Example 8 � script Src.c:. Fig.; 20 Two-dimensional spectrum with found peaks denoted by markers (,; threshold=5%, 3 iterations steps in the deconvolution). Fig.; 21 Spectrum from Fig. 20 after background elimination and deconvolution; Script:; // Example to illustrate high resolution peak searching; function (class TSpectrum).; // To execute this example, do; // root > .x Src.C;  ; #include <TSpectrum2>;  ; void Src() {; �� Int_t i, j, nfound;; �� Double_t nbinsx = 64;; �� Double_t nbinsy = 64;�� ; �� Double_t xmin� = 0;; �� Double_t xmax� = (Double_t)nbinsx;; �� Double_t ymin� = 0;; �� Double_t ymax� = (Double_t)nbinsy;�� ; �� Double_t** source = new Double_t*[nbinsx];�� ; �� for (i=0;i<nbinsx;i++); ����������������������������������� source[i]=new; Double_t[nbinsy];; �� Double_t** dest = new Double_t*[nbinsx];�� ; �� for (i",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:7646,Testability,Test,TestBit,7646,"har* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetResolution(Double_t resolution = 1); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; const char*SmoothMarkov(Double_t** source, Int_t ssizex, Int_t ssizey, Int_t averWindow); static TH1*StaticBackground(const TH1* hist, Int_t niter = 20, Option_t* option = """"); static Int_tStaticSearch(const TH1* hist, Double_t sigma = 2, Option_t* option = ""goff"", Double_t threshold = 0.050000000000000003); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpectrum2(); TSpectrum2(const TSpectrum2&); TSpectrum2(Int_t maxpositions, Double_t resolution = 1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TSpectrum2::(anonymous)kBackDecreasingWindow; static TSpectrum2::(anonymous)kBackIncreasingWindow; static TSpectrum2::(anonymous)kBackOneStepFiltering; static TSpectrum2::(anonymous)kBackSuccessiveFiltering; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; st",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:7685,Testability,Test,TestBits,7685,"har* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetResolution(Double_t resolution = 1); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; const char*SmoothMarkov(Double_t** source, Int_t ssizex, Int_t ssizey, Int_t averWindow); static TH1*StaticBackground(const TH1* hist, Int_t niter = 20, Option_t* option = """"); static Int_tStaticSearch(const TH1* hist, Double_t sigma = 2, Option_t* option = ""goff"", Double_t threshold = 0.050000000000000003); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpectrum2(); TSpectrum2(const TSpectrum2&); TSpectrum2(Int_t maxpositions, Double_t resolution = 1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObject::MakeZombie(). Data Members; public:. static TSpectrum2::(anonymous)kBackDecreasingWindow; static TSpectrum2::(anonymous)kBackIncreasingWindow; static TSpectrum2::(anonymous)kBackOneStepFiltering; static TSpectrum2::(anonymous)kBackSuccessiveFiltering; static TObject::(anonymous)TObject::kBitMask; static TObject::EStatusBitsTObject::kCanDelete; static TObject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; st",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:36059,Testability,log,logical,36059,"+); ������ decon->SetBinContent(i + 1,j + 1, source[i][j]);��. �� }; �� decon->Draw(""SURF"");� ; �� };  . Int_t SearchHighRes(Double_t** source, Double_t** dest, Int_t ssizex, Int_t ssizey, Double_t sigma, Double_t threshold, Bool_t backgroundRemove, Int_t deconIterations, Bool_t markov, Int_t averWindow). TWO-DIMENSIONAL HIGH-RESOLUTION PEAK SEARCH FUNCTION; This function searches for peaks in source spectrum; It is based on deconvolution method. First the background is; removed (if desired), then Markov spectrum is calculated; (if desired), then the response function is generated; according to given sigma and deconvolution is carried out. Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal:; to identify automatically the peaks in spectrum with the presence of the; continuous background, one-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected with correct peak; identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified; non-sensitivity of the algorithm to continuous; background; non-sensitivity to one-fold coincidences (coincidences; peak � background",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:36216,Testability,log,logical,36216,"+); ������ decon->SetBinContent(i + 1,j + 1, source[i][j]);��. �� }; �� decon->Draw(""SURF"");� ; �� };  . Int_t SearchHighRes(Double_t** source, Double_t** dest, Int_t ssizex, Int_t ssizey, Double_t sigma, Double_t threshold, Bool_t backgroundRemove, Int_t deconIterations, Bool_t markov, Int_t averWindow). TWO-DIMENSIONAL HIGH-RESOLUTION PEAK SEARCH FUNCTION; This function searches for peaks in source spectrum; It is based on deconvolution method. First the background is; removed (if desired), then Markov spectrum is calculated; (if desired), then the response function is generated; according to given sigma and deconvolution is carried out. Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal:; to identify automatically the peaks in spectrum with the presence of the; continuous background, one-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected with correct peak; identification in two-dimensional coincidence spectra are. non-sensitivity to noise, i.e., only statistically; relevant peaks should be identified; non-sensitivity of the algorithm to continuous; background; non-sensitivity to one-fold coincidences (coincidences; peak � background",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:38457,Testability,log,logical,38457,"le sigma, double threshold,; bool backgroundRemove,int deconIterations,; bool markov,; int averWindow); ��;  ; This; function searches for peaks in source spectrum. It is based on deconvolution; method. First the background is removed (if desired), then Markov smoothed; spectrum is calculated (if desired), then the response function is generated; according to given sigma and deconvolution is carried out. The order of peaks; is arranged according to their heights in the spectrum after background; elimination. The highest peak is the first in the list. On success it returns; number of found peaks.;  ; Parameters:; ������� source-pointer to the matrix of source; spectrum����������������� ; ������� dest-resulting spectrum after deconvolution; ������� ssizex, ssizey-lengths of the source and; destination spectra��������������� ; ������� sigma-sigma of searched peaks; threshold- threshold; value in % for selected peaks, peaks with amplitude less than; threshold*highest_peak/100 are ignored; backgroundRemove- background_remove-logical variable, true if the removal of; background before deconvolution is desired� ; deconIterations-number of iterations in; deconvolution operation; markov-logical variable, if it is true,; first the source spectrum is replaced by new spectrum calculated using Markov; chains method ; averWindow-width of; averaging smoothing window ;  ; References:; [1]; M.A. Mariscotti: A method for identification of peaks in the presence of; background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2]; �M. Morh�č, J. Kliman, V.; Matou�ek, M. Veselsk�, I. Turzo.:Identification; of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); 108-125.; [3]; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376; (1996), 451. . Examples of peak searching; method;  ; SearchHighRes function provides users with the possibility; to vary the input parameters and with the access to the output deconvolved data; in the",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:38618,Testability,log,logical,38618,"le sigma, double threshold,; bool backgroundRemove,int deconIterations,; bool markov,; int averWindow); ��;  ; This; function searches for peaks in source spectrum. It is based on deconvolution; method. First the background is removed (if desired), then Markov smoothed; spectrum is calculated (if desired), then the response function is generated; according to given sigma and deconvolution is carried out. The order of peaks; is arranged according to their heights in the spectrum after background; elimination. The highest peak is the first in the list. On success it returns; number of found peaks.;  ; Parameters:; ������� source-pointer to the matrix of source; spectrum����������������� ; ������� dest-resulting spectrum after deconvolution; ������� ssizex, ssizey-lengths of the source and; destination spectra��������������� ; ������� sigma-sigma of searched peaks; threshold- threshold; value in % for selected peaks, peaks with amplitude less than; threshold*highest_peak/100 are ignored; backgroundRemove- background_remove-logical variable, true if the removal of; background before deconvolution is desired� ; deconIterations-number of iterations in; deconvolution operation; markov-logical variable, if it is true,; first the source spectrum is replaced by new spectrum calculated using Markov; chains method ; averWindow-width of; averaging smoothing window ;  ; References:; [1]; M.A. Mariscotti: A method for identification of peaks in the presence of; background and its application to spectrum analysis. NIM 50 (1967), 309-320.; [2]; �M. Morh�č, J. Kliman, V.; Matou�ek, M. Veselsk�, I. Turzo.:Identification; of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); 108-125.; [3]; Z.K. Silagadze, A new algorithm for automatic photopeak searches. NIM A 376; (1996), 451. . Examples of peak searching; method;  ; SearchHighRes function provides users with the possibility; to vary the input parameters and with the access to the output deconvolved data; in the",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:2718,Usability,Clear,Clear,2718,,MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2.html:23041,Usability,simpl,simple,23041," �������� ����source[i][j] = back->GetBinContent(i +; 1,j + 1); ; �� �������� �}; �� }� ���; �s->Background(source,nbinsx,nbinsy,8,8,kBackIncreasingWindow,kBackSuccessiveFiltering);//kBackOneStepFiltering; �� for (i = 0; i < nbinsx; i++){; ���� for (j = 0; j < nbinsy; j++); ������ back->SetBinContent(i + 1,j + 1, source[i][j]);�� ; �� }; �� back->Draw(""SURF"");� ; �� }. const char* SmoothMarkov(Double_t** source, Int_t ssizex, Int_t ssizey, Int_t averWindow). TWO-DIMENSIONAL MARKOV SPECTRUM SMOOTHING FUNCTION. This function calculates smoothed spectrum from source spectrum; based on Markov chain method.; The result is placed in the array pointed by source pointer. Function parameters:; source-pointer to the array of source spectrum; ssizex-x length of source; ssizey-y length of source; averWindow-width of averaging smoothing window. . Smoothing;  ; Goal: Suppression of; statistical fluctuations; �        ; the algorithm is based on discrete; Markov chain, which has very simple invariant distribution;  ; ����������� �����; ������� ��being defined from the normalization condition ;  ; �������� n; is the length of the smoothed spectrum and .  ;  ;  . is the probability of the change of; the peak position from channel i to the channel i+1. �is the normalization constant so; that �and m is a width of smoothing window. We have extended this; algortihm to two dimensions. ;  ; Function:; const char*; TSpectrum2::SmoothMarkov(double; **fSpectrum, int ssizex, int; ssizey, �int averWindow)� ;  ; This; function calculates smoothed spectrum from the source spectrum based on Markov; chain method. The result is placed in the vector pointed by source pointer. On; successful completion it returns 0. On error it returns pointer to the string; describing error.;  ; Parameters:; ������� fSpectrum-pointer; to the matrix of source spectrum����������������� ; ������� ssizex, ssizey; -lengths of the spectrum matrix�������������������������������� ; ������� averWindow-width; of averaging smo",MatchSource.WIKI,root/html604/TSpectrum2.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2.html
https://root.cern/root/html604/TSpectrum2Fit.html:1948,Availability,Error,Error,1948," virtual~TSpectrum2Fit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:2077,Availability,error,error,2077," virtual~TSpectrum2Fit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:2161,Availability,error,error,2161,"oidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFitAwmi(Double_t** source); voidFitStiefel(Double_t** source); voidGetAmplitudeErrors(Double_t* amplitudeErrors, Double_t* amplitudeErrorsX1, Double_t* amplitudeErrorsY1); voidGetAmplitudes(Double_t* amplitudes, Double_t* amplitudesX1, Double_t* amplitudesY1); voidGetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr); Double_tGetChi() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::Get",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:14124,Availability,error,errors,14124,,MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:14211,Availability,error,errors,14211,,MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:14314,Availability,error,errors,14314,"calculated value of background a0 parameter; Double_tfA0Errerror value of background a0 parameter; Double_tfA0Initinitial value of background a0 parameter(backgroud is estimated as a0+ax*x+ay*y); Double_tfAlphaconvergence coefficient, input parameter, it should be positive number and <=1, for details see references; Int_tfAlphaOptimoptimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; Double_t*fAmpCalc[fNPeaks] array of calculated values of amplitudes of 2D peaks, output parameters; Double_t*fAmpCalcX1[fNPeaks] array of calculated values of amplitudes of 1D ridges in x direction, output parameters; Double_t*fAmpCalcY1[fNPeaks] array of calculated values of amplitudes of 1D ridges in y direction, output parameters; Double_t*fAmpErr[fNPeaks] array of amplitudes errors of 2D peaks, output parameters; Double_t*fAmpErrX1[fNPeaks] array of amplitudes errors of 1D ridges in x direction, output parameters; Double_t*fAmpErrY1[fNPeaks] array of amplitudes errors of 1D ridges in y direction, output parameters; Double_t*fAmpInit[fNPeaks] array of initial values of amplitudes of 2D peaks, input parameters; Double_t*fAmpInitX1[fNPeaks] array of initial values of amplitudes of 1D ridges in x direction, input parameters; Double_t*fAmpInitY1[fNPeaks] array of initial values of amplitudes of 1D ridges in y direction, input parameters; Double_tfAxCalccalculated value of background ax parameter; Double_tfAxErrerror value of background ax parameter; Double_tfAxInitinitial value of background ax parameter(backgroud is estimated as a0+ax*x+ay*y); Double_tfAyCalccalculated value of background ay parameter; Double_tfAyErrerror value of background ay parameter; Double_tfAyInitinitial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y); Double_tfBxCalccalculated value of b parameter for 1D ridges in x direction; Double_tfBxErrerror value of b parameter for 1D ridges in x direction; Double_tfBxInitinitial value of b parameter for 1D ridg",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:19297,Availability,error,error,19297,"the parameter (not to fit).; Bool_tfFixTxylogical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit).; Bool_tfFixTylogical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Int_tfNPeaksnumber of peaks present in fit, input parameter, it should be > 0; TStringTNamed::fNameobject identifier; Int_tfNumberIterationsnumber of iterations in fitting procedure, input parameter, it should be > 0; Double_t*fPositionCalcX[fNPeaks] array of calculated values of x positions of 2D peaks, output parameters; Double_t*fPositionCalcX1[fNPeaks] array of calculated x positions of 1D ridges, output parameters; Double_t*fPositionCalcY[fNPeaks] array of calculated values of y positions of 2D peaks, output parameters; Double_t*fPositionCalcY1[fNPeaks] array of calculated y positions of 1D ridges, output parameters; Double_t*fPositionErrX[fNPeaks] array of error values of x positions of 2D peaks, output parameters; Double_t*fPositionErrX1[fNPeaks] array of x positions errors of 1D ridges, output parameters; Double_t*fPositionErrY[fNPeaks] array of error values of y positions of 2D peaks, output parameters; Double_t*fPositionErrY1[fNPeaks] array of y positions errors of 1D ridges, output parameters; Double_t*fPositionInitX[fNPeaks] array of initial values of x positions of 2D peaks, input parameters; Double_t*fPositionInitX1[fNPeaks] array of initial x positions of 1D ridges, input parameters; Double_t*fPositionInitY[fNPeaks] array of initial values of y positions of 2D peaks, input parameters; Double_t*fPositionInitY1[fNPeaks] array of initial y positions of 1D ridges, input parameters; Int_tfPowerpossible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; Double_tfRoCalccalculated value of correlation coefficient; Double_tfRoErrerror value of correlation coefficient; Double_tfRoInitinitial value of correlation coefficient; Double_tfSigmaCalcXcalculated value ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:19411,Availability,error,errors,19411,"the parameter (not to fit).; Bool_tfFixTxylogical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit).; Bool_tfFixTylogical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Int_tfNPeaksnumber of peaks present in fit, input parameter, it should be > 0; TStringTNamed::fNameobject identifier; Int_tfNumberIterationsnumber of iterations in fitting procedure, input parameter, it should be > 0; Double_t*fPositionCalcX[fNPeaks] array of calculated values of x positions of 2D peaks, output parameters; Double_t*fPositionCalcX1[fNPeaks] array of calculated x positions of 1D ridges, output parameters; Double_t*fPositionCalcY[fNPeaks] array of calculated values of y positions of 2D peaks, output parameters; Double_t*fPositionCalcY1[fNPeaks] array of calculated y positions of 1D ridges, output parameters; Double_t*fPositionErrX[fNPeaks] array of error values of x positions of 2D peaks, output parameters; Double_t*fPositionErrX1[fNPeaks] array of x positions errors of 1D ridges, output parameters; Double_t*fPositionErrY[fNPeaks] array of error values of y positions of 2D peaks, output parameters; Double_t*fPositionErrY1[fNPeaks] array of y positions errors of 1D ridges, output parameters; Double_t*fPositionInitX[fNPeaks] array of initial values of x positions of 2D peaks, input parameters; Double_t*fPositionInitX1[fNPeaks] array of initial x positions of 1D ridges, input parameters; Double_t*fPositionInitY[fNPeaks] array of initial values of y positions of 2D peaks, input parameters; Double_t*fPositionInitY1[fNPeaks] array of initial y positions of 1D ridges, input parameters; Int_tfPowerpossible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; Double_tfRoCalccalculated value of correlation coefficient; Double_tfRoErrerror value of correlation coefficient; Double_tfRoInitinitial value of correlation coefficient; Double_tfSigmaCalcXcalculated value ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:19492,Availability,error,error,19492,"the parameter (not to fit).; Bool_tfFixTxylogical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit).; Bool_tfFixTylogical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Int_tfNPeaksnumber of peaks present in fit, input parameter, it should be > 0; TStringTNamed::fNameobject identifier; Int_tfNumberIterationsnumber of iterations in fitting procedure, input parameter, it should be > 0; Double_t*fPositionCalcX[fNPeaks] array of calculated values of x positions of 2D peaks, output parameters; Double_t*fPositionCalcX1[fNPeaks] array of calculated x positions of 1D ridges, output parameters; Double_t*fPositionCalcY[fNPeaks] array of calculated values of y positions of 2D peaks, output parameters; Double_t*fPositionCalcY1[fNPeaks] array of calculated y positions of 1D ridges, output parameters; Double_t*fPositionErrX[fNPeaks] array of error values of x positions of 2D peaks, output parameters; Double_t*fPositionErrX1[fNPeaks] array of x positions errors of 1D ridges, output parameters; Double_t*fPositionErrY[fNPeaks] array of error values of y positions of 2D peaks, output parameters; Double_t*fPositionErrY1[fNPeaks] array of y positions errors of 1D ridges, output parameters; Double_t*fPositionInitX[fNPeaks] array of initial values of x positions of 2D peaks, input parameters; Double_t*fPositionInitX1[fNPeaks] array of initial x positions of 1D ridges, input parameters; Double_t*fPositionInitY[fNPeaks] array of initial values of y positions of 2D peaks, input parameters; Double_t*fPositionInitY1[fNPeaks] array of initial y positions of 1D ridges, input parameters; Int_tfPowerpossible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; Double_tfRoCalccalculated value of correlation coefficient; Double_tfRoErrerror value of correlation coefficient; Double_tfRoInitinitial value of correlation coefficient; Double_tfSigmaCalcXcalculated value ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:19606,Availability,error,errors,19606,"the parameter (not to fit).; Bool_tfFixTxylogical value of t parameter for 2D peaks, which allows to fix the parameter (not to fit).; Bool_tfFixTylogical value of t parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Int_tfNPeaksnumber of peaks present in fit, input parameter, it should be > 0; TStringTNamed::fNameobject identifier; Int_tfNumberIterationsnumber of iterations in fitting procedure, input parameter, it should be > 0; Double_t*fPositionCalcX[fNPeaks] array of calculated values of x positions of 2D peaks, output parameters; Double_t*fPositionCalcX1[fNPeaks] array of calculated x positions of 1D ridges, output parameters; Double_t*fPositionCalcY[fNPeaks] array of calculated values of y positions of 2D peaks, output parameters; Double_t*fPositionCalcY1[fNPeaks] array of calculated y positions of 1D ridges, output parameters; Double_t*fPositionErrX[fNPeaks] array of error values of x positions of 2D peaks, output parameters; Double_t*fPositionErrX1[fNPeaks] array of x positions errors of 1D ridges, output parameters; Double_t*fPositionErrY[fNPeaks] array of error values of y positions of 2D peaks, output parameters; Double_t*fPositionErrY1[fNPeaks] array of y positions errors of 1D ridges, output parameters; Double_t*fPositionInitX[fNPeaks] array of initial values of x positions of 2D peaks, input parameters; Double_t*fPositionInitX1[fNPeaks] array of initial x positions of 1D ridges, input parameters; Double_t*fPositionInitY[fNPeaks] array of initial values of y positions of 2D peaks, input parameters; Double_t*fPositionInitY1[fNPeaks] array of initial y positions of 1D ridges, input parameters; Int_tfPowerpossible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; Double_tfRoCalccalculated value of correlation coefficient; Double_tfRoErrerror value of correlation coefficient; Double_tfRoInitinitial value of correlation coefficient; Double_tfSigmaCalcXcalculated value ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:22768,Availability,error,errors,22768,"ction; Double_tfSxErrerror value of s parameter for 1D ridges in x direction; Double_tfSxInitinitial value of s parameter for 1D ridges in x direction (relative amplitude of step), for details see html manual and references; Double_tfSxyCalccalculated value of s parameter for 2D peaks; Double_tfSxyErrerror value of s parameter for 2D peaks; Double_tfSxyInitinitial value of s parameter for 2D peaks (relative amplitude of step), for details see html manual and references; Double_tfSyCalccalculated value of s parameter for 1D ridges in y direction; Double_tfSyErrerror value of s parameter for 1D ridges in y direction; Double_tfSyInitinitial value of s parameter for 1D ridges in y direction (relative amplitude of step), for details see html manual and references; TStringTNamed::fTitleobject title; Double_tfTxCalccalculated value of t parameter for 1D ridges in x direction; Double_tfTxErrerror value of t parameter for 1D ridges in x direction; Double_tfTxInitinitial value of t parameter for 1D ridges in x direction (relative amplitude of tail), for details see html manual and references; Double_tfTxyCalccalculated value of t parameter for 2D peaks; Double_tfTxyErrerror value of t parameter for 2D peaks; Double_tfTxyInitinitial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references; Double_tfTyCalccalculated value of t parameter for 1D ridges in y direction; Double_tfTyErrerror value of t parameter for 1D ridges in y direction; Double_tfTyInitinitial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references; Double_t*fVolume[fNPeaks] array of calculated volumes of 2D peaks, output parameters; Double_t*fVolumeErr[fNPeaks] array of volumes errors of 2D peaks, output parameters; Int_tfXmaxlast fitted channel in x direction; Int_tfXminfirst fitted channel in x direction; Int_tfYmaxlast fitted channel in y direction; Int_tfYminfirst fitted channel in y direction.",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:23745,Availability,error,error,23745,"fNPeaks] array of volumes errors of 2D peaks, output parameters; Int_tfXmaxlast fitted channel in x direction; Int_tfXminfirst fitted channel in x direction; Int_tfYmaxlast fitted channel in y direction; Int_tfYminfirst fitted channel in y direction. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrum2Fit. Function documentation; TSpectrum2Fit(); default constructor. TSpectrum2Fit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks contains the two-dimensional symmetrical Gaussian two one-dimensional; symmetrical Gaussian ridges as well as nonsymmetrical terms and background. ~TSpectrum2Fit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Ourpowl(Double_t a, Int_t pw); power function. void StiefelInversion(Double_t** a, Int_t size). AUXILIARY FUNCTION. This function calculates solution of the system of linear equations.; The matrix a should have a dimension size*(size+4); The calling function should fill in the matrix, the column size should; contain vector y (right side of the system of equations). The result is; placed into size+1 column of the matrix.; according to sigma of peaks.; Function parameters:; -a-matrix with dimension size*(size+4) //; -size-number of rows of the matrix. Double_t Shape2(Int_t numOfFittedPeaks, Double_t x, Double_t y, const Double_t* parameter, Double_t sigmax, Double_t sigmay, Double_t ro, Double_t a0, Double_t ax, Double_t ay, Double_t txy, Double_t sxy, Double_t tx, Double_t ty, Double_t sx, Double_t sy, Double_t bx, Double_t by). AUXILIARY FUNCTION.",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:23853,Availability,error,error,23853,"irection; Int_tfXminfirst fitted channel in x direction; Int_tfYmaxlast fitted channel in y direction; Int_tfYminfirst fitted channel in y direction. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrum2Fit. Function documentation; TSpectrum2Fit(); default constructor. TSpectrum2Fit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks contains the two-dimensional symmetrical Gaussian two one-dimensional; symmetrical Gaussian ridges as well as nonsymmetrical terms and background. ~TSpectrum2Fit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Ourpowl(Double_t a, Int_t pw); power function. void StiefelInversion(Double_t** a, Int_t size). AUXILIARY FUNCTION. This function calculates solution of the system of linear equations.; The matrix a should have a dimension size*(size+4); The calling function should fill in the matrix, the column size should; contain vector y (right side of the system of equations). The result is; placed into size+1 column of the matrix.; according to sigma of peaks.; Function parameters:; -a-matrix with dimension size*(size+4) //; -size-number of rows of the matrix. Double_t Shape2(Int_t numOfFittedPeaks, Double_t x, Double_t y, const Double_t* parameter, Double_t sigmax, Double_t sigmay, Double_t ro, Double_t a0, Double_t ax, Double_t ay, Double_t txy, Double_t sxy, Double_t tx, Double_t ty, Double_t sx, Double_t sy, Double_t bx, Double_t by). AUXILIARY FUNCTION. This function calculates 2D peaks shape function (see manual); Function parameters:; -numOfFittedPea",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:40948,Availability,error,error,40948,,MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:41338,Availability,error,error,41338,,MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:41722,Availability,error,errors,41722,"aks, input parameters; �� Double_t; *fPositionCalcX;���������������� //[fNPeaks] array of calculated values of x; positions of 2D peaks, output parameters; �� Double_t; *fPositionErrX;����������������� //[fNPeaks] array of error values of x; positions of 2D peaks, output parameters; �� Double_t; *fPositionInitY;���������������� //[fNPeaks] array of initial values of y; positions of 2D peaks, input parameters; �� Double_t; *fPositionCalcY;���������������� //[fNPeaks] array of calculated values of y; positions of 2D peaks, output parameters; �� Double_t; *fPositionErrY;����������������� //[fNPeaks] array of error values of y; positions of 2D peaks, output parameters; �� Double_t; *fPositionInitX1;��������������� //[fNPeaks] array of initial x positions of 1D; ridges, input parameters; �� Double_t; *fPositionCalcX1;��������������� //[fNPeaks] array of calculated x positions of; 1D ridges, output parameters; �� Double_t; *fPositionErrX1;���������������� //[fNPeaks] array of x positions errors of 1D; ridges, output parameters; �� Double_t; *fPositionInitY1;��������������� //[fNPeaks] array of initial y positions of 1D; ridges, input parameters; �� Double_t; *fPositionCalcY1;��������������� //[fNPeaks] array of calculated y positions of; 1D ridges, output parameters; �� Double_t; *fPositionErrY1;���������������� //[fNPeaks] array of y positions errors of 1D; ridges, output parameters; �� Double_t; *fAmpInit;���������������������� //[fNPeaks] array of initial values of; amplitudes of 2D peaks, input parameters; �� Double_t; *fAmpCalc;���������������������� //[fNPeaks] array of calculated values of; amplitudes of 2D peaks, output parameters; �� Double_t; *fAmpErr;����������������������� //[fNPeaks] array of amplitudes errors of 2D; peaks, output parameters; �� Double_t; *fAmpInitX1;�������������������� //[fNPeaks] array of initial values of; amplitudes of 1D ridges in x direction, input parameters; �� Double_t; *fAmpCalcX1;�������������������� //[fNPeaks] array of calculated",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:42086,Availability,error,errors,42086,"s of y; positions of 2D peaks, input parameters; �� Double_t; *fPositionCalcY;���������������� //[fNPeaks] array of calculated values of y; positions of 2D peaks, output parameters; �� Double_t; *fPositionErrY;����������������� //[fNPeaks] array of error values of y; positions of 2D peaks, output parameters; �� Double_t; *fPositionInitX1;��������������� //[fNPeaks] array of initial x positions of 1D; ridges, input parameters; �� Double_t; *fPositionCalcX1;��������������� //[fNPeaks] array of calculated x positions of; 1D ridges, output parameters; �� Double_t; *fPositionErrX1;���������������� //[fNPeaks] array of x positions errors of 1D; ridges, output parameters; �� Double_t; *fPositionInitY1;��������������� //[fNPeaks] array of initial y positions of 1D; ridges, input parameters; �� Double_t; *fPositionCalcY1;��������������� //[fNPeaks] array of calculated y positions of; 1D ridges, output parameters; �� Double_t; *fPositionErrY1;���������������� //[fNPeaks] array of y positions errors of 1D; ridges, output parameters; �� Double_t; *fAmpInit;���������������������� //[fNPeaks] array of initial values of; amplitudes of 2D peaks, input parameters; �� Double_t; *fAmpCalc;���������������������� //[fNPeaks] array of calculated values of; amplitudes of 2D peaks, output parameters; �� Double_t; *fAmpErr;����������������������� //[fNPeaks] array of amplitudes errors of 2D; peaks, output parameters; �� Double_t; *fAmpInitX1;�������������������� //[fNPeaks] array of initial values of; amplitudes of 1D ridges in x direction, input parameters; �� Double_t; *fAmpCalcX1;�������������������� //[fNPeaks] array of calculated values of; amplitudes of 1D ridges in x direction, output parameters; �� Double_t; *fAmpErrX1;��������������������� //[fNPeaks] array of amplitudes errors of 1D; ridges in x direction, output parameters; �� Double_t; *fAmpInitY1;�������������������� //[fNPeaks] array of initial values of; amplitudes of 1D ridges in y direction, input parameters; �� Double_t; *f",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:42465,Availability,error,errors,42465,"itial x positions of 1D; ridges, input parameters; �� Double_t; *fPositionCalcX1;��������������� //[fNPeaks] array of calculated x positions of; 1D ridges, output parameters; �� Double_t; *fPositionErrX1;���������������� //[fNPeaks] array of x positions errors of 1D; ridges, output parameters; �� Double_t; *fPositionInitY1;��������������� //[fNPeaks] array of initial y positions of 1D; ridges, input parameters; �� Double_t; *fPositionCalcY1;��������������� //[fNPeaks] array of calculated y positions of; 1D ridges, output parameters; �� Double_t; *fPositionErrY1;���������������� //[fNPeaks] array of y positions errors of 1D; ridges, output parameters; �� Double_t; *fAmpInit;���������������������� //[fNPeaks] array of initial values of; amplitudes of 2D peaks, input parameters; �� Double_t; *fAmpCalc;���������������������� //[fNPeaks] array of calculated values of; amplitudes of 2D peaks, output parameters; �� Double_t; *fAmpErr;����������������������� //[fNPeaks] array of amplitudes errors of 2D; peaks, output parameters; �� Double_t; *fAmpInitX1;�������������������� //[fNPeaks] array of initial values of; amplitudes of 1D ridges in x direction, input parameters; �� Double_t; *fAmpCalcX1;�������������������� //[fNPeaks] array of calculated values of; amplitudes of 1D ridges in x direction, output parameters; �� Double_t; *fAmpErrX1;��������������������� //[fNPeaks] array of amplitudes errors of 1D; ridges in x direction, output parameters; �� Double_t; *fAmpInitY1;�������������������� //[fNPeaks] array of initial values of; amplitudes of 1D ridges in y direction, input parameters; �� Double_t; *fAmpCalcY1;�������������������� //[fNPeaks] array of calculated values of; amplitudes of 1D ridges in y direction, output parameters; �� Double_t; *fAmpErrY1;��������������������� //[fNPeaks] array of amplitudes errors of 1D; ridges in y direction, output parameters; �� Double_t; *fVolume;����������������������� //[fNPeaks] array of calculated volumes of 2D; peaks, output param",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:42875,Availability,error,errors,42875,"ers; �� Double_t; *fPositionCalcY1;��������������� //[fNPeaks] array of calculated y positions of; 1D ridges, output parameters; �� Double_t; *fPositionErrY1;���������������� //[fNPeaks] array of y positions errors of 1D; ridges, output parameters; �� Double_t; *fAmpInit;���������������������� //[fNPeaks] array of initial values of; amplitudes of 2D peaks, input parameters; �� Double_t; *fAmpCalc;���������������������� //[fNPeaks] array of calculated values of; amplitudes of 2D peaks, output parameters; �� Double_t; *fAmpErr;����������������������� //[fNPeaks] array of amplitudes errors of 2D; peaks, output parameters; �� Double_t; *fAmpInitX1;�������������������� //[fNPeaks] array of initial values of; amplitudes of 1D ridges in x direction, input parameters; �� Double_t; *fAmpCalcX1;�������������������� //[fNPeaks] array of calculated values of; amplitudes of 1D ridges in x direction, output parameters; �� Double_t; *fAmpErrX1;��������������������� //[fNPeaks] array of amplitudes errors of 1D; ridges in x direction, output parameters; �� Double_t; *fAmpInitY1;�������������������� //[fNPeaks] array of initial values of; amplitudes of 1D ridges in y direction, input parameters; �� Double_t; *fAmpCalcY1;�������������������� //[fNPeaks] array of calculated values of; amplitudes of 1D ridges in y direction, output parameters; �� Double_t; *fAmpErrY1;��������������������� //[fNPeaks] array of amplitudes errors of 1D; ridges in y direction, output parameters; �� Double_t; *fVolume;����������������������� //[fNPeaks] array of calculated volumes of 2D; peaks, output parameters; �� Double_t; *fVolumeErr;�������������������� //[fNPeaks] array of volumes errors of 2D; peaks, output parameters; �� Double_t�; fSigmaInitX;������������������� //initial value of sigma x parameter; �� Double_t�; fSigmaCalcX;������������������� //calculated value of sigma x parameter; �� Double_t�; fSigmaErrX;�������������������� //error value of sigma x parameter; �� Double_t�; fSigmaInitY;���������",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:43301,Availability,error,errors,43301,"fNPeaks] array of calculated values of; amplitudes of 2D peaks, output parameters; �� Double_t; *fAmpErr;����������������������� //[fNPeaks] array of amplitudes errors of 2D; peaks, output parameters; �� Double_t; *fAmpInitX1;�������������������� //[fNPeaks] array of initial values of; amplitudes of 1D ridges in x direction, input parameters; �� Double_t; *fAmpCalcX1;�������������������� //[fNPeaks] array of calculated values of; amplitudes of 1D ridges in x direction, output parameters; �� Double_t; *fAmpErrX1;��������������������� //[fNPeaks] array of amplitudes errors of 1D; ridges in x direction, output parameters; �� Double_t; *fAmpInitY1;�������������������� //[fNPeaks] array of initial values of; amplitudes of 1D ridges in y direction, input parameters; �� Double_t; *fAmpCalcY1;�������������������� //[fNPeaks] array of calculated values of; amplitudes of 1D ridges in y direction, output parameters; �� Double_t; *fAmpErrY1;��������������������� //[fNPeaks] array of amplitudes errors of 1D; ridges in y direction, output parameters; �� Double_t; *fVolume;����������������������� //[fNPeaks] array of calculated volumes of 2D; peaks, output parameters; �� Double_t; *fVolumeErr;�������������������� //[fNPeaks] array of volumes errors of 2D; peaks, output parameters; �� Double_t�; fSigmaInitX;������������������� //initial value of sigma x parameter; �� Double_t�; fSigmaCalcX;������������������� //calculated value of sigma x parameter; �� Double_t�; fSigmaErrX;�������������������� //error value of sigma x parameter; �� Double_t�; fSigmaInitY;������������������� //initial value of sigma y parameter; �� Double_t�; fSigmaCalcY;������������������� //calculated value of sigma y parameter; �� Double_t�; fSigmaErrY;�������������������� //error value of sigma y parameter; �� Double_t�; fRoInit;����������������������� //initial value of correlation coefficient; �� Double_t�; fRoCalc;����������������������� //calculated value of correlation coefficient; �� Double_t�; fRoErr;����",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:43551,Availability,error,errors,43551,"fNPeaks] array of initial values of; amplitudes of 1D ridges in x direction, input parameters; �� Double_t; *fAmpCalcX1;�������������������� //[fNPeaks] array of calculated values of; amplitudes of 1D ridges in x direction, output parameters; �� Double_t; *fAmpErrX1;��������������������� //[fNPeaks] array of amplitudes errors of 1D; ridges in x direction, output parameters; �� Double_t; *fAmpInitY1;�������������������� //[fNPeaks] array of initial values of; amplitudes of 1D ridges in y direction, input parameters; �� Double_t; *fAmpCalcY1;�������������������� //[fNPeaks] array of calculated values of; amplitudes of 1D ridges in y direction, output parameters; �� Double_t; *fAmpErrY1;��������������������� //[fNPeaks] array of amplitudes errors of 1D; ridges in y direction, output parameters; �� Double_t; *fVolume;����������������������� //[fNPeaks] array of calculated volumes of 2D; peaks, output parameters; �� Double_t; *fVolumeErr;�������������������� //[fNPeaks] array of volumes errors of 2D; peaks, output parameters; �� Double_t�; fSigmaInitX;������������������� //initial value of sigma x parameter; �� Double_t�; fSigmaCalcX;������������������� //calculated value of sigma x parameter; �� Double_t�; fSigmaErrX;�������������������� //error value of sigma x parameter; �� Double_t�; fSigmaInitY;������������������� //initial value of sigma y parameter; �� Double_t�; fSigmaCalcY;������������������� //calculated value of sigma y parameter; �� Double_t�; fSigmaErrY;�������������������� //error value of sigma y parameter; �� Double_t�; fRoInit;����������������������� //initial value of correlation coefficient; �� Double_t�; fRoCalc;����������������������� //calculated value of correlation coefficient; �� Double_t�; fRoErr;������������������������ //error value of correlation coefficient; �� Double_t�; fTxyInit;���������������������� //initial value of t parameter for 2D peaks; (relative amplitude of tail), for details see html manual and references; �� Double_t�; fTxyCalc",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:43810,Availability,error,error,43810,"mpErrX1;��������������������� //[fNPeaks] array of amplitudes errors of 1D; ridges in x direction, output parameters; �� Double_t; *fAmpInitY1;�������������������� //[fNPeaks] array of initial values of; amplitudes of 1D ridges in y direction, input parameters; �� Double_t; *fAmpCalcY1;�������������������� //[fNPeaks] array of calculated values of; amplitudes of 1D ridges in y direction, output parameters; �� Double_t; *fAmpErrY1;��������������������� //[fNPeaks] array of amplitudes errors of 1D; ridges in y direction, output parameters; �� Double_t; *fVolume;����������������������� //[fNPeaks] array of calculated volumes of 2D; peaks, output parameters; �� Double_t; *fVolumeErr;�������������������� //[fNPeaks] array of volumes errors of 2D; peaks, output parameters; �� Double_t�; fSigmaInitX;������������������� //initial value of sigma x parameter; �� Double_t�; fSigmaCalcX;������������������� //calculated value of sigma x parameter; �� Double_t�; fSigmaErrX;�������������������� //error value of sigma x parameter; �� Double_t�; fSigmaInitY;������������������� //initial value of sigma y parameter; �� Double_t�; fSigmaCalcY;������������������� //calculated value of sigma y parameter; �� Double_t�; fSigmaErrY;�������������������� //error value of sigma y parameter; �� Double_t�; fRoInit;����������������������� //initial value of correlation coefficient; �� Double_t�; fRoCalc;����������������������� //calculated value of correlation coefficient; �� Double_t�; fRoErr;������������������������ //error value of correlation coefficient; �� Double_t�; fTxyInit;���������������������� //initial value of t parameter for 2D peaks; (relative amplitude of tail), for details see html manual and references; �� Double_t�; fTxyCalc;���������������������� //calculated value of t parameter for 2D peaks; �� Double_t�; fTxyErr;����������������������� //error value of t parameter for 2D peaks; �� Double_t�; fSxyInit;���������������������� //initial value of s parameter for 2D peaks; (relat",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:44063,Availability,error,error,44063,"ameters; �� Double_t; *fAmpCalcY1;�������������������� //[fNPeaks] array of calculated values of; amplitudes of 1D ridges in y direction, output parameters; �� Double_t; *fAmpErrY1;��������������������� //[fNPeaks] array of amplitudes errors of 1D; ridges in y direction, output parameters; �� Double_t; *fVolume;����������������������� //[fNPeaks] array of calculated volumes of 2D; peaks, output parameters; �� Double_t; *fVolumeErr;�������������������� //[fNPeaks] array of volumes errors of 2D; peaks, output parameters; �� Double_t�; fSigmaInitX;������������������� //initial value of sigma x parameter; �� Double_t�; fSigmaCalcX;������������������� //calculated value of sigma x parameter; �� Double_t�; fSigmaErrX;�������������������� //error value of sigma x parameter; �� Double_t�; fSigmaInitY;������������������� //initial value of sigma y parameter; �� Double_t�; fSigmaCalcY;������������������� //calculated value of sigma y parameter; �� Double_t�; fSigmaErrY;�������������������� //error value of sigma y parameter; �� Double_t�; fRoInit;����������������������� //initial value of correlation coefficient; �� Double_t�; fRoCalc;����������������������� //calculated value of correlation coefficient; �� Double_t�; fRoErr;������������������������ //error value of correlation coefficient; �� Double_t�; fTxyInit;���������������������� //initial value of t parameter for 2D peaks; (relative amplitude of tail), for details see html manual and references; �� Double_t�; fTxyCalc;���������������������� //calculated value of t parameter for 2D peaks; �� Double_t�; fTxyErr;����������������������� //error value of t parameter for 2D peaks; �� Double_t�; fSxyInit;���������������������� //initial value of s parameter for 2D peaks; (relative amplitude of step), for details see html manual and references; �� Double_t�; fSxyCalc;���������������������� //calculated value of s parameter for 2D peaks; �� Double_t�; fSxyErr;����������������������� //error value of s parameter for 2D peaks; ��",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:44328,Availability,error,error,44328,"ction, output parameters; �� Double_t; *fVolume;����������������������� //[fNPeaks] array of calculated volumes of 2D; peaks, output parameters; �� Double_t; *fVolumeErr;�������������������� //[fNPeaks] array of volumes errors of 2D; peaks, output parameters; �� Double_t�; fSigmaInitX;������������������� //initial value of sigma x parameter; �� Double_t�; fSigmaCalcX;������������������� //calculated value of sigma x parameter; �� Double_t�; fSigmaErrX;�������������������� //error value of sigma x parameter; �� Double_t�; fSigmaInitY;������������������� //initial value of sigma y parameter; �� Double_t�; fSigmaCalcY;������������������� //calculated value of sigma y parameter; �� Double_t�; fSigmaErrY;�������������������� //error value of sigma y parameter; �� Double_t�; fRoInit;����������������������� //initial value of correlation coefficient; �� Double_t�; fRoCalc;����������������������� //calculated value of correlation coefficient; �� Double_t�; fRoErr;������������������������ //error value of correlation coefficient; �� Double_t�; fTxyInit;���������������������� //initial value of t parameter for 2D peaks; (relative amplitude of tail), for details see html manual and references; �� Double_t�; fTxyCalc;���������������������� //calculated value of t parameter for 2D peaks; �� Double_t�; fTxyErr;����������������������� //error value of t parameter for 2D peaks; �� Double_t�; fSxyInit;���������������������� //initial value of s parameter for 2D peaks; (relative amplitude of step), for details see html manual and references; �� Double_t�; fSxyCalc;���������������������� //calculated value of s parameter for 2D peaks; �� Double_t�; fSxyErr;����������������������� //error value of s parameter for 2D peaks; �� Double_t�; fTxInit;����������������������� //initial value of t parameter for 1D ridges in; x direction (relative amplitude of tail), for details see html manual and; references; �� Double_t�; fTxCalc;����������������������� //calculated value of t parameter for 1",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:44675,Availability,error,error,44675,"Double_t�; fSigmaCalcX;������������������� //calculated value of sigma x parameter; �� Double_t�; fSigmaErrX;�������������������� //error value of sigma x parameter; �� Double_t�; fSigmaInitY;������������������� //initial value of sigma y parameter; �� Double_t�; fSigmaCalcY;������������������� //calculated value of sigma y parameter; �� Double_t�; fSigmaErrY;�������������������� //error value of sigma y parameter; �� Double_t�; fRoInit;����������������������� //initial value of correlation coefficient; �� Double_t�; fRoCalc;����������������������� //calculated value of correlation coefficient; �� Double_t�; fRoErr;������������������������ //error value of correlation coefficient; �� Double_t�; fTxyInit;���������������������� //initial value of t parameter for 2D peaks; (relative amplitude of tail), for details see html manual and references; �� Double_t�; fTxyCalc;���������������������� //calculated value of t parameter for 2D peaks; �� Double_t�; fTxyErr;����������������������� //error value of t parameter for 2D peaks; �� Double_t�; fSxyInit;���������������������� //initial value of s parameter for 2D peaks; (relative amplitude of step), for details see html manual and references; �� Double_t�; fSxyCalc;���������������������� //calculated value of s parameter for 2D peaks; �� Double_t�; fSxyErr;����������������������� //error value of s parameter for 2D peaks; �� Double_t�; fTxInit;����������������������� //initial value of t parameter for 1D ridges in; x direction (relative amplitude of tail), for details see html manual and; references; �� Double_t�; fTxCalc;����������������������� //calculated value of t parameter for 1D ridges; in x direction; �� Double_t�; fTxErr;���������������� ��������//error value of t parameter for 1D ridges in x; direction; �� Double_t�; fTyInit;����������������������� //initial value of t parameter for 1D ridges in; y direction (relative amplitude of tail), for details see html manual and; references; �� Double_t �fTyCalc;������������",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:45023,Availability,error,error,45023,"�; fSigmaErrY;�������������������� //error value of sigma y parameter; �� Double_t�; fRoInit;����������������������� //initial value of correlation coefficient; �� Double_t�; fRoCalc;����������������������� //calculated value of correlation coefficient; �� Double_t�; fRoErr;������������������������ //error value of correlation coefficient; �� Double_t�; fTxyInit;���������������������� //initial value of t parameter for 2D peaks; (relative amplitude of tail), for details see html manual and references; �� Double_t�; fTxyCalc;���������������������� //calculated value of t parameter for 2D peaks; �� Double_t�; fTxyErr;����������������������� //error value of t parameter for 2D peaks; �� Double_t�; fSxyInit;���������������������� //initial value of s parameter for 2D peaks; (relative amplitude of step), for details see html manual and references; �� Double_t�; fSxyCalc;���������������������� //calculated value of s parameter for 2D peaks; �� Double_t�; fSxyErr;����������������������� //error value of s parameter for 2D peaks; �� Double_t�; fTxInit;����������������������� //initial value of t parameter for 1D ridges in; x direction (relative amplitude of tail), for details see html manual and; references; �� Double_t�; fTxCalc;����������������������� //calculated value of t parameter for 1D ridges; in x direction; �� Double_t�; fTxErr;���������������� ��������//error value of t parameter for 1D ridges in x; direction; �� Double_t�; fTyInit;����������������������� //initial value of t parameter for 1D ridges in; y direction (relative amplitude of tail), for details see html manual and; references; �� Double_t �fTyCalc;�����������������������; calculated value of t parameter for 1D ridges in y direction; �� Double_t�; fTyErr;������������������������ //error value of t parameter for 1D ridges in y; direction; �� Double_t�; fSxInit;����������������������� //initial value of s parameter for 1D ridges in; x direction (relative amplitude of step), for details see html manual an",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:45405,Availability,error,error,45405,"����� //initial value of t parameter for 2D peaks; (relative amplitude of tail), for details see html manual and references; �� Double_t�; fTxyCalc;���������������������� //calculated value of t parameter for 2D peaks; �� Double_t�; fTxyErr;����������������������� //error value of t parameter for 2D peaks; �� Double_t�; fSxyInit;���������������������� //initial value of s parameter for 2D peaks; (relative amplitude of step), for details see html manual and references; �� Double_t�; fSxyCalc;���������������������� //calculated value of s parameter for 2D peaks; �� Double_t�; fSxyErr;����������������������� //error value of s parameter for 2D peaks; �� Double_t�; fTxInit;����������������������� //initial value of t parameter for 1D ridges in; x direction (relative amplitude of tail), for details see html manual and; references; �� Double_t�; fTxCalc;����������������������� //calculated value of t parameter for 1D ridges; in x direction; �� Double_t�; fTxErr;���������������� ��������//error value of t parameter for 1D ridges in x; direction; �� Double_t�; fTyInit;����������������������� //initial value of t parameter for 1D ridges in; y direction (relative amplitude of tail), for details see html manual and; references; �� Double_t �fTyCalc;�����������������������; calculated value of t parameter for 1D ridges in y direction; �� Double_t�; fTyErr;������������������������ //error value of t parameter for 1D ridges in y; direction; �� Double_t�; fSxInit;����������������������� //initial value of s parameter for 1D ridges in; x direction (relative amplitude of step), for details see html manual and; references; �� Double_t�; fSxCalc;����������������������� //calculated value of s parameter for 1D ridges; in x direction; �� Double_t� fSxErr;������ ������������������//error; value of s parameter for 1D ridges in x direction; �� Double_t�; fSyInit;����������������������� //initial value of s parameter for 1D ridges in; y direction (relative amplitude of step), for details se",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:45801,Availability,error,error,45801,"s; (relative amplitude of step), for details see html manual and references; �� Double_t�; fSxyCalc;���������������������� //calculated value of s parameter for 2D peaks; �� Double_t�; fSxyErr;����������������������� //error value of s parameter for 2D peaks; �� Double_t�; fTxInit;����������������������� //initial value of t parameter for 1D ridges in; x direction (relative amplitude of tail), for details see html manual and; references; �� Double_t�; fTxCalc;����������������������� //calculated value of t parameter for 1D ridges; in x direction; �� Double_t�; fTxErr;���������������� ��������//error value of t parameter for 1D ridges in x; direction; �� Double_t�; fTyInit;����������������������� //initial value of t parameter for 1D ridges in; y direction (relative amplitude of tail), for details see html manual and; references; �� Double_t �fTyCalc;�����������������������; calculated value of t parameter for 1D ridges in y direction; �� Double_t�; fTyErr;������������������������ //error value of t parameter for 1D ridges in y; direction; �� Double_t�; fSxInit;����������������������� //initial value of s parameter for 1D ridges in; x direction (relative amplitude of step), for details see html manual and; references; �� Double_t�; fSxCalc;����������������������� //calculated value of s parameter for 1D ridges; in x direction; �� Double_t� fSxErr;������ ������������������//error; value of s parameter for 1D ridges in x direction; �� Double_t�; fSyInit;����������������������� //initial value of s parameter for 1D ridges in; y direction (relative amplitude of step), for details see html manual and; references; � �Double_t�; fSyCalc;����������������������� //calculated value of s parameter for 1D ridges; in y direction; �� Double_t�; fSyErr;������������������������ //error value of s parameter for 1D ridges in y; direction; �� Double_t�; fBxInit;����������������������� //initial value of b parameter for 1D ridges in; x direction (slope), for details see html manual and ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:46199,Availability,error,error,46199,"or details see html manual and; references; �� Double_t�; fTxCalc;����������������������� //calculated value of t parameter for 1D ridges; in x direction; �� Double_t�; fTxErr;���������������� ��������//error value of t parameter for 1D ridges in x; direction; �� Double_t�; fTyInit;����������������������� //initial value of t parameter for 1D ridges in; y direction (relative amplitude of tail), for details see html manual and; references; �� Double_t �fTyCalc;�����������������������; calculated value of t parameter for 1D ridges in y direction; �� Double_t�; fTyErr;������������������������ //error value of t parameter for 1D ridges in y; direction; �� Double_t�; fSxInit;����������������������� //initial value of s parameter for 1D ridges in; x direction (relative amplitude of step), for details see html manual and; references; �� Double_t�; fSxCalc;����������������������� //calculated value of s parameter for 1D ridges; in x direction; �� Double_t� fSxErr;������ ������������������//error; value of s parameter for 1D ridges in x direction; �� Double_t�; fSyInit;����������������������� //initial value of s parameter for 1D ridges in; y direction (relative amplitude of step), for details see html manual and; references; � �Double_t�; fSyCalc;����������������������� //calculated value of s parameter for 1D ridges; in y direction; �� Double_t�; fSyErr;������������������������ //error value of s parameter for 1D ridges in y; direction; �� Double_t�; fBxInit;����������������������� //initial value of b parameter for 1D ridges in; x direction (slope), for details see html manual and references; �� Double_t�; fBxCalc;����������������������� //calculated value of b parameter for 1D ridges; in x direction; �� Double_t�; fBxErr;����������������� �������//error value of b parameter for 1D ridges in x; direction; �� Double_t�; fByInit;����������������������� //initial value of b parameter for 1D ridges in; y direction (slope), for details see html manual and references; �� Double",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:46598,Availability,error,error,46598,"or details see html manual and; references; �� Double_t �fTyCalc;�����������������������; calculated value of t parameter for 1D ridges in y direction; �� Double_t�; fTyErr;������������������������ //error value of t parameter for 1D ridges in y; direction; �� Double_t�; fSxInit;����������������������� //initial value of s parameter for 1D ridges in; x direction (relative amplitude of step), for details see html manual and; references; �� Double_t�; fSxCalc;����������������������� //calculated value of s parameter for 1D ridges; in x direction; �� Double_t� fSxErr;������ ������������������//error; value of s parameter for 1D ridges in x direction; �� Double_t�; fSyInit;����������������������� //initial value of s parameter for 1D ridges in; y direction (relative amplitude of step), for details see html manual and; references; � �Double_t�; fSyCalc;����������������������� //calculated value of s parameter for 1D ridges; in y direction; �� Double_t�; fSyErr;������������������������ //error value of s parameter for 1D ridges in y; direction; �� Double_t�; fBxInit;����������������������� //initial value of b parameter for 1D ridges in; x direction (slope), for details see html manual and references; �� Double_t�; fBxCalc;����������������������� //calculated value of b parameter for 1D ridges; in x direction; �� Double_t�; fBxErr;����������������� �������//error value of b parameter for 1D ridges in x; direction; �� Double_t�; fByInit;����������������������� //initial value of b parameter for 1D ridges in; y direction (slope), for details see html manual and references; �� Double_t�; fByCalc;������������ �����������//calculated value of b parameter for 1D ridges; in y direction; �� Double_t�; fByErr;������������������������ //error value of b parameter for 1D ridges in y; direction; �� Double_t�; fA0Init;����������������������� //initial value of background a0 parameter(backgroud; is estimated as a0+ax*x+ay*y); �� Double_t�; fA0Calc;����������������������� //calculated v",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:46975,Availability,error,error,46975,"plitude of step), for details see html manual and; references; �� Double_t�; fSxCalc;����������������������� //calculated value of s parameter for 1D ridges; in x direction; �� Double_t� fSxErr;������ ������������������//error; value of s parameter for 1D ridges in x direction; �� Double_t�; fSyInit;����������������������� //initial value of s parameter for 1D ridges in; y direction (relative amplitude of step), for details see html manual and; references; � �Double_t�; fSyCalc;����������������������� //calculated value of s parameter for 1D ridges; in y direction; �� Double_t�; fSyErr;������������������������ //error value of s parameter for 1D ridges in y; direction; �� Double_t�; fBxInit;����������������������� //initial value of b parameter for 1D ridges in; x direction (slope), for details see html manual and references; �� Double_t�; fBxCalc;����������������������� //calculated value of b parameter for 1D ridges; in x direction; �� Double_t�; fBxErr;����������������� �������//error value of b parameter for 1D ridges in x; direction; �� Double_t�; fByInit;����������������������� //initial value of b parameter for 1D ridges in; y direction (slope), for details see html manual and references; �� Double_t�; fByCalc;������������ �����������//calculated value of b parameter for 1D ridges; in y direction; �� Double_t�; fByErr;������������������������ //error value of b parameter for 1D ridges in y; direction; �� Double_t�; fA0Init;����������������������� //initial value of background a0 parameter(backgroud; is estimated as a0+ax*x+ay*y); �� Double_t�; fA0Calc;����������������������� //calculated value of background a0 parameter; �� Double_t�; fA0Err;������������������������ //error value of background a0 parameter; �� Double_t� fAxInit;��������; ���������������//initial value of background ax parameter(backgroud is; estimated as a0+ax*x+ay*y); �� Double_t�; fAxCalc;����������������������� //calculated value of background ax parameter; �� Double_t�; fAxErr;�����������",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:47352,Availability,error,error,47352,"irection (relative amplitude of step), for details see html manual and; references; � �Double_t�; fSyCalc;����������������������� //calculated value of s parameter for 1D ridges; in y direction; �� Double_t�; fSyErr;������������������������ //error value of s parameter for 1D ridges in y; direction; �� Double_t�; fBxInit;����������������������� //initial value of b parameter for 1D ridges in; x direction (slope), for details see html manual and references; �� Double_t�; fBxCalc;����������������������� //calculated value of b parameter for 1D ridges; in x direction; �� Double_t�; fBxErr;����������������� �������//error value of b parameter for 1D ridges in x; direction; �� Double_t�; fByInit;����������������������� //initial value of b parameter for 1D ridges in; y direction (slope), for details see html manual and references; �� Double_t�; fByCalc;������������ �����������//calculated value of b parameter for 1D ridges; in y direction; �� Double_t�; fByErr;������������������������ //error value of b parameter for 1D ridges in y; direction; �� Double_t�; fA0Init;����������������������� //initial value of background a0 parameter(backgroud; is estimated as a0+ax*x+ay*y); �� Double_t�; fA0Calc;����������������������� //calculated value of background a0 parameter; �� Double_t�; fA0Err;������������������������ //error value of background a0 parameter; �� Double_t� fAxInit;��������; ���������������//initial value of background ax parameter(backgroud is; estimated as a0+ax*x+ay*y); �� Double_t�; fAxCalc;����������������������� //calculated value of background ax parameter; �� Double_t�; fAxErr;������������������������ //error value of background ax parameter; �� Double_t�; fAyInit;����������������������� //initial value of background ay; parameter(backgroud is estimated as a0+ax*x+ay*y); �� Double_t�; fAyCalc;����������������������� //calculated value of background ay parameter; �� Double_t� fAyErr;������������������������; error value of background ay parameter�� ; �� Bool_",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:47682,Availability,error,error,47682,"ted value of s parameter for 1D ridges; in y direction; �� Double_t�; fSyErr;������������������������ //error value of s parameter for 1D ridges in y; direction; �� Double_t�; fBxInit;����������������������� //initial value of b parameter for 1D ridges in; x direction (slope), for details see html manual and references; �� Double_t�; fBxCalc;����������������������� //calculated value of b parameter for 1D ridges; in x direction; �� Double_t�; fBxErr;����������������� �������//error value of b parameter for 1D ridges in x; direction; �� Double_t�; fByInit;����������������������� //initial value of b parameter for 1D ridges in; y direction (slope), for details see html manual and references; �� Double_t�; fByCalc;������������ �����������//calculated value of b parameter for 1D ridges; in y direction; �� Double_t�; fByErr;������������������������ //error value of b parameter for 1D ridges in y; direction; �� Double_t�; fA0Init;����������������������� //initial value of background a0 parameter(backgroud; is estimated as a0+ax*x+ay*y); �� Double_t�; fA0Calc;����������������������� //calculated value of background a0 parameter; �� Double_t�; fA0Err;������������������������ //error value of background a0 parameter; �� Double_t� fAxInit;��������; ���������������//initial value of background ax parameter(backgroud is; estimated as a0+ax*x+ay*y); �� Double_t�; fAxCalc;����������������������� //calculated value of background ax parameter; �� Double_t�; fAxErr;������������������������ //error value of background ax parameter; �� Double_t�; fAyInit;����������������������� //initial value of background ay; parameter(backgroud is estimated as a0+ax*x+ay*y); �� Double_t�; fAyCalc;����������������������� //calculated value of background ay parameter; �� Double_t� fAyErr;������������������������; error value of background ay parameter�� ; �� Bool_t��; *fFixPositionX;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate x positions of 2D peaks (not fit).",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:47994,Availability,error,error,47994,"ted value of s parameter for 1D ridges; in y direction; �� Double_t�; fSyErr;������������������������ //error value of s parameter for 1D ridges in y; direction; �� Double_t�; fBxInit;����������������������� //initial value of b parameter for 1D ridges in; x direction (slope), for details see html manual and references; �� Double_t�; fBxCalc;����������������������� //calculated value of b parameter for 1D ridges; in x direction; �� Double_t�; fBxErr;����������������� �������//error value of b parameter for 1D ridges in x; direction; �� Double_t�; fByInit;����������������������� //initial value of b parameter for 1D ridges in; y direction (slope), for details see html manual and references; �� Double_t�; fByCalc;������������ �����������//calculated value of b parameter for 1D ridges; in y direction; �� Double_t�; fByErr;������������������������ //error value of b parameter for 1D ridges in y; direction; �� Double_t�; fA0Init;����������������������� //initial value of background a0 parameter(backgroud; is estimated as a0+ax*x+ay*y); �� Double_t�; fA0Calc;����������������������� //calculated value of background a0 parameter; �� Double_t�; fA0Err;������������������������ //error value of background a0 parameter; �� Double_t� fAxInit;��������; ���������������//initial value of background ax parameter(backgroud is; estimated as a0+ax*x+ay*y); �� Double_t�; fAxCalc;����������������������� //calculated value of background ax parameter; �� Double_t�; fAxErr;������������������������ //error value of background ax parameter; �� Double_t�; fAyInit;����������������������� //initial value of background ay; parameter(backgroud is estimated as a0+ax*x+ay*y); �� Double_t�; fAyCalc;����������������������� //calculated value of background ay parameter; �� Double_t� fAyErr;������������������������; error value of background ay parameter�� ; �� Bool_t��; *fFixPositionX;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate x positions of 2D peaks (not fit).",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:48304,Availability,error,error,48304,"ted value of s parameter for 1D ridges; in y direction; �� Double_t�; fSyErr;������������������������ //error value of s parameter for 1D ridges in y; direction; �� Double_t�; fBxInit;����������������������� //initial value of b parameter for 1D ridges in; x direction (slope), for details see html manual and references; �� Double_t�; fBxCalc;����������������������� //calculated value of b parameter for 1D ridges; in x direction; �� Double_t�; fBxErr;����������������� �������//error value of b parameter for 1D ridges in x; direction; �� Double_t�; fByInit;����������������������� //initial value of b parameter for 1D ridges in; y direction (slope), for details see html manual and references; �� Double_t�; fByCalc;������������ �����������//calculated value of b parameter for 1D ridges; in y direction; �� Double_t�; fByErr;������������������������ //error value of b parameter for 1D ridges in y; direction; �� Double_t�; fA0Init;����������������������� //initial value of background a0 parameter(backgroud; is estimated as a0+ax*x+ay*y); �� Double_t�; fA0Calc;����������������������� //calculated value of background a0 parameter; �� Double_t�; fA0Err;������������������������ //error value of background a0 parameter; �� Double_t� fAxInit;��������; ���������������//initial value of background ax parameter(backgroud is; estimated as a0+ax*x+ay*y); �� Double_t�; fAxCalc;����������������������� //calculated value of background ax parameter; �� Double_t�; fAxErr;������������������������ //error value of background ax parameter; �� Double_t�; fAyInit;����������������������� //initial value of background ay; parameter(backgroud is estimated as a0+ax*x+ay*y); �� Double_t�; fAyCalc;����������������������� //calculated value of background ay parameter; �� Double_t� fAyErr;������������������������; error value of background ay parameter�� ; �� Bool_t��; *fFixPositionX;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate x positions of 2D peaks (not fit).",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:69835,Availability,error,errors,69835,"it); -sInitX - initial value of sx parameter; -fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); -sInitY - initial value of sy parameter; -fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit). void GetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1). GETTER FUNCTION. This function gets the positions of fitted 2D peaks and 1D ridges; -positionX - gets vector of x positions of 2D peaks; -positionY - gets vector of y positions of 2D peaks; -positionX1 - gets vector of x positions of 1D ridges; -positionY1 - gets vector of y positions of 1D ridges. void GetPositionErrors(Double_t* positionErrorsX, Double_t* positionErrorsY, Double_t* positionErrorsX1, Double_t* positionErrorsY1). GETTER FUNCTION. This function gets the errors of positions of fitted 2D peaks and 1D ridges; -positionErrorsX - gets vector of errors of x positions of 2D peaks; -positionErrorsY - gets vector of errors of y positions of 2D peaks; -positionErrorsX1 - gets vector of errors of x positions of 1D ridges; -positionErrorsY1 - gets vector of errors of y positions of 1D ridges. void GetAmplitudes(Double_t* amplitudes, Double_t* amplitudesX1, Double_t* amplitudesY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudes - gets vector of amplitudes of 2D peaks; -amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; -amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction. void GetAmplitudeErrors(Double_t* amplitudeErrors, Double_t* amplitudeErrorsX1, Double_t* amplitudeErrorsY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t*",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:69923,Availability,error,errors,69923,"it); -sInitX - initial value of sx parameter; -fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); -sInitY - initial value of sy parameter; -fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit). void GetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1). GETTER FUNCTION. This function gets the positions of fitted 2D peaks and 1D ridges; -positionX - gets vector of x positions of 2D peaks; -positionY - gets vector of y positions of 2D peaks; -positionX1 - gets vector of x positions of 1D ridges; -positionY1 - gets vector of y positions of 1D ridges. void GetPositionErrors(Double_t* positionErrorsX, Double_t* positionErrorsY, Double_t* positionErrorsX1, Double_t* positionErrorsY1). GETTER FUNCTION. This function gets the errors of positions of fitted 2D peaks and 1D ridges; -positionErrorsX - gets vector of errors of x positions of 2D peaks; -positionErrorsY - gets vector of errors of y positions of 2D peaks; -positionErrorsX1 - gets vector of errors of x positions of 1D ridges; -positionErrorsY1 - gets vector of errors of y positions of 1D ridges. void GetAmplitudes(Double_t* amplitudes, Double_t* amplitudesX1, Double_t* amplitudesY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudes - gets vector of amplitudes of 2D peaks; -amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; -amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction. void GetAmplitudeErrors(Double_t* amplitudeErrors, Double_t* amplitudeErrorsX1, Double_t* amplitudeErrorsY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t*",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:69992,Availability,error,errors,69992,"it); -sInitX - initial value of sx parameter; -fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); -sInitY - initial value of sy parameter; -fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit). void GetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1). GETTER FUNCTION. This function gets the positions of fitted 2D peaks and 1D ridges; -positionX - gets vector of x positions of 2D peaks; -positionY - gets vector of y positions of 2D peaks; -positionX1 - gets vector of x positions of 1D ridges; -positionY1 - gets vector of y positions of 1D ridges. void GetPositionErrors(Double_t* positionErrorsX, Double_t* positionErrorsY, Double_t* positionErrorsX1, Double_t* positionErrorsY1). GETTER FUNCTION. This function gets the errors of positions of fitted 2D peaks and 1D ridges; -positionErrorsX - gets vector of errors of x positions of 2D peaks; -positionErrorsY - gets vector of errors of y positions of 2D peaks; -positionErrorsX1 - gets vector of errors of x positions of 1D ridges; -positionErrorsY1 - gets vector of errors of y positions of 1D ridges. void GetAmplitudes(Double_t* amplitudes, Double_t* amplitudesX1, Double_t* amplitudesY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudes - gets vector of amplitudes of 2D peaks; -amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; -amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction. void GetAmplitudeErrors(Double_t* amplitudeErrors, Double_t* amplitudeErrorsX1, Double_t* amplitudeErrorsY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t*",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:70062,Availability,error,errors,70062,"it); -sInitX - initial value of sx parameter; -fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); -sInitY - initial value of sy parameter; -fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit). void GetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1). GETTER FUNCTION. This function gets the positions of fitted 2D peaks and 1D ridges; -positionX - gets vector of x positions of 2D peaks; -positionY - gets vector of y positions of 2D peaks; -positionX1 - gets vector of x positions of 1D ridges; -positionY1 - gets vector of y positions of 1D ridges. void GetPositionErrors(Double_t* positionErrorsX, Double_t* positionErrorsY, Double_t* positionErrorsX1, Double_t* positionErrorsY1). GETTER FUNCTION. This function gets the errors of positions of fitted 2D peaks and 1D ridges; -positionErrorsX - gets vector of errors of x positions of 2D peaks; -positionErrorsY - gets vector of errors of y positions of 2D peaks; -positionErrorsX1 - gets vector of errors of x positions of 1D ridges; -positionErrorsY1 - gets vector of errors of y positions of 1D ridges. void GetAmplitudes(Double_t* amplitudes, Double_t* amplitudesX1, Double_t* amplitudesY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudes - gets vector of amplitudes of 2D peaks; -amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; -amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction. void GetAmplitudeErrors(Double_t* amplitudeErrors, Double_t* amplitudeErrorsX1, Double_t* amplitudeErrorsY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t*",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:70133,Availability,error,errors,70133,"it); -sInitX - initial value of sx parameter; -fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); -sInitY - initial value of sy parameter; -fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit). void GetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1). GETTER FUNCTION. This function gets the positions of fitted 2D peaks and 1D ridges; -positionX - gets vector of x positions of 2D peaks; -positionY - gets vector of y positions of 2D peaks; -positionX1 - gets vector of x positions of 1D ridges; -positionY1 - gets vector of y positions of 1D ridges. void GetPositionErrors(Double_t* positionErrorsX, Double_t* positionErrorsY, Double_t* positionErrorsX1, Double_t* positionErrorsY1). GETTER FUNCTION. This function gets the errors of positions of fitted 2D peaks and 1D ridges; -positionErrorsX - gets vector of errors of x positions of 2D peaks; -positionErrorsY - gets vector of errors of y positions of 2D peaks; -positionErrorsX1 - gets vector of errors of x positions of 1D ridges; -positionErrorsY1 - gets vector of errors of y positions of 1D ridges. void GetAmplitudes(Double_t* amplitudes, Double_t* amplitudesX1, Double_t* amplitudesY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudes - gets vector of amplitudes of 2D peaks; -amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; -amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction. void GetAmplitudeErrors(Double_t* amplitudeErrors, Double_t* amplitudeErrorsX1, Double_t* amplitudeErrorsY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t*",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:70779,Availability,error,errors,70779,"is function gets the errors of positions of fitted 2D peaks and 1D ridges; -positionErrorsX - gets vector of errors of x positions of 2D peaks; -positionErrorsY - gets vector of errors of y positions of 2D peaks; -positionErrorsX1 - gets vector of errors of x positions of 1D ridges; -positionErrorsY1 - gets vector of errors of y positions of 1D ridges. void GetAmplitudes(Double_t* amplitudes, Double_t* amplitudesX1, Double_t* amplitudesY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudes - gets vector of amplitudes of 2D peaks; -amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; -amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction. void GetAmplitudeErrors(Double_t* amplitudeErrors, Double_t* amplitudeErrorsX1, Double_t* amplitudeErrorsY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t* volumes). GETTER FUNCTION. This function gets the volumes of fitted 2D peaks; -volumes - gets vector of volumes of 2D peaks. void GetVolumeErrors(Double_t* volumeErrors). GETTER FUNCTION. This function gets errors of the volumes of fitted 2D peaks; -volumeErrors - gets vector of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTE",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:70846,Availability,error,errors,70846,"is function gets the errors of positions of fitted 2D peaks and 1D ridges; -positionErrorsX - gets vector of errors of x positions of 2D peaks; -positionErrorsY - gets vector of errors of y positions of 2D peaks; -positionErrorsX1 - gets vector of errors of x positions of 1D ridges; -positionErrorsY1 - gets vector of errors of y positions of 1D ridges. void GetAmplitudes(Double_t* amplitudes, Double_t* amplitudesX1, Double_t* amplitudesY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudes - gets vector of amplitudes of 2D peaks; -amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; -amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction. void GetAmplitudeErrors(Double_t* amplitudeErrors, Double_t* amplitudeErrorsX1, Double_t* amplitudeErrorsY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t* volumes). GETTER FUNCTION. This function gets the volumes of fitted 2D peaks; -volumes - gets vector of volumes of 2D peaks. void GetVolumeErrors(Double_t* volumeErrors). GETTER FUNCTION. This function gets errors of the volumes of fitted 2D peaks; -volumeErrors - gets vector of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTE",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:70929,Availability,error,errors,70929,"is function gets the errors of positions of fitted 2D peaks and 1D ridges; -positionErrorsX - gets vector of errors of x positions of 2D peaks; -positionErrorsY - gets vector of errors of y positions of 2D peaks; -positionErrorsX1 - gets vector of errors of x positions of 1D ridges; -positionErrorsY1 - gets vector of errors of y positions of 1D ridges. void GetAmplitudes(Double_t* amplitudes, Double_t* amplitudesX1, Double_t* amplitudesY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudes - gets vector of amplitudes of 2D peaks; -amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; -amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction. void GetAmplitudeErrors(Double_t* amplitudeErrors, Double_t* amplitudeErrorsX1, Double_t* amplitudeErrorsY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t* volumes). GETTER FUNCTION. This function gets the volumes of fitted 2D peaks; -volumes - gets vector of volumes of 2D peaks. void GetVolumeErrors(Double_t* volumeErrors). GETTER FUNCTION. This function gets errors of the volumes of fitted 2D peaks; -volumeErrors - gets vector of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTE",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:71198,Availability,error,errors,71198,"le_t* amplitudesY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudes - gets vector of amplitudes of 2D peaks; -amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; -amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction. void GetAmplitudeErrors(Double_t* amplitudeErrors, Double_t* amplitudeErrorsX1, Double_t* amplitudeErrorsY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t* volumes). GETTER FUNCTION. This function gets the volumes of fitted 2D peaks; -volumes - gets vector of volumes of 2D peaks. void GetVolumeErrors(Double_t* volumeErrors). GETTER FUNCTION. This function gets errors of the volumes of fitted 2D peaks; -volumeErrors - gets vector of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTER FUNCTION. This function gets the ro parameter and its error; -ro - gets the fitted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error valu",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:71279,Availability,error,errors,71279,"le_t* amplitudesY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudes - gets vector of amplitudes of 2D peaks; -amplitudesX1 - gets vector of amplitudes of 1D ridges in x direction; -amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction. void GetAmplitudeErrors(Double_t* amplitudeErrors, Double_t* amplitudeErrorsX1, Double_t* amplitudeErrorsY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t* volumes). GETTER FUNCTION. This function gets the volumes of fitted 2D peaks; -volumes - gets vector of volumes of 2D peaks. void GetVolumeErrors(Double_t* volumeErrors). GETTER FUNCTION. This function gets errors of the volumes of fitted 2D peaks; -volumeErrors - gets vector of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTER FUNCTION. This function gets the ro parameter and its error; -ro - gets the fitted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error valu",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:71420,Availability,error,error,71420," in x direction; -amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction. void GetAmplitudeErrors(Double_t* amplitudeErrors, Double_t* amplitudeErrorsX1, Double_t* amplitudeErrorsY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t* volumes). GETTER FUNCTION. This function gets the volumes of fitted 2D peaks; -volumes - gets vector of volumes of 2D peaks. void GetVolumeErrors(Double_t* volumeErrors). GETTER FUNCTION. This function gets errors of the volumes of fitted 2D peaks; -volumeErrors - gets vector of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTER FUNCTION. This function gets the ro parameter and its error; -ro - gets the fitted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParame",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:71499,Availability,error,error,71499," in x direction; -amplitudesY1 - gets vector of amplitudes of 1D ridges in y direction. void GetAmplitudeErrors(Double_t* amplitudeErrors, Double_t* amplitudeErrorsX1, Double_t* amplitudeErrorsY1). GETTER FUNCTION. This function gets the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t* volumes). GETTER FUNCTION. This function gets the volumes of fitted 2D peaks; -volumes - gets vector of volumes of 2D peaks. void GetVolumeErrors(Double_t* volumeErrors). GETTER FUNCTION. This function gets errors of the volumes of fitted 2D peaks; -volumeErrors - gets vector of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTER FUNCTION. This function gets the ro parameter and its error; -ro - gets the fitted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParame",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:71654,Availability,error,error,71654,"the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t* volumes). GETTER FUNCTION. This function gets the volumes of fitted 2D peaks; -volumes - gets vector of volumes of 2D peaks. void GetVolumeErrors(Double_t* volumeErrors). GETTER FUNCTION. This function gets errors of the volumes of fitted 2D peaks; -volumeErrors - gets vector of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTER FUNCTION. This function gets the ro parameter and its error; -ro - gets the fitted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:71733,Availability,error,error,71733,"the amplitudes of fitted 2D peaks and 1D ridges; -amplitudeErrors - gets vector of amplitudes errors of 2D peaks; -amplitudeErrorsX1 - gets vector of amplitudes errors of 1D ridges in x direction; -amplitudesErrorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t* volumes). GETTER FUNCTION. This function gets the volumes of fitted 2D peaks; -volumes - gets vector of volumes of 2D peaks. void GetVolumeErrors(Double_t* volumeErrors). GETTER FUNCTION. This function gets errors of the volumes of fitted 2D peaks; -volumeErrors - gets vector of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTER FUNCTION. This function gets the ro parameter and its error; -ro - gets the fitted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:71871,Availability,error,error,71871,"rorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t* volumes). GETTER FUNCTION. This function gets the volumes of fitted 2D peaks; -volumes - gets vector of volumes of 2D peaks. void GetVolumeErrors(Double_t* volumeErrors). GETTER FUNCTION. This function gets errors of the volumes of fitted 2D peaks; -volumeErrors - gets vector of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTER FUNCTION. This function gets the ro parameter and its error; -ro - gets the fitted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:71937,Availability,error,error,71937,"rorY1 - gets vector of amplitudes errors of 1D ridges in y direction. void GetVolumes(Double_t* volumes). GETTER FUNCTION. This function gets the volumes of fitted 2D peaks; -volumes - gets vector of volumes of 2D peaks. void GetVolumeErrors(Double_t* volumeErrors). GETTER FUNCTION. This function gets errors of the volumes of fitted 2D peaks; -volumeErrors - gets vector of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTER FUNCTION. This function gets the ro parameter and its error; -ro - gets the fitted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:72161,Availability,error,errors,72161,"of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTER FUNCTION. This function gets the ro parameter and its error; -ro - gets the fitted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parame",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:72228,Availability,error,error,72228,"of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTER FUNCTION. This function gets the ro parameter and its error; -ro - gets the fitted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parame",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:72316,Availability,error,error,72316,"of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTER FUNCTION. This function gets the ro parameter and its error; -ro - gets the fitted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parame",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:72404,Availability,error,error,72404,"of volumes errors of 2D peaks. void GetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX). GETTER FUNCTION. This function gets the sigma x parameter and its error; -sigmaX - gets the fitted value of sigma x parameter; -sigmaErrX - gets error value of sigma x parameter. void GetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY). GETTER FUNCTION. This function gets the sigma y parameter and its error; -sigmaY - gets the fitted value of sigma y parameter; -sigmaErrY - gets error value of sigma y parameter. void GetRo(Double_t& ro, Double_t& roErr). GETTER FUNCTION. This function gets the ro parameter and its error; -ro - gets the fitted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parame",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:72775,Availability,error,errors,72775,"ted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parameter; -sxyErr - gets error value of sxy parameter; -sx - gets the fitted value of sx parameter; -sxErr - gets error value of sx parameter; -sy - gets the fitted value of sy parameter; -syErr - gets error value of sy parameter. TSpectrum2Fit(const TSpectrum2Fit& ). Double_t GetChi() const; {return fChi;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:72845,Availability,error,error,72845,"ted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parameter; -sxyErr - gets error value of sxy parameter; -sx - gets the fitted value of sx parameter; -sxErr - gets error value of sx parameter; -sy - gets the fitted value of sy parameter; -syErr - gets error value of sy parameter. TSpectrum2Fit(const TSpectrum2Fit& ). Double_t GetChi() const; {return fChi;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:72934,Availability,error,error,72934,"ted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parameter; -sxyErr - gets error value of sxy parameter; -sx - gets the fitted value of sx parameter; -sxErr - gets error value of sx parameter; -sy - gets the fitted value of sy parameter; -syErr - gets error value of sy parameter. TSpectrum2Fit(const TSpectrum2Fit& ). Double_t GetChi() const; {return fChi;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:73022,Availability,error,error,73022,"ted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parameter; -sxyErr - gets error value of sxy parameter; -sx - gets the fitted value of sx parameter; -sxErr - gets error value of sx parameter; -sy - gets the fitted value of sy parameter; -syErr - gets error value of sy parameter. TSpectrum2Fit(const TSpectrum2Fit& ). Double_t GetChi() const; {return fChi;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:73110,Availability,error,error,73110,"ted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parameter; -sxyErr - gets error value of sxy parameter; -sx - gets the fitted value of sx parameter; -sxErr - gets error value of sx parameter; -sy - gets the fitted value of sy parameter; -syErr - gets error value of sy parameter. TSpectrum2Fit(const TSpectrum2Fit& ). Double_t GetChi() const; {return fChi;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:73198,Availability,error,error,73198,"ted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parameter; -sxyErr - gets error value of sxy parameter; -sx - gets the fitted value of sx parameter; -sxErr - gets error value of sx parameter; -sy - gets the fitted value of sy parameter; -syErr - gets error value of sy parameter. TSpectrum2Fit(const TSpectrum2Fit& ). Double_t GetChi() const; {return fChi;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:73289,Availability,error,error,73289,"ted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parameter; -sxyErr - gets error value of sxy parameter; -sx - gets the fitted value of sx parameter; -sxErr - gets error value of sx parameter; -sy - gets the fitted value of sy parameter; -syErr - gets error value of sy parameter. TSpectrum2Fit(const TSpectrum2Fit& ). Double_t GetChi() const; {return fChi;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:73378,Availability,error,error,73378,"ted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parameter; -sxyErr - gets error value of sxy parameter; -sx - gets the fitted value of sx parameter; -sxErr - gets error value of sx parameter; -sy - gets the fitted value of sy parameter; -syErr - gets error value of sy parameter. TSpectrum2Fit(const TSpectrum2Fit& ). Double_t GetChi() const; {return fChi;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:73466,Availability,error,error,73466,"ted value of ro parameter; -roErr - gets error value of ro parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& ax, Double_t& axErr, Double_t& ay, Double_t& ayErr). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -ax - gets the fitted value of ax parameter; -axErr - gets error value of ax parameter; -ay - gets the fitted value of ay parameter; -ayErr - gets error value of ay parameter. void GetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -txy - gets the fitted value of txy parameter; -txyErr - gets error value of txy parameter; -tx - gets the fitted value of tx parameter; -txErr - gets error value of tx parameter; -ty - gets the fitted value of ty parameter; -tyErr - gets error value of ty parameter; -bx - gets the fitted value of bx parameter; -bxErr - gets error value of bx parameter; -by - gets the fitted value of by parameter; -byErr - gets error value of by parameter; -sxy - gets the fitted value of sxy parameter; -sxyErr - gets error value of sxy parameter; -sx - gets the fitted value of sx parameter; -sxErr - gets error value of sx parameter; -sy - gets the fitted value of sy parameter; -syErr - gets error value of sy parameter. TSpectrum2Fit(const TSpectrum2Fit& ). Double_t GetChi() const; {return fChi;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:766,Energy Efficiency,Efficient,Efficient,766,". TSpectrum2Fit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum2Fit. class TSpectrum2Fit: public TNamed. THIS CLASS CONTAINS ADVANCED TWO-DIMENSIONAL SPECTRA; FITTING FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:; [1] M. Morhac et al.: Efficient fitting algorithms applied to; analysis of coincidence gamma-ray spectra. Computer Physics; Communications, Vol 172/1 (2005) pp. 19-41. [2] M. Morhac et al.: Study of fitting algorithms applied to; simultaneous analysis of large number of peaks in gamma-ray spectra.; Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003. Function Members (Methods); public:. virtual~TSpectrum2Fit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:6196,Energy Efficiency,power,power,6196,"size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSpectrum2Fit&operator=(const TSpectrum2Fit&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFitParameters(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetPeakParameters(Double_t sigmaX, Bool_t fixSigmaX, Double_t sigmaY, Bool_t fixSigmaY, Double_t ro, Bool_t fixRo, const Double_t* positionInitX, const Bool_t* fixPositionX, const Double_t* positionInitY, const Bool_t* fixPositionY, const Double_t* positionInitX1, const Bool_t* fixPositionX1, const Double_t* positionInitY1, const Bool_t* fixPositionY1, const Double_t* ampInit, const Bool_t* fixAmp, const Double_t* ampInitX1, const Bool_t* fixAmpX1, const Double_t* ampInitY1, const Bool_t* fixAmpY1); voidSetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy); virtual voidTNamed::Set",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:23242,Energy Efficiency,allocate,allocates,23242,"eter for 2D peaks (relative amplitude of tail), for details see html manual and references; Double_tfTyCalccalculated value of t parameter for 1D ridges in y direction; Double_tfTyErrerror value of t parameter for 1D ridges in y direction; Double_tfTyInitinitial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references; Double_t*fVolume[fNPeaks] array of calculated volumes of 2D peaks, output parameters; Double_t*fVolumeErr[fNPeaks] array of volumes errors of 2D peaks, output parameters; Int_tfXmaxlast fitted channel in x direction; Int_tfXminfirst fitted channel in x direction; Int_tfYmaxlast fitted channel in y direction; Int_tfYminfirst fitted channel in y direction. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrum2Fit. Function documentation; TSpectrum2Fit(); default constructor. TSpectrum2Fit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks contains the two-dimensional symmetrical Gaussian two one-dimensional; symmetrical Gaussian ridges as well as nonsymmetrical terms and background. ~TSpectrum2Fit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Ourpowl(Double_t a, Int_t pw); power function. void StiefelInversion(Double_t** a, Int_t size). AUXILIARY FUNCTION. This function calculates solution of the system of linear equations.; The matrix a should have a dimension size*(size+4); The calling function should fill in the matrix, the column size should; contain vector y (right side of the system of equations).",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:23914,Energy Efficiency,power,power,23914,"nt_tfYmaxlast fitted channel in y direction; Int_tfYminfirst fitted channel in y direction. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrum2Fit. Function documentation; TSpectrum2Fit(); default constructor. TSpectrum2Fit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks contains the two-dimensional symmetrical Gaussian two one-dimensional; symmetrical Gaussian ridges as well as nonsymmetrical terms and background. ~TSpectrum2Fit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Ourpowl(Double_t a, Int_t pw); power function. void StiefelInversion(Double_t** a, Int_t size). AUXILIARY FUNCTION. This function calculates solution of the system of linear equations.; The matrix a should have a dimension size*(size+4); The calling function should fill in the matrix, the column size should; contain vector y (right side of the system of equations). The result is; placed into size+1 column of the matrix.; according to sigma of peaks.; Function parameters:; -a-matrix with dimension size*(size+4) //; -size-number of rows of the matrix. Double_t Shape2(Int_t numOfFittedPeaks, Double_t x, Double_t y, const Double_t* parameter, Double_t sigmax, Double_t sigmay, Double_t ro, Double_t a0, Double_t ax, Double_t ay, Double_t txy, Double_t sxy, Double_t tx, Double_t ty, Double_t sx, Double_t sy, Double_t bx, Double_t by). AUXILIARY FUNCTION. This function calculates 2D peaks shape function (see manual); Function parameters:; -numOfFittedPeaks-number of fitted peaks; -x-channel in x-dimension; -y-c",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:64138,Energy Efficiency,power,power,64138,"aks; amplitudes, input parameters��������� ; ����� AmpXY[i] = 0;; �� }; �� //filling in the initial; estimates of the input parameters; �� TSpectrumFit2 *pfit=new; TSpectrumFit2(nfound);; ��; pfit->SetFitParameters(xmin, xmax-1, ymin, ymax-1, 1000, 0.1,; pfit->kFitOptimChiCounts, pfit->kFitAlphaHalving, pfit->kFitPower2,; pfit->kFitTaylorOrderFirst);�� ; ��; pfit->SetPeakParameters(2, kFALSE, 2, kFALSE, 0, kTRUE, PosX, (Bool_t *); FixPosX, PosY, (Bool_t *) FixPosY, PosX, (Bool_t *) FixPosX, PosY, (Bool_t *); FixPosY, Amp, (Bool_t *) FixAmp, AmpXY, (Bool_t *) FixAmp, AmpXY, (Bool_t *); FixAmp);����� ; ��; pfit->SetBackgroundParameters(0, kFALSE, 0, kTRUE, 0, kTRUE);�� ; ��; pfit->FitStiefel(source);; ��� for (i = 0; i <; nbinsx; i++){; ���� for (j = 0; j <; nbinsy; j++){; ���� ���������� ��search->SetBinContent(i; + 1, j + 1,source[i][j]);; �� ������������ �}; �� }�� ; ��; search->Draw(""SURF"");; }. void SetFitParameters(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor). SETTER FUNCTION. This function sets the following fitting parameters:; -xmin, xmax, ymin, ymax - fitting region; -numberIterations - # of desired iterations in the fit; -alpha - convergence coefficient, it should be positive number and <=1, for details see references; -statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; -alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; -power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParam",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:64791,Energy Efficiency,power,power,64791,"(Bool_t *) FixPosY, PosX, (Bool_t *) FixPosX, PosY, (Bool_t *); FixPosY, Amp, (Bool_t *) FixAmp, AmpXY, (Bool_t *) FixAmp, AmpXY, (Bool_t *); FixAmp);����� ; ��; pfit->SetBackgroundParameters(0, kFALSE, 0, kTRUE, 0, kTRUE);�� ; ��; pfit->FitStiefel(source);; ��� for (i = 0; i <; nbinsx; i++){; ���� for (j = 0; j <; nbinsy; j++){; ���� ���������� ��search->SetBinContent(i; + 1, j + 1,source[i][j]);; �� ������������ �}; �� }�� ; ��; search->Draw(""SURF"");; }. void SetFitParameters(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor). SETTER FUNCTION. This function sets the following fitting parameters:; -xmin, xmax, ymin, ymax - fitting region; -numberIterations - # of desired iterations in the fit; -alpha - convergence coefficient, it should be positive number and <=1, for details see references; -statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; -alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; -power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParameters(Double_t sigmaX, Bool_t fixSigmaX, Double_t sigmaY, Bool_t fixSigmaY, Double_t ro, Bool_t fixRo, const Double_t* positionInitX, const Bool_t* fixPositionX, const Double_t* positionInitY, const Bool_t* fixPositionY, const Double_t* positionInitX1, const Bool_t* fixPositionX1, const Double_t* positionInitY1, const Bool_t* fixPositionY1, const Double_t* ampInit, const Bool_t* fixAmp, const Double_t* ampInitX1, const Bool_t* fixAmpX1, const Doub",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:119,Modifiability,inherit,inheritance,119,". TSpectrum2Fit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum2Fit. class TSpectrum2Fit: public TNamed. THIS CLASS CONTAINS ADVANCED TWO-DIMENSIONAL SPECTRA; FITTING FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:; [1] M. Morhac et al.: Efficient fitting algorithms applied to; analysis of coincidence gamma-ray spectra. Computer Physics; Communications, Vol 172/1 (2005) pp. 19-41. [2] M. Morhac et al.: Study of fitting algorithms applied to; simultaneous analysis of large number of peaks in gamma-ray spectra.; Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003. Function Members (Methods); public:. virtual~TSpectrum2Fit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:4242,Modifiability,Inherit,InheritsFrom,4242,"ble_t* positionErrorsX, Double_t* positionErrorsY, Double_t* positionErrorsX1, Double_t* positionErrorsY1); voidGetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1); voidGetRo(Double_t& ro, Double_t& roErr); voidGetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX); voidGetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY); voidGetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidGetVolumeErrors(Double_t* volumeErrors); voidGetVolumes(Double_t* volumes); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:4308,Modifiability,Inherit,InheritsFrom,4308,"ionErrorsX1, Double_t* positionErrorsY1); voidGetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1); voidGetRo(Double_t& ro, Double_t& roErr); voidGetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX); voidGetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY); voidGetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidGetVolumeErrors(Double_t* volumeErrors); voidGetVolumes(Double_t* volumes); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSpectrum2Fit&operator=(const TSpectrum2Fit&); virtua",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:23007,Modifiability,Inherit,Inheritance,23007," (relative amplitude of tail), for details see html manual and references; Double_tfTxyCalccalculated value of t parameter for 2D peaks; Double_tfTxyErrerror value of t parameter for 2D peaks; Double_tfTxyInitinitial value of t parameter for 2D peaks (relative amplitude of tail), for details see html manual and references; Double_tfTyCalccalculated value of t parameter for 1D ridges in y direction; Double_tfTyErrerror value of t parameter for 1D ridges in y direction; Double_tfTyInitinitial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references; Double_t*fVolume[fNPeaks] array of calculated volumes of 2D peaks, output parameters; Double_t*fVolumeErr[fNPeaks] array of volumes errors of 2D peaks, output parameters; Int_tfXmaxlast fitted channel in x direction; Int_tfXminfirst fitted channel in x direction; Int_tfYmaxlast fitted channel in y direction; Int_tfYminfirst fitted channel in y direction. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrum2Fit. Function documentation; TSpectrum2Fit(); default constructor. TSpectrum2Fit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks contains the two-dimensional symmetrical Gaussian two one-dimensional; symmetrical Gaussian ridges as well as nonsymmetrical terms and background. ~TSpectrum2Fit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Ourpowl(Double_t a, Int_t pw); power function. void StiefelInversion(Double_t** a, Int_t size). AUXILIARY FUNCTION. This function cal",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:23339,Modifiability,variab,variables,23339,"eter for 2D peaks (relative amplitude of tail), for details see html manual and references; Double_tfTyCalccalculated value of t parameter for 1D ridges in y direction; Double_tfTyErrerror value of t parameter for 1D ridges in y direction; Double_tfTyInitinitial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references; Double_t*fVolume[fNPeaks] array of calculated volumes of 2D peaks, output parameters; Double_t*fVolumeErr[fNPeaks] array of volumes errors of 2D peaks, output parameters; Int_tfXmaxlast fitted channel in x direction; Int_tfXminfirst fitted channel in x direction; Int_tfYmaxlast fitted channel in y direction; Int_tfYminfirst fitted channel in y direction. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrum2Fit. Function documentation; TSpectrum2Fit(); default constructor. TSpectrum2Fit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks contains the two-dimensional symmetrical Gaussian two one-dimensional; symmetrical Gaussian ridges as well as nonsymmetrical terms and background. ~TSpectrum2Fit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Ourpowl(Double_t a, Int_t pw); power function. void StiefelInversion(Double_t** a, Int_t size). AUXILIARY FUNCTION. This function calculates solution of the system of linear equations.; The matrix a should have a dimension size*(size+4); The calling function should fill in the matrix, the column size should; contain vector y (right side of the system of equations).",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:23395,Modifiability,variab,variables,23395,"n; Double_tfTyErrerror value of t parameter for 1D ridges in y direction; Double_tfTyInitinitial value of t parameter for 1D ridges in y direction (relative amplitude of tail), for details see html manual and references; Double_t*fVolume[fNPeaks] array of calculated volumes of 2D peaks, output parameters; Double_t*fVolumeErr[fNPeaks] array of volumes errors of 2D peaks, output parameters; Int_tfXmaxlast fitted channel in x direction; Int_tfXminfirst fitted channel in x direction; Int_tfYmaxlast fitted channel in y direction; Int_tfYminfirst fitted channel in y direction. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrum2Fit. Function documentation; TSpectrum2Fit(); default constructor. TSpectrum2Fit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks contains the two-dimensional symmetrical Gaussian two one-dimensional; symmetrical Gaussian ridges as well as nonsymmetrical terms and background. ~TSpectrum2Fit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Ourpowl(Double_t a, Int_t pw); power function. void StiefelInversion(Double_t** a, Int_t size). AUXILIARY FUNCTION. This function calculates solution of the system of linear equations.; The matrix a should have a dimension size*(size+4); The calling function should fill in the matrix, the column size should; contain vector y (right side of the system of equations). The result is; placed into size+1 column of the matrix.; according to sigma of peaks.; Function parameters:; -a-matrix with dimension size*(size+4) //; -size-number",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:38968,Modifiability,variab,variables,38968,"eters [2],; [5]. ;  ;  ; Function:; void TSpectrumFit2::FitAwmi(float **fSource); �; This function fits the source; spectrum using AWMI algorithm. The calling program should fill in input; parameters of the TSpectrumFit2 class using a set of TSpectrumFit2 setters. The; fitted parameters are written into the class and fitted data are written into; source spectrum. ;  ;  ; Parameter:; ������� fSource-pointer to; the matrix of source spectrum����������������� ;  ;  ; Member variables; of� TSpectrumFit2 class:; �� Int_t����; fNPeaks;����������������������� //number of peaks present in fit, input; parameter, it should be > 0; �� Int_t����; fNumberIterations;������������� //number of iterations in fitting procedure,; input parameter, it should be > 0; �� Int_t����; fXmin;������������������������� //first fitted channel in x direction; �� Int_t����; fXmax;�������������������� �����//last fitted channel in x direction; �� Int_t����; fYmin;������������������������� //first fitted channel in y direction; �� Int_t����; fYmax;������������������������� //last fitted channel in y direction; �� Int_t����; fStatisticType;���������������� //type of statistics, possible values; kFitOptimChiCounts (chi square statistics with counts as weighting; coefficients), kFitOptimChiFuncValues (chi square statistics with function; values as weighting coefficients),kFitOptimMaxLikelihood; �� Int_t���� fAlphaOptim;�������������������; optimization of convergence algorithm, possible values kFitAlphaHalving,; kFitAlphaOptimal; �� Int_t����; fPower;������������������������ //possible values kFitPower2,4,6,8,10,12, for; details see references. It applies only for Awmi fitting function.; �� Int_t����; fFitTaylor;�������������������� //order of Taylor expansion, possible values; kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting; function.; �� Double_t�; fAlpha;������������������������ //convergence coefficient, input parameter, it; should be positive number and <=1, for detai",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:39919,Performance,optimiz,optimization,39919,"eters [2],; [5]. ;  ;  ; Function:; void TSpectrumFit2::FitAwmi(float **fSource); �; This function fits the source; spectrum using AWMI algorithm. The calling program should fill in input; parameters of the TSpectrumFit2 class using a set of TSpectrumFit2 setters. The; fitted parameters are written into the class and fitted data are written into; source spectrum. ;  ;  ; Parameter:; ������� fSource-pointer to; the matrix of source spectrum����������������� ;  ;  ; Member variables; of� TSpectrumFit2 class:; �� Int_t����; fNPeaks;����������������������� //number of peaks present in fit, input; parameter, it should be > 0; �� Int_t����; fNumberIterations;������������� //number of iterations in fitting procedure,; input parameter, it should be > 0; �� Int_t����; fXmin;������������������������� //first fitted channel in x direction; �� Int_t����; fXmax;�������������������� �����//last fitted channel in x direction; �� Int_t����; fYmin;������������������������� //first fitted channel in y direction; �� Int_t����; fYmax;������������������������� //last fitted channel in y direction; �� Int_t����; fStatisticType;���������������� //type of statistics, possible values; kFitOptimChiCounts (chi square statistics with counts as weighting; coefficients), kFitOptimChiFuncValues (chi square statistics with function; values as weighting coefficients),kFitOptimMaxLikelihood; �� Int_t���� fAlphaOptim;�������������������; optimization of convergence algorithm, possible values kFitAlphaHalving,; kFitAlphaOptimal; �� Int_t����; fPower;������������������������ //possible values kFitPower2,4,6,8,10,12, for; details see references. It applies only for Awmi fitting function.; �� Int_t����; fFitTaylor;�������������������� //order of Taylor expansion, possible values; kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting; function.; �� Double_t�; fAlpha;������������������������ //convergence coefficient, input parameter, it; should be positive number and <=1, for detai",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:64699,Performance,optimiz,optimization,64699,"(Bool_t *) FixPosY, PosX, (Bool_t *) FixPosX, PosY, (Bool_t *); FixPosY, Amp, (Bool_t *) FixAmp, AmpXY, (Bool_t *) FixAmp, AmpXY, (Bool_t *); FixAmp);����� ; ��; pfit->SetBackgroundParameters(0, kFALSE, 0, kTRUE, 0, kTRUE);�� ; ��; pfit->FitStiefel(source);; ��� for (i = 0; i <; nbinsx; i++){; ���� for (j = 0; j <; nbinsy; j++){; ���� ���������� ��search->SetBinContent(i; + 1, j + 1,source[i][j]);; �� ������������ �}; �� }�� ; ��; search->Draw(""SURF"");; }. void SetFitParameters(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor). SETTER FUNCTION. This function sets the following fitting parameters:; -xmin, xmax, ymin, ymax - fitting region; -numberIterations - # of desired iterations in the fit; -alpha - convergence coefficient, it should be positive number and <=1, for details see references; -statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; -alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; -power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParameters(Double_t sigmaX, Bool_t fixSigmaX, Double_t sigmaY, Bool_t fixSigmaY, Double_t ro, Bool_t fixRo, const Double_t* positionInitX, const Bool_t* fixPositionX, const Double_t* positionInitY, const Bool_t* fixPositionY, const Double_t* positionInitX1, const Bool_t* fixPositionX1, const Double_t* positionInitY1, const Bool_t* fixPositionY1, const Double_t* ampInit, const Bool_t* fixAmp, const Double_t* ampInitX1, const Bool_t* fixAmpX1, const Doub",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:4132,Security,Hash,Hash,4132,"nst; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidGetPositionErrors(Double_t* positionErrorsX, Double_t* positionErrorsY, Double_t* positionErrorsX1, Double_t* positionErrorsY1); voidGetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1); voidGetRo(Double_t& ro, Double_t& roErr); voidGetSigmaX(Double_t& sigmaX, Double_t& sigmaErrX); voidGetSigmaY(Double_t& sigmaY, Double_t& sigmaErrY); voidGetTailParameters(Double_t& txy, Double_t& txyErr, Double_t& tx, Double_t& txErr, Double_t& ty, Double_t& tyErr, Double_t& bx, Double_t& bxErr, Double_t& by, Double_t& byErr, Double_t& sxy, Double_t& sxyErr, Double_t& sx, Double_t& sxErr, Double_t& sy, Double_t& syErr); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidGetVolumeErrors(Double_t* volumeErrors); voidGetVolumes(Double_t* volumes); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:7557,Testability,Test,TestBit,7557,"oidTObject::SetDtorOnly(void* obj); voidSetFitParameters(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetPeakParameters(Double_t sigmaX, Bool_t fixSigmaX, Double_t sigmaY, Bool_t fixSigmaY, Double_t ro, Bool_t fixRo, const Double_t* positionInitX, const Bool_t* fixPositionX, const Double_t* positionInitY, const Bool_t* fixPositionY, const Double_t* positionInitX1, const Bool_t* fixPositionX1, const Double_t* positionInitY1, const Bool_t* fixPositionY1, const Double_t* ampInit, const Bool_t* fixAmp, const Double_t* ampInitX1, const Bool_t* fixAmpX1, const Double_t* ampInitY1, const Bool_t* fixAmpY1); voidSetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpectrum2Fit(); TSpectrum2Fit(Int_t numberPeaks); TSpectrum2Fit(const TSpectrum2Fit&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:7596,Testability,Test,TestBits,7596,"oidTObject::SetDtorOnly(void* obj); voidSetFitParameters(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetPeakParameters(Double_t sigmaX, Bool_t fixSigmaX, Double_t sigmaY, Bool_t fixSigmaY, Double_t ro, Bool_t fixRo, const Double_t* positionInitX, const Bool_t* fixPositionX, const Double_t* positionInitY, const Bool_t* fixPositionY, const Double_t* positionInitX1, const Bool_t* fixPositionX1, const Double_t* positionInitY1, const Bool_t* fixPositionY1, const Double_t* ampInit, const Bool_t* fixAmp, const Double_t* ampInitX1, const Bool_t* fixAmpX1, const Double_t* ampInitY1, const Bool_t* fixAmpY1); voidSetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpectrum2Fit(); TSpectrum2Fit(Int_t numberPeaks); TSpectrum2Fit(const TSpectrum2Fit&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:16003,Testability,log,logical,16003,"tfAyInitinitial value of background ay parameter(backgroud is estimated as a0+ax*x+ay*y); Double_tfBxCalccalculated value of b parameter for 1D ridges in x direction; Double_tfBxErrerror value of b parameter for 1D ridges in x direction; Double_tfBxInitinitial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references; Double_tfByCalccalculated value of b parameter for 1D ridges in y direction; Double_tfByErrerror value of b parameter for 1D ridges in y direction; Double_tfByInitinitial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references; Double_tfChihere the fitting functions return resulting chi square; Int_tfFitTaylororder of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.; Bool_tfFixA0logical value of a0 parameter, which allows to fix the parameter (not to fit).; Bool_t*fFixAmp[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixAmpX1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; Bool_t*fFixAmpY1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional; Bool_tfFixAxlogical value of ax parameter, which allows to fix the parameter (not to fit).; Bool_tfFixAylogical value of ay parameter, which allows to fix the parameter (not to fit).; Bool_tfFixBxlogical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixBylogical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Bool_t*fFixPositionX[fNPeaks] array of logical values which allow to fix appropriate x positio",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:16172,Testability,log,logical,16172,"s in x direction; Double_tfBxErrerror value of b parameter for 1D ridges in x direction; Double_tfBxInitinitial value of b parameter for 1D ridges in x direction (slope), for details see html manual and references; Double_tfByCalccalculated value of b parameter for 1D ridges in y direction; Double_tfByErrerror value of b parameter for 1D ridges in y direction; Double_tfByInitinitial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references; Double_tfChihere the fitting functions return resulting chi square; Int_tfFitTaylororder of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.; Bool_tfFixA0logical value of a0 parameter, which allows to fix the parameter (not to fit).; Bool_t*fFixAmp[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixAmpX1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; Bool_t*fFixAmpY1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional; Bool_tfFixAxlogical value of ax parameter, which allows to fix the parameter (not to fit).; Bool_tfFixAylogical value of ay parameter, which allows to fix the parameter (not to fit).; Bool_tfFixBxlogical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixBylogical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Bool_t*fFixPositionX[fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionX1[fNPeaks] array of logical values which allow to ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:16357,Testability,log,logical,16357,"e html manual and references; Double_tfByCalccalculated value of b parameter for 1D ridges in y direction; Double_tfByErrerror value of b parameter for 1D ridges in y direction; Double_tfByInitinitial value of b parameter for 1D ridges in y direction (slope), for details see html manual and references; Double_tfChihere the fitting functions return resulting chi square; Int_tfFitTaylororder of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.; Bool_tfFixA0logical value of a0 parameter, which allows to fix the parameter (not to fit).; Bool_t*fFixAmp[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixAmpX1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; Bool_t*fFixAmpY1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional; Bool_tfFixAxlogical value of ax parameter, which allows to fix the parameter (not to fit).; Bool_tfFixAylogical value of ay parameter, which allows to fix the parameter (not to fit).; Bool_tfFixBxlogical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixBylogical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Bool_t*fFixPositionX[fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionX1[fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional; Bool_t*fFixPositionY[fNPeaks] array of logical values which allow to fix approp",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:16970,Testability,log,logical,16970,"aks] array of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixAmpX1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; Bool_t*fFixAmpY1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional; Bool_tfFixAxlogical value of ax parameter, which allows to fix the parameter (not to fit).; Bool_tfFixAylogical value of ay parameter, which allows to fix the parameter (not to fit).; Bool_tfFixBxlogical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixBylogical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Bool_t*fFixPositionX[fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionX1[fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional; Bool_t*fFixPositionY[fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionY1[fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional; Bool_tfFixRological value of correlation coefficient, which allows to fix the parameter (not to fit).; Bool_tfFixSigmaXlogical value of sigma x parameter, which allows to fix the parameter (not to fit).; Bool_tfFixSigmaYlogical value of sigma y parameter, which allows to fix the parameter (not to fit).; Bool_tfFixSxlogical value of s parameter for 1D ridges",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:17145,Testability,log,logical,17145,"ool_t*fFixAmpX1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; Bool_t*fFixAmpY1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional; Bool_tfFixAxlogical value of ax parameter, which allows to fix the parameter (not to fit).; Bool_tfFixAylogical value of ay parameter, which allows to fix the parameter (not to fit).; Bool_tfFixBxlogical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixBylogical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Bool_t*fFixPositionX[fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionX1[fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional; Bool_t*fFixPositionY[fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionY1[fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional; Bool_tfFixRological value of correlation coefficient, which allows to fix the parameter (not to fit).; Bool_tfFixSigmaXlogical value of sigma x parameter, which allows to fix the parameter (not to fit).; Bool_tfFixSigmaYlogical value of sigma y parameter, which allows to fix the parameter (not to fit).; Bool_tfFixSxlogical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixSxylogical value of s parameter for 2D peaks, which allows to fix the pa",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:17320,Testability,log,logical,17320,"ctional; Bool_t*fFixAmpY1[fNPeaks] array of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional; Bool_tfFixAxlogical value of ax parameter, which allows to fix the parameter (not to fit).; Bool_tfFixAylogical value of ay parameter, which allows to fix the parameter (not to fit).; Bool_tfFixBxlogical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixBylogical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Bool_t*fFixPositionX[fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionX1[fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional; Bool_t*fFixPositionY[fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionY1[fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional; Bool_tfFixRological value of correlation coefficient, which allows to fix the parameter (not to fit).; Bool_tfFixSigmaXlogical value of sigma x parameter, which allows to fix the parameter (not to fit).; Bool_tfFixSigmaYlogical value of sigma y parameter, which allows to fix the parameter (not to fit).; Bool_tfFixSxlogical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixSxylogical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit).; Bool_tfFixSylogical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Bool_tfFixTxlogical value of t p",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:17495,Testability,log,logical,17495,"imated functional; Bool_tfFixAxlogical value of ax parameter, which allows to fix the parameter (not to fit).; Bool_tfFixAylogical value of ay parameter, which allows to fix the parameter (not to fit).; Bool_tfFixBxlogical value of b parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixBylogical value of b parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Bool_t*fFixPositionX[fNPeaks] array of logical values which allow to fix appropriate x positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionX1[fNPeaks] array of logical values which allow to fix appropriate x positions of 1D ridges (not fit). However they are present in the estimated functional; Bool_t*fFixPositionY[fNPeaks] array of logical values which allow to fix appropriate y positions of 2D peaks (not fit). However they are present in the estimated functional; Bool_t*fFixPositionY1[fNPeaks] array of logical values which allow to fix appropriate y positions of 1D ridges (not fit). However they are present in the estimated functional; Bool_tfFixRological value of correlation coefficient, which allows to fix the parameter (not to fit).; Bool_tfFixSigmaXlogical value of sigma x parameter, which allows to fix the parameter (not to fit).; Bool_tfFixSigmaYlogical value of sigma y parameter, which allows to fix the parameter (not to fit).; Bool_tfFixSxlogical value of s parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixSxylogical value of s parameter for 2D peaks, which allows to fix the parameter (not to fit).; Bool_tfFixSylogical value of s parameter for 1D ridges in y direction, which allows to fix the parameter (not to fit).; Bool_tfFixTxlogical value of t parameter for 1D ridges in x direction, which allows to fix the parameter (not to fit).; Bool_tfFixTxylogical value of t parameter for 2D peaks, which allows to fix the paramet",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:48414,Testability,log,logical,48414,"ted value of s parameter for 1D ridges; in y direction; �� Double_t�; fSyErr;������������������������ //error value of s parameter for 1D ridges in y; direction; �� Double_t�; fBxInit;����������������������� //initial value of b parameter for 1D ridges in; x direction (slope), for details see html manual and references; �� Double_t�; fBxCalc;����������������������� //calculated value of b parameter for 1D ridges; in x direction; �� Double_t�; fBxErr;����������������� �������//error value of b parameter for 1D ridges in x; direction; �� Double_t�; fByInit;����������������������� //initial value of b parameter for 1D ridges in; y direction (slope), for details see html manual and references; �� Double_t�; fByCalc;������������ �����������//calculated value of b parameter for 1D ridges; in y direction; �� Double_t�; fByErr;������������������������ //error value of b parameter for 1D ridges in y; direction; �� Double_t�; fA0Init;����������������������� //initial value of background a0 parameter(backgroud; is estimated as a0+ax*x+ay*y); �� Double_t�; fA0Calc;����������������������� //calculated value of background a0 parameter; �� Double_t�; fA0Err;������������������������ //error value of background a0 parameter; �� Double_t� fAxInit;��������; ���������������//initial value of background ax parameter(backgroud is; estimated as a0+ax*x+ay*y); �� Double_t�; fAxCalc;����������������������� //calculated value of background ax parameter; �� Double_t�; fAxErr;������������������������ //error value of background ax parameter; �� Double_t�; fAyInit;����������������������� //initial value of background ay; parameter(backgroud is estimated as a0+ax*x+ay*y); �� Double_t�; fAyCalc;����������������������� //calculated value of background ay parameter; �� Double_t� fAyErr;������������������������; error value of background ay parameter�� ; �� Bool_t��; *fFixPositionX;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate x positions of 2D peaks (not fit).",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:48618,Testability,log,logical,48618,ed value of background a0 parameter; �� Double_t�; fA0Err;������������������������ //error value of background a0 parameter; �� Double_t� fAxInit;��������; ���������������//initial value of background ax parameter(backgroud is; estimated as a0+ax*x+ay*y); �� Double_t�; fAxCalc;����������������������� //calculated value of background ax parameter; �� Double_t�; fAxErr;������������������������ //error value of background ax parameter; �� Double_t�; fAyInit;����������������������� //initial value of background ay; parameter(backgroud is estimated as a0+ax*x+ay*y); �� Double_t�; fAyCalc;����������������������� //calculated value of background ay parameter; �� Double_t� fAyErr;������������������������; error value of background ay parameter�� ; �� Bool_t��; *fFixPositionX;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate x positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionX1;������������ ����//[fNPeaks] array of logical values which; allow to fix appropriate x positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY1;���������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmp;����������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmpX1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in x direction (not fit).; However they are present in the estimated functional; �� Bool_t�,MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:48822,Testability,log,logical,48822,parameter(backgroud is; estimated as a0+ax*x+ay*y); �� Double_t�; fAxCalc;����������������������� //calculated value of background ax parameter; �� Double_t�; fAxErr;������������������������ //error value of background ax parameter; �� Double_t�; fAyInit;����������������������� //initial value of background ay; parameter(backgroud is estimated as a0+ax*x+ay*y); �� Double_t�; fAyCalc;����������������������� //calculated value of background ay parameter; �� Double_t� fAyErr;������������������������; error value of background ay parameter�� ; �� Bool_t��; *fFixPositionX;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate x positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionX1;������������ ����//[fNPeaks] array of logical values which; allow to fix appropriate x positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY1;���������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmp;����������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmpX1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in x direction (not fit).; However they are present in the estimated functional; �� Bool_t��; *fFixAmpY1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in y direction (not fit).; However they are present in the estimated function,MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:49027,Testability,log,logical,49027,"of background ax parameter; �� Double_t�; fAyInit;����������������������� //initial value of background ay; parameter(backgroud is estimated as a0+ax*x+ay*y); �� Double_t�; fAyCalc;����������������������� //calculated value of background ay parameter; �� Double_t� fAyErr;������������������������; error value of background ay parameter�� ; �� Bool_t��; *fFixPositionX;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate x positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionX1;������������ ����//[fNPeaks] array of logical values which; allow to fix appropriate x positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY1;���������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmp;����������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmpX1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in x direction (not fit).; However they are present in the estimated functional; �� Bool_t��; *fFixAmpY1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in y direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of si",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:49232,Testability,log,logical,49232," //calculated value of background ay parameter; �� Double_t� fAyErr;������������������������; error value of background ay parameter�� ; �� Bool_t��; *fFixPositionX;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate x positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionX1;������������ ����//[fNPeaks] array of logical values which; allow to fix appropriate x positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY1;���������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmp;����������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmpX1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in x direction (not fit).; However they are present in the estimated functional; �� Bool_t��; *fFixAmpY1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in y direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit)",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:49435,Testability,log,logical,49435," values which; allow to fix appropriate x positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY;����������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionX1;������������ ����//[fNPeaks] array of logical values which; allow to fix appropriate x positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY1;���������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmp;����������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmpX1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in x direction (not fit).; However they are present in the estimated functional; �� Bool_t��; *fFixAmpY1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in y direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:49654,Testability,log,logical,49654,"allow to fix appropriate y positions of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionX1;������������ ����//[fNPeaks] array of logical values which; allow to fix appropriate x positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY1;���������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmp;����������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmpX1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in x direction (not fit).; However they are present in the estimated functional; �� Bool_t��; *fFixAmpY1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in y direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (no",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:49854,Testability,log,logical,49854,"allow to fix appropriate x positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixPositionY1;���������������� //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmp;����������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmpX1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in x direction (not fit).; However they are present in the estimated functional; �� Bool_t��; *fFixAmpY1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in y direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;�������������",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:49988,Testability,log,logical,49988," //[fNPeaks] array of logical values which; allow to fix appropriate y positions of 1D ridges (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmp;����������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmpX1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in x direction (not fit).; However they are present in the estimated functional; �� Bool_t��; *fFixAmpY1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in y direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;�����������������",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:50121,Testability,log,logical,50121," estimated functional; �� Bool_t��; *fFixAmp;����������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmpX1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in x direction (not fit).; However they are present in the estimated functional; �� Bool_t��; *fFixAmpY1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in y direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixB",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:50262,Testability,log,logical,50262,"litudes of 2D peaks (not fit). However they are; present in the estimated functional; �� Bool_t��; *fFixAmpX1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in x direction (not fit).; However they are present in the estimated functional; �� Bool_t��; *fFixAmpY1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in y direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixBx;�� ����������������������//logical; value of b parameter for 1D ridges in x direction, which allows to fix the; parameter (not to fit).; ��",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:50403,Testability,log,logical,50403,"s] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in x direction (not fit).; However they are present in the estimated functional; �� Bool_t��; *fFixAmpY1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in y direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixBx;�� ����������������������//logical; value of b parameter for 1D ridges in x direction, which allows to fix the; parameter (not to fit).; �� Bool_t���; fFixBy;������������������������ //logical value of b parameter for 1D ridges in; y direction, which allows to fix the parameter (",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:50544,Testability,log,logical,50544,"ed functional; �� Bool_t��; *fFixAmpY1;��������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes of 1D ridges in y direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixBx;�� ����������������������//logical; value of b parameter for 1D ridges in x direction, which allows to fix the; parameter (not to fit).; �� Bool_t���; fFixBy;������������������������ //logical value of b parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixA0;������������������������ //logical value of a0 parameter, which allows; to fix the parameter (not to fit).; �� Boo",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:50701,Testability,log,logical,50701," direction (not fit).; However they are present in the estimated functional; �� Bool_t���; fFixSigmaX;��������� �����������//logical value of sigma x parameter, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixBx;�� ����������������������//logical; value of b parameter for 1D ridges in x direction, which allows to fix the; parameter (not to fit).; �� Bool_t���; fFixBy;������������������������ //logical value of b parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixA0;������������������������ //logical value of a0 parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAx;������������������������ //logical value of ax parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAy;�������������",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:50858,Testability,log,logical,50858,"er, which; allows to fix the parameter (not to fit).; �� Bool_t���; fFixSigmaY;�������������������� //logical value of sigma y parameter, which; allows to fix the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixBx;�� ����������������������//logical; value of b parameter for 1D ridges in x direction, which allows to fix the; parameter (not to fit).; �� Bool_t���; fFixBy;������������������������ //logical value of b parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixA0;������������������������ //logical value of a0 parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAx;������������������������ //logical value of ax parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAy;������������������������ //logical value of ay parameter, which allows; to fix the parameter (not to fit).; �; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976)",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:51015,Testability,log,logical,51015,"x the parameter (not to fit).; �� Bool_t��� fFixRo;������� �����������������//logical; value of correlation coefficient, which allows to fix the parameter (not to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixBx;�� ����������������������//logical; value of b parameter for 1D ridges in x direction, which allows to fix the; parameter (not to fit).; �� Bool_t���; fFixBy;������������������������ //logical value of b parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixA0;������������������������ //logical value of a0 parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAx;������������������������ //logical value of ax parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAy;������������������������ //logical value of ay parameter, which allows; to fix the parameter (not to fit).; �; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976) 525.; [2] I. A. Slavic: Nonlinear; least-squares fitting without matrix inversion applied to complex Gaussian; spectra analysis. NIM 134 (1976) 285-289.; [3",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:51171,Testability,log,logical,51171,"ot to; fit).; �� Bool_t���; fFixTxy;����������������������� //logical value of t parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixBx;�� ����������������������//logical; value of b parameter for 1D ridges in x direction, which allows to fix the; parameter (not to fit).; �� Bool_t���; fFixBy;������������������������ //logical value of b parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixA0;������������������������ //logical value of a0 parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAx;������������������������ //logical value of ax parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAy;������������������������ //logical value of ay parameter, which allows; to fix the parameter (not to fit).; �; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976) 525.; [2] I. A. Slavic: Nonlinear; least-squares fitting without matrix inversion applied to complex Gaussian; spectra analysis. NIM 134 (1976) 285-289.; [3] T. Awaya: A new method for; curve fitting to the data with low statistics not using chi-square method. NIM; 165 (1979) 317-323.; [4] T. Hauschild, M. Jents",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:51329,Testability,log,logical,51329," Bool_t���; fFixSxy;����������������������� //logical value of s parameter for 2D peaks,; which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixBx;�� ����������������������//logical; value of b parameter for 1D ridges in x direction, which allows to fix the; parameter (not to fit).; �� Bool_t���; fFixBy;������������������������ //logical value of b parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixA0;������������������������ //logical value of a0 parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAx;������������������������ //logical value of ax parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAy;������������������������ //logical value of ay parameter, which allows; to fix the parameter (not to fit).; �; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976) 525.; [2] I. A. Slavic: Nonlinear; least-squares fitting without matrix inversion applied to complex Gaussian; spectra analysis. NIM 134 (1976) 285-289.; [3] T. Awaya: A new method for; curve fitting to the data with low statistics not using chi-square method. NIM; 165 (1979) 317-323.; [4] T. Hauschild, M. Jentschel:; Comparison of maximum likelihood estimation and chi-square statistics applied; to counting experiments. NIM A 457 (2001) 384-401.; �[5]� M. Morh�č,� J",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:51486,Testability,log,logical,51486,"ool_t���; fFixTx;������������������������ //logical value of t parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixBx;�� ����������������������//logical; value of b parameter for 1D ridges in x direction, which allows to fix the; parameter (not to fit).; �� Bool_t���; fFixBy;������������������������ //logical value of b parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixA0;������������������������ //logical value of a0 parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAx;������������������������ //logical value of ax parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAy;������������������������ //logical value of ay parameter, which allows; to fix the parameter (not to fit).; �; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976) 525.; [2] I. A. Slavic: Nonlinear; least-squares fitting without matrix inversion applied to complex Gaussian; spectra analysis. NIM 134 (1976) 285-289.; [3] T. Awaya: A new method for; curve fitting to the data with low statistics not using chi-square method. NIM; 165 (1979) 317-323.; [4] T. Hauschild, M. Jentschel:; Comparison of maximum likelihood estimation and chi-square statistics applied; to counting experiments. NIM A 457 (2001) 384-401.; �[5]� M. Morh�č,� J.; Kliman,� M. Jandel,� Ľ. Krupa, V. Matou�ek: Study of fitting algorithms; applied to simultaneous analysis of large number of peaks in -ray s",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:51615,Testability,log,logical,51615,"arameter (not to fit).; �� Bool_t���; fFixTy;������������������������ //logical value of t parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixBx;�� ����������������������//logical; value of b parameter for 1D ridges in x direction, which allows to fix the; parameter (not to fit).; �� Bool_t���; fFixBy;������������������������ //logical value of b parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixA0;������������������������ //logical value of a0 parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAx;������������������������ //logical value of ax parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAy;������������������������ //logical value of ay parameter, which allows; to fix the parameter (not to fit).; �; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976) 525.; [2] I. A. Slavic: Nonlinear; least-squares fitting without matrix inversion applied to complex Gaussian; spectra analysis. NIM 134 (1976) 285-289.; [3] T. Awaya: A new method for; curve fitting to the data with low statistics not using chi-square method. NIM; 165 (1979) 317-323.; [4] T. Hauschild, M. Jentschel:; Comparison of maximum likelihood estimation and chi-square statistics applied; to counting experiments. NIM A 457 (2001) 384-401.; �[5]� M. Morh�č,� J.; Kliman,� M. Jandel,� Ľ. Krupa, V. Matou�ek: Study of fitting algorithms; applied to simultaneous analysis of large number of peaks in -ray spectra. Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003; �; Example �� script FitAwmi2.c:. Fig. 1 Original two-dimensiona",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:51744,Testability,log,logical,51744,"n, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSx;������������������������ //logical value of s parameter for 1D ridges in; x direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixSy;������������������������ //logical value of s parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t��� fFixBx;�� ����������������������//logical; value of b parameter for 1D ridges in x direction, which allows to fix the; parameter (not to fit).; �� Bool_t���; fFixBy;������������������������ //logical value of b parameter for 1D ridges in; y direction, which allows to fix the parameter (not to fit).; �� Bool_t���; fFixA0;������������������������ //logical value of a0 parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAx;������������������������ //logical value of ax parameter, which allows; to fix the parameter (not to fit).; �� Bool_t���; fFixAy;������������������������ //logical value of ay parameter, which allows; to fix the parameter (not to fit).; �; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976) 525.; [2] I. A. Slavic: Nonlinear; least-squares fitting without matrix inversion applied to complex Gaussian; spectra analysis. NIM 134 (1976) 285-289.; [3] T. Awaya: A new method for; curve fitting to the data with low statistics not using chi-square method. NIM; 165 (1979) 317-323.; [4] T. Hauschild, M. Jentschel:; Comparison of maximum likelihood estimation and chi-square statistics applied; to counting experiments. NIM A 457 (2001) 384-401.; �[5]� M. Morh�č,� J.; Kliman,� M. Jandel,� Ľ. Krupa, V. Matou�ek: Study of fitting algorithms; applied to simultaneous analysis of large number of peaks in -ray spectra. Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003; �; Example �� script FitAwmi2.c:. Fig. 1 Original two-dimensional; spectrum with found peaks (using TSpectrum2 peak searching function). The; positions of peaks were used as initial estimates i",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:65704,Testability,log,logical,65704,"; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParameters(Double_t sigmaX, Bool_t fixSigmaX, Double_t sigmaY, Bool_t fixSigmaY, Double_t ro, Bool_t fixRo, const Double_t* positionInitX, const Bool_t* fixPositionX, const Double_t* positionInitY, const Bool_t* fixPositionY, const Double_t* positionInitX1, const Bool_t* fixPositionX1, const Double_t* positionInitY1, const Bool_t* fixPositionY1, const Double_t* ampInit, const Bool_t* fixAmp, const Double_t* ampInitX1, const Bool_t* fixAmpX1, const Double_t* ampInitY1, const Bool_t* fixAmpY1). SETTER FUNCTION. This function sets the following fitting parameters of peaks:; -sigmaX - initial value of sigma x parameter; -fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); -sigmaY - initial value of sigma y parameter; -fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); -ro - initial value of ro parameter (correlation coefficient); -fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); -positionInitX - aray of initial values of peaks x positions; -fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; -positionInitY - aray of initial values of peaks y positions; -fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of 2D peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:65847,Testability,log,logical,65847,"; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParameters(Double_t sigmaX, Bool_t fixSigmaX, Double_t sigmaY, Bool_t fixSigmaY, Double_t ro, Bool_t fixRo, const Double_t* positionInitX, const Bool_t* fixPositionX, const Double_t* positionInitY, const Bool_t* fixPositionY, const Double_t* positionInitX1, const Bool_t* fixPositionX1, const Double_t* positionInitY1, const Bool_t* fixPositionY1, const Double_t* ampInit, const Bool_t* fixAmp, const Double_t* ampInitX1, const Bool_t* fixAmpX1, const Double_t* ampInitY1, const Bool_t* fixAmpY1). SETTER FUNCTION. This function sets the following fitting parameters of peaks:; -sigmaX - initial value of sigma x parameter; -fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); -sigmaY - initial value of sigma y parameter; -fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); -ro - initial value of ro parameter (correlation coefficient); -fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); -positionInitX - aray of initial values of peaks x positions; -fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; -positionInitY - aray of initial values of peaks y positions; -fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of 2D peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:66003,Testability,log,logical,66003,"; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParameters(Double_t sigmaX, Bool_t fixSigmaX, Double_t sigmaY, Bool_t fixSigmaY, Double_t ro, Bool_t fixRo, const Double_t* positionInitX, const Bool_t* fixPositionX, const Double_t* positionInitY, const Bool_t* fixPositionY, const Double_t* positionInitX1, const Bool_t* fixPositionX1, const Double_t* positionInitY1, const Bool_t* fixPositionY1, const Double_t* ampInit, const Bool_t* fixAmp, const Double_t* ampInitX1, const Bool_t* fixAmpX1, const Double_t* ampInitY1, const Bool_t* fixAmpY1). SETTER FUNCTION. This function sets the following fitting parameters of peaks:; -sigmaX - initial value of sigma x parameter; -fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); -sigmaY - initial value of sigma y parameter; -fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); -ro - initial value of ro parameter (correlation coefficient); -fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); -positionInitX - aray of initial values of peaks x positions; -fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; -positionInitY - aray of initial values of peaks y positions; -fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of 2D peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:66169,Testability,log,logical,66169,"; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParameters(Double_t sigmaX, Bool_t fixSigmaX, Double_t sigmaY, Bool_t fixSigmaY, Double_t ro, Bool_t fixRo, const Double_t* positionInitX, const Bool_t* fixPositionX, const Double_t* positionInitY, const Bool_t* fixPositionY, const Double_t* positionInitX1, const Bool_t* fixPositionX1, const Double_t* positionInitY1, const Bool_t* fixPositionY1, const Double_t* ampInit, const Bool_t* fixAmp, const Double_t* ampInitX1, const Bool_t* fixAmpX1, const Double_t* ampInitY1, const Bool_t* fixAmpY1). SETTER FUNCTION. This function sets the following fitting parameters of peaks:; -sigmaX - initial value of sigma x parameter; -fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); -sigmaY - initial value of sigma y parameter; -fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); -ro - initial value of ro parameter (correlation coefficient); -fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); -positionInitX - aray of initial values of peaks x positions; -fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; -positionInitY - aray of initial values of peaks y positions; -fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of 2D peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:66380,Testability,log,logical,66380," positionInitY1, const Bool_t* fixPositionY1, const Double_t* ampInit, const Bool_t* fixAmp, const Double_t* ampInitX1, const Bool_t* fixAmpX1, const Double_t* ampInitY1, const Bool_t* fixAmpY1). SETTER FUNCTION. This function sets the following fitting parameters of peaks:; -sigmaX - initial value of sigma x parameter; -fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); -sigmaY - initial value of sigma y parameter; -fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); -ro - initial value of ro parameter (correlation coefficient); -fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); -positionInitX - aray of initial values of peaks x positions; -fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; -positionInitY - aray of initial values of peaks y positions; -fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of 2D peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; -ampInitY1 - aray of initial values of amplitudes of 1D ridges in y direction; -fixAmpY1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy). SETTER FUNCTION. This function sets",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:66580,Testability,log,logical,66580,". This function sets the following fitting parameters of peaks:; -sigmaX - initial value of sigma x parameter; -fixSigmaX - logical value of sigma x parameter, which allows to fix the parameter (not to fit); -sigmaY - initial value of sigma y parameter; -fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); -ro - initial value of ro parameter (correlation coefficient); -fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); -positionInitX - aray of initial values of peaks x positions; -fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; -positionInitY - aray of initial values of peaks y positions; -fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of 2D peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; -ampInitY1 - aray of initial values of amplitudes of 1D ridges in y direction; -fixAmpY1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+ax*x+ay*y); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:66813,Testability,log,logical,66813,"it); -sigmaY - initial value of sigma y parameter; -fixSigmaY - logical value of sigma y parameter, which allows to fix the parameter (not to fit); -ro - initial value of ro parameter (correlation coefficient); -fixRo - logical value of ro parameter, which allows to fix the parameter (not to fit); -positionInitX - aray of initial values of peaks x positions; -fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; -positionInitY - aray of initial values of peaks y positions; -fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of 2D peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; -ampInitY1 - aray of initial values of amplitudes of 1D ridges in y direction; -fixAmpY1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+ax*x+ay*y); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -axInit - initial value of ax parameter; -fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value o",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:67062,Testability,log,logical,67062,", which allows to fix the parameter (not to fit); -positionInitX - aray of initial values of peaks x positions; -fixPositionX - array of logical values which allow to fix appropriate x positions (not fit). However they are present in the estimated functional.; -positionInitY - aray of initial values of peaks y positions; -fixPositionY - array of logical values which allow to fix appropriate y positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of 2D peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; -ampInitY1 - aray of initial values of amplitudes of 1D ridges in y direction; -fixAmpY1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+ax*x+ay*y); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -axInit - initial value of ax parameter; -fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Doubl",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:67511,Testability,log,logical,67511,"h allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; -ampInitY1 - aray of initial values of amplitudes of 1D ridges in y direction; -fixAmpY1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+ax*x+ay*y); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -axInit - initial value of ax parameter; -fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInitXY - initial value of txy parameter; -fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); -tInitX - initial value of tx parameter; -fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); -tInitY - initial value of ty parameter; -fixTy - logical value of ty parameter, which allows to fix the parameter (not to fi",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:67640,Testability,log,logical,67640,"h allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; -ampInitY1 - aray of initial values of amplitudes of 1D ridges in y direction; -fixAmpY1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+ax*x+ay*y); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -axInit - initial value of ax parameter; -fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInitXY - initial value of txy parameter; -fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); -tInitX - initial value of tx parameter; -fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); -tInitY - initial value of ty parameter; -fixTy - logical value of ty parameter, which allows to fix the parameter (not to fi",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:67769,Testability,log,logical,67769,"h allow to fix appropriate amplitudes of 2D peaks (not fit). However they are present in the estimated functional; -ampInitX1 - aray of initial values of amplitudes of 1D ridges in x direction; -fixAmpX1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in x direction (not fit). However they are present in the estimated functional; -ampInitY1 - aray of initial values of amplitudes of 1D ridges in y direction; -fixAmpY1 - aray of logical values which allow to fix appropriate amplitudes of 1D ridges in y direction (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t axInit, Bool_t fixAx, Double_t ayInit, Bool_t fixAy). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+ax*x+ay*y); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -axInit - initial value of ax parameter; -fixAx - logical value of ax parameter, which allows to fix the parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInitXY - initial value of txy parameter; -fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); -tInitX - initial value of tx parameter; -fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); -tInitY - initial value of ty parameter; -fixTy - logical value of ty parameter, which allows to fix the parameter (not to fi",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:68265,Testability,log,logical,68265,"parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInitXY - initial value of txy parameter; -fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); -tInitX - initial value of tx parameter; -fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); -tInitY - initial value of ty parameter; -fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); -bInitX - initial value of bx parameter; -fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); -bInitY - initial value of by parameter; -fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); -sInitXY - initial value of sxy parameter; -fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); -sInitX - initial value of sx parameter; -fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); -sInitY - initial value of sy parameter; -fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit). void GetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1). GETTER FUNCTION. This function gets the positions of fitted 2D peaks and 1D ridges; -positionX - gets vector of x positions of 2D peaks; -positionY - gets vector of y positions of 2D peaks; -positionX1 - gets vector of x positions of 1D ridges; -positionY1 - gets vector of y positions of 1D ridges. void GetPositionErrors(Double_t* po",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:68395,Testability,log,logical,68395,"parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInitXY - initial value of txy parameter; -fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); -tInitX - initial value of tx parameter; -fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); -tInitY - initial value of ty parameter; -fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); -bInitX - initial value of bx parameter; -fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); -bInitY - initial value of by parameter; -fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); -sInitXY - initial value of sxy parameter; -fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); -sInitX - initial value of sx parameter; -fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); -sInitY - initial value of sy parameter; -fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit). void GetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1). GETTER FUNCTION. This function gets the positions of fitted 2D peaks and 1D ridges; -positionX - gets vector of x positions of 2D peaks; -positionY - gets vector of y positions of 2D peaks; -positionX1 - gets vector of x positions of 1D ridges; -positionY1 - gets vector of y positions of 1D ridges. void GetPositionErrors(Double_t* po",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:68524,Testability,log,logical,68524,"parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInitXY - initial value of txy parameter; -fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); -tInitX - initial value of tx parameter; -fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); -tInitY - initial value of ty parameter; -fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); -bInitX - initial value of bx parameter; -fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); -bInitY - initial value of by parameter; -fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); -sInitXY - initial value of sxy parameter; -fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); -sInitX - initial value of sx parameter; -fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); -sInitY - initial value of sy parameter; -fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit). void GetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1). GETTER FUNCTION. This function gets the positions of fitted 2D peaks and 1D ridges; -positionX - gets vector of x positions of 2D peaks; -positionY - gets vector of y positions of 2D peaks; -positionX1 - gets vector of x positions of 1D ridges; -positionY1 - gets vector of y positions of 1D ridges. void GetPositionErrors(Double_t* po",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:68653,Testability,log,logical,68653,"parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInitXY - initial value of txy parameter; -fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); -tInitX - initial value of tx parameter; -fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); -tInitY - initial value of ty parameter; -fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); -bInitX - initial value of bx parameter; -fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); -bInitY - initial value of by parameter; -fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); -sInitXY - initial value of sxy parameter; -fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); -sInitX - initial value of sx parameter; -fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); -sInitY - initial value of sy parameter; -fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit). void GetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1). GETTER FUNCTION. This function gets the positions of fitted 2D peaks and 1D ridges; -positionX - gets vector of x positions of 2D peaks; -positionY - gets vector of y positions of 2D peaks; -positionX1 - gets vector of x positions of 1D ridges; -positionY1 - gets vector of y positions of 1D ridges. void GetPositionErrors(Double_t* po",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:68782,Testability,log,logical,68782,"parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInitXY - initial value of txy parameter; -fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); -tInitX - initial value of tx parameter; -fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); -tInitY - initial value of ty parameter; -fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); -bInitX - initial value of bx parameter; -fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); -bInitY - initial value of by parameter; -fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); -sInitXY - initial value of sxy parameter; -fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); -sInitX - initial value of sx parameter; -fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); -sInitY - initial value of sy parameter; -fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit). void GetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1). GETTER FUNCTION. This function gets the positions of fitted 2D peaks and 1D ridges; -positionX - gets vector of x positions of 2D peaks; -positionY - gets vector of y positions of 2D peaks; -positionX1 - gets vector of x positions of 1D ridges; -positionY1 - gets vector of y positions of 1D ridges. void GetPositionErrors(Double_t* po",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:68914,Testability,log,logical,68914,"parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInitXY - initial value of txy parameter; -fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); -tInitX - initial value of tx parameter; -fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); -tInitY - initial value of ty parameter; -fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); -bInitX - initial value of bx parameter; -fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); -bInitY - initial value of by parameter; -fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); -sInitXY - initial value of sxy parameter; -fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); -sInitX - initial value of sx parameter; -fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); -sInitY - initial value of sy parameter; -fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit). void GetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1). GETTER FUNCTION. This function gets the positions of fitted 2D peaks and 1D ridges; -positionX - gets vector of x positions of 2D peaks; -positionY - gets vector of y positions of 2D peaks; -positionX1 - gets vector of x positions of 1D ridges; -positionY1 - gets vector of y positions of 1D ridges. void GetPositionErrors(Double_t* po",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:69044,Testability,log,logical,69044,"parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInitXY - initial value of txy parameter; -fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); -tInitX - initial value of tx parameter; -fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); -tInitY - initial value of ty parameter; -fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); -bInitX - initial value of bx parameter; -fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); -bInitY - initial value of by parameter; -fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); -sInitXY - initial value of sxy parameter; -fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); -sInitX - initial value of sx parameter; -fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); -sInitY - initial value of sy parameter; -fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit). void GetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1). GETTER FUNCTION. This function gets the positions of fitted 2D peaks and 1D ridges; -positionX - gets vector of x positions of 2D peaks; -positionY - gets vector of y positions of 2D peaks; -positionX1 - gets vector of x positions of 1D ridges; -positionY1 - gets vector of y positions of 1D ridges. void GetPositionErrors(Double_t* po",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:69173,Testability,log,logical,69173,"parameter (not to fit); -ayInit - initial value of ay parameter; -fixAy - logical value of ay parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInitXY, Bool_t fixTxy, Double_t tInitX, Bool_t fixTx, Double_t tInitY, Bool_t fixTy, Double_t bInitX, Bool_t fixBx, Double_t bInitY, Bool_t fixBy, Double_t sInitXY, Bool_t fixSxy, Double_t sInitX, Bool_t fixSx, Double_t sInitY, Bool_t fixSy). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInitXY - initial value of txy parameter; -fixTxy - logical value of txy parameter, which allows to fix the parameter (not to fit); -tInitX - initial value of tx parameter; -fixTx - logical value of tx parameter, which allows to fix the parameter (not to fit); -tInitY - initial value of ty parameter; -fixTy - logical value of ty parameter, which allows to fix the parameter (not to fit); -bInitX - initial value of bx parameter; -fixBx - logical value of bx parameter, which allows to fix the parameter (not to fit); -bInitY - initial value of by parameter; -fixBy - logical value of by parameter, which allows to fix the parameter (not to fit); -sInitXY - initial value of sxy parameter; -fixSxy - logical value of sxy parameter, which allows to fix the parameter (not to fit); -sInitX - initial value of sx parameter; -fixSx - logical value of sx parameter, which allows to fix the parameter (not to fit); -sInitY - initial value of sy parameter; -fixSy - logical value of sy parameter, which allows to fix the parameter (not to fit). void GetPositions(Double_t* positionsX, Double_t* positionsY, Double_t* positionsX1, Double_t* positionsY1). GETTER FUNCTION. This function gets the positions of fitted 2D peaks and 1D ridges; -positionX - gets vector of x positions of 2D peaks; -positionY - gets vector of y positions of 2D peaks; -positionX1 - gets vector of x positions of 1D ridges; -positionY1 - gets vector of y positions of 1D ridges. void GetPositionErrors(Double_t* po",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Fit.html:1405,Usability,Clear,Clear,1405," virtual~TSpectrum2Fit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; ",MatchSource.WIKI,root/html604/TSpectrum2Fit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Fit.html
https://root.cern/root/html604/TSpectrum2Painter.html:1807,Availability,Error,Error,1807," virtual~TSpectrum2Painter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArr",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:1936,Availability,error,error,1936," virtual~TSpectrum2Painter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArr",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:2020,Availability,error,error,2020,"oidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidGetAngles(Int_t& alpha, Int_t& beta, Int_t& view); voidGetBezier(Int_t& bezier); voidGetChanGrid(Int_t& enable, Int_t& color); voidGetChanMarks(Int_t& enable, Int_t& color, Int_t& width, Int_t& height, Int_t& style); voidGetColorAlgorithm(Int_t& colorAlgorithm); voidGetColorIncrements(Double_t& r, Double_t& g, Double_t& b); voidGetContourWidth(Int_t& width); voidGetDisplayMode(Int_t& modeGroup, Int_t& displayMode); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; voidGetLightHeightWeight(Double_t& weight); voidGetLightPosition(Int_t& x, Int_t& y, Int_t& z); virtual const char*TName",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:37593,Availability,avail,available,37593,"ours display mode. void GetLightHeightWeight(Double_t& weight); Gets weight between shading according to fictive light source and according to channels counts:; -weight - weight between shading according to fictive light source and according to channels counts, applies only for kPicture2ModeGroupLightHeight modes group. void GetChanMarks(Int_t& enable, Int_t& color, Int_t& width, Int_t& height, Int_t& style); Gets drawing attributes for channel marks:; -enable - decides whether the channel marks are shown or not; -color - color of channel marks; -width - width of channel marks in pixels; -height - height of channel marks in pixels; -style - style of channel marks (dot, cross, star, rectangle, X, diamond, triangle). void GetChanGrid(Int_t& enable, Int_t& color); This function gets attributes for drawing channel:; -enable - decides whether the channel grid is shown or not; -color - color of channel grid. void PaintSpectrum(TH2* h2, Option_t* option = """", Int_t bs = 1600); This function allows to set all the possible options available in; TSpectrum2Painter and paint ""h2"". TSpectrum2Painter offers a large set of options/attributes. In the; ""option"" parameter each of them can be set to specific values via; ""operators"" in the option itself. for instance on can do:. h2->Draw(""SPEC a(30,30,0)"");. to draw h2 with TSpectrum2Painter using all the default attributes except; the viewing angles. The operators' names are case unsensitive (one can use; ""a"" or ""A""). Operators parameters are seperated by "","". The operators can; be put is any order in the option. Operators must be serparated by "" "".; No "" "" characters should be put in an operator. This help page describes; all the available operators. * * *. The way ""h2"" will be painted is controled with 2 parameters the ""Display; modes groups"" and the ""Display Modes"". ""Display modes groups"" can take the following values:. 0 = Simple - it covers simple display modes using one color only; 1 = Light - in this group the shading is carrie",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:38246,Availability,avail,available,38246,", star, rectangle, X, diamond, triangle). void GetChanGrid(Int_t& enable, Int_t& color); This function gets attributes for drawing channel:; -enable - decides whether the channel grid is shown or not; -color - color of channel grid. void PaintSpectrum(TH2* h2, Option_t* option = """", Int_t bs = 1600); This function allows to set all the possible options available in; TSpectrum2Painter and paint ""h2"". TSpectrum2Painter offers a large set of options/attributes. In the; ""option"" parameter each of them can be set to specific values via; ""operators"" in the option itself. for instance on can do:. h2->Draw(""SPEC a(30,30,0)"");. to draw h2 with TSpectrum2Painter using all the default attributes except; the viewing angles. The operators' names are case unsensitive (one can use; ""a"" or ""A""). Operators parameters are seperated by "","". The operators can; be put is any order in the option. Operators must be serparated by "" "".; No "" "" characters should be put in an operator. This help page describes; all the available operators. * * *. The way ""h2"" will be painted is controled with 2 parameters the ""Display; modes groups"" and the ""Display Modes"". ""Display modes groups"" can take the following values:. 0 = Simple - it covers simple display modes using one color only; 1 = Light - in this group the shading is carried out according to; the position of the fictive light source; 2 = Height - in this group the shading is carried out according to; the channel contents; 3 = LightHeight - combination of two previous shading algorithms. One; can control the weight between both algorithms. ""Display modes"" can take the following values:. 1 = Points.; 2 = Grid.; 3 = Contours.; 4 = Bars.; 5 = LinesX.; 6 = LinesY.; 7 = BarsX.; 8 = BarsY.; 9 = Needles.; 10 = Surface.; 11 = Triangles. Using this function these parameters can be set using the ""dm"" operator; in the option. Example:. h2->Draw(""SPEC dm(1,2)"");. will paint the 2D histogram h2 using the ""Light Display mode group"" and; the ""Grid Display mode",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:41109,Availability,error,error,41109,"--+-------+--------+--------------+; | Needles | X | - | - | - |; +-----------+--------+-------+--------+--------------+; | Surface | - | X | X | X |; +-----------+--------+-------+--------+--------------+; | Triangles | X | X | X | X |; +-----------+--------+-------+--------+--------------+. * * *. The Pen Attributes can be changed using pa(color, style, width). Example:. h2->Draw(""SPEC dm(1,2) pa(2,1,2)"");. sets the line color to 2, line type to 1 and line width to2. Note that if; pa() is not specified, the histogram ""h2"" line attributes are used. Note; also that operators for SPEC option can be cummulated and specified in; any order. * * *. The buffer size can be change with bf(size). Example:. h2->Draw(""SPEC bf(8000)"");. The spectrum painter needs a buffer to paint the spectrum. By default the; buffer size is set to 1600. In most cases this buffer size is enough. But; if the canvas size is very big, for instance 8000x5000 this buffer size is; too small. An error message is issued telling to use the option bf(). * * *. The number of nodes can be change with n(nodesx, nodesy). Example:. h2->Draw(""SPEC n(40,40)"");. Sometimes the displayed region is rather large. When displaying all; channels pictures become very dense and complicated. It is very difficult; to understand the overall shape of data. ""n(nx,ny)"" allows to change the; density of displayed channels. Only the channels coinciding with given; nodes are displayed. * * *. The visualization angles can be changed with a(alpha, beta, view).; Example:. h2->Draw(""SPEC n(40,40) dm(0,1) a(30,30,0)"");. Alpha defines the angle between bottom horizontal screen line and the; displayed space on the right side of the picture and beta on the left; side, respectively. One can rotate the 3-d space around vertical axis; going through the center of it employing the view parameter. Allowed; values are 0, 90, 180 and 270 degrees. * * *. zs(scale) changes the scale of the Z-axis Possible values are:. 0 = Linear (default); 1 = Log; ",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:41115,Integrability,message,message,41115,"--+-------+--------+--------------+; | Needles | X | - | - | - |; +-----------+--------+-------+--------+--------------+; | Surface | - | X | X | X |; +-----------+--------+-------+--------+--------------+; | Triangles | X | X | X | X |; +-----------+--------+-------+--------+--------------+. * * *. The Pen Attributes can be changed using pa(color, style, width). Example:. h2->Draw(""SPEC dm(1,2) pa(2,1,2)"");. sets the line color to 2, line type to 1 and line width to2. Note that if; pa() is not specified, the histogram ""h2"" line attributes are used. Note; also that operators for SPEC option can be cummulated and specified in; any order. * * *. The buffer size can be change with bf(size). Example:. h2->Draw(""SPEC bf(8000)"");. The spectrum painter needs a buffer to paint the spectrum. By default the; buffer size is set to 1600. In most cases this buffer size is enough. But; if the canvas size is very big, for instance 8000x5000 this buffer size is; too small. An error message is issued telling to use the option bf(). * * *. The number of nodes can be change with n(nodesx, nodesy). Example:. h2->Draw(""SPEC n(40,40)"");. Sometimes the displayed region is rather large. When displaying all; channels pictures become very dense and complicated. It is very difficult; to understand the overall shape of data. ""n(nx,ny)"" allows to change the; density of displayed channels. Only the channels coinciding with given; nodes are displayed. * * *. The visualization angles can be changed with a(alpha, beta, view).; Example:. h2->Draw(""SPEC n(40,40) dm(0,1) a(30,30,0)"");. Alpha defines the angle between bottom horizontal screen line and the; displayed space on the right side of the picture and beta on the left; side, respectively. One can rotate the 3-d space around vertical axis; going through the center of it employing the view parameter. Allowed; values are 0, 90, 180 and 270 degrees. * * *. zs(scale) changes the scale of the Z-axis Possible values are:. 0 = Linear (default); 1 = Log; ",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:123,Modifiability,inherit,inheritance,123,". TSpectrum2Painter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUMPAINTER; » TSpectrum2Painter. class TSpectrum2Painter: public TNamed. Two-dimensional graphics function. TSpectrum2Painter is a set of graphical functions developed by Miroslav; Morhac to paint 2D-histograms in three dimensions. This package is accessed; via THistPainter in a transparent way. For the ROOT user it is enough to use; the ""SPEC"" option to draw a 2D-Histogram. This option offers many; functionalities detailed in the header of the PaintSpectrum function. Reference:; Morhac M., Kliman J., Matousek V., Turzo I.: Sophisticated visualization; algorithms for analysis of multidimensional experimental nuclear data. Acta; Pysica Slovaca Vol. 54/ 4 (2004), pp. 385-400. Function Members (Methods); public:. virtual~TSpectrum2Painter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArr",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:3641,Modifiability,Inherit,InheritsFrom,3641," Double_t& g, Double_t& b); voidGetContourWidth(Int_t& width); voidGetDisplayMode(Int_t& modeGroup, Int_t& displayMode); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; voidGetLightHeightWeight(Double_t& weight); voidGetLightPosition(Int_t& x, Int_t& y, Int_t& z); virtual const char*TNamed::GetName() const; voidGetNodes(Int_t& nodesx, Int_t& nodesy); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidGetPenAttr(Int_t& color, Int_t& style, Int_t& width); voidGetShading(Int_t& shading, Int_t& shadow); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidGetZScale(Int_t& scale); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:3707,Modifiability,Inherit,InheritsFrom,3707,"dGetDisplayMode(Int_t& modeGroup, Int_t& displayMode); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; voidGetLightHeightWeight(Double_t& weight); voidGetLightPosition(Int_t& x, Int_t& y, Int_t& z); virtual const char*TNamed::GetName() const; voidGetNodes(Int_t& nodesx, Int_t& nodesy); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidGetPenAttr(Int_t& color, Int_t& style, Int_t& width); voidGetShading(Int_t& shading, Int_t& shadow); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidGetZScale(Int_t& scale); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); virtual voidPaint(Option_t* option); static voidPaint",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:15992,Modifiability,Inherit,Inheritance,15992,"es with shading according to light; TStringTNamed::fTitleobject title; Double_tfTxx; Double_tfTxy; Double_tfTyx; Double_tfTyy; Double_tfTyz; Int_tfViewAnglerotation angle of the view, it can be 0, 90, 180, 270 degrees; Double_tfVx; Double_tfVy; Int_tfXe; Int_tfXlightx position of fictive light source, applies only for rainbowed display modes with shading according to light; Int_tfXmaxx-end channel of spectrum; Int_tfXminx-starting channel of spectrum; Int_tfXs; Int_tfXt; Int_tfYe; Int_tfYlighty position of fictive light source, applies only for rainbowed display modes with shading according to light; Int_tfYmaxy-end channel of spectrum; Int_tfYminy-starting channel of spectrum; Int_tfYs; Int_tfYt; Double_tfZ; Double_tfZPresetValue; Double_tfZeq; Int_tfZlightz position of fictive light source, applies only for rainbowed display modes with shading according to light; Double_tfZmaxcounts full scale; Double_tfZminbase counts; Int_tfZscalez scale (linear, log, sqrt). Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrum2Painter. Function documentation; TSpectrum2Painter(TH2* h2, Int_t bs); TSpectrum2Painter normal constructor. ~TSpectrum2Painter(); TSpectrum2Painter destructor. void Transform(Int_t it, Int_t jt, Int_t zmt); Reads out the value from histogram and calculates screen coordinates. Parameters:; -it - node in x- direction; -jt - node in y- direction; -zmt - control variable. Double_t ColorCalculation(Double_t dx1, Double_t dy1, Double_t z1, Double_t dx2, Double_t dy2, Double_t z2, Double_t dx3, Double_t dy3, Double_t z3); Calculates and returns color value for the surface triangle; given by function parameters:; -dx1,dy1,z1 coordinates of the first point in 3d space; -dx2,dy2,z2 coordinates of the second point in 3d space; -dx3,dy3,z3 coordinates of the third point in 3d space. Double_t ShadowColorCalculation(Double_t xtaz, Double_t ytaz, Double_t ztaz, Double_t shad_noise); Determines whether the center of the triangle in 3-d space; given by funct",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:16407,Modifiability,variab,variable,16407,"o light; Int_tfXmaxx-end channel of spectrum; Int_tfXminx-starting channel of spectrum; Int_tfXs; Int_tfXt; Int_tfYe; Int_tfYlighty position of fictive light source, applies only for rainbowed display modes with shading according to light; Int_tfYmaxy-end channel of spectrum; Int_tfYminy-starting channel of spectrum; Int_tfYs; Int_tfYt; Double_tfZ; Double_tfZPresetValue; Double_tfZeq; Int_tfZlightz position of fictive light source, applies only for rainbowed display modes with shading according to light; Double_tfZmaxcounts full scale; Double_tfZminbase counts; Int_tfZscalez scale (linear, log, sqrt). Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrum2Painter. Function documentation; TSpectrum2Painter(TH2* h2, Int_t bs); TSpectrum2Painter normal constructor. ~TSpectrum2Painter(); TSpectrum2Painter destructor. void Transform(Int_t it, Int_t jt, Int_t zmt); Reads out the value from histogram and calculates screen coordinates. Parameters:; -it - node in x- direction; -jt - node in y- direction; -zmt - control variable. Double_t ColorCalculation(Double_t dx1, Double_t dy1, Double_t z1, Double_t dx2, Double_t dy2, Double_t z2, Double_t dx3, Double_t dy3, Double_t z3); Calculates and returns color value for the surface triangle; given by function parameters:; -dx1,dy1,z1 coordinates of the first point in 3d space; -dx2,dy2,z2 coordinates of the second point in 3d space; -dx3,dy3,z3 coordinates of the third point in 3d space. Double_t ShadowColorCalculation(Double_t xtaz, Double_t ytaz, Double_t ztaz, Double_t shad_noise); Determines whether the center of the triangle in 3-d space; given by function parameters:; -xtaz,ytaz,ztaz; is in shadow or not. If yes it return 1 otherwise it returns 0. void ColorModel(unsigned int ui, unsigned int ui1, unsigned int ui2, unsigned int ui3); This function calculates color for one palette entry; given by function parameter ui. Other parameters; -ui1,ui2,ui3; represent r, g, b color components of the basic pen color. Int_t",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:521,Security,access,accessed,521,". TSpectrum2Painter. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUMPAINTER; » TSpectrum2Painter. class TSpectrum2Painter: public TNamed. Two-dimensional graphics function. TSpectrum2Painter is a set of graphical functions developed by Miroslav; Morhac to paint 2D-histograms in three dimensions. This package is accessed; via THistPainter in a transparent way. For the ROOT user it is enough to use; the ""SPEC"" option to draw a 2D-Histogram. This option offers many; functionalities detailed in the header of the PaintSpectrum function. Reference:; Morhac M., Kliman J., Matousek V., Turzo I.: Sophisticated visualization; algorithms for analysis of multidimensional experimental nuclear data. Acta; Pysica Slovaca Vol. 54/ 4 (2004), pp. 385-400. Function Members (Methods); public:. virtual~TSpectrum2Painter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArr",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:3531,Security,Hash,Hash,3531,"h, Int_t& height, Int_t& style); voidGetColorAlgorithm(Int_t& colorAlgorithm); voidGetColorIncrements(Double_t& r, Double_t& g, Double_t& b); voidGetContourWidth(Int_t& width); voidGetDisplayMode(Int_t& modeGroup, Int_t& displayMode); virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; voidGetLightHeightWeight(Double_t& weight); voidGetLightPosition(Int_t& x, Int_t& y, Int_t& z); virtual const char*TNamed::GetName() const; voidGetNodes(Int_t& nodesx, Int_t& nodesy); virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; voidGetPenAttr(Int_t& color, Int_t& style, Int_t& width); voidGetShading(Int_t& shading, Int_t& shadow); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidGetZScale(Int_t& scale); virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:6552,Testability,Test,TestBit,6552,"j); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetAngles(Int_t alpha, Int_t beta, Int_t view); voidSetBezier(Int_t bezier); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetChanGrid(Int_t enable, Int_t color); voidSetChanMarks(Int_t enable, Int_t color, Int_t width, Int_t height, Int_t style); voidSetColorAlgorithm(Int_t colorAlgorithm); voidSetColorIncrements(Double_t r, Double_t g, Double_t b); voidSetContourWidth(Int_t width); voidSetDisplayMode(Int_t modeGroup, Int_t displayMode); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLightHeightWeight(Double_t weight); voidSetLightPosition(Int_t x, Int_t y, Int_t z); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNodes(Int_t nodesx, Int_t nodesy); static voidTObject::SetObjectStat(Bool_t stat); voidSetPenAttr(Int_t color, Int_t style, Int_t width); voidSetShading(Int_t shading, Int_t shadow); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetZScale(Int_t scale); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpectrum2Painter(TH2* h2, Int_t bs); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:6591,Testability,Test,TestBits,6591,"j); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetAngles(Int_t alpha, Int_t beta, Int_t view); voidSetBezier(Int_t bezier); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetChanGrid(Int_t enable, Int_t color); voidSetChanMarks(Int_t enable, Int_t color, Int_t width, Int_t height, Int_t style); voidSetColorAlgorithm(Int_t colorAlgorithm); voidSetColorIncrements(Double_t r, Double_t g, Double_t b); voidSetContourWidth(Int_t width); voidSetDisplayMode(Int_t modeGroup, Int_t displayMode); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetLightHeightWeight(Double_t weight); voidSetLightPosition(Int_t x, Int_t y, Int_t z); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNodes(Int_t nodesx, Int_t nodesy); static voidTObject::SetObjectStat(Bool_t stat); voidSetPenAttr(Int_t color, Int_t style, Int_t width); voidSetShading(Int_t shading, Int_t shadow); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); voidSetZScale(Int_t scale); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpectrum2Painter(TH2* h2, Int_t bs); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:15966,Testability,log,log,15966,"!; Int_tfNewColorIndex; Int_tfNodesxnumber of nodes in x dimension of grid; Int_tfNodesynumber of nodes in y dimension of grid; Double_tfNuSli; Int_tfPenColorcolor of spectrum; Int_tfPenDashstyle of pen; Int_tfPenWidthwidth of line; Double_tfRainbow1Stepdetermines the first component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow2Stepdetermines the second component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow3Stepdetermines the third component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Int_tfShadingdetermines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; Int_tfShadowdetermines whether shadow will be drawn (no shadow, shadow), for rainbowed display modes with shading according to light; TStringTNamed::fTitleobject title; Double_tfTxx; Double_tfTxy; Double_tfTyx; Double_tfTyy; Double_tfTyz; Int_tfViewAnglerotation angle of the view, it can be 0, 90, 180, 270 degrees; Double_tfVx; Double_tfVy; Int_tfXe; Int_tfXlightx position of fictive light source, applies only for rainbowed display modes with shading according to light; Int_tfXmaxx-end channel of spectrum; Int_tfXminx-starting channel of spectrum; Int_tfXs; Int_tfXt; Int_tfYe; Int_tfYlighty position of fictive light source, applies only for rainbowed display modes with shading according to light; Int_tfYmaxy-end channel of spectrum; Int_tfYminy-starting channel of spectrum; Int_tfYs; Int_tfYt; Double_tfZ; Double_tfZPresetValue; Double_tfZeq; Int_tfZlightz position of fictive light source, applies only for rainbowed display modes with shading according to light; Double_tfZmaxcounts full scale; Double_tfZminbase counts; Int_tfZscalez scale (linear, log, sqrt).",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:23711,Testability,log,log,23711,"ainter::SetAngles (Int_t alpha,Int_t beta, Int_t view); One can change the angles of the position of 3-d space and to rotate the; space. Alpha parameter defines the angle between bottom horizontal screen line; and the displayed space on the right side of the picture and beta on the left; side, respectively. One can rotate the 3-d space around vertical axis going; through the center of it employing the view parameter.; Allowed values are 0, 90, 180 and 270 degrees respectively.; Default values:. alpha = 20; beta = 60; view = 0. Light modes group, display mode = surface, 256 x 256 channels. Angles are; set as follows: alpha=40, beta=30, view=0. Light modes group, display mode = surface, 256 x 256 channels. Angles are; set as follows: alpha=30, beta=30, view=90.; Function:; TSpectrum2Painter::SetZScale(Int_t scale); One can change the scale of z-axis. Possible values are:. kZScaleLinear; kZScaleLog; kZScaleSqrt. Default value is:. scale = kZScaleLinear. Height modes group, display mode = surface, 64 x 64 channels, log scale.; Function:; TSpectrum2Painter::SetColorIncrements(Double_t r,Double_t g,Double_t b);; For sophisticated shading (in kModeGroupLight, kModeGroupHeight; and kModeGroupLightHeight display modes groups) the color palette starts; from the basic pen color (see SetPenAttr function). There is a predefined number; of color levels (256). Color in every level is calculated by adding the; increments of the r, g, b components to the previous level. Using this function; one can change the color increments between two neighboring color levels. The; function does not apply for kModeGroupSimple display modes group.; Default values: r=1, g=1, b=1;. Light modes group, display mode = surface, 64 x 64 channels, color increments; r=1, g=2, b=3. Light modes group, display mode = surface, 64 x 64 channels, color; increments r=4, g=2, b=1.; Function:; TSpectrum2Painter::SetColorAlgorithm(Int_t colorAlgorithm); To define the colors one can employ one of the following color a",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:31574,Testability,log,log,31574,"t, modes of combination of shading according to light and to channels counts-kPicture2ModeGroupLightHeight; -displayMode - posible display modes are: points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles. void SetPenAttr(Int_t color, Int_t style, Int_t width); Sets pen attributes:; -color - color of spectrum; -style - style of pen (solid, dash, dot, dash-dot); -width - width of pen in pixels. void SetNodes(Int_t nodesx, Int_t nodesy); Sets nodes in both directions:; -nodesx, nodesy, only the bins at the nodes points are displayed. void SetAngles(Int_t alpha, Int_t beta, Int_t view); Sets angles of the view:; -alpha - angles of display,alpha+beta must be less or equal to 90, alpha- angle between base line of Canvas and right lower edge of picture base plane; -beta - angle between base line of Canvas and left lower edge of picture base plane; -view - rotation angle of the view, it can be 0, 90, 180, 270 degrees. void SetZScale(Int_t scale); Sets z-axis scale:; -scale - linear, sqrt or log. void SetColorAlgorithm(Int_t colorAlgorithm); Sets shading color algorithm:; -colorAlgorithm - applies only for rainbowed display modes; (rgb smooth alorithm, rgb modulo color component, cmy smooth alorithm,; cmy modulo color component, cie smooth alorithm,; cie modulo color component, yiq smooth alorithm,; yiq modulo color component, hsv smooth alorithm,; hsv modulo color component, it does not apply for simple display modes; algorithm group. void SetColorIncrements(Double_t r, Double_t g, Double_t b); Sets color increments between two color levels for r, g, b components:; -r, g, b - color increments between two color levels. void SetLightPosition(Int_t x, Int_t y, Int_t z); Sets position of fictive light source in 3D space:; -x, y, z. void SetShading(Int_t shading, Int_t shadow); Sets on/off shading and shadow switches:; -shading - determines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; -sha",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:35273,Testability,log,log,35273,"hannels counts-kPicture2ModeGroupHeight, modes of combination of shading according to light and to channels counts-kPicture2ModeGroupLightHeight; -displayMode - display modes that might have been set: points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles. void GetPenAttr(Int_t& color, Int_t& style, Int_t& width); Gets pen attributes:; -color - color of spectrum; -style - style of pen (solid, dash, dot, dash-dot); -width - width of pen in pixels. void GetNodes(Int_t& nodesx, Int_t& nodesy); Gets nodes in both directions:; -nodesx, nodesy, only the bins at the nodes points are displayed. void GetAngles(Int_t& alpha, Int_t& beta, Int_t& view); Gets angles of the view:; -alpha - angle between base line of Canvas and right lower edge of picture base plane; -beta - angle between base line of Canvas and left lower edge of picture base plane; -view - rotation angle of the view, it can be 0, 90, 180, 270 degrees. void GetZScale(Int_t& scale); Gets z-axis scale:; -scale - it can be linear, sqrt or log. void GetColorAlgorithm(Int_t& colorAlgorithm); Gets shading color algorithm:; -colorAlgorithm - rgb smooth alorithm, rgb modulo color component, cmy smooth alorithm, cmy modulo color component, cie smooth alorithm, cie modulo color component, yiq smooth alorithm, yiq modulo color component, hsv smooth alorithm, hsv modulo algorithm. void GetColorIncrements(Double_t& r, Double_t& g, Double_t& b); Gets color increments between two color levels for r, g, b components:; -r, g, b - color increments between two color levels. void GetLightPosition(Int_t& x, Int_t& y, Int_t& z); Gets position of fictive light source in 3D space:; -x, y, z. void GetShading(Int_t& shading, Int_t& shadow); Gets shading and shadow switches:; -shading - determines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; -shadow - determines whether shadow will be drawn, for rainbowed display modes with shading according to light",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:42130,Testability,Log,Log,42130,"is issued telling to use the option bf(). * * *. The number of nodes can be change with n(nodesx, nodesy). Example:. h2->Draw(""SPEC n(40,40)"");. Sometimes the displayed region is rather large. When displaying all; channels pictures become very dense and complicated. It is very difficult; to understand the overall shape of data. ""n(nx,ny)"" allows to change the; density of displayed channels. Only the channels coinciding with given; nodes are displayed. * * *. The visualization angles can be changed with a(alpha, beta, view).; Example:. h2->Draw(""SPEC n(40,40) dm(0,1) a(30,30,0)"");. Alpha defines the angle between bottom horizontal screen line and the; displayed space on the right side of the picture and beta on the left; side, respectively. One can rotate the 3-d space around vertical axis; going through the center of it employing the view parameter. Allowed; values are 0, 90, 180 and 270 degrees. * * *. zs(scale) changes the scale of the Z-axis Possible values are:. 0 = Linear (default); 1 = Log; 2 = Sqrt. If gPad->SetLogz() has been set, log scale on Z-axis is set automatically.; No need to use the zs() operator. Note that the X and Y axis are always; linear. * * *. ci(r,g,b), were r,g and b are floats defines the colors increments.; For sophisticated shading (Light, Height and LightHeight Display Modes; Groups) the color palette starts from the basic pen color (see pa(); function). There is a predefined number of color levels (256). Color in; every level is calculated by adding the increments of the r, g, b; components to the previous level. Using this function one can change the; color increments between two neighboring color levels. The function does; not apply dor the Simple Display Modes Group. The default values are:; (1,1,1). * * *. ca(color_algorithm) allows to choose the Color Algorithm.; To define the colors one can employ one of the following color algorithms; (RGB, CMY, CIE, YIQ, HVS models). When the level of a component reaches; the limit value one can",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:42178,Testability,log,log,42178,"r of nodes can be change with n(nodesx, nodesy). Example:. h2->Draw(""SPEC n(40,40)"");. Sometimes the displayed region is rather large. When displaying all; channels pictures become very dense and complicated. It is very difficult; to understand the overall shape of data. ""n(nx,ny)"" allows to change the; density of displayed channels. Only the channels coinciding with given; nodes are displayed. * * *. The visualization angles can be changed with a(alpha, beta, view).; Example:. h2->Draw(""SPEC n(40,40) dm(0,1) a(30,30,0)"");. Alpha defines the angle between bottom horizontal screen line and the; displayed space on the right side of the picture and beta on the left; side, respectively. One can rotate the 3-d space around vertical axis; going through the center of it employing the view parameter. Allowed; values are 0, 90, 180 and 270 degrees. * * *. zs(scale) changes the scale of the Z-axis Possible values are:. 0 = Linear (default); 1 = Log; 2 = Sqrt. If gPad->SetLogz() has been set, log scale on Z-axis is set automatically.; No need to use the zs() operator. Note that the X and Y axis are always; linear. * * *. ci(r,g,b), were r,g and b are floats defines the colors increments.; For sophisticated shading (Light, Height and LightHeight Display Modes; Groups) the color palette starts from the basic pen color (see pa(); function). There is a predefined number of color levels (256). Color in; every level is calculated by adding the increments of the r, g, b; components to the previous level. Using this function one can change the; color increments between two neighboring color levels. The function does; not apply dor the Simple Display Modes Group. The default values are:; (1,1,1). * * *. ca(color_algorithm) allows to choose the Color Algorithm.; To define the colors one can employ one of the following color algorithms; (RGB, CMY, CIE, YIQ, HVS models). When the level of a component reaches; the limit value one can choose either smooth transition (by decreasing; the limit",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:1264,Usability,Clear,Clear,1264," virtual~TSpectrum2Painter(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArr",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:11839,Usability,simpl,simple,11839,,MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:12803,Usability,simpl,simple,12803," interpolation (applies only for simple display modes group for grid, x_lines, y_lines display modes); Int_tfBx1positon of picture on Canvas, min x; Int_tfBx2positon of picture on Canvas, max x; Int_tfBy1positon of picture on Canvas, min y; Int_tfBy2positon of picture on Canvas, max y; Int_tfBzX[4]; Int_tfBzY[4]; Int_tfChanlineColorcolor of channel lines (grid); Int_tfChanlineEnDisdecides whether the channel lines (grid) are shown; Int_tfChanmarkColorcolor of channel marks; Int_tfChanmarkEnDisdecides whether the channel marks are shown; Int_tfChanmarkHeightheight of channel marks; Int_tfChanmarkStylestyle of channel marks; Int_tfChanmarkWidthwidth of channel marks; Int_tfColorAlgapplies only for rainbowed display modes (rgb smooth alorithm, rgb modulo color component, cmy smooth alorithm, cmy modulo color component, cie smooth alorithm, cie modulo color component, yiq smooth alorithm, yiq modulo color component, hsv smooth alorithm, hsv modulo color component, it does not apply for simple display modes algorithm group; Int_tfContWidthwidth between contours, applies only for contours display mode; Int_tfDisplayModespectrum display mode (points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles); Double_tfDxspline; Double_tfDyspline; Short_t*fEnvelope!; Short_t*fEnvelopeContour!; Double_tfGbezx; Double_tfGbezy; TH2*fH2pointer to 2D histogram TH2; Double_tfKx; Double_tfKy; Double_tfLHweightweight between shading according to fictive light source and according to channels counts, applies only for kModeGroupLightHeight modes group; Int_tfLevels# of color levels for rainbowed display modes, it does not apply for simple display modes algorithm group; Int_tfLine; Int_tfMaximumXScreenResolution!buffers' size; Int_tfModeGroupdisplay mode algorithm group (simple modes-kModeGroupSimple, modes with shading according to light-kModeGroupLight, modes with shading according to channels counts-kModeGroupHeight, modes of combination of shading accordin",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:13474,Usability,simpl,simple,13474,"s; Int_tfColorAlgapplies only for rainbowed display modes (rgb smooth alorithm, rgb modulo color component, cmy smooth alorithm, cmy modulo color component, cie smooth alorithm, cie modulo color component, yiq smooth alorithm, yiq modulo color component, hsv smooth alorithm, hsv modulo color component, it does not apply for simple display modes algorithm group; Int_tfContWidthwidth between contours, applies only for contours display mode; Int_tfDisplayModespectrum display mode (points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles); Double_tfDxspline; Double_tfDyspline; Short_t*fEnvelope!; Short_t*fEnvelopeContour!; Double_tfGbezx; Double_tfGbezy; TH2*fH2pointer to 2D histogram TH2; Double_tfKx; Double_tfKy; Double_tfLHweightweight between shading according to fictive light source and according to channels counts, applies only for kModeGroupLightHeight modes group; Int_tfLevels# of color levels for rainbowed display modes, it does not apply for simple display modes algorithm group; Int_tfLine; Int_tfMaximumXScreenResolution!buffers' size; Int_tfModeGroupdisplay mode algorithm group (simple modes-kModeGroupSimple, modes with shading according to light-kModeGroupLight, modes with shading according to channels counts-kModeGroupHeight, modes of combination of shading according to light and to channels counts-kModeGroupLightHeight); Double_tfMxx; Double_tfMxy; Double_tfMyx; Double_tfMyy; TStringTNamed::fNameobject identifier; TColor*fNewColor!; Int_tfNewColorIndex; Int_tfNodesxnumber of nodes in x dimension of grid; Int_tfNodesynumber of nodes in y dimension of grid; Double_tfNuSli; Int_tfPenColorcolor of spectrum; Int_tfPenDashstyle of pen; Int_tfPenWidthwidth of line; Double_tfRainbow1Stepdetermines the first component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow2Stepdetermines the second component step for neighbouring colo",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:13615,Usability,simpl,simple,13615,"olor component, cie smooth alorithm, cie modulo color component, yiq smooth alorithm, yiq modulo color component, hsv smooth alorithm, hsv modulo color component, it does not apply for simple display modes algorithm group; Int_tfContWidthwidth between contours, applies only for contours display mode; Int_tfDisplayModespectrum display mode (points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles); Double_tfDxspline; Double_tfDyspline; Short_t*fEnvelope!; Short_t*fEnvelopeContour!; Double_tfGbezx; Double_tfGbezy; TH2*fH2pointer to 2D histogram TH2; Double_tfKx; Double_tfKy; Double_tfLHweightweight between shading according to fictive light source and according to channels counts, applies only for kModeGroupLightHeight modes group; Int_tfLevels# of color levels for rainbowed display modes, it does not apply for simple display modes algorithm group; Int_tfLine; Int_tfMaximumXScreenResolution!buffers' size; Int_tfModeGroupdisplay mode algorithm group (simple modes-kModeGroupSimple, modes with shading according to light-kModeGroupLight, modes with shading according to channels counts-kModeGroupHeight, modes of combination of shading according to light and to channels counts-kModeGroupLightHeight); Double_tfMxx; Double_tfMxy; Double_tfMyx; Double_tfMyy; TStringTNamed::fNameobject identifier; TColor*fNewColor!; Int_tfNewColorIndex; Int_tfNodesxnumber of nodes in x dimension of grid; Int_tfNodesynumber of nodes in y dimension of grid; Double_tfNuSli; Int_tfPenColorcolor of spectrum; Int_tfPenDashstyle of pen; Int_tfPenWidthwidth of line; Double_tfRainbow1Stepdetermines the first component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow2Stepdetermines the second component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow3Stepdetermin",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:14361,Usability,simpl,simple,14361,"roupLightHeight modes group; Int_tfLevels# of color levels for rainbowed display modes, it does not apply for simple display modes algorithm group; Int_tfLine; Int_tfMaximumXScreenResolution!buffers' size; Int_tfModeGroupdisplay mode algorithm group (simple modes-kModeGroupSimple, modes with shading according to light-kModeGroupLight, modes with shading according to channels counts-kModeGroupHeight, modes of combination of shading according to light and to channels counts-kModeGroupLightHeight); Double_tfMxx; Double_tfMxy; Double_tfMyx; Double_tfMyy; TStringTNamed::fNameobject identifier; TColor*fNewColor!; Int_tfNewColorIndex; Int_tfNodesxnumber of nodes in x dimension of grid; Int_tfNodesynumber of nodes in y dimension of grid; Double_tfNuSli; Int_tfPenColorcolor of spectrum; Int_tfPenDashstyle of pen; Int_tfPenWidthwidth of line; Double_tfRainbow1Stepdetermines the first component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow2Stepdetermines the second component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow3Stepdetermines the third component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Int_tfShadingdetermines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; Int_tfShadowdetermines whether shadow will be drawn (no shadow, shadow), for rainbowed display modes with shading according to light; TStringTNamed::fTitleobject title; Double_tfTxx; Double_tfTxy; Double_tfTyx; Double_tfTyy; Double_tfTyz; Int_tfViewAnglerotation angle of the view, it can be 0, 90, 180, 270 degrees; Double_tfVx; Double_tfVy; Int_tfXe; Int_tfXlightx position of fictive light source, applies only for rainbowed display modes with shading accordi",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:14552,Usability,simpl,simple,14552,"buffers' size; Int_tfModeGroupdisplay mode algorithm group (simple modes-kModeGroupSimple, modes with shading according to light-kModeGroupLight, modes with shading according to channels counts-kModeGroupHeight, modes of combination of shading according to light and to channels counts-kModeGroupLightHeight); Double_tfMxx; Double_tfMxy; Double_tfMyx; Double_tfMyy; TStringTNamed::fNameobject identifier; TColor*fNewColor!; Int_tfNewColorIndex; Int_tfNodesxnumber of nodes in x dimension of grid; Int_tfNodesynumber of nodes in y dimension of grid; Double_tfNuSli; Int_tfPenColorcolor of spectrum; Int_tfPenDashstyle of pen; Int_tfPenWidthwidth of line; Double_tfRainbow1Stepdetermines the first component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow2Stepdetermines the second component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow3Stepdetermines the third component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Int_tfShadingdetermines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; Int_tfShadowdetermines whether shadow will be drawn (no shadow, shadow), for rainbowed display modes with shading according to light; TStringTNamed::fTitleobject title; Double_tfTxx; Double_tfTxy; Double_tfTyx; Double_tfTyy; Double_tfTyz; Int_tfViewAnglerotation angle of the view, it can be 0, 90, 180, 270 degrees; Double_tfVx; Double_tfVy; Int_tfXe; Int_tfXlightx position of fictive light source, applies only for rainbowed display modes with shading according to light; Int_tfXmaxx-end channel of spectrum; Int_tfXminx-starting channel of spectrum; Int_tfXs; Int_tfXt; Int_tfYe; Int_tfYlighty position of fictive light source, applies only for rain",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:14742,Usability,simpl,simple,14742,"nts-kModeGroupHeight, modes of combination of shading according to light and to channels counts-kModeGroupLightHeight); Double_tfMxx; Double_tfMxy; Double_tfMyx; Double_tfMyy; TStringTNamed::fNameobject identifier; TColor*fNewColor!; Int_tfNewColorIndex; Int_tfNodesxnumber of nodes in x dimension of grid; Int_tfNodesynumber of nodes in y dimension of grid; Double_tfNuSli; Int_tfPenColorcolor of spectrum; Int_tfPenDashstyle of pen; Int_tfPenWidthwidth of line; Double_tfRainbow1Stepdetermines the first component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow2Stepdetermines the second component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Double_tfRainbow3Stepdetermines the third component step for neighbouring color levels, applies only for rainbowed display modes, it does not apply for simple display modes algorithm group; Int_tfShadingdetermines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; Int_tfShadowdetermines whether shadow will be drawn (no shadow, shadow), for rainbowed display modes with shading according to light; TStringTNamed::fTitleobject title; Double_tfTxx; Double_tfTxy; Double_tfTyx; Double_tfTyy; Double_tfTyz; Int_tfViewAnglerotation angle of the view, it can be 0, 90, 180, 270 degrees; Double_tfVx; Double_tfVy; Int_tfXe; Int_tfXlightx position of fictive light source, applies only for rainbowed display modes with shading according to light; Int_tfXmaxx-end channel of spectrum; Int_tfXminx-starting channel of spectrum; Int_tfXs; Int_tfXt; Int_tfYe; Int_tfYlighty position of fictive light source, applies only for rainbowed display modes with shading according to light; Int_tfYmaxy-end channel of spectrum; Int_tfYminy-starting channel of spectrum; Int_tfYs; Int_tfYt; Double_tfZ; Double_tfZPresetValue; Dou",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:18874,Usability,simpl,simple,18874,"h of; the mark is w, height is h and the type of the mark is determined by the; parameter type. void Slice(Double_t xr, Double_t yr, Double_t xs, Double_t ys, TLine* line); Calculates screen coordinates of the line given by two; nodes for contours display mode. The line is given by two points; xr, yr, xs, ys. Finally it draws the line. void CopyEnvelope(Double_t xr, Double_t xs, Double_t yr, Double_t ys); Copies envelope vector, which ensures hidden surface removal for the; contours display mode. void Paint(Option_t* option); Paints histogram according to preset parameters. ; Visualization; Goal: to present 2-dimensional spectra in suitable visual form; This package has several display mode groups and display modes, which can be; employed for the presentation of 2-dimensional histograms; Display modes groups:. kModeGroupSimple - it covers simple display modes using one; color only; kModeGroupLight - in this group the shading is carried out; according to the position of the fictive; light source; kModeGroupHeight - in this group the shading is carried out; according to the channel contents; kModeGroupLightHeight - combination of two previous shading; algorithms. One can control the weight; between both algorithms. Display modes:. kDisplayModePoints, ; kDisplayModeGrid, ; kDisplayModeContours,; kDisplayModeBars,; kDisplayModeLinesX,; kDisplayModeLinesY,; kDisplayModeBarsX,; kDisplayModeBarsY,; kDisplayModeNeedles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible ef",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:19642,Usability,Simpl,SimpleLightHeightLight-Height,19642,"tra in suitable visual form; This package has several display mode groups and display modes, which can be; employed for the presentation of 2-dimensional histograms; Display modes groups:. kModeGroupSimple - it covers simple display modes using one; color only; kModeGroupLight - in this group the shading is carried out; according to the position of the fictive; light source; kModeGroupHeight - in this group the shading is carried out; according to the channel contents; kModeGroupLightHeight - combination of two previous shading; algorithms. One can control the weight; between both algorithms. Display modes:. kDisplayModePoints, ; kDisplayModeGrid, ; kDisplayModeContours,; kDisplayModeBars,; kDisplayModeLinesX,; kDisplayModeLinesY,; kDisplayModeBarsX,; kDisplayModeBarsY,; kDisplayModeNeedles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 c",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:20180,Usability,Simpl,Simple,20180," control the weight; between both algorithms. Display modes:. kDisplayModePoints, ; kDisplayModeGrid, ; kDisplayModeContours,; kDisplayModeBars,; kDisplayModeLinesX,; kDisplayModeLinesY,; kDisplayModeBarsX,; kDisplayModeBarsY,; kDisplayModeNeedles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:20243,Usability,Simpl,Simple,20243," kDisplayModePoints, ; kDisplayModeGrid, ; kDisplayModeContours,; kDisplayModeBars,; kDisplayModeLinesX,; kDisplayModeLinesY,; kDisplayModeBarsX,; kDisplayModeBarsY,; kDisplayModeNeedles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 6",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:20302,Usability,Simpl,Simple,20302,"rs,; kDisplayModeBars,; kDisplayModeLinesX,; kDisplayModeLinesY,; kDisplayModeBarsX,; kDisplayModeBarsY,; kDisplayModeNeedles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x ",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:20365,Usability,Simpl,Simple,20365,"sY,; kDisplayModeBarsX,; kDisplayModeBarsY,; kDisplayModeNeedles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x 64 channels. Height modes group, display mode = triangles, 64",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:20424,Usability,Simpl,Simple,20424,"dles,; kDisplayModeSurface,; kDisplayModeTriangles. one can combine the above given modes groups and display modes. The meaningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x 64 channels. Height modes group, display mode = triangles, 64 x 64 channels. Light - height modes group, display mode = s",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:20485,Usability,Simpl,Simple,20485,"ombine the above given modes groups and display modes. The meaningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x 64 channels. Height modes group, display mode = triangles, 64 x 64 channels. Light - height modes group, display mode = surface, 64 x 64 channels. The weight; between both shading al",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:20546,Usability,Simpl,Simple,20546,"aningful; combinations (denoted by x) are given in the next table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x 64 channels. Height modes group, display mode = triangles, 64 x 64 channels. Light - height modes group, display mode = surface, 64 x 64 channels. The weight; between both shading algorithms is set to 0.5. One can observe the influence of; bo",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:20606,Usability,Simpl,Simple,20606,"table. SimpleLightHeightLight-Height. Points XXXX; Grid XXXX; Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x 64 channels. Height modes group, display mode = triangles, 64 x 64 channels. Light - height modes group, display mode = surface, 64 x 64 channels. The weight; between both shading algorithms is set to 0.5. One can observe the influence of; both shadings.; Function:; TSpectrum2Painter::SetPenAttr(Int_t",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:20666,Usability,Simpl,Simple,20666," Contours X-X-; Bars X-X-; LinesX XXXX; LinesY XXXX; BarsX X-X-; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x 64 channels. Height modes group, display mode = triangles, 64 x 64 channels. Light - height modes group, display mode = surface, 64 x 64 channels. The weight; between both shading algorithms is set to 0.5. One can observe the influence of; both shadings.; Function:; TSpectrum2Painter::SetPenAttr(Int_t color,Int_t style,Int_t width). Using this function one can ",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:20728,Usability,Simpl,Simple,20728,"; BarsY X-X-; Needles X---; Surface -XXX; TrianglesXXXX. Function:; void TSpectrum2Painter::SetDisplayMode (Int_t modeGroup, Int_t displayMode). This function controls the display mode group and display mode of the; histogram drawing. To illustrate the possible effects of the various display; modes we introduce a set of examples. Default values:. modeGroup = kModeGroupLightHeight ; displayMode = kDisplayModeSurface . Simple modes group, display mode = points, 256 x 256 channels. Simple modes group, display mode = grid, 64 x 64 channels. Simple modes group, display mode = contours, 64 x 64 channels. Simple modes group, display mode = bars, 64 x 64 channels. Simple modes group, display mode = linesX, 64 x 64 channels. Simple modes group, display mode = linesY, 64 x 64 channels. Simple modes group, display mode = barsX, 64 x 64 channels. Simple modes group, display mode = barsY, 64 x 64 channels. Simple modes group, display mode = needles, 64 x 64 channels. Simple modes group, display mode = triangles, 64 x 64 channels. Light modes group, display mode = points, 256 x 256 channels. Light modes group, display mode = grid, 256 x 256 channels. Light modes group, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x 64 channels. Height modes group, display mode = triangles, 64 x 64 channels. Light - height modes group, display mode = surface, 64 x 64 channels. The weight; between both shading algorithms is set to 0.5. One can observe the influence of; both shadings.; Function:; TSpectrum2Painter::SetPenAttr(Int_t color,Int_t style,Int_t width). Using this function one can change pen color, pen style and pen width.; Possible pen styles",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:21900,Usability,Simpl,Simple,21900,"up, display mode = surface, 64 x 64 channels. Light modes group, display mode = triangles, 64 x 64 channels. Height modes group, display mode = points, 256 x 256 channels. Height modes group, display mode = grid, 256 x 256 channels. Height modes group, display mode = contours, 64 x 64 channels. Height modes group, display mode = bars, 64 x 64 channels. Height modes group, display mode = surface, 64 x 64 channels. Height modes group, display mode = triangles, 64 x 64 channels. Light - height modes group, display mode = surface, 64 x 64 channels. The weight; between both shading algorithms is set to 0.5. One can observe the influence of; both shadings.; Function:; TSpectrum2Painter::SetPenAttr(Int_t color,Int_t style,Int_t width). Using this function one can change pen color, pen style and pen width.; Possible pen styles are:. kPenStyleSolid,; kPenStyleDash,; kPenStyleDot,; kPenStyleDashDot. Default values:. color = kBlack; style = kPenStyleSolid; width = 1. Simple modes group, display mode = linesX, 64 x 64 channels. Pen width = 3.; Function:; TSpectrum2Painter::SetNodes(Int_t nodesx,Int_t nodesy); Sometimes the displayed region is rather large. When displaying all channels; pictures become very dense and complicated. It is very difficult to understand; overall shape of the data. Therefore in the package we have implemented the; possibility to change the density of displayed channels. Only channels; coinciding with given nodes are displayed. In the next figure we introduce the; example of the above presented spectrum with number of nodes set to 64x64.; Default values:. nodesx = Xmax-Xmin+1; nodesy = Ymax-Ymin+1. Simple modes group, display mode = grid, 256 x 256 channels.; Number of nodes is 64x64.; Function:; void TSpectrum2Painter::SetAngles (Int_t alpha,Int_t beta, Int_t view); One can change the angles of the position of 3-d space and to rotate the; space. Alpha parameter defines the angle between bottom horizontal screen line; and the displayed space on the right",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:22568,Usability,Simpl,Simple,22568,":; TSpectrum2Painter::SetPenAttr(Int_t color,Int_t style,Int_t width). Using this function one can change pen color, pen style and pen width.; Possible pen styles are:. kPenStyleSolid,; kPenStyleDash,; kPenStyleDot,; kPenStyleDashDot. Default values:. color = kBlack; style = kPenStyleSolid; width = 1. Simple modes group, display mode = linesX, 64 x 64 channels. Pen width = 3.; Function:; TSpectrum2Painter::SetNodes(Int_t nodesx,Int_t nodesy); Sometimes the displayed region is rather large. When displaying all channels; pictures become very dense and complicated. It is very difficult to understand; overall shape of the data. Therefore in the package we have implemented the; possibility to change the density of displayed channels. Only channels; coinciding with given nodes are displayed. In the next figure we introduce the; example of the above presented spectrum with number of nodes set to 64x64.; Default values:. nodesx = Xmax-Xmin+1; nodesy = Ymax-Ymin+1. Simple modes group, display mode = grid, 256 x 256 channels.; Number of nodes is 64x64.; Function:; void TSpectrum2Painter::SetAngles (Int_t alpha,Int_t beta, Int_t view); One can change the angles of the position of 3-d space and to rotate the; space. Alpha parameter defines the angle between bottom horizontal screen line; and the displayed space on the right side of the picture and beta on the left; side, respectively. One can rotate the 3-d space around vertical axis going; through the center of it employing the view parameter.; Allowed values are 0, 90, 180 and 270 degrees respectively.; Default values:. alpha = 20; beta = 60; view = 0. Light modes group, display mode = surface, 256 x 256 channels. Angles are; set as follows: alpha=40, beta=30, view=0. Light modes group, display mode = surface, 256 x 256 channels. Angles are; set as follows: alpha=30, beta=30, view=90.; Function:; TSpectrum2Painter::SetZScale(Int_t scale); One can change the scale of z-axis. Possible values are:. kZScaleLinear; kZScaleLog; kZSc",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:27609,Usability,Simpl,Simple,27609,"es of the; neighboring triangles can be smoothed (shaded). If desired the display of the; shadow can be painted as well. The function does not apply for; kModeGroupSimple display modes group.; Possible values for shading are:. kNotShaded; kShaded. Possible values for shadow are:. kShadowsNotPainted; kShadowsPainted. Default values:. shading = kShaded; shadow = kShadowsNotPainted. Light modes group, display mode = surface, 64 x 64 channels, not shaded. Light modes group, display mode = surface, 64 x 64 channels, shaded, with; shadow.; Function:; TSpectrum2Painter::SetBezier(Int_t bezier); For kModeGroupSimple display modes group and for kDisplayModeGrid,; kDisplayModeLinesX >and kDisplayModeLinesY display modes one; can smooth data using Bezier smoothing algorithm. The function does not apply; for other display modes groups and display modes. Possible values are:. kNoBezierInterpol; kBezierInterpol. Default value is:. bezier = kNoBezierInterpol. Simple modes group, display mode = linesX, 64 x 64 channels with Bezier; smoothing.; Function:; TSpectrum2Painter::SetContourWidth(Int_t width); This function applies only for kDisplayModeContours display mode.; One can change the width between horizontal slices and thus their density.; Default value: width=50. Simple modes group, display mode = contours, 64 x 64 channels. Width between; slices was set to 30.; Function:; TSpectrum2Painter::SetLightHeightWeight(Double_t weight); For kModeGroupLightHeight display modes group one can change the; weight between both shading algorithm. The function does not apply for other; display modes groups. Default value is: weight=0.5. Light - height modes group, display mode = surface, 64 x 64 channels.; The weight between both shading algorithms is set to 0.7.; Function:; TSpectrum2Painter::SetChanMarks(Int_t enable,Int_t color,Int_t width,Int_t height,Int_t style); In addition to the surface drawn using any above given algorithm one can display; channel marks. One can control the color as",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:27922,Usability,Simpl,Simple,27922,"ShadowsPainted. Default values:. shading = kShaded; shadow = kShadowsNotPainted. Light modes group, display mode = surface, 64 x 64 channels, not shaded. Light modes group, display mode = surface, 64 x 64 channels, shaded, with; shadow.; Function:; TSpectrum2Painter::SetBezier(Int_t bezier); For kModeGroupSimple display modes group and for kDisplayModeGrid,; kDisplayModeLinesX >and kDisplayModeLinesY display modes one; can smooth data using Bezier smoothing algorithm. The function does not apply; for other display modes groups and display modes. Possible values are:. kNoBezierInterpol; kBezierInterpol. Default value is:. bezier = kNoBezierInterpol. Simple modes group, display mode = linesX, 64 x 64 channels with Bezier; smoothing.; Function:; TSpectrum2Painter::SetContourWidth(Int_t width); This function applies only for kDisplayModeContours display mode.; One can change the width between horizontal slices and thus their density.; Default value: width=50. Simple modes group, display mode = contours, 64 x 64 channels. Width between; slices was set to 30.; Function:; TSpectrum2Painter::SetLightHeightWeight(Double_t weight); For kModeGroupLightHeight display modes group one can change the; weight between both shading algorithm. The function does not apply for other; display modes groups. Default value is: weight=0.5. Light - height modes group, display mode = surface, 64 x 64 channels.; The weight between both shading algorithms is set to 0.7.; Function:; TSpectrum2Painter::SetChanMarks(Int_t enable,Int_t color,Int_t width,Int_t height,Int_t style); In addition to the surface drawn using any above given algorithm one can display; channel marks. One can control the color as well as the width, height; (in pixels) and the style of the marks. The parameter enable can be set to:. kChannelMarksNotDrawn; kChannelMarksDrawn. The possible styles can be chosen from the set:. kChannelMarksStyleDot; kChannelMarksStyleCross; kChannelMarksStyleStar; kChannelMarksStyleRectangle; kChan",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:30365,Usability,simpl,simple,30365,"64 x 64 channels, with marks; (red circles) and blue grid.; References:; [1] Morh�č M., Kliman J., Matou�ek V., Turzo I.,; Sophisticated visualization algorithms for analysis of multidimensional; experimental nuclear data, Acta Physica Slovaca 54 (2004) 385.; [2] D. Hearn, M. P. Baker: Computer Graphics, Prentice Hall International,; Inc. 1994.; Script:. Example to draw source spectrum (class TSpectrum2Painter).; To execute this example, do; root > .x VisA.C; #include ""TSpectrum2Painter.h""; void VisA() {; �� TFile *f = new TFile(""TSpectrum2.root"");; �� TH2F *graph=(TH2F*) f->Get(""graph2;1"");; �� TCanvas *Graph2 = new TCanvas(""Graph2"",""Illustration of 2D graphics"",10,10,1000,700);; �� graph->Draw(""SPEC"");; }. void SetDisplayMode(Int_t modeGroup, Int_t displayMode); Sets display group mode and display mode:; -modeGroup - the following group modes can be set: simple modes-kPicture2ModeGroupSimple, modes with shading according to light-kPicture2ModeGroupLight, modes with shading according to channels counts-kPicture2ModeGroupHeight, modes of combination of shading according to light and to channels counts-kPicture2ModeGroupLightHeight; -displayMode - posible display modes are: points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles. void SetPenAttr(Int_t color, Int_t style, Int_t width); Sets pen attributes:; -color - color of spectrum; -style - style of pen (solid, dash, dot, dash-dot); -width - width of pen in pixels. void SetNodes(Int_t nodesx, Int_t nodesy); Sets nodes in both directions:; -nodesx, nodesy, only the bins at the nodes points are displayed. void SetAngles(Int_t alpha, Int_t beta, Int_t view); Sets angles of the view:; -alpha - angles of display,alpha+beta must be less or equal to 90, alpha- angle between base line of Canvas and right lower edge of picture base plane; -beta - angle between base line of Canvas and left lower edge of picture base plane; -view - rotation angle of the view, it can be 0, 90, 180, 270 degree",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:31988,Usability,simpl,simple,31988," color, Int_t style, Int_t width); Sets pen attributes:; -color - color of spectrum; -style - style of pen (solid, dash, dot, dash-dot); -width - width of pen in pixels. void SetNodes(Int_t nodesx, Int_t nodesy); Sets nodes in both directions:; -nodesx, nodesy, only the bins at the nodes points are displayed. void SetAngles(Int_t alpha, Int_t beta, Int_t view); Sets angles of the view:; -alpha - angles of display,alpha+beta must be less or equal to 90, alpha- angle between base line of Canvas and right lower edge of picture base plane; -beta - angle between base line of Canvas and left lower edge of picture base plane; -view - rotation angle of the view, it can be 0, 90, 180, 270 degrees. void SetZScale(Int_t scale); Sets z-axis scale:; -scale - linear, sqrt or log. void SetColorAlgorithm(Int_t colorAlgorithm); Sets shading color algorithm:; -colorAlgorithm - applies only for rainbowed display modes; (rgb smooth alorithm, rgb modulo color component, cmy smooth alorithm,; cmy modulo color component, cie smooth alorithm,; cie modulo color component, yiq smooth alorithm,; yiq modulo color component, hsv smooth alorithm,; hsv modulo color component, it does not apply for simple display modes; algorithm group. void SetColorIncrements(Double_t r, Double_t g, Double_t b); Sets color increments between two color levels for r, g, b components:; -r, g, b - color increments between two color levels. void SetLightPosition(Int_t x, Int_t y, Int_t z); Sets position of fictive light source in 3D space:; -x, y, z. void SetShading(Int_t shading, Int_t shadow); Sets on/off shading and shadow switches:; -shading - determines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; -shadow - determines whether shadow will be drawn, for rainbowed display modes with shading according to light. void SetBezier(Int_t bezier); Sets on/off Bezier smoothing:; -bezier - determines Bezier interpolation (applies only for simple; display modes group for gr",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:32768,Usability,simpl,simple,32768,"modulo color component, cmy smooth alorithm,; cmy modulo color component, cie smooth alorithm,; cie modulo color component, yiq smooth alorithm,; yiq modulo color component, hsv smooth alorithm,; hsv modulo color component, it does not apply for simple display modes; algorithm group. void SetColorIncrements(Double_t r, Double_t g, Double_t b); Sets color increments between two color levels for r, g, b components:; -r, g, b - color increments between two color levels. void SetLightPosition(Int_t x, Int_t y, Int_t z); Sets position of fictive light source in 3D space:; -x, y, z. void SetShading(Int_t shading, Int_t shadow); Sets on/off shading and shadow switches:; -shading - determines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; -shadow - determines whether shadow will be drawn, for rainbowed display modes with shading according to light. void SetBezier(Int_t bezier); Sets on/off Bezier smoothing:; -bezier - determines Bezier interpolation (applies only for simple; display modes group for grid, x_lines, y_lines display modes). void SetContourWidth(Int_t width); Sets width between horizontal slices:; -width - width between contours, applies only for contours display mode. void SetLightHeightWeight(Double_t weight); Sets weight between shading according to fictive light source and according to channels counts:; -weight - weight between shading according to fictive light source and according to channels counts, applies only for kPicture2ModeGroupLightHeight modes group. void SetChanMarks(Int_t enable, Int_t color, Int_t width, Int_t height, Int_t style); Sets enables/disables drawing of channel marks and sets their attributes:; -enable - decides whether the channel marks are shown or not; -color - color of channel marks; -width - width of channel marks in pixels; -height - height of channel marks in pixels; -style - style of channel marks (dot, cross, star, rectangle, X, diamond, triangle). void SetChanGrid(Int_t en",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:34097,Usability,simpl,simple,34097,"pplies only for kPicture2ModeGroupLightHeight modes group. void SetChanMarks(Int_t enable, Int_t color, Int_t width, Int_t height, Int_t style); Sets enables/disables drawing of channel marks and sets their attributes:; -enable - decides whether the channel marks are shown or not; -color - color of channel marks; -width - width of channel marks in pixels; -height - height of channel marks in pixels; -style - style of channel marks (dot, cross, star, rectangle, X, diamond, triangle). void SetChanGrid(Int_t enable, Int_t color); This function sets enables/disables drawing of channel grid and sets its color:; -enable - decides whether the channel grid is shown or not; -color - color of channel grid. void GetDisplayMode(Int_t& modeGroup, Int_t& displayMode); Gets display group mode and display mode:; -modeGroup - the following group modes might have been set: simple modes-kPicture2ModeGroupSimple, modes with shading according to light-kPicture2ModeGroupLight, modes with shading according to channels counts-kPicture2ModeGroupHeight, modes of combination of shading according to light and to channels counts-kPicture2ModeGroupLightHeight; -displayMode - display modes that might have been set: points, grid, contours, bars, x_lines, y_lines, bars_x, bars_y, needles, surface, triangles. void GetPenAttr(Int_t& color, Int_t& style, Int_t& width); Gets pen attributes:; -color - color of spectrum; -style - style of pen (solid, dash, dot, dash-dot); -width - width of pen in pixels. void GetNodes(Int_t& nodesx, Int_t& nodesy); Gets nodes in both directions:; -nodesx, nodesy, only the bins at the nodes points are displayed. void GetAngles(Int_t& alpha, Int_t& beta, Int_t& view); Gets angles of the view:; -alpha - angle between base line of Canvas and right lower edge of picture base plane; -beta - angle between base line of Canvas and left lower edge of picture base plane; -view - rotation angle of the view, it can be 0, 90, 180, 270 degrees. void GetZScale(Int_t& scale); Gets z-axis ",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:36356,Usability,simpl,simple,36356," shading color algorithm:; -colorAlgorithm - rgb smooth alorithm, rgb modulo color component, cmy smooth alorithm, cmy modulo color component, cie smooth alorithm, cie modulo color component, yiq smooth alorithm, yiq modulo color component, hsv smooth alorithm, hsv modulo algorithm. void GetColorIncrements(Double_t& r, Double_t& g, Double_t& b); Gets color increments between two color levels for r, g, b components:; -r, g, b - color increments between two color levels. void GetLightPosition(Int_t& x, Int_t& y, Int_t& z); Gets position of fictive light source in 3D space:; -x, y, z. void GetShading(Int_t& shading, Int_t& shadow); Gets shading and shadow switches:; -shading - determines whether the picture will shaded, smoothed (no shading, shading), for rainbowed display modes only; -shadow - determines whether shadow will be drawn, for rainbowed display modes with shading according to light. void GetBezier(Int_t& bezier); Gets Bezier smoothing switch:; -bezier - determines Bezier interpolation (applies only for simple display modes group for grid, x_lines, y_lines display modes). void GetContourWidth(Int_t& width); Gets width between horizontal slices:; -width - width between contours, applies only for contours display mode. void GetLightHeightWeight(Double_t& weight); Gets weight between shading according to fictive light source and according to channels counts:; -weight - weight between shading according to fictive light source and according to channels counts, applies only for kPicture2ModeGroupLightHeight modes group. void GetChanMarks(Int_t& enable, Int_t& color, Int_t& width, Int_t& height, Int_t& style); Gets drawing attributes for channel marks:; -enable - decides whether the channel marks are shown or not; -color - color of channel marks; -width - width of channel marks in pixels; -height - height of channel marks in pixels; -style - style of channel marks (dot, cross, star, rectangle, X, diamond, triangle). void GetChanGrid(Int_t& enable, Int_t& color); Th",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:38446,Usability,Simpl,Simple,38446," TSpectrum2Painter and paint ""h2"". TSpectrum2Painter offers a large set of options/attributes. In the; ""option"" parameter each of them can be set to specific values via; ""operators"" in the option itself. for instance on can do:. h2->Draw(""SPEC a(30,30,0)"");. to draw h2 with TSpectrum2Painter using all the default attributes except; the viewing angles. The operators' names are case unsensitive (one can use; ""a"" or ""A""). Operators parameters are seperated by "","". The operators can; be put is any order in the option. Operators must be serparated by "" "".; No "" "" characters should be put in an operator. This help page describes; all the available operators. * * *. The way ""h2"" will be painted is controled with 2 parameters the ""Display; modes groups"" and the ""Display Modes"". ""Display modes groups"" can take the following values:. 0 = Simple - it covers simple display modes using one color only; 1 = Light - in this group the shading is carried out according to; the position of the fictive light source; 2 = Height - in this group the shading is carried out according to; the channel contents; 3 = LightHeight - combination of two previous shading algorithms. One; can control the weight between both algorithms. ""Display modes"" can take the following values:. 1 = Points.; 2 = Grid.; 3 = Contours.; 4 = Bars.; 5 = LinesX.; 6 = LinesY.; 7 = BarsX.; 8 = BarsY.; 9 = Needles.; 10 = Surface.; 11 = Triangles. Using this function these parameters can be set using the ""dm"" operator; in the option. Example:. h2->Draw(""SPEC dm(1,2)"");. will paint the 2D histogram h2 using the ""Light Display mode group"" and; the ""Grid Display mode"". The following table summarizes all the possible; combinations of the ""Display modes groups"" and the ""Display modes"". +--------+-------+--------+--------------+; | Simple | Light | Height | Light-Height |; +-----------+--------+-------+--------+--------------+; | Points | X | X | X | X |; +-----------+--------+-------+--------+--------------+; | Grid | X | X | X |",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:38465,Usability,simpl,simple,38465," TSpectrum2Painter and paint ""h2"". TSpectrum2Painter offers a large set of options/attributes. In the; ""option"" parameter each of them can be set to specific values via; ""operators"" in the option itself. for instance on can do:. h2->Draw(""SPEC a(30,30,0)"");. to draw h2 with TSpectrum2Painter using all the default attributes except; the viewing angles. The operators' names are case unsensitive (one can use; ""a"" or ""A""). Operators parameters are seperated by "","". The operators can; be put is any order in the option. Operators must be serparated by "" "".; No "" "" characters should be put in an operator. This help page describes; all the available operators. * * *. The way ""h2"" will be painted is controled with 2 parameters the ""Display; modes groups"" and the ""Display Modes"". ""Display modes groups"" can take the following values:. 0 = Simple - it covers simple display modes using one color only; 1 = Light - in this group the shading is carried out according to; the position of the fictive light source; 2 = Height - in this group the shading is carried out according to; the channel contents; 3 = LightHeight - combination of two previous shading algorithms. One; can control the weight between both algorithms. ""Display modes"" can take the following values:. 1 = Points.; 2 = Grid.; 3 = Contours.; 4 = Bars.; 5 = LinesX.; 6 = LinesY.; 7 = BarsX.; 8 = BarsY.; 9 = Needles.; 10 = Surface.; 11 = Triangles. Using this function these parameters can be set using the ""dm"" operator; in the option. Example:. h2->Draw(""SPEC dm(1,2)"");. will paint the 2D histogram h2 using the ""Light Display mode group"" and; the ""Grid Display mode"". The following table summarizes all the possible; combinations of the ""Display modes groups"" and the ""Display modes"". +--------+-------+--------+--------------+; | Simple | Light | Height | Light-Height |; +-----------+--------+-------+--------+--------------+; | Points | X | X | X | X |; +-----------+--------+-------+--------+--------------+; | Grid | X | X | X |",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:39405,Usability,Simpl,Simple,39405,"rid.; 3 = Contours.; 4 = Bars.; 5 = LinesX.; 6 = LinesY.; 7 = BarsX.; 8 = BarsY.; 9 = Needles.; 10 = Surface.; 11 = Triangles. Using this function these parameters can be set using the ""dm"" operator; in the option. Example:. h2->Draw(""SPEC dm(1,2)"");. will paint the 2D histogram h2 using the ""Light Display mode group"" and; the ""Grid Display mode"". The following table summarizes all the possible; combinations of the ""Display modes groups"" and the ""Display modes"". +--------+-------+--------+--------------+; | Simple | Light | Height | Light-Height |; +-----------+--------+-------+--------+--------------+; | Points | X | X | X | X |; +-----------+--------+-------+--------+--------------+; | Grid | X | X | X | X |; +-----------+--------+-------+--------+--------------+; | Contours | X | - | X | - |; +-----------+--------+-------+--------+--------------+; | Bars | X | - | X | - |; +-----------+--------+-------+--------+--------------+; | LinesX | X | X | X | X |; +-----------+--------+-------+--------+--------------+; | LinesY | X | X | X | X |; +-----------+--------+-------+--------+--------------+; | BarsX | X | - | X | - |; +-----------+--------+-------+--------+--------------+; | BarsY | X | - | X | - |; +-----------+--------+-------+--------+--------------+; | Needles | X | - | - | - |; +-----------+--------+-------+--------+--------------+; | Surface | - | X | X | X |; +-----------+--------+-------+--------+--------------+; | Triangles | X | X | X | X |; +-----------+--------+-------+--------+--------------+. * * *. The Pen Attributes can be changed using pa(color, style, width). Example:. h2->Draw(""SPEC dm(1,2) pa(2,1,2)"");. sets the line color to 2, line type to 1 and line width to2. Note that if; pa() is not specified, the histogram ""h2"" line attributes are used. Note; also that operators for SPEC option can be cummulated and specified in; any order. * * *. The buffer size can be change with bf(size). Example:. h2->Draw(""SPEC bf(8000)"");. The spectrum painter nee",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:42825,Usability,Simpl,Simple,42825,"the picture and beta on the left; side, respectively. One can rotate the 3-d space around vertical axis; going through the center of it employing the view parameter. Allowed; values are 0, 90, 180 and 270 degrees. * * *. zs(scale) changes the scale of the Z-axis Possible values are:. 0 = Linear (default); 1 = Log; 2 = Sqrt. If gPad->SetLogz() has been set, log scale on Z-axis is set automatically.; No need to use the zs() operator. Note that the X and Y axis are always; linear. * * *. ci(r,g,b), were r,g and b are floats defines the colors increments.; For sophisticated shading (Light, Height and LightHeight Display Modes; Groups) the color palette starts from the basic pen color (see pa(); function). There is a predefined number of color levels (256). Color in; every level is calculated by adding the increments of the r, g, b; components to the previous level. Using this function one can change the; color increments between two neighboring color levels. The function does; not apply dor the Simple Display Modes Group. The default values are:; (1,1,1). * * *. ca(color_algorithm) allows to choose the Color Algorithm.; To define the colors one can employ one of the following color algorithms; (RGB, CMY, CIE, YIQ, HVS models). When the level of a component reaches; the limit value one can choose either smooth transition (by decreasing; the limit value) or a sharp modulo transition (continuing with 0 value).; This makes possible to realize various visual effects. One can choose from; the following set of the algorithms:. 0 = RGB Smooth; 1 = RGB Modulo; 2 = CMY Smooth; 3 = CMY Modulo; 4 = CIE Smooth; 5 = CIE Modulo; 6 = YIQ Smooth; 7 = YIQ Modulo; 8 = HVS Smooth; 9 = HVS Modulo. This function does not apply on Simple display modes group. Default; value is 0. Example:. h2->Draw(""SPEC c1(4) dm(0,1) a(30,30,0)"");. choose CMY Modulo to paint the ""h2"" histogram. * * *. lp(x,y,z) set the light position.; In Light and LightHeight display modes groups the color palette is; calcula",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:43553,Usability,Simpl,Simple,43553,"d number of color levels (256). Color in; every level is calculated by adding the increments of the r, g, b; components to the previous level. Using this function one can change the; color increments between two neighboring color levels. The function does; not apply dor the Simple Display Modes Group. The default values are:; (1,1,1). * * *. ca(color_algorithm) allows to choose the Color Algorithm.; To define the colors one can employ one of the following color algorithms; (RGB, CMY, CIE, YIQ, HVS models). When the level of a component reaches; the limit value one can choose either smooth transition (by decreasing; the limit value) or a sharp modulo transition (continuing with 0 value).; This makes possible to realize various visual effects. One can choose from; the following set of the algorithms:. 0 = RGB Smooth; 1 = RGB Modulo; 2 = CMY Smooth; 3 = CMY Modulo; 4 = CIE Smooth; 5 = CIE Modulo; 6 = YIQ Smooth; 7 = YIQ Modulo; 8 = HVS Smooth; 9 = HVS Modulo. This function does not apply on Simple display modes group. Default; value is 0. Example:. h2->Draw(""SPEC c1(4) dm(0,1) a(30,30,0)"");. choose CMY Modulo to paint the ""h2"" histogram. * * *. lp(x,y,z) set the light position.; In Light and LightHeight display modes groups the color palette is; calculated according to the fictive light source position in 3-d space.; Using this function one can change the position of the source and thus; to achieve various graphical effects. This function does not apply for; Simple and Height display modes groups. Default is:; lp(1000,1000,100). * * *. s(shading,shadow) allows to set the shading.; The picture's surface is composed of triangles. If desired the edges of; the neighboring triangles can be smoothed (shaded). If desired the; display of the shadow can be painted as well. The function does not apply; for Simple display modes group. The possible values for shading are:. 0 = Not Shaded; 1 = Shaded. The possible values for shadow are:. 0 = Shadows are not painted; 1 = Shadows are",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:44030,Usability,Simpl,Simple,44030,", CMY, CIE, YIQ, HVS models). When the level of a component reaches; the limit value one can choose either smooth transition (by decreasing; the limit value) or a sharp modulo transition (continuing with 0 value).; This makes possible to realize various visual effects. One can choose from; the following set of the algorithms:. 0 = RGB Smooth; 1 = RGB Modulo; 2 = CMY Smooth; 3 = CMY Modulo; 4 = CIE Smooth; 5 = CIE Modulo; 6 = YIQ Smooth; 7 = YIQ Modulo; 8 = HVS Smooth; 9 = HVS Modulo. This function does not apply on Simple display modes group. Default; value is 0. Example:. h2->Draw(""SPEC c1(4) dm(0,1) a(30,30,0)"");. choose CMY Modulo to paint the ""h2"" histogram. * * *. lp(x,y,z) set the light position.; In Light and LightHeight display modes groups the color palette is; calculated according to the fictive light source position in 3-d space.; Using this function one can change the position of the source and thus; to achieve various graphical effects. This function does not apply for; Simple and Height display modes groups. Default is:; lp(1000,1000,100). * * *. s(shading,shadow) allows to set the shading.; The picture's surface is composed of triangles. If desired the edges of; the neighboring triangles can be smoothed (shaded). If desired the; display of the shadow can be painted as well. The function does not apply; for Simple display modes group. The possible values for shading are:. 0 = Not Shaded; 1 = Shaded. The possible values for shadow are:. 0 = Shadows are not painted; 1 = Shadows are painted. Default values: s(1,0). * * *. b(bezier) set the Bezier smoothing.; For Simple display modes group and for Grid, LinesX and LinesY display; modes one can smooth data using Bezier smoothing algorithm. The function; does not apply for other display modes groups and display modes. Possible; values are:. 0 = No bezier smoothing; 1 = Bezier smoothing. Default value is: b(0). * * *. cw(width) set the contour width.; This function applies only for the Contours display mode. ",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:44375,Usability,Simpl,Simple,44375,"ooth; 1 = RGB Modulo; 2 = CMY Smooth; 3 = CMY Modulo; 4 = CIE Smooth; 5 = CIE Modulo; 6 = YIQ Smooth; 7 = YIQ Modulo; 8 = HVS Smooth; 9 = HVS Modulo. This function does not apply on Simple display modes group. Default; value is 0. Example:. h2->Draw(""SPEC c1(4) dm(0,1) a(30,30,0)"");. choose CMY Modulo to paint the ""h2"" histogram. * * *. lp(x,y,z) set the light position.; In Light and LightHeight display modes groups the color palette is; calculated according to the fictive light source position in 3-d space.; Using this function one can change the position of the source and thus; to achieve various graphical effects. This function does not apply for; Simple and Height display modes groups. Default is:; lp(1000,1000,100). * * *. s(shading,shadow) allows to set the shading.; The picture's surface is composed of triangles. If desired the edges of; the neighboring triangles can be smoothed (shaded). If desired the; display of the shadow can be painted as well. The function does not apply; for Simple display modes group. The possible values for shading are:. 0 = Not Shaded; 1 = Shaded. The possible values for shadow are:. 0 = Shadows are not painted; 1 = Shadows are painted. Default values: s(1,0). * * *. b(bezier) set the Bezier smoothing.; For Simple display modes group and for Grid, LinesX and LinesY display; modes one can smooth data using Bezier smoothing algorithm. The function; does not apply for other display modes groups and display modes. Possible; values are:. 0 = No bezier smoothing; 1 = Bezier smoothing. Default value is: b(0). * * *. cw(width) set the contour width.; This function applies only for the Contours display mode. One can change; the width between horizontal slices and thus their density.; Default value: cw(50). * * *. lhw(weight) set the light height weight.; For LightHeight display modes group one can change the weight between; both shading algorithms. The function does not apply for other display; modes groups. Default value is lhw(0.5). * * *. ",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Painter.html:44632,Usability,Simpl,Simple,44632,"histogram. * * *. lp(x,y,z) set the light position.; In Light and LightHeight display modes groups the color palette is; calculated according to the fictive light source position in 3-d space.; Using this function one can change the position of the source and thus; to achieve various graphical effects. This function does not apply for; Simple and Height display modes groups. Default is:; lp(1000,1000,100). * * *. s(shading,shadow) allows to set the shading.; The picture's surface is composed of triangles. If desired the edges of; the neighboring triangles can be smoothed (shaded). If desired the; display of the shadow can be painted as well. The function does not apply; for Simple display modes group. The possible values for shading are:. 0 = Not Shaded; 1 = Shaded. The possible values for shadow are:. 0 = Shadows are not painted; 1 = Shadows are painted. Default values: s(1,0). * * *. b(bezier) set the Bezier smoothing.; For Simple display modes group and for Grid, LinesX and LinesY display; modes one can smooth data using Bezier smoothing algorithm. The function; does not apply for other display modes groups and display modes. Possible; values are:. 0 = No bezier smoothing; 1 = Bezier smoothing. Default value is: b(0). * * *. cw(width) set the contour width.; This function applies only for the Contours display mode. One can change; the width between horizontal slices and thus their density.; Default value: cw(50). * * *. lhw(weight) set the light height weight.; For LightHeight display modes group one can change the weight between; both shading algorithms. The function does not apply for other display; modes groups. Default value is lhw(0.5). * * *. cm(enable,color,width,height,style) allows to draw a marker on each node.; In addition to the surface drawn using any above given algorithm one can; display channel marks. One can control the color as well as the width,; height (in pixels) and the style of the marks. The parameter enable can; be set to. 0 = Channel mark",MatchSource.WIKI,root/html604/TSpectrum2Painter.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Painter.html
https://root.cern/root/html604/TSpectrum2Transform.html:2273,Availability,Error,Error,2273," virtual~TSpectrum2Transform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voi",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:2402,Availability,error,error,2402,"tual~TSpectrum2Transform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnhance(const Double_t** fSource, Double_t** fDest); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFilterZonal(const Double_t** fSource, Double_t** fDest); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; v",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:2486,Availability,error,error,2486,"irtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnhance(const Double_t** fSource, Double_t** fDest); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFilterZonal(const Double_t** fSource, Double_t** fDest); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObje",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:942,Energy Efficiency,adapt,adaptive,942,"trum2Transform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum2Transform. class TSpectrum2Transform: public TObject. THIS CLASS CONTAINS 2-DIMENSIONAL ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrum2Transform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObjec",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:1141,Energy Efficiency,adapt,adaptive,1141,"er viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum2Transform. class TSpectrum2Transform: public TObject. THIS CLASS CONTAINS 2-DIMENSIONAL ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrum2Transform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtu",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:1297,Energy Efficiency,adapt,adaptive,1297,"pectrum2Transform. class TSpectrum2Transform: public TObject. THIS CLASS CONTAINS 2-DIMENSIONAL ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrum2Transform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnhance(const Double_t** fSource, Double_t** fDest); virtual voidTObject::Error(const",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:9997,Energy Efficiency,power,power,9997,"alsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms; Int_tfDirectionforward or inverse transform; Double_tfEnhanceCoeffmultiplication coefficient applied in enhanced region;; Double_tfFilterCoeffvalue set in the filtered region; Int_tfSizeXx length of transformed data; Int_tfSizeYy length of transformed data; Int_tfTransformTypetype of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); Int_tfXmaxlast channel x of filtered or enhanced region; Int_tfXminfirst channel x of filtered or enhanced region; Int_tfYmaxlast channel y of filtered or enhanced region; Int_tfYminfirst channel y of filtered or enhanced region. Class Charts. Inheritance Chart:. TObject. ←; TSpectrum2Transform. Function documentation; TSpectrum2Transform(); default constructor. TSpectrum2Transform(Int_t sizeX, Int_t sizeY); the constructor creates TSpectrum2Transform object. Its sizes must be > than zero and must be power of 2.; It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ~TSpectrum2Transform(); destructor. void Haar(Double_t* working_space, Int_t num, Int_t direction). AUXILIARY FUNCION. This function calculates Haar transform of a part of data; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data; -direction-forward or inverse transform. void Walsh(Double_t* working_space, Int_t num). AUXILIARY FUNCION. This function calculates Walsh transform of a part of data; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data. void BitReverse(Double_t* working_space, Int_t num). AUXILIARY FUNCION. This function carries out bir-reverse reordering of data; Function parameters:; -working_space-pointer to vector of processed data; -num-length of processed data. void Fourier(Double_t* working_space, Int_t num, Int_t hartle",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:16297,Energy Efficiency,power,power,16297,"ction transforms the; source spectrum according to the given input parameters. Transformed data are; written into dest spectrum. Before the Transform function is called the class; must be created by constructor and the type of the transform as well as some; other parameters must be set using a set of setter functions:;  ; Member variables of; TSpectrumTransform2 class:; fSource-pointer; to the matrix of source spectrum. Its lengths should be equal to the �fSizex,; fSizey� parameters except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transforms. These need �2*fSizex*fSizey� length to supply real and imaginary; coefficients. ������������������; fDest-pointer; to the matrix of destination spectrum. Its lengths should be equal to the; �fSizex, fSizey� parameters except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transforms. These need �2*fSizex*fSizey� length to store real and imaginary; coefficients. ; ������� fSizeX,fSizeY-basic; lengths of the source and dest spectra. They should; be power �; �����; of 2.; fType-type of transform; ����������� Classic transforms:; ����������������������� kTransformHaar. ����������������������� kTransformWalsh. ����������������������� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartley. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spec",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:17416,Energy Efficiency,adapt,adaptive,17416,"� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartley. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� = nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Dou",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:17618,Energy Efficiency,adapt,adaptive,17618,"ixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� = nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Double_t ** dest = new; Double_t *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� source[i]=new; Double_t[nbinsy];;",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:17775,Energy Efficiency,adapt,adaptive,17775,"���������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� = nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Double_t ** dest = new; Double_t *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� source[i]=new; Double_t[nbinsy];; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� dest[i]=new; Double_t[nbinsy];�� ; �� TH2F *trans ",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:17995,Energy Efficiency,Energy,Energy,17995,"����������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� = nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Double_t ** dest = new; Double_t *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� source[i]=new; Double_t[nbinsy];; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� dest[i]=new; Double_t[nbinsy];�� ; �� TH2F *trans = new; TH2F(""trans"",""Background; estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; �� TFile *f = new; TFile(""TSpectrum2.root"");; �� trans=(TH2F*); f->Get(""back3;1"");; �� TCanvas *Tr = new; TCanvas(""Transform"",""Illustation of transform; function"",10,10,1000,700);; �� for (i = 0; i < nbinsx;; i++){; ���� for (j = 0; j <; nb",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:125,Modifiability,inherit,inheritance,125,". TSpectrum2Transform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum2Transform. class TSpectrum2Transform: public TObject. THIS CLASS CONTAINS 2-DIMENSIONAL ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrum2Transform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voi",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:833,Modifiability,enhance,enhancement,833,". TSpectrum2Transform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum2Transform. class TSpectrum2Transform: public TObject. THIS CLASS CONTAINS 2-DIMENSIONAL ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrum2Transform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voi",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:942,Modifiability,adapt,adaptive,942,"trum2Transform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum2Transform. class TSpectrum2Transform: public TObject. THIS CLASS CONTAINS 2-DIMENSIONAL ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrum2Transform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObjec",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:1141,Modifiability,adapt,adaptive,1141,"er viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum2Transform. class TSpectrum2Transform: public TObject. THIS CLASS CONTAINS 2-DIMENSIONAL ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrum2Transform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtu",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:1297,Modifiability,adapt,adaptive,1297,"pectrum2Transform. class TSpectrum2Transform: public TObject. THIS CLASS CONTAINS 2-DIMENSIONAL ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrum2Transform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnhance(const Double_t** fSource, Double_t** fDest); virtual voidTObject::Error(const",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:3427,Modifiability,Inherit,InheritsFrom,3427,"::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFilterZonal(const Double_t** fSource, Double_t** fDest); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t ",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:3493,Modifiability,Inherit,InheritsFrom,3493,"irtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFilterZonal(const Double_t** fSource, Double_t** fDest); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSpectrum2Transform&operator=(const TSpectrum2Trans",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:5184,Modifiability,enhance,enhanceCoeff,5184,"ator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSpectrum2Transform&operator=(const TSpectrum2Transform&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDirection(Int_t direction); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEnhanceCoeff(Double_t enhanceCoeff); voidSetFilterCoeff(Double_t filterCoeff); static voidTObject::SetObjectStat(Bool_t stat); voidSetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax); voidSetTransformType(Int_t transType, Int_t degree); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTransform(const Double_t** fSource, Double_t** fDest); TSpectrum2Transform(); TSpectrum2Transform(const TSpectrum2Transform&); TSpectrum2Transform(Int_t sizeX, Int_t sizeY); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:9157,Modifiability,enhance,enhanced,9157,"TransformFourierWalsh; static TSpectrum2Transform::(anonymous)kTransformHaar; static TSpectrum2Transform::(anonymous)kTransformHartley; static TSpectrum2Transform::(anonymous)kTransformInverse; static TSpectrum2Transform::(anonymous)kTransformSin; static TSpectrum2Transform::(anonymous)kTransformSinHaar; static TSpectrum2Transform::(anonymous)kTransformSinWalsh; static TSpectrum2Transform::(anonymous)kTransformWalsh; static TSpectrum2Transform::(anonymous)kTransformWalshHaar; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDegreedegree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms; Int_tfDirectionforward or inverse transform; Double_tfEnhanceCoeffmultiplication coefficient applied in enhanced region;; Double_tfFilterCoeffvalue set in the filtered region; Int_tfSizeXx length of transformed data; Int_tfSizeYy length of transformed data; Int_tfTransformTypetype of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); Int_tfXmaxlast channel x of filtered or enhanced region; Int_tfXminfirst channel x of filtered or enhanced region; Int_tfYmaxlast channel y of filtered or enhanced region; Int_tfYminfirst channel y of filtered or enhanced region. Class Charts. Inheritance Chart:. TObject. ←; TSpectrum2Transform. Function documentation; TSpectrum2Transform(); default constructor. TSpectrum2Transform(Int_t sizeX, Int_t sizeY); the constructor creates TSpectrum2Transform object. Its sizes must be > than zero and must be power of 2.; It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ~TSpectrum2Transform(); destructor. void Haar(Double_t* working_space, Int_t num, Int_t direction). AUXILIARY FUNCION. This function calculates Haar transform of a part of data; Func",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:9531,Modifiability,enhance,enhanced,9531,"TransformFourierWalsh; static TSpectrum2Transform::(anonymous)kTransformHaar; static TSpectrum2Transform::(anonymous)kTransformHartley; static TSpectrum2Transform::(anonymous)kTransformInverse; static TSpectrum2Transform::(anonymous)kTransformSin; static TSpectrum2Transform::(anonymous)kTransformSinHaar; static TSpectrum2Transform::(anonymous)kTransformSinWalsh; static TSpectrum2Transform::(anonymous)kTransformWalsh; static TSpectrum2Transform::(anonymous)kTransformWalshHaar; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDegreedegree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms; Int_tfDirectionforward or inverse transform; Double_tfEnhanceCoeffmultiplication coefficient applied in enhanced region;; Double_tfFilterCoeffvalue set in the filtered region; Int_tfSizeXx length of transformed data; Int_tfSizeYy length of transformed data; Int_tfTransformTypetype of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); Int_tfXmaxlast channel x of filtered or enhanced region; Int_tfXminfirst channel x of filtered or enhanced region; Int_tfYmaxlast channel y of filtered or enhanced region; Int_tfYminfirst channel y of filtered or enhanced region. Class Charts. Inheritance Chart:. TObject. ←; TSpectrum2Transform. Function documentation; TSpectrum2Transform(); default constructor. TSpectrum2Transform(Int_t sizeX, Int_t sizeY); the constructor creates TSpectrum2Transform object. Its sizes must be > than zero and must be power of 2.; It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ~TSpectrum2Transform(); destructor. void Haar(Double_t* working_space, Int_t num, Int_t direction). AUXILIARY FUNCION. This function calculates Haar transform of a part of data; Func",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:9589,Modifiability,enhance,enhanced,9589,"TransformFourierWalsh; static TSpectrum2Transform::(anonymous)kTransformHaar; static TSpectrum2Transform::(anonymous)kTransformHartley; static TSpectrum2Transform::(anonymous)kTransformInverse; static TSpectrum2Transform::(anonymous)kTransformSin; static TSpectrum2Transform::(anonymous)kTransformSinHaar; static TSpectrum2Transform::(anonymous)kTransformSinWalsh; static TSpectrum2Transform::(anonymous)kTransformWalsh; static TSpectrum2Transform::(anonymous)kTransformWalshHaar; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDegreedegree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms; Int_tfDirectionforward or inverse transform; Double_tfEnhanceCoeffmultiplication coefficient applied in enhanced region;; Double_tfFilterCoeffvalue set in the filtered region; Int_tfSizeXx length of transformed data; Int_tfSizeYy length of transformed data; Int_tfTransformTypetype of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); Int_tfXmaxlast channel x of filtered or enhanced region; Int_tfXminfirst channel x of filtered or enhanced region; Int_tfYmaxlast channel y of filtered or enhanced region; Int_tfYminfirst channel y of filtered or enhanced region. Class Charts. Inheritance Chart:. TObject. ←; TSpectrum2Transform. Function documentation; TSpectrum2Transform(); default constructor. TSpectrum2Transform(Int_t sizeX, Int_t sizeY); the constructor creates TSpectrum2Transform object. Its sizes must be > than zero and must be power of 2.; It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ~TSpectrum2Transform(); destructor. void Haar(Double_t* working_space, Int_t num, Int_t direction). AUXILIARY FUNCION. This function calculates Haar transform of a part of data; Func",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:9646,Modifiability,enhance,enhanced,9646,"TransformFourierWalsh; static TSpectrum2Transform::(anonymous)kTransformHaar; static TSpectrum2Transform::(anonymous)kTransformHartley; static TSpectrum2Transform::(anonymous)kTransformInverse; static TSpectrum2Transform::(anonymous)kTransformSin; static TSpectrum2Transform::(anonymous)kTransformSinHaar; static TSpectrum2Transform::(anonymous)kTransformSinWalsh; static TSpectrum2Transform::(anonymous)kTransformWalsh; static TSpectrum2Transform::(anonymous)kTransformWalshHaar; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDegreedegree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms; Int_tfDirectionforward or inverse transform; Double_tfEnhanceCoeffmultiplication coefficient applied in enhanced region;; Double_tfFilterCoeffvalue set in the filtered region; Int_tfSizeXx length of transformed data; Int_tfSizeYy length of transformed data; Int_tfTransformTypetype of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); Int_tfXmaxlast channel x of filtered or enhanced region; Int_tfXminfirst channel x of filtered or enhanced region; Int_tfYmaxlast channel y of filtered or enhanced region; Int_tfYminfirst channel y of filtered or enhanced region. Class Charts. Inheritance Chart:. TObject. ←; TSpectrum2Transform. Function documentation; TSpectrum2Transform(); default constructor. TSpectrum2Transform(Int_t sizeX, Int_t sizeY); the constructor creates TSpectrum2Transform object. Its sizes must be > than zero and must be power of 2.; It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ~TSpectrum2Transform(); destructor. void Haar(Double_t* working_space, Int_t num, Int_t direction). AUXILIARY FUNCION. This function calculates Haar transform of a part of data; Func",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:9704,Modifiability,enhance,enhanced,9704,"TransformFourierWalsh; static TSpectrum2Transform::(anonymous)kTransformHaar; static TSpectrum2Transform::(anonymous)kTransformHartley; static TSpectrum2Transform::(anonymous)kTransformInverse; static TSpectrum2Transform::(anonymous)kTransformSin; static TSpectrum2Transform::(anonymous)kTransformSinHaar; static TSpectrum2Transform::(anonymous)kTransformSinWalsh; static TSpectrum2Transform::(anonymous)kTransformWalsh; static TSpectrum2Transform::(anonymous)kTransformWalshHaar; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDegreedegree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms; Int_tfDirectionforward or inverse transform; Double_tfEnhanceCoeffmultiplication coefficient applied in enhanced region;; Double_tfFilterCoeffvalue set in the filtered region; Int_tfSizeXx length of transformed data; Int_tfSizeYy length of transformed data; Int_tfTransformTypetype of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); Int_tfXmaxlast channel x of filtered or enhanced region; Int_tfXminfirst channel x of filtered or enhanced region; Int_tfYmaxlast channel y of filtered or enhanced region; Int_tfYminfirst channel y of filtered or enhanced region. Class Charts. Inheritance Chart:. TObject. ←; TSpectrum2Transform. Function documentation; TSpectrum2Transform(); default constructor. TSpectrum2Transform(Int_t sizeX, Int_t sizeY); the constructor creates TSpectrum2Transform object. Its sizes must be > than zero and must be power of 2.; It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ~TSpectrum2Transform(); destructor. void Haar(Double_t* working_space, Int_t num, Int_t direction). AUXILIARY FUNCION. This function calculates Haar transform of a part of data; Func",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:9735,Modifiability,Inherit,Inheritance,9735,"2Transform::(anonymous)kTransformWalshHaar; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDegreedegree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms; Int_tfDirectionforward or inverse transform; Double_tfEnhanceCoeffmultiplication coefficient applied in enhanced region;; Double_tfFilterCoeffvalue set in the filtered region; Int_tfSizeXx length of transformed data; Int_tfSizeYy length of transformed data; Int_tfTransformTypetype of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); Int_tfXmaxlast channel x of filtered or enhanced region; Int_tfXminfirst channel x of filtered or enhanced region; Int_tfYmaxlast channel y of filtered or enhanced region; Int_tfYminfirst channel y of filtered or enhanced region. Class Charts. Inheritance Chart:. TObject. ←; TSpectrum2Transform. Function documentation; TSpectrum2Transform(); default constructor. TSpectrum2Transform(Int_t sizeX, Int_t sizeY); the constructor creates TSpectrum2Transform object. Its sizes must be > than zero and must be power of 2.; It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ~TSpectrum2Transform(); destructor. void Haar(Double_t* working_space, Int_t num, Int_t direction). AUXILIARY FUNCION. This function calculates Haar transform of a part of data; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data; -direction-forward or inverse transform. void Walsh(Double_t* working_space, Int_t num). AUXILIARY FUNCION. This function calculates Walsh transform of a part of data; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data. void BitReverse(Double_t* working_space, Int_t num). AUXILI",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:14927,Modifiability,enhance,enhance,14927,"ee manual); -degree-degree of transform (see manual). void Transform(const Double_t** fSource, Double_t** fDest). TWO-DIMENSIONAL TRANSFORM FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters.; Transformed data are written into dest spectrum. Function parameters:; fSource-pointer to the matrix of source spectrum, its size should; be fSizex*fSizey except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transform. These need fSizex*2*fSizey length to supply real and; imaginary coefficients.; fDest-pointer to the matrix of destination data, its size should be; fSizex*fSizey except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These; need fSizex*2*fSizey length to store real and imaginary coefficients; fSizex,fSizey-basic dimensions of source and dest spectra. . Transform methods;  ; Goal: to analyze experimental; data using orthogonal transforms; �        ; orthogonal transforms can be successfully used for the processing of; nuclear spectra (not only) ; �        ; they can be used to remove high frequency noise, to increase; signal-to-background ratio as well as to enhance low intensity components [1],; to carry out e.g. Fourier analysis etc. ; �        ; we have implemented the function for the calculation of the commonly; used orthogonal transforms as well as functions for the filtration and; enhancement of experimental data;  ; Function:; void TSpectrumTransform2::Transform(const; double **fSource,; double **fDest);  ; This function transforms the; source spectrum according to the given input parameters. Transformed data are; written into dest spectrum. Before the Transform function is called the class; must be created by constructor and the type of the transform as well as some; other parameters must be set using a set of setter functions:;  ; Member variables of; TSpectrumTransform2 class:; fSource-pointer; to the matrix of source spectrum. Its lengths should be equal to the �fSizex,; fSizey� parameters except for ",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:15161,Modifiability,enhance,enhancement,15161,"Sizex*fSizey except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transform. These need fSizex*2*fSizey length to supply real and; imaginary coefficients.; fDest-pointer to the matrix of destination data, its size should be; fSizex*fSizey except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These; need fSizex*2*fSizey length to store real and imaginary coefficients; fSizex,fSizey-basic dimensions of source and dest spectra. . Transform methods;  ; Goal: to analyze experimental; data using orthogonal transforms; �        ; orthogonal transforms can be successfully used for the processing of; nuclear spectra (not only) ; �        ; they can be used to remove high frequency noise, to increase; signal-to-background ratio as well as to enhance low intensity components [1],; to carry out e.g. Fourier analysis etc. ; �        ; we have implemented the function for the calculation of the commonly; used orthogonal transforms as well as functions for the filtration and; enhancement of experimental data;  ; Function:; void TSpectrumTransform2::Transform(const; double **fSource,; double **fDest);  ; This function transforms the; source spectrum according to the given input parameters. Transformed data are; written into dest spectrum. Before the Transform function is called the class; must be created by constructor and the type of the transform as well as some; other parameters must be set using a set of setter functions:;  ; Member variables of; TSpectrumTransform2 class:; fSource-pointer; to the matrix of source spectrum. Its lengths should be equal to the �fSizex,; fSizey� parameters except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transforms. These need �2*fSizex*fSizey� length to supply real and imaginary; coefficients. ������������������; fDest-pointer; to the matrix of destination spectrum. Its lengths should be equal to the; �fSizex, fSizey� parameters except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transforms. These need �2*fSizex*fSizey� length to store real and imagin",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:15630,Modifiability,variab,variables,15630," dimensions of source and dest spectra. . Transform methods;  ; Goal: to analyze experimental; data using orthogonal transforms; �        ; orthogonal transforms can be successfully used for the processing of; nuclear spectra (not only) ; �        ; they can be used to remove high frequency noise, to increase; signal-to-background ratio as well as to enhance low intensity components [1],; to carry out e.g. Fourier analysis etc. ; �        ; we have implemented the function for the calculation of the commonly; used orthogonal transforms as well as functions for the filtration and; enhancement of experimental data;  ; Function:; void TSpectrumTransform2::Transform(const; double **fSource,; double **fDest);  ; This function transforms the; source spectrum according to the given input parameters. Transformed data are; written into dest spectrum. Before the Transform function is called the class; must be created by constructor and the type of the transform as well as some; other parameters must be set using a set of setter functions:;  ; Member variables of; TSpectrumTransform2 class:; fSource-pointer; to the matrix of source spectrum. Its lengths should be equal to the �fSizex,; fSizey� parameters except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transforms. These need �2*fSizex*fSizey� length to supply real and imaginary; coefficients. ������������������; fDest-pointer; to the matrix of destination spectrum. Its lengths should be equal to the; �fSizex, fSizey� parameters except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transforms. These need �2*fSizex*fSizey� length to store real and imaginary; coefficients. ; ������� fSizeX,fSizeY-basic; lengths of the source and dest spectra. They should; be power �; �����; of 2.; fType-type of transform; ����������� Classic transforms:; ����������������������� kTransformHaar. ����������������������� kTransformWalsh. ����������������������� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFour",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:17304,Modifiability,enhance,enhancement,17304,"����; of 2.; fType-type of transform; ����������� Classic transforms:; ����������������������� kTransformHaar. ����������������������� kTransformWalsh. ����������������������� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartley. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:17416,Modifiability,adapt,adaptive,17416,"� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartley. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� = nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Dou",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:17618,Modifiability,adapt,adaptive,17618,"ixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� = nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Double_t ** dest = new; Double_t *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� source[i]=new; Double_t[nbinsy];;",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:17775,Modifiability,adapt,adaptive,17775,"���������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example 1 � script Transform2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Transformed spectrum; from Fig. 1 using Cosine transform. Energy of the trasnsformed data is; concentrated around the beginning of the coordinate system;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Transform2.C; void Transform2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� = nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Double_t ** dest = new; Double_t *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� source[i]=new; Double_t[nbinsy];; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� dest[i]=new; Double_t[nbinsy];�� ; �� TH2F *trans ",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:22536,Modifiability,Enhance,Enhance,22536,"�������������������������������� dest[i]=new; Double_t[nbinsy];�� ; �� TH2F *trans = new; TH2F(""trans"",""Background; estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; �� TFile *f = new; TFile(""TSpectrum2.root"");; �� trans=(TH2F*); f->Get(""back3;1"");; �� TCanvas *Tr = new; TCanvas(""Transform"",""Illustation of transform; function"",10,10,1000,700);; �� for (i = 0; i < nbinsx;; i++){; ���� for (j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; �� t->SetTransformType(t->kTransformCos,0);��. ��; t->SetRegion(0,255,128,255);; ��; t->FilterZonal(source,dest);���� ; �� for (i = 0; i < nbinsx; i++){; ���� for (j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = dest[i][j]; ; �� ������������ �}; �� }�� ; ��; t->SetRegion(128,255,0,255);; �� t->FilterZonal(source,dest);�������. ��; trans->Draw(""SURF"");���� ; }. void Enhance(const Double_t** fSource, Double_t** fDest). TWO-DIMENSIONAL ENHANCE ZONAL FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters. Then it multiplies transformed; coefficients in the given region by the given; enhance_coeff and transforms it back. Function parameters:; fSource-pointer to the matrix of source spectrum, its size should; be fSizeX*fSizeY; fDest-pointer to the matrix of destination data, its size should be; fSizeX*fSizeY. . Example of enhancement;  ; Function:; void TSpectrumTransform2::Enhance(const; double; **fSource, double; **fDest);  ; This function transforms the; source spectrum (for details see Transform function). �Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter; functions. The Enhance function multiplies transformed coefficients in the given; region (fXmin, fXmax, fYmin, fYmax) by the given fEnhan",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:22605,Modifiability,ENHANCE,ENHANCE,22605,"H2F *trans = new; TH2F(""trans"",""Background; estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; �� TFile *f = new; TFile(""TSpectrum2.root"");; �� trans=(TH2F*); f->Get(""back3;1"");; �� TCanvas *Tr = new; TCanvas(""Transform"",""Illustation of transform; function"",10,10,1000,700);; �� for (i = 0; i < nbinsx;; i++){; ���� for (j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; �� t->SetTransformType(t->kTransformCos,0);��. ��; t->SetRegion(0,255,128,255);; ��; t->FilterZonal(source,dest);���� ; �� for (i = 0; i < nbinsx; i++){; ���� for (j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = dest[i][j]; ; �� ������������ �}; �� }�� ; ��; t->SetRegion(128,255,0,255);; �� t->FilterZonal(source,dest);�������. ��; trans->Draw(""SURF"");���� ; }. void Enhance(const Double_t** fSource, Double_t** fDest). TWO-DIMENSIONAL ENHANCE ZONAL FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters. Then it multiplies transformed; coefficients in the given region by the given; enhance_coeff and transforms it back. Function parameters:; fSource-pointer to the matrix of source spectrum, its size should; be fSizeX*fSizeY; fDest-pointer to the matrix of destination data, its size should be; fSizeX*fSizeY. . Example of enhancement;  ; Function:; void TSpectrumTransform2::Enhance(const; double; **fSource, double; **fDest);  ; This function transforms the; source spectrum (for details see Transform function). �Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter; functions. The Enhance function multiplies transformed coefficients in the given; region (fXmin, fXmax, fYmin, fYmax) by the given fEnhancCoeff and transforms it; back. Enhanced data are written into dest spec",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:23050,Modifiability,enhance,enhancement,23050,"(256,256);�� ; �� t->SetTransformType(t->kTransformCos,0);��. ��; t->SetRegion(0,255,128,255);; ��; t->FilterZonal(source,dest);���� ; �� for (i = 0; i < nbinsx; i++){; ���� for (j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = dest[i][j]; ; �� ������������ �}; �� }�� ; ��; t->SetRegion(128,255,0,255);; �� t->FilterZonal(source,dest);�������. ��; trans->Draw(""SURF"");���� ; }. void Enhance(const Double_t** fSource, Double_t** fDest). TWO-DIMENSIONAL ENHANCE ZONAL FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters. Then it multiplies transformed; coefficients in the given region by the given; enhance_coeff and transforms it back. Function parameters:; fSource-pointer to the matrix of source spectrum, its size should; be fSizeX*fSizeY; fDest-pointer to the matrix of destination data, its size should be; fSizeX*fSizeY. . Example of enhancement;  ; Function:; void TSpectrumTransform2::Enhance(const; double; **fSource, double; **fDest);  ; This function transforms the; source spectrum (for details see Transform function). �Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter; functions. The Enhance function multiplies transformed coefficients in the given; region (fXmin, fXmax, fYmin, fYmax) by the given fEnhancCoeff and transforms it; back. Enhanced data are written into dest spectrum.; Example � script Enhance2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Enhanced spectrum of; the data from Fig. 1 using Cosine transform (channels in region (0-63)x(0-63); were multiplied by 5) ;  ; Script:; // Example to illustrate; enhancement (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Enhance2.C; �; void Enhance2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� ",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:23103,Modifiability,Enhance,Enhance,23103,"(256,256);�� ; �� t->SetTransformType(t->kTransformCos,0);��. ��; t->SetRegion(0,255,128,255);; ��; t->FilterZonal(source,dest);���� ; �� for (i = 0; i < nbinsx; i++){; ���� for (j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = dest[i][j]; ; �� ������������ �}; �� }�� ; ��; t->SetRegion(128,255,0,255);; �� t->FilterZonal(source,dest);�������. ��; trans->Draw(""SURF"");���� ; }. void Enhance(const Double_t** fSource, Double_t** fDest). TWO-DIMENSIONAL ENHANCE ZONAL FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters. Then it multiplies transformed; coefficients in the given region by the given; enhance_coeff and transforms it back. Function parameters:; fSource-pointer to the matrix of source spectrum, its size should; be fSizeX*fSizeY; fDest-pointer to the matrix of destination data, its size should be; fSizeX*fSizeY. . Example of enhancement;  ; Function:; void TSpectrumTransform2::Enhance(const; double; **fSource, double; **fDest);  ; This function transforms the; source spectrum (for details see Transform function). �Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter; functions. The Enhance function multiplies transformed coefficients in the given; region (fXmin, fXmax, fYmin, fYmax) by the given fEnhancCoeff and transforms it; back. Enhanced data are written into dest spectrum.; Example � script Enhance2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Enhanced spectrum of; the data from Fig. 1 using Cosine transform (channels in region (0-63)x(0-63); were multiplied by 5) ;  ; Script:; // Example to illustrate; enhancement (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Enhance2.C; �; void Enhance2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� ",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:23254,Modifiability,Enhance,Enhance,23254,"; j++){; �� ������������ ����source[i][j] = dest[i][j]; ; �� ������������ �}; �� }�� ; ��; t->SetRegion(128,255,0,255);; �� t->FilterZonal(source,dest);�������. ��; trans->Draw(""SURF"");���� ; }. void Enhance(const Double_t** fSource, Double_t** fDest). TWO-DIMENSIONAL ENHANCE ZONAL FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters. Then it multiplies transformed; coefficients in the given region by the given; enhance_coeff and transforms it back. Function parameters:; fSource-pointer to the matrix of source spectrum, its size should; be fSizeX*fSizeY; fDest-pointer to the matrix of destination data, its size should be; fSizeX*fSizeY. . Example of enhancement;  ; Function:; void TSpectrumTransform2::Enhance(const; double; **fSource, double; **fDest);  ; This function transforms the; source spectrum (for details see Transform function). �Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter; functions. The Enhance function multiplies transformed coefficients in the given; region (fXmin, fXmax, fYmin, fYmax) by the given fEnhancCoeff and transforms it; back. Enhanced data are written into dest spectrum.; Example � script Enhance2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Enhanced spectrum of; the data from Fig. 1 using Cosine transform (channels in region (0-63)x(0-63); were multiplied by 5) ;  ; Script:; // Example to illustrate; enhancement (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Enhance2.C; �; void Enhance2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Double_t ** dest = new; Double_t *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); �������������������������������",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:23437,Modifiability,Enhance,Enhance,23437,"w(""SURF"");���� ; }. void Enhance(const Double_t** fSource, Double_t** fDest). TWO-DIMENSIONAL ENHANCE ZONAL FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters. Then it multiplies transformed; coefficients in the given region by the given; enhance_coeff and transforms it back. Function parameters:; fSource-pointer to the matrix of source spectrum, its size should; be fSizeX*fSizeY; fDest-pointer to the matrix of destination data, its size should be; fSizeX*fSizeY. . Example of enhancement;  ; Function:; void TSpectrumTransform2::Enhance(const; double; **fSource, double; **fDest);  ; This function transforms the; source spectrum (for details see Transform function). �Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter; functions. The Enhance function multiplies transformed coefficients in the given; region (fXmin, fXmax, fYmin, fYmax) by the given fEnhancCoeff and transforms it; back. Enhanced data are written into dest spectrum.; Example � script Enhance2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Enhanced spectrum of; the data from Fig. 1 using Cosine transform (channels in region (0-63)x(0-63); were multiplied by 5) ;  ; Script:; // Example to illustrate; enhancement (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Enhance2.C; �; void Enhance2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Double_t ** dest = new; Double_t *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� source[i]=new; Double_t[nbinsy];; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� dest[i]=new; Double_t[nbinsy];�� ; �� TH2F *tran",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:23591,Modifiability,Enhance,Enhanced,23591,"ZONAL FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters. Then it multiplies transformed; coefficients in the given region by the given; enhance_coeff and transforms it back. Function parameters:; fSource-pointer to the matrix of source spectrum, its size should; be fSizeX*fSizeY; fDest-pointer to the matrix of destination data, its size should be; fSizeX*fSizeY. . Example of enhancement;  ; Function:; void TSpectrumTransform2::Enhance(const; double; **fSource, double; **fDest);  ; This function transforms the; source spectrum (for details see Transform function). �Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter; functions. The Enhance function multiplies transformed coefficients in the given; region (fXmin, fXmax, fYmin, fYmax) by the given fEnhancCoeff and transforms it; back. Enhanced data are written into dest spectrum.; Example � script Enhance2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Enhanced spectrum of; the data from Fig. 1 using Cosine transform (channels in region (0-63)x(0-63); were multiplied by 5) ;  ; Script:; // Example to illustrate; enhancement (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Enhance2.C; �; void Enhance2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Double_t ** dest = new; Double_t *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� source[i]=new; Double_t[nbinsy];; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� dest[i]=new; Double_t[nbinsy];�� ; �� TH2F *trans = new; TH2F(""trans"",""Background; estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; �� TFile *f = new;",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:23723,Modifiability,Enhance,Enhanced,23723,"iplies transformed; coefficients in the given region by the given; enhance_coeff and transforms it back. Function parameters:; fSource-pointer to the matrix of source spectrum, its size should; be fSizeX*fSizeY; fDest-pointer to the matrix of destination data, its size should be; fSizeX*fSizeY. . Example of enhancement;  ; Function:; void TSpectrumTransform2::Enhance(const; double; **fSource, double; **fDest);  ; This function transforms the; source spectrum (for details see Transform function). �Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter; functions. The Enhance function multiplies transformed coefficients in the given; region (fXmin, fXmax, fYmin, fYmax) by the given fEnhancCoeff and transforms it; back. Enhanced data are written into dest spectrum.; Example � script Enhance2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Enhanced spectrum of; the data from Fig. 1 using Cosine transform (channels in region (0-63)x(0-63); were multiplied by 5) ;  ; Script:; // Example to illustrate; enhancement (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Enhance2.C; �; void Enhance2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Double_t ** dest = new; Double_t *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� source[i]=new; Double_t[nbinsy];; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� dest[i]=new; Double_t[nbinsy];�� ; �� TH2F *trans = new; TH2F(""trans"",""Background; estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; �� TFile *f = new; TFile(""TSpectrum2.root"");; �� trans=(TH2F*); f->Get(""back3;1"");; �� TCanvas *Tr = new; TCanvas(""Transform"",""Illustation of trans",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:23886,Modifiability,enhance,enhancement,23886,". Function parameters:; fSource-pointer to the matrix of source spectrum, its size should; be fSizeX*fSizeY; fDest-pointer to the matrix of destination data, its size should be; fSizeX*fSizeY. . Example of enhancement;  ; Function:; void TSpectrumTransform2::Enhance(const; double; **fSource, double; **fDest);  ; This function transforms the; source spectrum (for details see Transform function). �Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter; functions. The Enhance function multiplies transformed coefficients in the given; region (fXmin, fXmax, fYmin, fYmax) by the given fEnhancCoeff and transforms it; back. Enhanced data are written into dest spectrum.; Example � script Enhance2.c:. Fig. 1 Original two-dimensional noisy spectrum. Fig. 2 Enhanced spectrum of; the data from Fig. 1 using Cosine transform (channels in region (0-63)x(0-63); were multiplied by 5) ;  ; Script:; // Example to illustrate; enhancement (class TSpectrumTransform2).; // To execute this example,; do; // root > .x Enhance2.C; �; void Enhance2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Double_t ** dest = new; Double_t *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� source[i]=new; Double_t[nbinsy];; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� dest[i]=new; Double_t[nbinsy];�� ; �� TH2F *trans = new; TH2F(""trans"",""Background; estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; �� TFile *f = new; TFile(""TSpectrum2.root"");; �� trans=(TH2F*); f->Get(""back3;1"");; �� TCanvas *Tr = new; TCanvas(""Transform"",""Illustation of transform; function"",10,10,1000,700);; �� for (i = 0; i < nbinsx;; i++){; ���� for (j = 0; j <; nbinsy; j++)",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:25142,Modifiability,Enhance,Enhance,25142,"ansform2).; // To execute this example,; do; // root > .x Enhance2.C; �; void Enhance2() {; �� Int_t i, j;; �� Int_t nbinsx =; 256;; �� Int_t nbinsy =; 256;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;; �� Double_t ** source = new Double_t *[nbinsx];�� ; �� Double_t ** dest = new; Double_t *[nbinsx];����� ; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� source[i]=new; Double_t[nbinsy];; �� for (i=0;i<nbinsx;i++); ����������������������������������������������� dest[i]=new; Double_t[nbinsy];�� ; �� TH2F *trans = new; TH2F(""trans"",""Background; estimation"",nbinsx,xmin,xmax,nbinsy,ymin,ymax);; �� TFile *f = new; TFile(""TSpectrum2.root"");; �� trans=(TH2F*); f->Get(""back3;1"");; �� TCanvas *Tr = new; TCanvas(""Transform"",""Illustation of transform; function"",10,10,1000,700);; �� for (i = 0; i < nbinsx;; i++){; ���� for (j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; ��; t->SetTransformType(t->kTransformCos,0);�� ; ��; t->SetRegion(0,63,0,63);�� ; ��; t->SetEnhanceCoeff(5);; ��; t->Enhance(source,dest);�� ; �� trans->Draw(""SURF"");���� ; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax, ymin, ymax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transf",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:25772,Modifiability,enhance,enhancement,25772,"�� for (i = 0; i < nbinsx;; i++){; ���� for (j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; ��; t->SetTransformType(t->kTransformCos,0);�� ; ��; t->SetRegion(0,63,0,63);�� ; ��; t->SetEnhanceCoeff(5);; ��; t->Enhance(source,dest);�� ; �� trans->Draw(""SURF"");���� ; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax, ymin, ymax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Double_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Double_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrum2Transform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in ",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:26239,Modifiability,enhance,enhanceCoeff,26239,"(j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; ��; t->SetTransformType(t->kTransformCos,0);�� ; ��; t->SetRegion(0,63,0,63);�� ; ��; t->SetEnhanceCoeff(5);; ��; t->Enhance(source,dest);�� ; �� trans->Draw(""SURF"");���� ; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax, ymin, ymax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Double_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Double_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrum2Transform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:26293,Modifiability,enhance,enhancement,26293,"(j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; ��; t->SetTransformType(t->kTransformCos,0);�� ; ��; t->SetRegion(0,63,0,63);�� ; ��; t->SetEnhanceCoeff(5);; ��; t->Enhance(source,dest);�� ; �� trans->Draw(""SURF"");���� ; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax, ymin, ymax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Double_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Double_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrum2Transform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:26320,Modifiability,enhance,enhanceCoeff,26320,"(j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; ��; t->SetTransformType(t->kTransformCos,0);�� ; ��; t->SetRegion(0,63,0,63);�� ; ��; t->SetEnhanceCoeff(5);; ��; t->Enhance(source,dest);�� ; �� trans->Draw(""SURF"");���� ; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax, ymin, ymax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Double_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Double_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrum2Transform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:26359,Modifiability,enhance,enhanced,26359,"(j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; ��; t->SetTransformType(t->kTransformCos,0);�� ; ��; t->SetRegion(0,63,0,63);�� ; ��; t->SetEnhanceCoeff(5);; ��; t->Enhance(source,dest);�� ; �� trans->Draw(""SURF"");���� ; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax, ymin, ymax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Double_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Double_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrum2Transform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:26452,Modifiability,enhance,enhancement,26452,"(j = 0; j <; nbinsy; j++){; �� ������������ ����source[i][j] = trans->GetBinContent(i + 1,j; + 1); ; �� ������������ �}; �� }���������� ; ��; TSpectrumTransform2 *t = new TSpectrumTransform2(256,256);�� ; ��; t->SetTransformType(t->kTransformCos,0);�� ; ��; t->SetRegion(0,63,0,63);�� ; ��; t->SetEnhanceCoeff(5);; ��; t->Enhance(source,dest);�� ; �� trans->Draw(""SURF"");���� ; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax, ymin, ymax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Double_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax, ymin, ymax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Double_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax, ymin, ymax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrum2Transform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2000, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:3317,Security,Hash,Hash,3317,"const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; voidFilterZonal(const Double_t** fSource, Double_t** fDest); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TObject::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:5690,Testability,Test,TestBit,5690,"operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSpectrum2Transform&operator=(const TSpectrum2Transform&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDirection(Int_t direction); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEnhanceCoeff(Double_t enhanceCoeff); voidSetFilterCoeff(Double_t filterCoeff); static voidTObject::SetObjectStat(Bool_t stat); voidSetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax); voidSetTransformType(Int_t transType, Int_t degree); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTransform(const Double_t** fSource, Double_t** fDest); TSpectrum2Transform(); TSpectrum2Transform(const TSpectrum2Transform&); TSpectrum2Transform(Int_t sizeX, Int_t sizeY); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:5729,Testability,Test,TestBits,5729,"operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSpectrum2Transform&operator=(const TSpectrum2Transform&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDirection(Int_t direction); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEnhanceCoeff(Double_t enhanceCoeff); voidSetFilterCoeff(Double_t filterCoeff); static voidTObject::SetObjectStat(Bool_t stat); voidSetRegion(Int_t xmin, Int_t xmax, Int_t ymin, Int_t ymax); voidSetTransformType(Int_t transType, Int_t degree); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTransform(const Double_t** fSource, Double_t** fDest); TSpectrum2Transform(); TSpectrum2Transform(const TSpectrum2Transform&); TSpectrum2Transform(Int_t sizeX, Int_t sizeY); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:1676,Usability,Clear,Clear,1676," virtual~TSpectrum2Transform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voi",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum2Transform.html:11950,Usability,clear,clear,11950,"t* working_space, Int_t num, Int_t hartley, Int_t direction, Int_t zt_clear). AUXILIARY FUNCION. This function calculates Fourier based transform of a part of data; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data; -hartley-1 if it is Hartley transform, 0 othewise; -direction-forward or inverse transform. void BitReverseHaar(Double_t* working_space, Int_t shift, Int_t num, Int_t start). AUXILIARY FUNCION. This function carries out bir-reverse reordering for Haar transform; Function parameters:; -working_space-pointer to vector of processed data; -shift-shift of position of processing; -start-initial position of processed data; -num-length of processed data. Int_t GeneralExe(Double_t* working_space, Int_t zt_clear, Int_t num, Int_t degree, Int_t type). AUXILIARY FUNCION. This function calculates generalized (mixed) transforms of different degrees; Function parameters:; -working_space-pointer to vector of transformed data; -zt_clear-flag to clear imaginary data before staring; -num-length of processed data; -degree-degree of transform (see manual); -type-type of mixed transform (see manual). Int_t GeneralInv(Double_t* working_space, Int_t num, Int_t degree, Int_t type). AUXILIARY FUNCION. This function calculates inverse generalized (mixed) transforms; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data; -degree-degree of transform (see manual); -type-type of mixed transform (see manual). void HaarWalsh2(Double_t** working_matrix, Double_t* working_vector, Int_t numx, Int_t numy, Int_t direction, Int_t type). AUXILIARY FUNCION. This function calculates 2D Haar and Walsh transforms; Function parameters:; -working_matrix-pointer to matrix of transformed data; -working_vector-pointer to vector where the data are processed; -numx,numy-lengths of processed data; -direction-forward or inverse; -type-type of transform (see manual). void FourCos2(Double_t** working_m",MatchSource.WIKI,root/html604/TSpectrum2Transform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum2Transform.html
https://root.cern/root/html604/TSpectrum3.html:1669,Availability,avail,available,1669,"2 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:; [1] M.Morhac et al.: Background elimination methods for; multidimensional coincidence gamma-ray spectra. Nuclear; Instruments and Methods in Physics Research A 401 (1997) 113-; 132. [2] M.Morhac et al.: Efficient one- and two-dimensional Gold; deconvolution and its application to gamma-ray spectra; decomposition. Nuclear Instruments and Methods in Physics; Research A 401 (1997) 385-408. [3] M. Morhac et al.: Efficient algorithm of multidimensional; deconvolution and its application to nuclear data processing. Digital; Signal Processing, Vol. 13, No. 1, (2003), 144-171. [4] M.Morhac et al.: Identification of peaks in multidimensional; coincidence gamma-ray spectra. Nuclear Instruments and Methods in; Research Physics A 443(2000), 108-125. These NIM papers are also available as Postscript files from:. ftp://root.cern.ch/root/SpectrumDec.ps.gz; ftp://root.cern.ch/root/SpectrumSrc.ps.gz; ftp://root.cern.ch/root/SpectrumBck.ps.gz. Function Members (Methods); public:. virtual~TSpectrum3(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*Background(const TH1* hist, Int_t niter, Option_t* option = ""goff""); const char*Background(Double_t*** spectrum, Int_t ssizex, Int_t ssizey, Int_t ssizez, Int_t numberIterationsX, Int_t numberIterationsY, Int_t numberIterationsZ, Int_t direction, Int_t filterType); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; const char*Deconvolution(Double_t*** source, const Doubl",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:3141,Availability,Error,Error,3141,"izex, Int_t ssizey, Int_t ssizez, Int_t numberIterationsX, Int_t numberIterationsY, Int_t numberIterationsZ, Int_t direction, Int_t filterType); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; const char*Deconvolution(Double_t*** source, const Double_t*** resp, Int_t ssizex, Int_t ssizey, Int_t ssizez, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; Double_t*GetPositionZ() con",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:3270,Availability,error,error,3270,"_t filterType); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; const char*Deconvolution(Double_t*** source, const Double_t*** resp, Int_t ssizex, Int_t ssizey, Int_t ssizez, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; Double_t*GetPositionZ() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(T",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:3354,Availability,error,error,3354,"tual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; const char*Deconvolution(Double_t*** source, const Double_t*** resp, Int_t ssizex, Int_t ssizey, Int_t ssizez, Int_t numberIterations, Int_t numberRepetitions, Double_t boost); virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; Double_t*GetPositionZ() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const ",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:13944,Availability,error,error,13944,"estimation of new value in the; channel ��;  ; Algorithm based on Successive; Comparisons; It is an extension of; one-dimensional SNIP algorithm to another dimension. For details we refer to; [2].;  ; Algorithm based on One Step; Filtering; The algorithm is analogous to; that for 2-dimensional data. For details we refer to TSpectrum2. New value in; the estimated channel is calculated as;  .  ; where p = 1, 2, �,; number_of_iterations. ;  ; Function:; const char*; TSpectrum3::Background; (double; ***fSpectrum, int fSizex, int; fSizey, int fSizez, int fNumberIterationsX, int; fNumberIterationsY, int fNumberIterationsZ, �int; fDirection, int fFilterType)� ;  ; This function calculates; background spectrum from the source spectrum.� The result is placed in the matrix; pointed by fSpectrum pointer.� One can also switch the direction of the change; of the clipping window and to select one of the two above given algorithms. On; successful completion it returns 0. On error it returns pointer to the string; describing error.;  ; Parameters:; ������� fSpectrum-pointer to the matrix of source; spectrum����������������� ; ������� fSizex, fSizey, fSizez -lengths of the; spectrum matrix�������������������������������� ; ������� fNumberIterationsX,; fNumberIterationsY, fNumberIterationsZ maximal; ������� widths of clipping window,��������������������������������. ������� fDirection- direction of change of clipping; window����������������� ; �������������� - possible; values=kBackIncreasingWindow��������������������� ; �������������������������������������������; kBackDecreasingWindow��������������������� ; ������� fFilterType-type of the clipping algorithm,����������; �������������������; ����������������� -possible values=kBack SuccessiveFiltering; ���������������������������������������������; kBackOneStepFiltering����������������������������� ;  ; References:; [1]� C. G Ryan et al.: SNIP, a; statistics-sensitive background treatment for the quantitative analysis of PIXE; spectra",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:13995,Availability,error,error,13995,"estimation of new value in the; channel ��;  ; Algorithm based on Successive; Comparisons; It is an extension of; one-dimensional SNIP algorithm to another dimension. For details we refer to; [2].;  ; Algorithm based on One Step; Filtering; The algorithm is analogous to; that for 2-dimensional data. For details we refer to TSpectrum2. New value in; the estimated channel is calculated as;  .  ; where p = 1, 2, �,; number_of_iterations. ;  ; Function:; const char*; TSpectrum3::Background; (double; ***fSpectrum, int fSizex, int; fSizey, int fSizez, int fNumberIterationsX, int; fNumberIterationsY, int fNumberIterationsZ, �int; fDirection, int fFilterType)� ;  ; This function calculates; background spectrum from the source spectrum.� The result is placed in the matrix; pointed by fSpectrum pointer.� One can also switch the direction of the change; of the clipping window and to select one of the two above given algorithms. On; successful completion it returns 0. On error it returns pointer to the string; describing error.;  ; Parameters:; ������� fSpectrum-pointer to the matrix of source; spectrum����������������� ; ������� fSizex, fSizey, fSizez -lengths of the; spectrum matrix�������������������������������� ; ������� fNumberIterationsX,; fNumberIterationsY, fNumberIterationsZ maximal; ������� widths of clipping window,��������������������������������. ������� fDirection- direction of change of clipping; window����������������� ; �������������� - possible; values=kBackIncreasingWindow��������������������� ; �������������������������������������������; kBackDecreasingWindow��������������������� ; ������� fFilterType-type of the clipping algorithm,����������; �������������������; ����������������� -possible values=kBack SuccessiveFiltering; ���������������������������������������������; kBackOneStepFiltering����������������������������� ;  ; References:; [1]� C. G Ryan et al.: SNIP, a; statistics-sensitive background treatment for the quantitative analysis of PIXE; spectra",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:20135,Availability,error,error,20135,"gth of spectrum and working space arrays; averWindow-width of averaging smoothing window. . Smoothing;  ; Goal: Suppression of statistical fluctuations; �        ; the algorithm is based on discrete Markov chain, which has very simple; invariant distribution;  ; ����������� �����; �������; ��being defined from the normalization; condition ; �������� n is the length of the smoothed spectrum and .  ;  ;  . is the; probability of the change of the peak position from channel i to the channel; i+1.� is; the normalization constant so that �and m is a width of smoothing window.; We have extended this algorithm to three dimensions. ;  ; Function:; const char*; TSpectrum3::SmoothMarkov(double; ***fSpectrum, int fSizex, int; fSizey, int fSizey, �int; fAverWindow)� ;  ; This function calculates smoothed; spectrum from the source spectrum based on Markov chain method. The result is; placed in the field pointed by source pointer. On successful completion it; returns 0. On error it returns pointer to the string describing error.;  ; Parameters:; ������� fSpectrum-pointer to the matrix of source; spectrum����������������� ; ������� fSizex, fSizey, fSizez -lengths of the; spectrum matrix��������������� �����������������; ������� fAverWindow-width of averaging smoothing; window ;  ; Reference:; [1] Z.K. Silagadze, A new; algorithm for automatic photopeak searches. NIM A 376 (1996), 451.� ;  ; Example 1 � script SmootMarkov3.c :; Fig. 1 Original noisy spectrum.��� . Fig. 2 Smoothed spectrum with averaging window m=3.;  ; Script:; // Example to illustrate the; Markov smoothing (class TSpectrum3).; // To execute this example,; do; // root > .x; SmoothMarkov3.C;  ; void SmoothMarkov3(); {; �� Int_t i, j, k;; �� Int_t nbinsx = 64;; �� Int_t nbinsy = 64;; �� Int_t nbinsz =; 64;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;�� ; �� Int_t zmin� = 0;; �� Int_t zmax� = nbinsz;����� ; �� Double_t*** source = new; Double_t**[nbinsx];; �� for(i",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:20185,Availability,error,error,20185,"gth of spectrum and working space arrays; averWindow-width of averaging smoothing window. . Smoothing;  ; Goal: Suppression of statistical fluctuations; �        ; the algorithm is based on discrete Markov chain, which has very simple; invariant distribution;  ; ����������� �����; �������; ��being defined from the normalization; condition ; �������� n is the length of the smoothed spectrum and .  ;  ;  . is the; probability of the change of the peak position from channel i to the channel; i+1.� is; the normalization constant so that �and m is a width of smoothing window.; We have extended this algorithm to three dimensions. ;  ; Function:; const char*; TSpectrum3::SmoothMarkov(double; ***fSpectrum, int fSizex, int; fSizey, int fSizey, �int; fAverWindow)� ;  ; This function calculates smoothed; spectrum from the source spectrum based on Markov chain method. The result is; placed in the field pointed by source pointer. On successful completion it; returns 0. On error it returns pointer to the string describing error.;  ; Parameters:; ������� fSpectrum-pointer to the matrix of source; spectrum����������������� ; ������� fSizex, fSizey, fSizez -lengths of the; spectrum matrix��������������� �����������������; ������� fAverWindow-width of averaging smoothing; window ;  ; Reference:; [1] Z.K. Silagadze, A new; algorithm for automatic photopeak searches. NIM A 376 (1996), 451.� ;  ; Example 1 � script SmootMarkov3.c :; Fig. 1 Original noisy spectrum.��� . Fig. 2 Smoothed spectrum with averaging window m=3.;  ; Script:; // Example to illustrate the; Markov smoothing (class TSpectrum3).; // To execute this example,; do; // root > .x; SmoothMarkov3.C;  ; void SmoothMarkov3(); {; �� Int_t i, j, k;; �� Int_t nbinsx = 64;; �� Int_t nbinsy = 64;; �� Int_t nbinsz =; 64;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;�� ; �� Int_t zmin� = 0;; �� Int_t zmax� = nbinsz;����� ; �� Double_t*** source = new; Double_t**[nbinsx];; �� for(i",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:24493,Availability,error,error,24493,"he field x.; �        ; from numerical stability point of view the operation of deconvolution is; extremely critical (ill-posed� problem) as well as time consuming operation. ; �        ; the Gold deconvolution algorithm proves to work very well even for; 2-dimensional systems. Generalization of the algorithm for 2-dimensional; systems was presented in [1], and for multidimensional systems in [2].; �        ; for Gold deconvolution algorithm as well as for boosted deconvolution; algorithm we refer also to TSpectrum and TSpectrum2 ;  ; Function:; const char* TSpectrum3::Deconvolution(double ***fSource,; const double; ***fResp, int; fSizex, int; fSizey, int; fSizez, int; fNumberIterations, int; fNumberRepetitions, double fBoost);  ; This function calculates; deconvolution from source spectrum according to response spectrum using Gold; deconvolution algorithm. The result is placed in the field pointed by source; pointer. On successful completion it returns 0. On error it returns pointer to; the string describing error. If desired after every fNumberIterations one can apply; boosting operation (exponential function with exponent given by fBoost; coefficient) and repeat it fNumberRepetitions times.;  ; Parameters:; ������� fSource-pointer to the matrix of source; spectrum����������������� ; ������� fResp-pointer to the matrix of response; spectrum����������������� ; ������� fSizex, fSizey, fSizez -lengths of the; spectrum matrix�������������������������������� ; ������� fNumberIterations-number; of iterations ; ������� fNumberRepetitions-number; of repetitions for boosted deconvolution. It must be ; ������� greater or equal to one.; ������� fBoost-boosting; coefficient, applies only if fNumberRepetitions is greater than one.� ; ������� Recommended; range <1,2>.;  ; References:; �[1] M.; Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo.: Efficient; one- and two-dimensional Gold deconvolution and its application to gamma-ray; spectra decomposition. NIM, A401 (1997) 385",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:24544,Availability,error,error,24544,"he field x.; �        ; from numerical stability point of view the operation of deconvolution is; extremely critical (ill-posed� problem) as well as time consuming operation. ; �        ; the Gold deconvolution algorithm proves to work very well even for; 2-dimensional systems. Generalization of the algorithm for 2-dimensional; systems was presented in [1], and for multidimensional systems in [2].; �        ; for Gold deconvolution algorithm as well as for boosted deconvolution; algorithm we refer also to TSpectrum and TSpectrum2 ;  ; Function:; const char* TSpectrum3::Deconvolution(double ***fSource,; const double; ***fResp, int; fSizex, int; fSizey, int; fSizez, int; fNumberIterations, int; fNumberRepetitions, double fBoost);  ; This function calculates; deconvolution from source spectrum according to response spectrum using Gold; deconvolution algorithm. The result is placed in the field pointed by source; pointer. On successful completion it returns 0. On error it returns pointer to; the string describing error. If desired after every fNumberIterations one can apply; boosting operation (exponential function with exponent given by fBoost; coefficient) and repeat it fNumberRepetitions times.;  ; Parameters:; ������� fSource-pointer to the matrix of source; spectrum����������������� ; ������� fResp-pointer to the matrix of response; spectrum����������������� ; ������� fSizex, fSizey, fSizez -lengths of the; spectrum matrix�������������������������������� ; ������� fNumberIterations-number; of iterations ; ������� fNumberRepetitions-number; of repetitions for boosted deconvolution. It must be ; ������� greater or equal to one.; ������� fBoost-boosting; coefficient, applies only if fNumberRepetitions is greater than one.� ; ������� Recommended; range <1,2>.;  ; References:; �[1] M.; Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo.: Efficient; one- and two-dimensional Gold deconvolution and its application to gamma-ray; spectra decomposition. NIM, A401 (1997) 385",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:15478,Deployability,continuous,continuously,15478," �������������������������������������������; kBackDecreasingWindow��������������������� ; ������� fFilterType-type of the clipping algorithm,����������; �������������������; ����������������� -possible values=kBack SuccessiveFiltering; ���������������������������������������������; kBackOneStepFiltering����������������������������� ;  ; References:; [1]� C. G Ryan et al.: SNIP, a; statistics-sensitive background treatment for the quantitative analysis of PIXE; spectra in geoscience applications. NIM, B34 (1988), 396-402.; [2] �M.; Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo.: Background; elimination methods for multidimensional gamma-ray spectra. NIM, A401 (1997); 113-132.;  ; Example 1� script Back3.c :.  ; Fig. 1 Original three-dimensional; gamma-gamma-gamma-ray spectrum. Fig. 2 Background estimated; from data from Fig. 1 using decreasing clipping window with widths 5, 5, 5 and; algorithm based on successive comparisons. The estimate includes not only; continuously changing background but also one- and two-dimensional ridges.;  . Fig. 3 Resulting peaks after; subtraction of the estimated background (Fig. 2) from original three-dimensional; gamma-gamma-gamma-ray spectrum (Fig. 1).;  ;  ; Script:; // Example to illustrate the; background estimator (class TSpectrum3).; // To execute this example,; do; // root > .x Back3.C;  ; void Back3() {; �� Int_t i, j, k;; �� Int_t nbinsx = 64;; �� Int_t nbinsy = 64;; �� Int_t nbinsz =; 64;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;�� ; �� Int_t zmin� = 0;; �� Int_t zmax� = nbinsz;����� ; �� Double_t*** source = new; Double_t**[nbinsx];; �� Double_t*** dest = new Double_t; **[nbinsx];����� ; �� for(i=0;i<nbinsx;i++){; ��� ��source[i]=new Double_t*; [nbinsy];; �����; for(j=0;j<nbinsy;j++); �������� source[i][j]=new; Double_t[nbinsz];; �� }�� ������� ; �� for(i=0;i<nbinsx;i++){; ����� dest[i]=new Double_t*; [nbinsy];; �����; for(j=0;j<nbinsy;j++); �������� dest[i][j]",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:32094,Deployability,continuous,continuous,32094," out.; It returns number of found peaks. Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; ssizez-z length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal: to identify; automatically the peaks in spectrum with the presence of the continuous; background, one- and two-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected; with correct peak identification in three-dimensional coincidence spectra are. non-sensitivity to noise, i.e.,; only statistically relevant peaks should be identified; non-sensitivity of the; algorithm to continuous background; non-sensitivity to one-fold coincidences; (coincidences peak � peak � background in all dimensions) and their; crossings; non-sensitivity to two-fold; coincidences (coincidences peak � background � background in all; dimensions) and their crossings; ability to identify peaks close; to the edges of the spectrum region; resolution, decomposition of; doublets and multiplets. The algorithm should be able to recognize close; positioned peaks. .  ; Function:; Int_t TSpectrum3::SearchHighRes; (const double; ***fSource,double; ***fDest, int; fSizex, int; fSizey, int; fSizez, double; fSigma, double; fThreshold, bool; fBackgroundRemove,",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:32438,Deployability,continuous,continuous,32438,"ove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal: to identify; automatically the peaks in spectrum with the presence of the continuous; background, one- and two-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected; with correct peak identification in three-dimensional coincidence spectra are. non-sensitivity to noise, i.e.,; only statistically relevant peaks should be identified; non-sensitivity of the; algorithm to continuous background; non-sensitivity to one-fold coincidences; (coincidences peak � peak � background in all dimensions) and their; crossings; non-sensitivity to two-fold; coincidences (coincidences peak � background � background in all; dimensions) and their crossings; ability to identify peaks close; to the edges of the spectrum region; resolution, decomposition of; doublets and multiplets. The algorithm should be able to recognize close; positioned peaks. .  ; Function:; Int_t TSpectrum3::SearchHighRes; (const double; ***fSource,double; ***fDest, int; fSizex, int; fSizey, int; fSizez, double; fSigma, double; fThreshold, bool; fBackgroundRemove,int; fDeconIterations, bool; fMarkov, int; fAverWindow) ��;  ; This function searches for peaks; in source spectrum. It is based on deconvolution method. First the background; is removed (if desired), then Markov smoothed spectrum is calculated (if; desired), then the response function is generated according to given sigma and; deconvolution is carried out. On success it returns number of found peaks.;  ; Parameters:; ������� fSource-pointer to; the matrix of source spectrum���������������",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:1098,Energy Efficiency,Efficient,Efficient,1098,"r viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum3. class TSpectrum3: public TNamed. THIS CLASS CONTAINS ADVANCED SPECTRA PROCESSING FUNCTIONS. THREE-DIMENSIONAL BACKGROUND ESTIMATION FUNCTIONS; THREE-DIMENSIONAL SMOOTHING FUNCTIONS; THREE-DIMENSIONAL DECONVOLUTION FUNCTIONS; THREE-DIMENSIONAL PEAK SEARCH FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:; [1] M.Morhac et al.: Background elimination methods for; multidimensional coincidence gamma-ray spectra. Nuclear; Instruments and Methods in Physics Research A 401 (1997) 113-; 132. [2] M.Morhac et al.: Efficient one- and two-dimensional Gold; deconvolution and its application to gamma-ray spectra; decomposition. Nuclear Instruments and Methods in Physics; Research A 401 (1997) 385-408. [3] M. Morhac et al.: Efficient algorithm of multidimensional; deconvolution and its application to nuclear data processing. Digital; Signal Processing, Vol. 13, No. 1, (2003), 144-171. [4] M.Morhac et al.: Identification of peaks in multidimensional; coincidence gamma-ray spectra. Nuclear Instruments and Methods in; Research Physics A 443(2000), 108-125. These NIM papers are also available as Postscript files from:. ftp://root.cern.ch/root/SpectrumDec.ps.gz; ftp://root.cern.ch/root/SpectrumSrc.ps.gz; ftp://root.cern.ch/root/SpectrumBck.ps.gz. Function Members (Methods); public:. virtual~TSpectrum3(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*Background(const TH1* hist, Int_t niter, Option_t* option = ""goff""); const char*Background(Double_t*** spectrum, Int_t ssizex, Int",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:1307,Energy Efficiency,Efficient,Efficient,1307,"OCESSING FUNCTIONS. THREE-DIMENSIONAL BACKGROUND ESTIMATION FUNCTIONS; THREE-DIMENSIONAL SMOOTHING FUNCTIONS; THREE-DIMENSIONAL DECONVOLUTION FUNCTIONS; THREE-DIMENSIONAL PEAK SEARCH FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:; [1] M.Morhac et al.: Background elimination methods for; multidimensional coincidence gamma-ray spectra. Nuclear; Instruments and Methods in Physics Research A 401 (1997) 113-; 132. [2] M.Morhac et al.: Efficient one- and two-dimensional Gold; deconvolution and its application to gamma-ray spectra; decomposition. Nuclear Instruments and Methods in Physics; Research A 401 (1997) 385-408. [3] M. Morhac et al.: Efficient algorithm of multidimensional; deconvolution and its application to nuclear data processing. Digital; Signal Processing, Vol. 13, No. 1, (2003), 144-171. [4] M.Morhac et al.: Identification of peaks in multidimensional; coincidence gamma-ray spectra. Nuclear Instruments and Methods in; Research Physics A 443(2000), 108-125. These NIM papers are also available as Postscript files from:. ftp://root.cern.ch/root/SpectrumDec.ps.gz; ftp://root.cern.ch/root/SpectrumSrc.ps.gz; ftp://root.cern.ch/root/SpectrumBck.ps.gz. Function Members (Methods); public:. virtual~TSpectrum3(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual const char*Background(const TH1* hist, Int_t niter, Option_t* option = ""goff""); const char*Background(Double_t*** spectrum, Int_t ssizex, Int_t ssizey, Int_t ssizez, Int_t numberIterationsX, Int_t numberIterationsY, Int_t numberIterationsZ, Int_t direction, Int_t filterType); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); vir",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:25388,Energy Efficiency,Efficient,Efficient,25388,"pointer. On successful completion it returns 0. On error it returns pointer to; the string describing error. If desired after every fNumberIterations one can apply; boosting operation (exponential function with exponent given by fBoost; coefficient) and repeat it fNumberRepetitions times.;  ; Parameters:; ������� fSource-pointer to the matrix of source; spectrum����������������� ; ������� fResp-pointer to the matrix of response; spectrum����������������� ; ������� fSizex, fSizey, fSizez -lengths of the; spectrum matrix�������������������������������� ; ������� fNumberIterations-number; of iterations ; ������� fNumberRepetitions-number; of repetitions for boosted deconvolution. It must be ; ������� greater or equal to one.; ������� fBoost-boosting; coefficient, applies only if fNumberRepetitions is greater than one.� ; ������� Recommended; range <1,2>.;  ; References:; �[1] M.; Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo.: Efficient; one- and two-dimensional Gold deconvolution and its application to gamma-ray; spectra decomposition. NIM, A401 (1997) 385-408.; [2] Morh�č M., Matou�ek V.,; Kliman J., Efficient algorithm of multidimensional deconvolution and its; application to nuclear data processing, Digital Signal Processing 13 (2003); 144. ;  ; Example 1 � script Decon.c :; �        ; response function (usually peak) should be shifted to the beginning of; the coordinate system (see Fig. 1). Fig. 1 Three-dimensional; response spectrum;  .  ; Fig. 2 Three-dimensional input; spectrum (before deconvolution);  . Fig. 3 Spectrum from Fig. 2; after deconvolution (100 iterations);  ; Script:; // Example to illustrate the; Gold deconvolution (class TSpectrum3).; // To execute this example,; do; // root > .x Decon3.C;  ; #include <TSpectrum3>;  ; void Decon3() {; �� Int_t i, j, k;; �� Int_t nbinsx = 32;; �� Int_t nbinsy = 32;; �� Int_t nbinsz =; 32;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;�� ; �� Int_t zmin� =",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:25567,Energy Efficiency,Efficient,Efficient,25567," function with exponent given by fBoost; coefficient) and repeat it fNumberRepetitions times.;  ; Parameters:; ������� fSource-pointer to the matrix of source; spectrum����������������� ; ������� fResp-pointer to the matrix of response; spectrum����������������� ; ������� fSizex, fSizey, fSizez -lengths of the; spectrum matrix�������������������������������� ; ������� fNumberIterations-number; of iterations ; ������� fNumberRepetitions-number; of repetitions for boosted deconvolution. It must be ; ������� greater or equal to one.; ������� fBoost-boosting; coefficient, applies only if fNumberRepetitions is greater than one.� ; ������� Recommended; range <1,2>.;  ; References:; �[1] M.; Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo.: Efficient; one- and two-dimensional Gold deconvolution and its application to gamma-ray; spectra decomposition. NIM, A401 (1997) 385-408.; [2] Morh�č M., Matou�ek V.,; Kliman J., Efficient algorithm of multidimensional deconvolution and its; application to nuclear data processing, Digital Signal Processing 13 (2003); 144. ;  ; Example 1 � script Decon.c :; �        ; response function (usually peak) should be shifted to the beginning of; the coordinate system (see Fig. 1). Fig. 1 Three-dimensional; response spectrum;  .  ; Fig. 2 Three-dimensional input; spectrum (before deconvolution);  . Fig. 3 Spectrum from Fig. 2; after deconvolution (100 iterations);  ; Script:; // Example to illustrate the; Gold deconvolution (class TSpectrum3).; // To execute this example,; do; // root > .x Decon3.C;  ; #include <TSpectrum3>;  ; void Decon3() {; �� Int_t i, j, k;; �� Int_t nbinsx = 32;; �� Int_t nbinsy = 32;; �� Int_t nbinsz =; 32;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;�� ; �� Int_t zmin� = 0;; �� Int_t zmax� = nbinsz;����� ; �� Double_t*** source = new; Double_t**[nbinsx];; �� Double_t*** resp = new Double_t; **[nbinsx];����� ; �� for(i=0;i<nbinsx;i++){; ����� source[i]=new Double",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:28253,Energy Efficiency,power,power,28253,"sp;1"");�� ; �� TCanvas *Deconvolution =; new TCanvas(""Deconvolution"",""Deconvolution of 3-dimensional; spectra"",10,10,1000,700);; �� TSpectrum3 *s = new; TSpectrum3();; �� for (i = 0; i < nbinsx;; i++){; ���� for (j = 0; j <; nbinsy; j++){; ���� ���������� ��for (k = 0;; k < nbinsz; k++){; �� ������������ �������source[i][j][k]; = decon_in->GetBinContent(i + 1,j + 1,k + 1);; �� ������������ �������resp[i][j][k]; = decon_resp->GetBinContent(i + 1,j + 1,k + 1);�� ������������� �������; �� ������������ ����} ; �� ������������ �}; �� }; ��; s->Deconvolution(source,resp,nbinsx,nbinsy,nbinsz,100,1,1);; �� for (i = 0; i < nbinsx;; i++){; ���� for (j = 0; j <; nbinsy; j++){; ������� for (k = 0; k <; nbinsz; k++){; ����������; decon_in->SetBinContent(i + 1,j + 1,k + 1, source[i][j][k]);; ������� }��� ; ���� }; �� }; �� decon_in->Draw("""");� ; };  ; Example 2 � script Decon_hr.c :; This example illustrates repeated; Gold deconvolution with boosting. After every 10 iterations we apply power; function with exponent = 2 to the spectrum given in Fig. 2.;  . Fig. 4 Spectrum from Fig. 2; after boosted deconvolution (10 iterations repeated 10 times). It decomposes; completely cluster of peaks from Fig 2.;  ; Script:; // Example to illustrate the; Gold deconvolution (class TSpectrum3).; // To execute this example,; do; // root > .x Decon3_hr.C; void Decon3_hr() {; �� Int_t i, j, k;; �� Int_t nbinsx = 32;; �� Int_t nbinsy = 32;; �� Int_t nbinsz =; 32;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;�� ; �� Int_t zmin� = 0;; �� Int_t zmax� = nbinsz;����� ; �� Double_t*** source = new; Double_t**[nbinsx];; �� Double_t*** resp = new Double_t; **[nbinsx];����� ; �� for(i=0;i<nbinsx;i++){; ����� source[i]=new Double_t*; [nbinsy];; �����; for(j=0;j<nbinsy;j++); �������� source[i][j]=new; Double_t[nbinsz];; �� }�� ������� ; �� for(i=0;i<nbinsx;i++){; ����� resp[i]=new Double_t*; [nbinsy];; �����; for(j=0;j<nbinsy;j++); �������� resp[i][j]=new Do",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:116,Modifiability,inherit,inheritance,116,". TSpectrum3. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrum3. class TSpectrum3: public TNamed. THIS CLASS CONTAINS ADVANCED SPECTRA PROCESSING FUNCTIONS. THREE-DIMENSIONAL BACKGROUND ESTIMATION FUNCTIONS; THREE-DIMENSIONAL SMOOTHING FUNCTIONS; THREE-DIMENSIONAL DECONVOLUTION FUNCTIONS; THREE-DIMENSIONAL PEAK SEARCH FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:; [1] M.Morhac et al.: Background elimination methods for; multidimensional coincidence gamma-ray spectra. Nuclear; Instruments and Methods in Physics Research A 401 (1997) 113-; 132. [2] M.Morhac et al.: Efficient one- and two-dimensional Gold; deconvolution and its application to gamma-ray spectra; decomposition. Nuclear Instruments and Methods in Physics; Research A 401 (1997) 385-408. [3] M. Morhac et al.: Efficient algorithm of multidimensional; deconvolution and its application to nuclear data processing. Digital; Signal Processing, Vol. 13, No. 1, (2003), 144-171. [4] M.Morhac et al.: Identification of peaks in multidimensional; coincidence gamma-ray spectra. Nuclear Instruments and Methods in; Research Physics A 443(2000), 108-125. These NIM papers are also available as Postscript files from:. ftp://root.cern.ch/root/SpectrumDec.ps.gz; ftp://root.cern.ch/root/SpectrumSrc.ps.gz; ftp://root.cern.ch/root/SpectrumBck.ps.gz. Function Members (Methods); public:. virtual~TSpectrum3(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:4421,Modifiability,Inherit,InheritsFrom,4421,"t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; Double_t*GetPositionZ() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:4487,Modifiability,Inherit,InheritsFrom,4487,"msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; Double_t*GetPositionZ() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSpectrum3&operator=(const TSpectrum3&); virtual void",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:9371,Modifiability,Inherit,Inheritance,9371,"idObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TH1*fHistogramresulting histogram; Int_tfMaxPeaksMaximum number of peaks to be found; Int_tfNPeaksnumber of peaks found; TStringTNamed::fNameobject identifier; Double_t*fPosition[fNPeaks] array of current peak positions; Double_t*fPositionX[fNPeaks] X positions of peaks; Double_t*fPositionY[fNPeaks] Y positions of peaks; Double_t*fPositionZ[fNPeaks] Z positions of peaks; Double_tfResolutionresolution of the neighboring peaks; TStringTNamed::fTitleobject title. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrum3. Function documentation; TSpectrum3(); Constructor. TSpectrum3(Int_t maxpositions, Double_t resolution = 1); maxpositions: maximum number of peaks; resolution: determines resolution of the neighboring peaks; default value is 1 correspond to 3 sigma distance; between peaks. Higher values allow higher resolution; (smaller distance between peaks.; May be set later through SetResolution. ~TSpectrum3(); Destructor. const char * Background(const TH1* hist, Int_t niter, Option_t* option = ""goff""). ONE-DIMENSIONAL BACKGROUND ESTIMATION FUNCTION; This function calculates background spectrum from source in h.; The result is placed in the vector pointed by spectrum pointer. Function parameters:; spectrum: pointer to the vector of source spectrum; size: length of spectrum and working space vectors; number_of_iterations, for details we refer to manual. void Print(Option_t* option = """") const; Print the array of positions. Int_t Search(const TH1* hist, Do",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:19748,Modifiability,extend,extended,19748,"N. This function calculates smoothed spectrum from source spectrum; based on Markov chain method.; The result is placed in the array pointed by spectrum pointer. Function parameters:; source-pointer to the array of source spectrum; working_space-pointer to the working array; ssizex-x length of spectrum and working space arrays; ssizey-y length of spectrum and working space arrays; ssizey-z length of spectrum and working space arrays; averWindow-width of averaging smoothing window. . Smoothing;  ; Goal: Suppression of statistical fluctuations; �        ; the algorithm is based on discrete Markov chain, which has very simple; invariant distribution;  ; ����������� �����; �������; ��being defined from the normalization; condition ; �������� n is the length of the smoothed spectrum and .  ;  ;  . is the; probability of the change of the peak position from channel i to the channel; i+1.� is; the normalization constant so that �and m is a width of smoothing window.; We have extended this algorithm to three dimensions. ;  ; Function:; const char*; TSpectrum3::SmoothMarkov(double; ***fSpectrum, int fSizex, int; fSizey, int fSizey, �int; fAverWindow)� ;  ; This function calculates smoothed; spectrum from the source spectrum based on Markov chain method. The result is; placed in the field pointed by source pointer. On successful completion it; returns 0. On error it returns pointer to the string describing error.;  ; Parameters:; ������� fSpectrum-pointer to the matrix of source; spectrum����������������� ; ������� fSizex, fSizey, fSizez -lengths of the; spectrum matrix��������������� �����������������; ������� fAverWindow-width of averaging smoothing; window ;  ; Reference:; [1] Z.K. Silagadze, A new; algorithm for automatic photopeak searches. NIM A 376 (1996), 451.� ;  ; Example 1 � script SmootMarkov3.c :; Fig. 1 Original noisy spectrum.��� . Fig. 2 Smoothed spectrum with averaging window m=3.;  ; Script:; // Example to illustrate the; Markov smoothing (class TSpectrum3).",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:31600,Modifiability,variab,variable,31600,"n_in->Draw("""");� ; };  ;  . Int_t SearchHighRes(const Double_t*** source, Double_t*** dest, Int_t ssizex, Int_t ssizey, Int_t ssizez, Double_t sigma, Double_t threshold, Bool_t backgroundRemove, Int_t deconIterations, Bool_t markov, Int_t averWindow). THREE-DIMENSIONAL HIGH-RESOLUTION PEAK SEARCH FUNCTION; This function searches for peaks in source spectrum; It is based on deconvolution method. First the background is; removed (if desired), then Markov spectrum is calculated; (if desired), then the response function is generated; according to given sigma and deconvolution is carried out.; It returns number of found peaks. Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; ssizez-z length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal: to identify; automatically the peaks in spectrum with the presence of the continuous; background, one- and two-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected; with correct peak identification in three-dimensional coincidence spectra are. non-sensitivity to noise, i.e.,; only statistically relevant peaks should be identified; non-sensitivity of the; algorithm to continuous background; non-sensitivity to one-fold coincidences; (c",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:31757,Modifiability,variab,variable,31757,"n_in->Draw("""");� ; };  ;  . Int_t SearchHighRes(const Double_t*** source, Double_t*** dest, Int_t ssizex, Int_t ssizey, Int_t ssizez, Double_t sigma, Double_t threshold, Bool_t backgroundRemove, Int_t deconIterations, Bool_t markov, Int_t averWindow). THREE-DIMENSIONAL HIGH-RESOLUTION PEAK SEARCH FUNCTION; This function searches for peaks in source spectrum; It is based on deconvolution method. First the background is; removed (if desired), then Markov spectrum is calculated; (if desired), then the response function is generated; according to given sigma and deconvolution is carried out.; It returns number of found peaks. Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; ssizez-z length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal: to identify; automatically the peaks in spectrum with the presence of the continuous; background, one- and two-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected; with correct peak identification in three-dimensional coincidence spectra are. non-sensitivity to noise, i.e.,; only statistically relevant peaks should be identified; non-sensitivity of the; algorithm to continuous background; non-sensitivity to one-fold coincidences; (c",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:33958,Modifiability,variab,variable,33958,"; Function:; Int_t TSpectrum3::SearchHighRes; (const double; ***fSource,double; ***fDest, int; fSizex, int; fSizey, int; fSizez, double; fSigma, double; fThreshold, bool; fBackgroundRemove,int; fDeconIterations, bool; fMarkov, int; fAverWindow) ��;  ; This function searches for peaks; in source spectrum. It is based on deconvolution method. First the background; is removed (if desired), then Markov smoothed spectrum is calculated (if; desired), then the response function is generated according to given sigma and; deconvolution is carried out. On success it returns number of found peaks.;  ; Parameters:; ������� fSource-pointer to; the matrix of source spectrum����������������� ; ������� fDest-resulting; spectrum after deconvolution; � ������fSizex, fSizey, fSizez; -lengths of the source and destination spectra��������������� ; ������� fSigma-sigma of; searched peaks; fThreshold-; threshold value in % for selected peaks, peaks with amplitude less than; threshold*highest_peak/100 are ignored; fBackgroundRemove-; background_remove-logical variable, true if the removal of background before; deconvolution is desired� ; fDeconIterations-number; of iterations in deconvolution operation; fMarkov-logical; variable, if it is true, first the source spectrum is replaced by new spectrum; calculated using Markov chains method ; fAverWindow-width of averaging smoothing window ;  ; References:; [1] M.A. Mariscotti: A method for; identification of peaks in the presence of background and its application to; spectrum analysis. NIM 50 (1967), 309-320.; [2] �M.; Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo.:Identification; of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); 108-125.; [3] Z.K. Silagadze, A new; algorithm for automatic photopeak searches. NIM A 376 (1996), 451.;  ; Example of peak searching method;  ; SearchHighRes function provides users with the possibility; to vary the input parameters and with the access to the output deconvolved data",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:34122,Modifiability,variab,variable,34122,"; Function:; Int_t TSpectrum3::SearchHighRes; (const double; ***fSource,double; ***fDest, int; fSizex, int; fSizey, int; fSizez, double; fSigma, double; fThreshold, bool; fBackgroundRemove,int; fDeconIterations, bool; fMarkov, int; fAverWindow) ��;  ; This function searches for peaks; in source spectrum. It is based on deconvolution method. First the background; is removed (if desired), then Markov smoothed spectrum is calculated (if; desired), then the response function is generated according to given sigma and; deconvolution is carried out. On success it returns number of found peaks.;  ; Parameters:; ������� fSource-pointer to; the matrix of source spectrum����������������� ; ������� fDest-resulting; spectrum after deconvolution; � ������fSizex, fSizey, fSizez; -lengths of the source and destination spectra��������������� ; ������� fSigma-sigma of; searched peaks; fThreshold-; threshold value in % for selected peaks, peaks with amplitude less than; threshold*highest_peak/100 are ignored; fBackgroundRemove-; background_remove-logical variable, true if the removal of background before; deconvolution is desired� ; fDeconIterations-number; of iterations in deconvolution operation; fMarkov-logical; variable, if it is true, first the source spectrum is replaced by new spectrum; calculated using Markov chains method ; fAverWindow-width of averaging smoothing window ;  ; References:; [1] M.A. Mariscotti: A method for; identification of peaks in the presence of background and its application to; spectrum analysis. NIM 50 (1967), 309-320.; [2] �M.; Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo.:Identification; of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); 108-125.; [3] Z.K. Silagadze, A new; algorithm for automatic photopeak searches. NIM A 376 (1996), 451.;  ; Example of peak searching method;  ; SearchHighRes function provides users with the possibility; to vary the input parameters and with the access to the output deconvolved data",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:34971,Performance,tune,tune,34971,"le, true if the removal of background before; deconvolution is desired� ; fDeconIterations-number; of iterations in deconvolution operation; fMarkov-logical; variable, if it is true, first the source spectrum is replaced by new spectrum; calculated using Markov chains method ; fAverWindow-width of averaging smoothing window ;  ; References:; [1] M.A. Mariscotti: A method for; identification of peaks in the presence of background and its application to; spectrum analysis. NIM 50 (1967), 309-320.; [2] �M.; Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo.:Identification; of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); 108-125.; [3] Z.K. Silagadze, A new; algorithm for automatic photopeak searches. NIM A 376 (1996), 451.;  ; Example of peak searching method;  ; SearchHighRes function provides users with the possibility; to vary the input parameters and with the access to the output deconvolved data; in the destination spectrum. Based on the output data one can tune the; parameters. ; Example 1 � script Search3.c:;  . Fig. 1 Three-dimensional; spectrum with 5 peaks (, threshold=5%, 3 iterations steps in; the deconvolution);  . Fig. 2 Spectrum from Fig. 1; after background elimination and deconvolution;  ; Script:; // Example to illustrate high; resolution peak searching function (class TSpectrum3).; // To execute this example,; do; // root > .x Search3.C; void Search3() {; �� Int_t i, j, k, nfound;; �� Int_t nbinsx = 32;; �� Int_t nbinsy = 32;; �� Int_t nbinsz =; 32;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;�� ; �� Int_t zmin� = 0;; �� Int_t zmax� = nbinsz;����� ; �� Double_t*** source = new; Double_t**[nbinsx];; �� Double_t*** dest = new Double_t; **[nbinsx];����� ; �� for(i=0;i<nbinsx;i++){; ����� source[i]=new Double_t*; [nbinsy];; �����; for(j=0;j<nbinsy;j++); �������� source[i][j]=new; Double_t[nbinsz];; �� }�� ������� ; �� for(i=0;i<nbinsx;i++){; ����� dest[i]=new Double_t*;",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:4311,Security,Hash,Hash,4311,"ethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); TH1*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; Int_tGetNPeaks() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositionX() const; Double_t*GetPositionY() const; Double_t*GetPositionZ() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:34870,Security,access,access,34870,"d peaks, peaks with amplitude less than; threshold*highest_peak/100 are ignored; fBackgroundRemove-; background_remove-logical variable, true if the removal of background before; deconvolution is desired� ; fDeconIterations-number; of iterations in deconvolution operation; fMarkov-logical; variable, if it is true, first the source spectrum is replaced by new spectrum; calculated using Markov chains method ; fAverWindow-width of averaging smoothing window ;  ; References:; [1] M.A. Mariscotti: A method for; identification of peaks in the presence of background and its application to; spectrum analysis. NIM 50 (1967), 309-320.; [2] �M.; Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo.:Identification; of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); 108-125.; [3] Z.K. Silagadze, A new; algorithm for automatic photopeak searches. NIM A 376 (1996), 451.;  ; Example of peak searching method;  ; SearchHighRes function provides users with the possibility; to vary the input parameters and with the access to the output deconvolved data; in the destination spectrum. Based on the output data one can tune the; parameters. ; Example 1 � script Search3.c:;  . Fig. 1 Three-dimensional; spectrum with 5 peaks (, threshold=5%, 3 iterations steps in; the deconvolution);  . Fig. 2 Spectrum from Fig. 1; after background elimination and deconvolution;  ; Script:; // Example to illustrate high; resolution peak searching function (class TSpectrum3).; // To execute this example,; do; // root > .x Search3.C; void Search3() {; �� Int_t i, j, k, nfound;; �� Int_t nbinsx = 32;; �� Int_t nbinsy = 32;; �� Int_t nbinsz =; 32;�� ; �� Int_t xmin� = 0;; �� Int_t xmax� =; nbinsx;; �� Int_t ymin� = 0;; �� Int_t ymax� =; nbinsy;�� ; �� Int_t zmin� = 0;; �� Int_t zmax� = nbinsz;����� ; �� Double_t*** source = new; Double_t**[nbinsx];; �� Double_t*** dest = new Double_t; **[nbinsx];����� ; �� for(i=0;i<nbinsx;i++){; ����� source[i]=new Double_t*; [nbinsy];; �����; for(j=0;",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:7309,Testability,Test,TestBit,7309,"tion = """"); virtual Int_tSearch(const TH1* hist, Double_t sigma = 2, Option_t* option = ""goff"", Double_t threshold = 0.050000000000000003); Int_tSearchFast(const Double_t*** source, Double_t*** dest, Int_t ssizex, Int_t ssizey, Int_t ssizez, Double_t sigma, Double_t threshold, Bool_t markov, Int_t averWindow); Int_tSearchHighRes(const Double_t*** source, Double_t*** dest, Int_t ssizex, Int_t ssizey, Int_t ssizez, Double_t sigma, Double_t threshold, Bool_t backgroundRemove, Int_t deconIterations, Bool_t markov, Int_t averWindow); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetResolution(Double_t resolution = 1); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; const char*SmoothMarkov(Double_t*** source, Int_t ssizex, Int_t ssizey, Int_t ssizez, Int_t averWindow); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpectrum3(); TSpectrum3(const TSpectrum3&); TSpectrum3(Int_t maxpositions, Double_t resolution = 1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObj",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:7348,Testability,Test,TestBits,7348,"tion = """"); virtual Int_tSearch(const TH1* hist, Double_t sigma = 2, Option_t* option = ""goff"", Double_t threshold = 0.050000000000000003); Int_tSearchFast(const Double_t*** source, Double_t*** dest, Int_t ssizex, Int_t ssizey, Int_t ssizez, Double_t sigma, Double_t threshold, Bool_t markov, Int_t averWindow); Int_tSearchHighRes(const Double_t*** source, Double_t*** dest, Int_t ssizex, Int_t ssizey, Int_t ssizez, Double_t sigma, Double_t threshold, Bool_t backgroundRemove, Int_t deconIterations, Bool_t markov, Int_t averWindow); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetResolution(Double_t resolution = 1); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; const char*SmoothMarkov(Double_t*** source, Int_t ssizex, Int_t ssizey, Int_t ssizez, Int_t averWindow); virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpectrum3(); TSpectrum3(const TSpectrum3&); TSpectrum3(Int_t maxpositions, Double_t resolution = 1); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const. protected:. virtual voidTObject::DoError(int level, const char* location, const char* fmt, va_list va) const; voidTObj",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:31592,Testability,log,logical,31592,"n_in->Draw("""");� ; };  ;  . Int_t SearchHighRes(const Double_t*** source, Double_t*** dest, Int_t ssizex, Int_t ssizey, Int_t ssizez, Double_t sigma, Double_t threshold, Bool_t backgroundRemove, Int_t deconIterations, Bool_t markov, Int_t averWindow). THREE-DIMENSIONAL HIGH-RESOLUTION PEAK SEARCH FUNCTION; This function searches for peaks in source spectrum; It is based on deconvolution method. First the background is; removed (if desired), then Markov spectrum is calculated; (if desired), then the response function is generated; according to given sigma and deconvolution is carried out.; It returns number of found peaks. Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; ssizez-z length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal: to identify; automatically the peaks in spectrum with the presence of the continuous; background, one- and two-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected; with correct peak identification in three-dimensional coincidence spectra are. non-sensitivity to noise, i.e.,; only statistically relevant peaks should be identified; non-sensitivity of the; algorithm to continuous background; non-sensitivity to one-fold coincidences; (c",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:31749,Testability,log,logical,31749,"n_in->Draw("""");� ; };  ;  . Int_t SearchHighRes(const Double_t*** source, Double_t*** dest, Int_t ssizex, Int_t ssizey, Int_t ssizez, Double_t sigma, Double_t threshold, Bool_t backgroundRemove, Int_t deconIterations, Bool_t markov, Int_t averWindow). THREE-DIMENSIONAL HIGH-RESOLUTION PEAK SEARCH FUNCTION; This function searches for peaks in source spectrum; It is based on deconvolution method. First the background is; removed (if desired), then Markov spectrum is calculated; (if desired), then the response function is generated; according to given sigma and deconvolution is carried out.; It returns number of found peaks. Function parameters:; source-pointer to the matrix of source spectrum; dest-pointer to the matrix of resulting deconvolved spectrum; ssizex-x length of source spectrum; ssizey-y length of source spectrum; ssizez-z length of source spectrum; sigma-sigma of searched peaks, for details we refer to manual; threshold-threshold value in % for selected peaks, peaks with; amplitude less than threshold*highest_peak/100; are ignored, see manual; backgroundRemove-logical variable, set if the removal of; background before deconvolution is desired; deconIterations-number of iterations in deconvolution operation; markov-logical variable, if it is true, first the source spectrum; is replaced by new spectrum calculated using Markov; chains method.; averWindow-averanging window of searched peaks, for details; we refer to manual (applies only for Markov method). . Peaks searching;  ; Goal: to identify; automatically the peaks in spectrum with the presence of the continuous; background, one- and two-fold coincidences (ridges) and statistical; fluctuations - noise. ;  ; The common problems connected; with correct peak identification in three-dimensional coincidence spectra are. non-sensitivity to noise, i.e.,; only statistically relevant peaks should be identified; non-sensitivity of the; algorithm to continuous background; non-sensitivity to one-fold coincidences; (c",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:33950,Testability,log,logical,33950,"; Function:; Int_t TSpectrum3::SearchHighRes; (const double; ***fSource,double; ***fDest, int; fSizex, int; fSizey, int; fSizez, double; fSigma, double; fThreshold, bool; fBackgroundRemove,int; fDeconIterations, bool; fMarkov, int; fAverWindow) ��;  ; This function searches for peaks; in source spectrum. It is based on deconvolution method. First the background; is removed (if desired), then Markov smoothed spectrum is calculated (if; desired), then the response function is generated according to given sigma and; deconvolution is carried out. On success it returns number of found peaks.;  ; Parameters:; ������� fSource-pointer to; the matrix of source spectrum����������������� ; ������� fDest-resulting; spectrum after deconvolution; � ������fSizex, fSizey, fSizez; -lengths of the source and destination spectra��������������� ; ������� fSigma-sigma of; searched peaks; fThreshold-; threshold value in % for selected peaks, peaks with amplitude less than; threshold*highest_peak/100 are ignored; fBackgroundRemove-; background_remove-logical variable, true if the removal of background before; deconvolution is desired� ; fDeconIterations-number; of iterations in deconvolution operation; fMarkov-logical; variable, if it is true, first the source spectrum is replaced by new spectrum; calculated using Markov chains method ; fAverWindow-width of averaging smoothing window ;  ; References:; [1] M.A. Mariscotti: A method for; identification of peaks in the presence of background and its application to; spectrum analysis. NIM 50 (1967), 309-320.; [2] �M.; Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo.:Identification; of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); 108-125.; [3] Z.K. Silagadze, A new; algorithm for automatic photopeak searches. NIM A 376 (1996), 451.;  ; Example of peak searching method;  ; SearchHighRes function provides users with the possibility; to vary the input parameters and with the access to the output deconvolved data",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:34113,Testability,log,logical,34113,"; Function:; Int_t TSpectrum3::SearchHighRes; (const double; ***fSource,double; ***fDest, int; fSizex, int; fSizey, int; fSizez, double; fSigma, double; fThreshold, bool; fBackgroundRemove,int; fDeconIterations, bool; fMarkov, int; fAverWindow) ��;  ; This function searches for peaks; in source spectrum. It is based on deconvolution method. First the background; is removed (if desired), then Markov smoothed spectrum is calculated (if; desired), then the response function is generated according to given sigma and; deconvolution is carried out. On success it returns number of found peaks.;  ; Parameters:; ������� fSource-pointer to; the matrix of source spectrum����������������� ; ������� fDest-resulting; spectrum after deconvolution; � ������fSizex, fSizey, fSizez; -lengths of the source and destination spectra��������������� ; ������� fSigma-sigma of; searched peaks; fThreshold-; threshold value in % for selected peaks, peaks with amplitude less than; threshold*highest_peak/100 are ignored; fBackgroundRemove-; background_remove-logical variable, true if the removal of background before; deconvolution is desired� ; fDeconIterations-number; of iterations in deconvolution operation; fMarkov-logical; variable, if it is true, first the source spectrum is replaced by new spectrum; calculated using Markov chains method ; fAverWindow-width of averaging smoothing window ;  ; References:; [1] M.A. Mariscotti: A method for; identification of peaks in the presence of background and its application to; spectrum analysis. NIM 50 (1967), 309-320.; [2] �M.; Morh�č, J. Kliman, V. Matou�ek, M. Veselsk�, I. Turzo.:Identification; of peaks in multidimensional coincidence gamma-ray spectra. NIM, A443 (2000); 108-125.; [3] Z.K. Silagadze, A new; algorithm for automatic photopeak searches. NIM A 376 (1996), 451.;  ; Example of peak searching method;  ; SearchHighRes function provides users with the possibility; to vary the input parameters and with the access to the output deconvolved data",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:2421,Usability,Clear,Clear,2421," virtual~TSpectrum3(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrum3.html:19389,Usability,simpl,simple,19389,"++){; �����; for(j=0;j<nbinsy;j++){�� ��������������� ; �������� fwrite(source[i][j],; sizeof(source[0][0][0]),nbinsz,out);; ����� }; �� }�� ; �� fclose(out);����� ; �� ; ��; back->Draw("""");� ; };  ;  . const char* SmoothMarkov(Double_t*** source, Int_t ssizex, Int_t ssizey, Int_t ssizez, Int_t averWindow). THREE-DIMENSIONAL MARKOV SPECTRUM SMOOTHING FUNCTION. This function calculates smoothed spectrum from source spectrum; based on Markov chain method.; The result is placed in the array pointed by spectrum pointer. Function parameters:; source-pointer to the array of source spectrum; working_space-pointer to the working array; ssizex-x length of spectrum and working space arrays; ssizey-y length of spectrum and working space arrays; ssizey-z length of spectrum and working space arrays; averWindow-width of averaging smoothing window. . Smoothing;  ; Goal: Suppression of statistical fluctuations; �        ; the algorithm is based on discrete Markov chain, which has very simple; invariant distribution;  ; ����������� �����; �������; ��being defined from the normalization; condition ; �������� n is the length of the smoothed spectrum and .  ;  ;  . is the; probability of the change of the peak position from channel i to the channel; i+1.� is; the normalization constant so that �and m is a width of smoothing window.; We have extended this algorithm to three dimensions. ;  ; Function:; const char*; TSpectrum3::SmoothMarkov(double; ***fSpectrum, int fSizex, int; fSizey, int fSizey, �int; fAverWindow)� ;  ; This function calculates smoothed; spectrum from the source spectrum based on Markov chain method. The result is; placed in the field pointed by source pointer. On successful completion it; returns 0. On error it returns pointer to the string describing error.;  ; Parameters:; ������� fSpectrum-pointer to the matrix of source; spectrum����������������� ; ������� fSizex, fSizey, fSizez -lengths of the; spectrum matrix��������������� �����������������; ������� fAverWindow-",MatchSource.WIKI,root/html604/TSpectrum3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrum3.html
https://root.cern/root/html604/TSpectrumFit.html:1927,Availability,Error,Error,1927," virtual~TSpectrumFit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:2056,Availability,error,error,2056," virtual~TSpectrumFit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:2140,Availability,error,error,2140,"oidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; voidFitAwmi(Double_t* source); voidFitStiefel(Double_t* source); Double_t*GetAmplitudes() const; Double_t*GetAmplitudesErrors() const; Double_t*GetAreas() const; Double_t*GetAreasErrors() const; voidGetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err); Double_tGetChi() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*Ge",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:10959,Availability,error,errors,10959,"nCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfA0Calccalculated value of background a0 parameter; Double_tfA0Errerror value of background a0 parameter; Double_tfA0Initinitial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x); Double_tfA1Calccalculated value of background a1 parameter; Double_tfA1Errerror value of background a1 parameter; Double_tfA1Initinitial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x); Double_tfA2Calccalculated value of background a2 parameter; Double_tfA2Errerror value of background a2 parameter; Double_tfA2Initinitial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x); Double_tfAlphaconvergence coefficient, input parameter, it should be positive number and <=1, for details see references; Int_tfAlphaOptimoptimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; Double_t*fAmpCalc[fNPeaks] array of calculated values of fitted amplitudes, output parameters; Double_t*fAmpErr[fNPeaks] array of amplitude errors; Double_t*fAmpInit[fNPeaks] array of initial values of peaks amplitudes, input parameters; Double_t*fArea[fNPeaks] array of calculated areas of peaks; Double_t*fAreaErr[fNPeaks] array of errors of peak areas; Double_tfBCalccalculated value of b parameter; Double_tfBErrerror value of b parameter; Double_tfBInitinitial value of b parameter (slope), for details see html manual and references; Double_tfChihere the fitting functions return resulting chi square; Int_tfFitTaylororder of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.; Bool_tfFixA0logical value of a0 parameter, which allows to fix the parameter (not to fit).; Bool_tfFixA1logical value of a1 parameter, which allows to fix the paramet",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:11153,Availability,error,errors,11153,"nCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfA0Calccalculated value of background a0 parameter; Double_tfA0Errerror value of background a0 parameter; Double_tfA0Initinitial value of background a0 parameter(backgroud is estimated as a0+a1*x+a2*x*x); Double_tfA1Calccalculated value of background a1 parameter; Double_tfA1Errerror value of background a1 parameter; Double_tfA1Initinitial value of background a1 parameter(backgroud is estimated as a0+a1*x+a2*x*x); Double_tfA2Calccalculated value of background a2 parameter; Double_tfA2Errerror value of background a2 parameter; Double_tfA2Initinitial value of background a2 parameter(backgroud is estimated as a0+a1*x+a2*x*x); Double_tfAlphaconvergence coefficient, input parameter, it should be positive number and <=1, for details see references; Int_tfAlphaOptimoptimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; Double_t*fAmpCalc[fNPeaks] array of calculated values of fitted amplitudes, output parameters; Double_t*fAmpErr[fNPeaks] array of amplitude errors; Double_t*fAmpInit[fNPeaks] array of initial values of peaks amplitudes, input parameters; Double_t*fArea[fNPeaks] array of calculated areas of peaks; Double_t*fAreaErr[fNPeaks] array of errors of peak areas; Double_tfBCalccalculated value of b parameter; Double_tfBErrerror value of b parameter; Double_tfBInitinitial value of b parameter (slope), for details see html manual and references; Double_tfChihere the fitting functions return resulting chi square; Int_tfFitTaylororder of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.; Bool_tfFixA0logical value of a0 parameter, which allows to fix the parameter (not to fit).; Bool_tfFixA1logical value of a1 parameter, which allows to fix the paramet",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:12898,Availability,error,errors,12898,"ch allows to fix the parameter (not to fit).; Bool_t*fFixAmp[fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional; Bool_tfFixBlogical value of b parameter, which allows to fix the parameter (not to fit).; Bool_t*fFixPosition[fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional; Bool_tfFixSlogical value of s parameter, which allows to fix the parameter (not to fit).; Bool_tfFixSigmalogical value of sigma parameter, which allows to fix the parameter (not to fit).; Bool_tfFixTlogical value of t parameter, which allows to fix the parameter (not to fit).; Int_tfNPeaksnumber of peaks present in fit, input parameter, it should be > 0; TStringTNamed::fNameobject identifier; Int_tfNumberIterationsnumber of iterations in fitting procedure, input parameter, it should be > 0; Double_t*fPositionCalc[fNPeaks] array of calculated values of fitted positions, output parameters; Double_t*fPositionErr[fNPeaks] array of position errors; Double_t*fPositionInit[fNPeaks] array of initial values of peaks positions, input parameters; Int_tfPowerpossible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; Double_tfSCalccalculated value of s parameter; Double_tfSErrerror value of s parameter; Double_tfSInitinitial value of s parameter (relative amplitude of step), for details see html manual and references; Double_tfSigmaCalccalculated value of sigma parameter; Double_tfSigmaErrerror value of sigma parameter; Double_tfSigmaInitinitial value of sigma parameter; Int_tfStatisticTypetype of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; Double_tfTCalccalculated value of t parameter; Double_tfTErrerror",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:14805,Availability,error,error,14805,"or value of t parameter; Double_tfTInitinitial value of t parameter (relative amplitude of tail), for details see html manual and references; TStringTNamed::fTitleobject title; Int_tfXmaxlast fitted channel; Int_tfXminfirst fitted channel. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrumFit. Function documentation; TSpectrumFit(); default constructor. TSpectrumFit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks is .  ;  ;  ;  ;  ;  ;  ;  . where a represents vector of; fitted parameters (positions p(j), amplitudes A(j), sigma, relative amplitudes; T, S and slope B).;  . ~TSpectrumFit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Deramp(Double_t i, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of peak shape function (see manual); according to amplitude of peak.; Function parameters:; -i-channel; -i0-position of peak; -sigma-sigma of peak; -t, s-relative amplitudes; -b-slope. Double_t Deri0(Double_t i, Double_t amp, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of peak shape function (see manual); according to peak position.; Function parameters:; -i-channel; -amp-amplitude of peak; -i0-position of peak; -sigma-sigma of peak; -t, s-relative amplitudes; -b-slope. Double_t Derderi0(Double_t i, Double_t amp, Double_t i0, Double_t sigma). AUXILIARY FUNCTION. This function calculates second derivative of peak shape function; (see",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:14913,Availability,error,error,14913," details see html manual and references; TStringTNamed::fTitleobject title; Int_tfXmaxlast fitted channel; Int_tfXminfirst fitted channel. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrumFit. Function documentation; TSpectrumFit(); default constructor. TSpectrumFit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks is .  ;  ;  ;  ;  ;  ;  ;  . where a represents vector of; fitted parameters (positions p(j), amplitudes A(j), sigma, relative amplitudes; T, S and slope B).;  . ~TSpectrumFit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Deramp(Double_t i, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of peak shape function (see manual); according to amplitude of peak.; Function parameters:; -i-channel; -i0-position of peak; -sigma-sigma of peak; -t, s-relative amplitudes; -b-slope. Double_t Deri0(Double_t i, Double_t amp, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of peak shape function (see manual); according to peak position.; Function parameters:; -i-channel; -amp-amplitude of peak; -i0-position of peak; -sigma-sigma of peak; -t, s-relative amplitudes; -b-slope. Double_t Derderi0(Double_t i, Double_t amp, Double_t i0, Double_t sigma). AUXILIARY FUNCTION. This function calculates second derivative of peak shape function; (see manual) according to peak position.; Function parameters:; -i-channel; -amp-amplitude of peak; -i0-p",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:23565,Availability,error,errors,23565,,MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:23887,Availability,error,errors,23887,,MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:24049,Availability,error,errors,24049," coefficient, input; parameter, it should be positive number and <=1, for details see references; ��; Double_t� fChi;���������������������� //here the fitting functions return; resulting chi square�� ; ��; Double_t *fPositionInit;������������� //[fNPeaks] array of initial values of; peaks positions, input parameters; ��; Double_t *fPositionCalc;������������� //[fNPeaks] array of calculated values of; fitted positions, output parameters; ��; Double_t *fPositionErr;�������������� //[fNPeaks] array of position errors; ��; Double_t *fAmpInit;������������������ //[fNPeaks] array of initial values of; peaks amplitudes, input parameters; ��; Double_t *fAmpCalc;������������������ //[fNPeaks] array of calculated values of; fitted amplitudes, output parameters; ��; Double_t *fAmpErr;������������������� //[fNPeaks] array of amplitude errors; ��; Double_t *fArea;����� ����������������//[fNPeaks] array of calculated areas of; peaks; ��; Double_t *fAreaErr;������������������ //[fNPeaks] array of errors of peak areas; ��; Double_t� fSigmaInit;���������������� //initial value of sigma parameter; ��; Double_t� fSigmaCalc;��������� �������//calculated value of sigma parameter; ��; Double_t� fSigmaErr;����������������� //error value of sigma parameter; ��; Double_t� fTInit;�������������������� //initial value of t parameter (relative; amplitude of tail), for details see html manual and references; ��; Double_t� fTCalc;�������������������� //calculated value of t parameter; ��; Double_t� fTErr;��������������������� //error value of t parameter; ��; Double_t� fBInit;�������������������� //initial value of b parameter (slope),; for details see html manual and references; ��; Double_t� fBCalc;�������������������� //calculated value of b parameter; ��; Double_t� fBErr;��������������������� //error value of b parameter; ��; Double_t� fSInit;�������������������� //initial value of s parameter (relative; amplitude of step), for details see html manual and references; ��; Double_t� fSCalc;�����",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:24274,Availability,error,error,24274,"Init;������������� //[fNPeaks] array of initial values of; peaks positions, input parameters; ��; Double_t *fPositionCalc;������������� //[fNPeaks] array of calculated values of; fitted positions, output parameters; ��; Double_t *fPositionErr;�������������� //[fNPeaks] array of position errors; ��; Double_t *fAmpInit;������������������ //[fNPeaks] array of initial values of; peaks amplitudes, input parameters; ��; Double_t *fAmpCalc;������������������ //[fNPeaks] array of calculated values of; fitted amplitudes, output parameters; ��; Double_t *fAmpErr;������������������� //[fNPeaks] array of amplitude errors; ��; Double_t *fArea;����� ����������������//[fNPeaks] array of calculated areas of; peaks; ��; Double_t *fAreaErr;������������������ //[fNPeaks] array of errors of peak areas; ��; Double_t� fSigmaInit;���������������� //initial value of sigma parameter; ��; Double_t� fSigmaCalc;��������� �������//calculated value of sigma parameter; ��; Double_t� fSigmaErr;����������������� //error value of sigma parameter; ��; Double_t� fTInit;�������������������� //initial value of t parameter (relative; amplitude of tail), for details see html manual and references; ��; Double_t� fTCalc;�������������������� //calculated value of t parameter; ��; Double_t� fTErr;��������������������� //error value of t parameter; ��; Double_t� fBInit;�������������������� //initial value of b parameter (slope),; for details see html manual and references; ��; Double_t� fBCalc;�������������������� //calculated value of b parameter; ��; Double_t� fBErr;��������������������� //error value of b parameter; ��; Double_t� fSInit;�������������������� //initial value of s parameter (relative; amplitude of step), for details see html manual and references; ��; Double_t� fSCalc;�������������������� //calculated value of s parameter; ��; Double_t� fSErr;��������������������� //error value of s parameter; ��; Double_t� fA0Init;������������������� //initial value of background a0; parameter(backgroud is es",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:24575,Availability,error,error,24575,"ouble_t *fAmpInit;������������������ //[fNPeaks] array of initial values of; peaks amplitudes, input parameters; ��; Double_t *fAmpCalc;������������������ //[fNPeaks] array of calculated values of; fitted amplitudes, output parameters; ��; Double_t *fAmpErr;������������������� //[fNPeaks] array of amplitude errors; ��; Double_t *fArea;����� ����������������//[fNPeaks] array of calculated areas of; peaks; ��; Double_t *fAreaErr;������������������ //[fNPeaks] array of errors of peak areas; ��; Double_t� fSigmaInit;���������������� //initial value of sigma parameter; ��; Double_t� fSigmaCalc;��������� �������//calculated value of sigma parameter; ��; Double_t� fSigmaErr;����������������� //error value of sigma parameter; ��; Double_t� fTInit;�������������������� //initial value of t parameter (relative; amplitude of tail), for details see html manual and references; ��; Double_t� fTCalc;�������������������� //calculated value of t parameter; ��; Double_t� fTErr;��������������������� //error value of t parameter; ��; Double_t� fBInit;�������������������� //initial value of b parameter (slope),; for details see html manual and references; ��; Double_t� fBCalc;�������������������� //calculated value of b parameter; ��; Double_t� fBErr;��������������������� //error value of b parameter; ��; Double_t� fSInit;�������������������� //initial value of s parameter (relative; amplitude of step), for details see html manual and references; ��; Double_t� fSCalc;�������������������� //calculated value of s parameter; ��; Double_t� fSErr;��������������������� //error value of s parameter; ��; Double_t� fA0Init;������������������� //initial value of background a0; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA0Calc;������������������� //calculated value of background a0; parameter; ��; Double_t� fA0Err;�������������������� //error value of background a0 parameter; ��; Double_t� fA1Init;������������������� //initial value of background a1; parameter(backgroud is ",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:24851,Availability,error,error,24851,"� //[fNPeaks] array of amplitude errors; ��; Double_t *fArea;����� ����������������//[fNPeaks] array of calculated areas of; peaks; ��; Double_t *fAreaErr;������������������ //[fNPeaks] array of errors of peak areas; ��; Double_t� fSigmaInit;���������������� //initial value of sigma parameter; ��; Double_t� fSigmaCalc;��������� �������//calculated value of sigma parameter; ��; Double_t� fSigmaErr;����������������� //error value of sigma parameter; ��; Double_t� fTInit;�������������������� //initial value of t parameter (relative; amplitude of tail), for details see html manual and references; ��; Double_t� fTCalc;�������������������� //calculated value of t parameter; ��; Double_t� fTErr;��������������������� //error value of t parameter; ��; Double_t� fBInit;�������������������� //initial value of b parameter (slope),; for details see html manual and references; ��; Double_t� fBCalc;�������������������� //calculated value of b parameter; ��; Double_t� fBErr;��������������������� //error value of b parameter; ��; Double_t� fSInit;�������������������� //initial value of s parameter (relative; amplitude of step), for details see html manual and references; ��; Double_t� fSCalc;�������������������� //calculated value of s parameter; ��; Double_t� fSErr;��������������������� //error value of s parameter; ��; Double_t� fA0Init;������������������� //initial value of background a0; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA0Calc;������������������� //calculated value of background a0; parameter; ��; Double_t� fA0Err;�������������������� //error value of background a0 parameter; ��; Double_t� fA1Init;������������������� //initial value of background a1; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA1Calc;������������������� //calculated value of background a1; parameter; ��; Double_t� fA1Err;�������������������� //error value of background a1 parameter; ��; Double_t� fA2Init;������������������� //initial value of background ",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:25148,Availability,error,error,25148,"; Double_t� fSigmaCalc;��������� �������//calculated value of sigma parameter; ��; Double_t� fSigmaErr;����������������� //error value of sigma parameter; ��; Double_t� fTInit;�������������������� //initial value of t parameter (relative; amplitude of tail), for details see html manual and references; ��; Double_t� fTCalc;�������������������� //calculated value of t parameter; ��; Double_t� fTErr;��������������������� //error value of t parameter; ��; Double_t� fBInit;�������������������� //initial value of b parameter (slope),; for details see html manual and references; ��; Double_t� fBCalc;�������������������� //calculated value of b parameter; ��; Double_t� fBErr;��������������������� //error value of b parameter; ��; Double_t� fSInit;�������������������� //initial value of s parameter (relative; amplitude of step), for details see html manual and references; ��; Double_t� fSCalc;�������������������� //calculated value of s parameter; ��; Double_t� fSErr;��������������������� //error value of s parameter; ��; Double_t� fA0Init;������������������� //initial value of background a0; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA0Calc;������������������� //calculated value of background a0; parameter; ��; Double_t� fA0Err;�������������������� //error value of background a0 parameter; ��; Double_t� fA1Init;������������������� //initial value of background a1; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA1Calc;������������������� //calculated value of background a1; parameter; ��; Double_t� fA1Err;�������������������� //error value of background a1 parameter; ��; Double_t� fA2Init;������������������� //initial value of background a2; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA2Calc;������������������� //calculated value of background a2; parameter; ��; Double_t� fA2Err; ��������������������//error value of background a2 parameter; ��; Bool_t�� *fFixPosition;�������������� //[fNPeaks] array of log",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:25439,Availability,error,error,25439,"igma parameter; ��; Double_t� fSigmaErr;����������������� //error value of sigma parameter; ��; Double_t� fTInit;�������������������� //initial value of t parameter (relative; amplitude of tail), for details see html manual and references; ��; Double_t� fTCalc;�������������������� //calculated value of t parameter; ��; Double_t� fTErr;��������������������� //error value of t parameter; ��; Double_t� fBInit;�������������������� //initial value of b parameter (slope),; for details see html manual and references; ��; Double_t� fBCalc;�������������������� //calculated value of b parameter; ��; Double_t� fBErr;��������������������� //error value of b parameter; ��; Double_t� fSInit;�������������������� //initial value of s parameter (relative; amplitude of step), for details see html manual and references; ��; Double_t� fSCalc;�������������������� //calculated value of s parameter; ��; Double_t� fSErr;��������������������� //error value of s parameter; ��; Double_t� fA0Init;������������������� //initial value of background a0; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA0Calc;������������������� //calculated value of background a0; parameter; ��; Double_t� fA0Err;�������������������� //error value of background a0 parameter; ��; Double_t� fA1Init;������������������� //initial value of background a1; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA1Calc;������������������� //calculated value of background a1; parameter; ��; Double_t� fA1Err;�������������������� //error value of background a1 parameter; ��; Double_t� fA2Init;������������������� //initial value of background a2; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA2Calc;������������������� //calculated value of background a2; parameter; ��; Double_t� fA2Err; ��������������������//error value of background a2 parameter; ��; Bool_t�� *fFixPosition;�������������� //[fNPeaks] array of logical values which; allow to fix appropriate positions (not fit).",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:25742,Availability,error,error,25742,"igma parameter; ��; Double_t� fSigmaErr;����������������� //error value of sigma parameter; ��; Double_t� fTInit;�������������������� //initial value of t parameter (relative; amplitude of tail), for details see html manual and references; ��; Double_t� fTCalc;�������������������� //calculated value of t parameter; ��; Double_t� fTErr;��������������������� //error value of t parameter; ��; Double_t� fBInit;�������������������� //initial value of b parameter (slope),; for details see html manual and references; ��; Double_t� fBCalc;�������������������� //calculated value of b parameter; ��; Double_t� fBErr;��������������������� //error value of b parameter; ��; Double_t� fSInit;�������������������� //initial value of s parameter (relative; amplitude of step), for details see html manual and references; ��; Double_t� fSCalc;�������������������� //calculated value of s parameter; ��; Double_t� fSErr;��������������������� //error value of s parameter; ��; Double_t� fA0Init;������������������� //initial value of background a0; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA0Calc;������������������� //calculated value of background a0; parameter; ��; Double_t� fA0Err;�������������������� //error value of background a0 parameter; ��; Double_t� fA1Init;������������������� //initial value of background a1; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA1Calc;������������������� //calculated value of background a1; parameter; ��; Double_t� fA1Err;�������������������� //error value of background a1 parameter; ��; Double_t� fA2Init;������������������� //initial value of background a2; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA2Calc;������������������� //calculated value of background a2; parameter; ��; Double_t� fA2Err; ��������������������//error value of background a2 parameter; ��; Bool_t�� *fFixPosition;�������������� //[fNPeaks] array of logical values which; allow to fix appropriate positions (not fit).",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:26045,Availability,error,error,26045,"igma parameter; ��; Double_t� fSigmaErr;����������������� //error value of sigma parameter; ��; Double_t� fTInit;�������������������� //initial value of t parameter (relative; amplitude of tail), for details see html manual and references; ��; Double_t� fTCalc;�������������������� //calculated value of t parameter; ��; Double_t� fTErr;��������������������� //error value of t parameter; ��; Double_t� fBInit;�������������������� //initial value of b parameter (slope),; for details see html manual and references; ��; Double_t� fBCalc;�������������������� //calculated value of b parameter; ��; Double_t� fBErr;��������������������� //error value of b parameter; ��; Double_t� fSInit;�������������������� //initial value of s parameter (relative; amplitude of step), for details see html manual and references; ��; Double_t� fSCalc;�������������������� //calculated value of s parameter; ��; Double_t� fSErr;��������������������� //error value of s parameter; ��; Double_t� fA0Init;������������������� //initial value of background a0; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA0Calc;������������������� //calculated value of background a0; parameter; ��; Double_t� fA0Err;�������������������� //error value of background a0 parameter; ��; Double_t� fA1Init;������������������� //initial value of background a1; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA1Calc;������������������� //calculated value of background a1; parameter; ��; Double_t� fA1Err;�������������������� //error value of background a1 parameter; ��; Double_t� fA2Init;������������������� //initial value of background a2; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA2Calc;������������������� //calculated value of background a2; parameter; ��; Double_t� fA2Err; ��������������������//error value of background a2 parameter; ��; Bool_t�� *fFixPosition;�������������� //[fNPeaks] array of logical values which; allow to fix appropriate positions (not fit).",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:38751,Availability,error,error,38751,"arameter (not to fit); -a1Init - initial value of a1 parameter; -fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); -a2Init - initial value of a2 parameter; -fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInit - initial value of t parameter; -fixT - logical value of t parameter, which allows to fix the parameter (not to fit); -bInit - initial value of b parameter; -fixB - logical value of b parameter, which allows to fix the parameter (not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -sigmaErr - gets error value of sigma parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -a1 - gets the fitted value of a1 parameter; -a1Err - gets error value of a1 parameter; -a2 - gets the fitted value of a2 parameter; -a2Err - gets error value of a2 parameter. void GetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Double_t& s, Double_t& sErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -t - gets the fitted value of t parameter; -tErr - gets error value of t parameter; -b - gets the fitted value of b parameter; -bErr - gets error value of b parameter; -s - gets the fitted value of s parameter; -sErr - gets error value of s parameter. TSpectrumFit(const",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:38826,Availability,error,error,38826,"arameter (not to fit); -a1Init - initial value of a1 parameter; -fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); -a2Init - initial value of a2 parameter; -fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInit - initial value of t parameter; -fixT - logical value of t parameter, which allows to fix the parameter (not to fit); -bInit - initial value of b parameter; -fixB - logical value of b parameter, which allows to fix the parameter (not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -sigmaErr - gets error value of sigma parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -a1 - gets the fitted value of a1 parameter; -a1Err - gets error value of a1 parameter; -a2 - gets the fitted value of a2 parameter; -a2Err - gets error value of a2 parameter. void GetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Double_t& s, Double_t& sErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -t - gets the fitted value of t parameter; -tErr - gets error value of t parameter; -b - gets the fitted value of b parameter; -bErr - gets error value of b parameter; -s - gets the fitted value of s parameter; -sErr - gets error value of s parameter. TSpectrumFit(const",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:39053,Availability,error,errors,39053,"ol_t fixS). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInit - initial value of t parameter; -fixT - logical value of t parameter, which allows to fix the parameter (not to fit); -bInit - initial value of b parameter; -fixB - logical value of b parameter, which allows to fix the parameter (not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -sigmaErr - gets error value of sigma parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -a1 - gets the fitted value of a1 parameter; -a1Err - gets error value of a1 parameter; -a2 - gets the fitted value of a2 parameter; -a2Err - gets error value of a2 parameter. void GetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Double_t& s, Double_t& sErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -t - gets the fitted value of t parameter; -tErr - gets error value of t parameter; -b - gets the fitted value of b parameter; -bErr - gets error value of b parameter; -s - gets the fitted value of s parameter; -sErr - gets error value of s parameter. TSpectrumFit(const TSpectrumFit& ). Double_t * GetAmplitudes() const; {return fAmpCalc;}. Double_t * GetAmplitudesErrors() const; {return fAmpErr;}. Double_t * GetAreas() const; {return fArea;}. Double_t * GetAreasErrors() const; {return fAreaErr;}. Double_t GetChi() const; {return fChi;}. Double_t * GetPositions() const; {return fPositionCalc;}. Double_t * GetPositionsErrors() const; {return fPo",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:39120,Availability,error,error,39120,"ol_t fixS). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInit - initial value of t parameter; -fixT - logical value of t parameter, which allows to fix the parameter (not to fit); -bInit - initial value of b parameter; -fixB - logical value of b parameter, which allows to fix the parameter (not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -sigmaErr - gets error value of sigma parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -a1 - gets the fitted value of a1 parameter; -a1Err - gets error value of a1 parameter; -a2 - gets the fitted value of a2 parameter; -a2Err - gets error value of a2 parameter. void GetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Double_t& s, Double_t& sErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -t - gets the fitted value of t parameter; -tErr - gets error value of t parameter; -b - gets the fitted value of b parameter; -bErr - gets error value of b parameter; -s - gets the fitted value of s parameter; -sErr - gets error value of s parameter. TSpectrumFit(const TSpectrumFit& ). Double_t * GetAmplitudes() const; {return fAmpCalc;}. Double_t * GetAmplitudesErrors() const; {return fAmpErr;}. Double_t * GetAreas() const; {return fArea;}. Double_t * GetAreasErrors() const; {return fAreaErr;}. Double_t GetChi() const; {return fChi;}. Double_t * GetPositions() const; {return fPositionCalc;}. Double_t * GetPositionsErrors() const; {return fPo",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:39208,Availability,error,error,39208,"ol_t fixS). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInit - initial value of t parameter; -fixT - logical value of t parameter, which allows to fix the parameter (not to fit); -bInit - initial value of b parameter; -fixB - logical value of b parameter, which allows to fix the parameter (not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -sigmaErr - gets error value of sigma parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -a1 - gets the fitted value of a1 parameter; -a1Err - gets error value of a1 parameter; -a2 - gets the fitted value of a2 parameter; -a2Err - gets error value of a2 parameter. void GetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Double_t& s, Double_t& sErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -t - gets the fitted value of t parameter; -tErr - gets error value of t parameter; -b - gets the fitted value of b parameter; -bErr - gets error value of b parameter; -s - gets the fitted value of s parameter; -sErr - gets error value of s parameter. TSpectrumFit(const TSpectrumFit& ). Double_t * GetAmplitudes() const; {return fAmpCalc;}. Double_t * GetAmplitudesErrors() const; {return fAmpErr;}. Double_t * GetAreas() const; {return fArea;}. Double_t * GetAreasErrors() const; {return fAreaErr;}. Double_t GetChi() const; {return fChi;}. Double_t * GetPositions() const; {return fPositionCalc;}. Double_t * GetPositionsErrors() const; {return fPo",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:39296,Availability,error,error,39296,"ol_t fixS). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInit - initial value of t parameter; -fixT - logical value of t parameter, which allows to fix the parameter (not to fit); -bInit - initial value of b parameter; -fixB - logical value of b parameter, which allows to fix the parameter (not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -sigmaErr - gets error value of sigma parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -a1 - gets the fitted value of a1 parameter; -a1Err - gets error value of a1 parameter; -a2 - gets the fitted value of a2 parameter; -a2Err - gets error value of a2 parameter. void GetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Double_t& s, Double_t& sErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -t - gets the fitted value of t parameter; -tErr - gets error value of t parameter; -b - gets the fitted value of b parameter; -bErr - gets error value of b parameter; -s - gets the fitted value of s parameter; -sErr - gets error value of s parameter. TSpectrumFit(const TSpectrumFit& ). Double_t * GetAmplitudes() const; {return fAmpCalc;}. Double_t * GetAmplitudesErrors() const; {return fAmpErr;}. Double_t * GetAreas() const; {return fArea;}. Double_t * GetAreasErrors() const; {return fAreaErr;}. Double_t GetChi() const; {return fChi;}. Double_t * GetPositions() const; {return fPositionCalc;}. Double_t * GetPositionsErrors() const; {return fPo",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:39502,Availability,error,errors,39502,"(not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -sigmaErr - gets error value of sigma parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -a1 - gets the fitted value of a1 parameter; -a1Err - gets error value of a1 parameter; -a2 - gets the fitted value of a2 parameter; -a2Err - gets error value of a2 parameter. void GetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Double_t& s, Double_t& sErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -t - gets the fitted value of t parameter; -tErr - gets error value of t parameter; -b - gets the fitted value of b parameter; -bErr - gets error value of b parameter; -s - gets the fitted value of s parameter; -sErr - gets error value of s parameter. TSpectrumFit(const TSpectrumFit& ). Double_t * GetAmplitudes() const; {return fAmpCalc;}. Double_t * GetAmplitudesErrors() const; {return fAmpErr;}. Double_t * GetAreas() const; {return fArea;}. Double_t * GetAreasErrors() const; {return fAreaErr;}. Double_t GetChi() const; {return fChi;}. Double_t * GetPositions() const; {return fPositionCalc;}. Double_t * GetPositionsErrors() const; {return fPositionErr;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:39566,Availability,error,error,39566,"(not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -sigmaErr - gets error value of sigma parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -a1 - gets the fitted value of a1 parameter; -a1Err - gets error value of a1 parameter; -a2 - gets the fitted value of a2 parameter; -a2Err - gets error value of a2 parameter. void GetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Double_t& s, Double_t& sErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -t - gets the fitted value of t parameter; -tErr - gets error value of t parameter; -b - gets the fitted value of b parameter; -bErr - gets error value of b parameter; -s - gets the fitted value of s parameter; -sErr - gets error value of s parameter. TSpectrumFit(const TSpectrumFit& ). Double_t * GetAmplitudes() const; {return fAmpCalc;}. Double_t * GetAmplitudesErrors() const; {return fAmpErr;}. Double_t * GetAreas() const; {return fArea;}. Double_t * GetAreasErrors() const; {return fAreaErr;}. Double_t GetChi() const; {return fChi;}. Double_t * GetPositions() const; {return fPositionCalc;}. Double_t * GetPositionsErrors() const; {return fPositionErr;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:39650,Availability,error,error,39650,"(not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -sigmaErr - gets error value of sigma parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -a1 - gets the fitted value of a1 parameter; -a1Err - gets error value of a1 parameter; -a2 - gets the fitted value of a2 parameter; -a2Err - gets error value of a2 parameter. void GetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Double_t& s, Double_t& sErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -t - gets the fitted value of t parameter; -tErr - gets error value of t parameter; -b - gets the fitted value of b parameter; -bErr - gets error value of b parameter; -s - gets the fitted value of s parameter; -sErr - gets error value of s parameter. TSpectrumFit(const TSpectrumFit& ). Double_t * GetAmplitudes() const; {return fAmpCalc;}. Double_t * GetAmplitudesErrors() const; {return fAmpErr;}. Double_t * GetAreas() const; {return fArea;}. Double_t * GetAreasErrors() const; {return fAreaErr;}. Double_t GetChi() const; {return fChi;}. Double_t * GetPositions() const; {return fPositionCalc;}. Double_t * GetPositionsErrors() const; {return fPositionErr;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:39734,Availability,error,error,39734,"(not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -sigmaErr - gets error value of sigma parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -a1 - gets the fitted value of a1 parameter; -a1Err - gets error value of a1 parameter; -a2 - gets the fitted value of a2 parameter; -a2Err - gets error value of a2 parameter. void GetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Double_t& s, Double_t& sErr). GETTER FUNCTION. This function gets the tail parameters and their errors; -t - gets the fitted value of t parameter; -tErr - gets error value of t parameter; -b - gets the fitted value of b parameter; -bErr - gets error value of b parameter; -s - gets the fitted value of s parameter; -sErr - gets error value of s parameter. TSpectrumFit(const TSpectrumFit& ). Double_t * GetAmplitudes() const; {return fAmpCalc;}. Double_t * GetAmplitudesErrors() const; {return fAmpErr;}. Double_t * GetAreas() const; {return fArea;}. Double_t * GetAreasErrors() const; {return fAreaErr;}. Double_t GetChi() const; {return fChi;}. Double_t * GetPositions() const; {return fPositionCalc;}. Double_t * GetPositionsErrors() const; {return fPositionErr;}. » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:746,Energy Efficiency,Efficient,Efficient,746,". TSpectrumFit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrumFit. class TSpectrumFit: public TNamed. THIS CLASS CONTAINS ADVANCED SPECTRA FITTING FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:; [1] M. Morhac et al.: Efficient fitting algorithms applied to; analysis of coincidence gamma-ray spectra. Computer Physics; Communications, Vol 172/1 (2005) pp. 19-41. [2] M. Morhac et al.: Study of fitting algorithms applied to; simultaneous analysis of large number of peaks in gamma-ray spectra.; Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003. Function Members (Methods); public:. virtual~TSpectrumFit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:5562,Energy Efficiency,power,power,5562,"d*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSpectrumFit&operator=(const TSpectrumFit&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFitParameters(Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetPeakParameters(Double_t sigma, Bool_t fixSigma, const Double_t* positionInit, const Bool_t* fixPosition, const Double_t* ampInit, const Bool_t* fixAmp); voidSetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpectrumFit(); TSpectrumFit(Int_t numberPeaks); TSpectrumFit(const TSpectrumFit&); virtual",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:14288,Energy Efficiency,allocate,allocates,14288,"see html manual and references; Double_tfSigmaCalccalculated value of sigma parameter; Double_tfSigmaErrerror value of sigma parameter; Double_tfSigmaInitinitial value of sigma parameter; Int_tfStatisticTypetype of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; Double_tfTCalccalculated value of t parameter; Double_tfTErrerror value of t parameter; Double_tfTInitinitial value of t parameter (relative amplitude of tail), for details see html manual and references; TStringTNamed::fTitleobject title; Int_tfXmaxlast fitted channel; Int_tfXminfirst fitted channel. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrumFit. Function documentation; TSpectrumFit(); default constructor. TSpectrumFit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks is .  ;  ;  ;  ;  ;  ;  ;  . where a represents vector of; fitted parameters (positions p(j), amplitudes A(j), sigma, relative amplitudes; T, S and slope B).;  . ~TSpectrumFit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Deramp(Double_t i, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of peak shape function (see manual); according to amplitude of peak.; Function parameters:; -i-channel; -i0-position of peak; -sigma-sigma of peak; -t, s-relative amplitudes; -b-slope. Double_t Deri0(Double_t i, ",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:19926,Energy Efficiency,power,power,19926,"pe. Double_t Derpa(Double_t sigma, Double_t t, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of the area of peak; according to its amplitude.; Function parameters:; -sigma-sigma of peak; -t-relative amplitudes; -b-slope. Double_t Derpsigma(Double_t a, Double_t t, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of the area of peak; according to sigma of peaks.; Function parameters:; -a-amplitude of peak; -t-relative amplitudes; -b-slope. Double_t Derpt(Double_t a, Double_t sigma, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of the area of peak; according to t parameter.; Function parameters:; -sigma-sigma of peak; -t-relative amplitudes; -b-slope. Double_t Derpb(Double_t a, Double_t sigma, Double_t t, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of the area of peak; according to b parameter.; Function parameters:; -sigma-sigma of peak; -t-relative amplitudes; -b-slope. Double_t Ourpowl(Double_t a, Int_t pw); power function. void FitAwmi(Double_t* source). ONE-DIMENSIONAL FIT FUNCTION; ALGORITHM WITHOUT MATRIX INVERSION; This function fits the source spectrum. The calling program should; fill in input parameters of the TSpectrumFit class; The fitted parameters are written into; TSpectrumFit class output parameters and fitted data are written into; source spectrum. Function parameters:; source-pointer to the vector of source spectrum. . Fitting; Goal: to estimate; simultaneously peak shape parameters in spectra with large number of peaks; �        ; peaks can be fitted separately, each peak (or multiplets) in a region or; together all peaks in a spectrum. To fit separately each peak one needs to; determine the fitted region. However it can happen that the regions of; neighboring peaks are overlapping. Then the results of fitting are very poor.; On the other hand, when fitting together all peaks found in a� spectrum, one; needs to have a method that is� stable (converges) and fas",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:35740,Energy Efficiency,power,power,35740,"le_t *CalcPositions =; new Double_t[nfound];����� ; �� Double_t *CalcAmplitudes = new; Double_t[nfound];�������� ; �� CalcPositions=pfit->GetPositions();; ��; CalcAmplitudes=pfit->GetAmplitudes();�� ; �� for (i = 0; i < nbins;; i++) d->SetBinContent(i + 1,source[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");� ; �� for (i = 0; i < nfound;; i++) {; �� ������������ ������������������������������� a=CalcPositions[i];; ������� bin = 1 + Int_t(a +; 0.5);�� ������������ ; ������� PosX[i] =; d->GetBinCenter(bin);; ������� PosY[i] =; d->GetBinContent(bin);; �� }; �� TPolyMarker * pm =; (TPolyMarker*)h->GetListOfFunctions()->FindObject(""TPolyMarker"");; �� if (pm) {; �����; h->GetListOfFunctions()->Remove(pm);; ����� delete pm;; �� }; �� pm = new; TPolyMarker(nfound, PosX, PosY);; ��; h->GetListOfFunctions()->Add(pm);; �� pm->SetMarkerStyle(23);; ��; pm->SetMarkerColor(kRed);; �� pm->SetMarkerSize(1);��. }. void SetFitParameters(Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor). SETTER FUNCTION. This function sets the following fitting parameters:; -xmin, xmax - fitting region; -numberIterations - # of desired iterations in the fit; -alpha - convergence coefficient, it should be positive number and <=1, for details see references; -statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; -alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; -power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParameters(Double_t sigma, Bo",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:36381,Energy Efficiency,power,power,36381,"������ bin = 1 + Int_t(a +; 0.5);�� ������������ ; ������� PosX[i] =; d->GetBinCenter(bin);; ������� PosY[i] =; d->GetBinContent(bin);; �� }; �� TPolyMarker * pm =; (TPolyMarker*)h->GetListOfFunctions()->FindObject(""TPolyMarker"");; �� if (pm) {; �����; h->GetListOfFunctions()->Remove(pm);; ����� delete pm;; �� }; �� pm = new; TPolyMarker(nfound, PosX, PosY);; ��; h->GetListOfFunctions()->Add(pm);; �� pm->SetMarkerStyle(23);; ��; pm->SetMarkerColor(kRed);; �� pm->SetMarkerSize(1);��. }. void SetFitParameters(Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor). SETTER FUNCTION. This function sets the following fitting parameters:; -xmin, xmax - fitting region; -numberIterations - # of desired iterations in the fit; -alpha - convergence coefficient, it should be positive number and <=1, for details see references; -statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; -alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; -power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParameters(Double_t sigma, Bool_t fixSigma, const Double_t* positionInit, const Bool_t* fixPosition, const Double_t* ampInit, const Bool_t* fixAmp). SETTER FUNCTION. This function sets the following fitting parameters of peaks:; -sigma - initial value of sigma parameter; -fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); -positionInit - aray of initial values of peaks positions; -fixPosition - array of logical value",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:118,Modifiability,inherit,inheritance,118,". TSpectrumFit. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrumFit. class TSpectrumFit: public TNamed. THIS CLASS CONTAINS ADVANCED SPECTRA FITTING FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:; [1] M. Morhac et al.: Efficient fitting algorithms applied to; analysis of coincidence gamma-ray spectra. Computer Physics; Communications, Vol 172/1 (2005) pp. 19-41. [2] M. Morhac et al.: Study of fitting algorithms applied to; simultaneous analysis of large number of peaks in gamma-ray spectra.; Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003. Function Members (Methods); public:. virtual~TSpectrumFit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:3634,Modifiability,Inherit,InheritsFrom,3634,"reasErrors() const; voidGetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err); Double_tGetChi() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositions() const; Double_t*GetPositionsErrors() const; voidGetSigma(Double_t& sigma, Double_t& sigmaErr); voidGetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Double_t& s, Double_t& sErr); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:3700,Modifiability,Inherit,InheritsFrom,3700,"le_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err); Double_tGetChi() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositions() const; Double_t*GetPositionsErrors() const; voidGetSigma(Double_t& sigma, Double_t& sigmaErr); voidGetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Double_t& s, Double_t& sErr); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSpectrumFit&operator=(const TSpectrumFit&); virtual ",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:14056,Modifiability,Inherit,Inheritance,14056,"e references. It applies only for Awmi fitting function.; Double_tfSCalccalculated value of s parameter; Double_tfSErrerror value of s parameter; Double_tfSInitinitial value of s parameter (relative amplitude of step), for details see html manual and references; Double_tfSigmaCalccalculated value of sigma parameter; Double_tfSigmaErrerror value of sigma parameter; Double_tfSigmaInitinitial value of sigma parameter; Int_tfStatisticTypetype of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; Double_tfTCalccalculated value of t parameter; Double_tfTErrerror value of t parameter; Double_tfTInitinitial value of t parameter (relative amplitude of tail), for details see html manual and references; TStringTNamed::fTitleobject title; Int_tfXmaxlast fitted channel; Int_tfXminfirst fitted channel. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrumFit. Function documentation; TSpectrumFit(); default constructor. TSpectrumFit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks is .  ;  ;  ;  ;  ;  ;  ;  . where a represents vector of; fitted parameters (positions p(j), amplitudes A(j), sigma, relative amplitudes; T, S and slope B).;  . ~TSpectrumFit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Deramp(Double_t i, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b). AUXILIARY FUNCTION. This function cal",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:14385,Modifiability,variab,variables,14385,"see html manual and references; Double_tfSigmaCalccalculated value of sigma parameter; Double_tfSigmaErrerror value of sigma parameter; Double_tfSigmaInitinitial value of sigma parameter; Int_tfStatisticTypetype of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; Double_tfTCalccalculated value of t parameter; Double_tfTErrerror value of t parameter; Double_tfTInitinitial value of t parameter (relative amplitude of tail), for details see html manual and references; TStringTNamed::fTitleobject title; Int_tfXmaxlast fitted channel; Int_tfXminfirst fitted channel. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrumFit. Function documentation; TSpectrumFit(); default constructor. TSpectrumFit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks is .  ;  ;  ;  ;  ;  ;  ;  . where a represents vector of; fitted parameters (positions p(j), amplitudes A(j), sigma, relative amplitudes; T, S and slope B).;  . ~TSpectrumFit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Deramp(Double_t i, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of peak shape function (see manual); according to amplitude of peak.; Function parameters:; -i-channel; -i0-position of peak; -sigma-sigma of peak; -t, s-relative amplitudes; -b-slope. Double_t Deri0(Double_t i, ",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:14441,Modifiability,variab,variables,14441,"ue of sigma parameter; Int_tfStatisticTypetype of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; Double_tfTCalccalculated value of t parameter; Double_tfTErrerror value of t parameter; Double_tfTInitinitial value of t parameter (relative amplitude of tail), for details see html manual and references; TStringTNamed::fTitleobject title; Int_tfXmaxlast fitted channel; Int_tfXminfirst fitted channel. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrumFit. Function documentation; TSpectrumFit(); default constructor. TSpectrumFit(Int_t numberPeaks); numberPeaks: number of fitted peaks (must be greater than zero); the constructor allocates arrays for all fitted parameters (peak positions, amplitudes etc) and sets the member; variables to their default values. One can change these variables by member functions (setters) of TSpectrumFit class. . Shape function of the fitted; peaks is .  ;  ;  ;  ;  ;  ;  ;  . where a represents vector of; fitted parameters (positions p(j), amplitudes A(j), sigma, relative amplitudes; T, S and slope B).;  . ~TSpectrumFit(); destructor. Double_t Erfc(Double_t x). AUXILIARY FUNCTION. This function calculates error function of x. Double_t Derfc(Double_t x). AUXILIARY FUNCTION. This function calculates derivative of error function of x. Double_t Deramp(Double_t i, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of peak shape function (see manual); according to amplitude of peak.; Function parameters:; -i-channel; -i0-position of peak; -sigma-sigma of peak; -t, s-relative amplitudes; -b-slope. Double_t Deri0(Double_t i, Double_t amp, Double_t i0, Double_t sigma, Double_t t, Double_t s, Double_t b). AUXILIARY FUNCTION. This function calculates derivative of peak shape function (see m",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:21838,Modifiability,variab,variables,21838,"rsion (AWMI) allows fitting tens, hundreds; of peaks simultaneously that represent sometimes thousands of parameters [2],; [5]. ; Function:; void TSpectrumFit::FitAwmi(double *fSource). This function fits the source; spectrum using AWMI algorithm. The calling program should fill in input fitting; parameters of the TSpectrumFit class using a set of TSpectrumFit setters. The; fitted parameters are written into the class and the fitted data are written; into source spectrum. ;  ; Parameter:; ������� fSource-pointer to; the vector of source spectrum����������������� ; ������� ; Member variables of the; TSpectrumFit class:; ��; Int_t���� fNPeaks;������������������� //number of peaks present in fit, input; parameter, it should be > 0; ��; Int_t���� fNumberIterations;��������� //number of iterations in fitting; procedure, input parameter, it should be > 0; ��; Int_t���� fXmin;��������������������� //first fitted channel; ��; Int_t���� fXmax;��������������������� //last fitted channel; ��; Int_t���� fStatisticType;������������ //type of statistics, possible values; kFitOptimChiCounts (chi square statistics with counts as weighting; coefficients), kFitOptimChiFuncValues (chi square statistics with function; values as weighting coefficients),kFitOptimMaxLikelihood; ��; Int_t���� fAlphaOptim;��������������� //optimization of convergence algorithm, possible; values kFitAlphaHalving, kFitAlphaOptimal; ��; Int_t���� fPower;�������������������� //possible values kFitPower2,4,6,8,10,12,; for details see references. It applies only for Awmi fitting function.; ��; Int_t���� fFitTaylor;���������������� //order of Taylor expansion, possible; values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi; fitting function.; ��; Double_t� fAlpha;�������������������� //convergence coefficient, input; parameter, it should be positive number and <=1, for details see references; ��; Double_t� fChi;���������������������� //here the fitting functions return; resulting chi square�",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:22570,Performance,optimiz,optimization,22570,"rsion (AWMI) allows fitting tens, hundreds; of peaks simultaneously that represent sometimes thousands of parameters [2],; [5]. ; Function:; void TSpectrumFit::FitAwmi(double *fSource). This function fits the source; spectrum using AWMI algorithm. The calling program should fill in input fitting; parameters of the TSpectrumFit class using a set of TSpectrumFit setters. The; fitted parameters are written into the class and the fitted data are written; into source spectrum. ;  ; Parameter:; ������� fSource-pointer to; the vector of source spectrum����������������� ; ������� ; Member variables of the; TSpectrumFit class:; ��; Int_t���� fNPeaks;������������������� //number of peaks present in fit, input; parameter, it should be > 0; ��; Int_t���� fNumberIterations;��������� //number of iterations in fitting; procedure, input parameter, it should be > 0; ��; Int_t���� fXmin;��������������������� //first fitted channel; ��; Int_t���� fXmax;��������������������� //last fitted channel; ��; Int_t���� fStatisticType;������������ //type of statistics, possible values; kFitOptimChiCounts (chi square statistics with counts as weighting; coefficients), kFitOptimChiFuncValues (chi square statistics with function; values as weighting coefficients),kFitOptimMaxLikelihood; ��; Int_t���� fAlphaOptim;��������������� //optimization of convergence algorithm, possible; values kFitAlphaHalving, kFitAlphaOptimal; ��; Int_t���� fPower;�������������������� //possible values kFitPower2,4,6,8,10,12,; for details see references. It applies only for Awmi fitting function.; ��; Int_t���� fFitTaylor;���������������� //order of Taylor expansion, possible; values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi; fitting function.; ��; Double_t� fAlpha;�������������������� //convergence coefficient, input; parameter, it should be positive number and <=1, for details see references; ��; Double_t� fChi;���������������������� //here the fitting functions return; resulting chi square�",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:36289,Performance,optimiz,optimization,36289,"������ bin = 1 + Int_t(a +; 0.5);�� ������������ ; ������� PosX[i] =; d->GetBinCenter(bin);; ������� PosY[i] =; d->GetBinContent(bin);; �� }; �� TPolyMarker * pm =; (TPolyMarker*)h->GetListOfFunctions()->FindObject(""TPolyMarker"");; �� if (pm) {; �����; h->GetListOfFunctions()->Remove(pm);; ����� delete pm;; �� }; �� pm = new; TPolyMarker(nfound, PosX, PosY);; ��; h->GetListOfFunctions()->Add(pm);; �� pm->SetMarkerStyle(23);; ��; pm->SetMarkerColor(kRed);; �� pm->SetMarkerSize(1);��. }. void SetFitParameters(Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor). SETTER FUNCTION. This function sets the following fitting parameters:; -xmin, xmax - fitting region; -numberIterations - # of desired iterations in the fit; -alpha - convergence coefficient, it should be positive number and <=1, for details see references; -statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; -alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; -power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParameters(Double_t sigma, Bool_t fixSigma, const Double_t* positionInit, const Bool_t* fixPosition, const Double_t* ampInit, const Bool_t* fixAmp). SETTER FUNCTION. This function sets the following fitting parameters of peaks:; -sigma - initial value of sigma parameter; -fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); -positionInit - aray of initial values of peaks positions; -fixPosition - array of logical value",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:3524,Security,Hash,Hash,3524,"e); Double_t*GetAmplitudes() const; Double_t*GetAmplitudesErrors() const; Double_t*GetAreas() const; Double_t*GetAreasErrors() const; voidGetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err); Double_tGetChi() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Double_t*GetPositions() const; Double_t*GetPositionsErrors() const; voidGetSigma(Double_t& sigma, Double_t& sigmaErr); voidGetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Double_t& s, Double_t& sErr); virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:6409,Testability,Test,TestBit,6409,"::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFitParameters(Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetPeakParameters(Double_t sigma, Bool_t fixSigma, const Double_t* positionInit, const Bool_t* fixPosition, const Double_t* ampInit, const Bool_t* fixAmp); voidSetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpectrumFit(); TSpectrumFit(Int_t numberPeaks); TSpectrumFit(const TSpectrumFit&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:6448,Testability,Test,TestBits,6448,"::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetFitParameters(Int_t xmin, Int_t xmax, Int_t numberIterations, Double_t alpha, Int_t statisticType, Int_t alphaOptim, Int_t power, Int_t fitTaylor); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetPeakParameters(Double_t sigma, Bool_t fixSigma, const Double_t* positionInit, const Bool_t* fixPosition, const Double_t* ampInit, const Bool_t* fixAmp); voidSetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpectrumFit(); TSpectrumFit(Int_t numberPeaks); TSpectrumFit(const TSpectrumFit&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:11883,Testability,log,logical,11883,"ut parameters; Double_t*fAmpErr[fNPeaks] array of amplitude errors; Double_t*fAmpInit[fNPeaks] array of initial values of peaks amplitudes, input parameters; Double_t*fArea[fNPeaks] array of calculated areas of peaks; Double_t*fAreaErr[fNPeaks] array of errors of peak areas; Double_tfBCalccalculated value of b parameter; Double_tfBErrerror value of b parameter; Double_tfBInitinitial value of b parameter (slope), for details see html manual and references; Double_tfChihere the fitting functions return resulting chi square; Int_tfFitTaylororder of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.; Bool_tfFixA0logical value of a0 parameter, which allows to fix the parameter (not to fit).; Bool_tfFixA1logical value of a1 parameter, which allows to fix the parameter (not to fit).; Bool_tfFixA2logical value of a2 parameter, which allows to fix the parameter (not to fit).; Bool_t*fFixAmp[fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional; Bool_tfFixBlogical value of b parameter, which allows to fix the parameter (not to fit).; Bool_t*fFixPosition[fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional; Bool_tfFixSlogical value of s parameter, which allows to fix the parameter (not to fit).; Bool_tfFixSigmalogical value of sigma parameter, which allows to fix the parameter (not to fit).; Bool_tfFixTlogical value of t parameter, which allows to fix the parameter (not to fit).; Int_tfNPeaksnumber of peaks present in fit, input parameter, it should be > 0; TStringTNamed::fNameobject identifier; Int_tfNumberIterationsnumber of iterations in fitting procedure, input parameter, it should be > 0; Double_t*fPositionCalc[fNPeaks] array of calculated values of fitted positions, output parameters; Double_t*fPositionErr[fNPeaks] array of position e",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:12133,Testability,log,logical,12133,"ray of errors of peak areas; Double_tfBCalccalculated value of b parameter; Double_tfBErrerror value of b parameter; Double_tfBInitinitial value of b parameter (slope), for details see html manual and references; Double_tfChihere the fitting functions return resulting chi square; Int_tfFitTaylororder of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function.; Bool_tfFixA0logical value of a0 parameter, which allows to fix the parameter (not to fit).; Bool_tfFixA1logical value of a1 parameter, which allows to fix the parameter (not to fit).; Bool_tfFixA2logical value of a2 parameter, which allows to fix the parameter (not to fit).; Bool_t*fFixAmp[fNPeaks] array of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional; Bool_tfFixBlogical value of b parameter, which allows to fix the parameter (not to fit).; Bool_t*fFixPosition[fNPeaks] array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional; Bool_tfFixSlogical value of s parameter, which allows to fix the parameter (not to fit).; Bool_tfFixSigmalogical value of sigma parameter, which allows to fix the parameter (not to fit).; Bool_tfFixTlogical value of t parameter, which allows to fix the parameter (not to fit).; Int_tfNPeaksnumber of peaks present in fit, input parameter, it should be > 0; TStringTNamed::fNameobject identifier; Int_tfNumberIterationsnumber of iterations in fitting procedure, input parameter, it should be > 0; Double_t*fPositionCalc[fNPeaks] array of calculated values of fitted positions, output parameters; Double_t*fPositionErr[fNPeaks] array of position errors; Double_t*fPositionInit[fNPeaks] array of initial values of peaks positions, input parameters; Int_tfPowerpossible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; Double_tfSCalccalculate",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:26148,Testability,log,logical,26148,"igma parameter; ��; Double_t� fSigmaErr;����������������� //error value of sigma parameter; ��; Double_t� fTInit;�������������������� //initial value of t parameter (relative; amplitude of tail), for details see html manual and references; ��; Double_t� fTCalc;�������������������� //calculated value of t parameter; ��; Double_t� fTErr;��������������������� //error value of t parameter; ��; Double_t� fBInit;�������������������� //initial value of b parameter (slope),; for details see html manual and references; ��; Double_t� fBCalc;�������������������� //calculated value of b parameter; ��; Double_t� fBErr;��������������������� //error value of b parameter; ��; Double_t� fSInit;�������������������� //initial value of s parameter (relative; amplitude of step), for details see html manual and references; ��; Double_t� fSCalc;�������������������� //calculated value of s parameter; ��; Double_t� fSErr;��������������������� //error value of s parameter; ��; Double_t� fA0Init;������������������� //initial value of background a0; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA0Calc;������������������� //calculated value of background a0; parameter; ��; Double_t� fA0Err;�������������������� //error value of background a0 parameter; ��; Double_t� fA1Init;������������������� //initial value of background a1; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA1Calc;������������������� //calculated value of background a1; parameter; ��; Double_t� fA1Err;�������������������� //error value of background a1 parameter; ��; Double_t� fA2Init;������������������� //initial value of background a2; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA2Calc;������������������� //calculated value of background a2; parameter; ��; Double_t� fA2Err; ��������������������//error value of background a2 parameter; ��; Bool_t�� *fFixPosition;�������������� //[fNPeaks] array of logical values which; allow to fix appropriate positions (not fit).",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:26337,Testability,log,logical,26337,"ouble_t� fA0Calc;������������������� //calculated value of background a0; parameter; ��; Double_t� fA0Err;�������������������� //error value of background a0 parameter; ��; Double_t� fA1Init;������������������� //initial value of background a1; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA1Calc;������������������� //calculated value of background a1; parameter; ��; Double_t� fA1Err;�������������������� //error value of background a1 parameter; ��; Double_t� fA2Init;������������������� //initial value of background a2; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA2Calc;������������������� //calculated value of background a2; parameter; ��; Double_t� fA2Err; ��������������������//error value of background a2 parameter; ��; Bool_t�� *fFixPosition;�������������� //[fNPeaks] array of logical values which; allow to fix appropriate positions (not fit). However they are present in the; estimated functional�� ; ��; Bool_t ��*fFixAmp;������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes (not fit). However they are present in the; estimated functional����� ; ��; Bool_t��� fFixSigma;����������������� //logical value of sigma parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixT;��������������������� //logical value of t parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixB;��������������������� //logical value of b parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixS;��������������������� //logical value of s parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixA0;�������������������� //logical value of a0 parameter, which; allows to fix the parameter (not to fit).; ��; Bool_t��� fFixA1;�������������������� //logical value of a1 parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixA2;�������������������� //logical value of a2 paramete",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:26511,Testability,log,logical,26511,"t;������������������� //initial value of background a1; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA1Calc;������������������� //calculated value of background a1; parameter; ��; Double_t� fA1Err;�������������������� //error value of background a1 parameter; ��; Double_t� fA2Init;������������������� //initial value of background a2; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA2Calc;������������������� //calculated value of background a2; parameter; ��; Double_t� fA2Err; ��������������������//error value of background a2 parameter; ��; Bool_t�� *fFixPosition;�������������� //[fNPeaks] array of logical values which; allow to fix appropriate positions (not fit). However they are present in the; estimated functional�� ; ��; Bool_t ��*fFixAmp;������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes (not fit). However they are present in the; estimated functional����� ; ��; Bool_t��� fFixSigma;����������������� //logical value of sigma parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixT;��������������������� //logical value of t parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixB;��������������������� //logical value of b parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixS;��������������������� //logical value of s parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixA0;�������������������� //logical value of a0 parameter, which; allows to fix the parameter (not to fit).; ��; Bool_t��� fFixA1;�������������������� //logical value of a1 parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixA2;�������������������� //logical value of a2 parameter, which; allows to fix the parameter (not to fit).;  ; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976) 525.; [2] I. A. Slavic: Nonlinear; least-squares fitting without matrix i",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:26642,Testability,log,logical,26642,"ulated value of background a1; parameter; ��; Double_t� fA1Err;�������������������� //error value of background a1 parameter; ��; Double_t� fA2Init;������������������� //initial value of background a2; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA2Calc;������������������� //calculated value of background a2; parameter; ��; Double_t� fA2Err; ��������������������//error value of background a2 parameter; ��; Bool_t�� *fFixPosition;�������������� //[fNPeaks] array of logical values which; allow to fix appropriate positions (not fit). However they are present in the; estimated functional�� ; ��; Bool_t ��*fFixAmp;������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes (not fit). However they are present in the; estimated functional����� ; ��; Bool_t��� fFixSigma;����������������� //logical value of sigma parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixT;��������������������� //logical value of t parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixB;��������������������� //logical value of b parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixS;��������������������� //logical value of s parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixA0;�������������������� //logical value of a0 parameter, which; allows to fix the parameter (not to fit).; ��; Bool_t��� fFixA1;�������������������� //logical value of a1 parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixA2;�������������������� //logical value of a2 parameter, which; allows to fix the parameter (not to fit).;  ; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976) 525.; [2] I. A. Slavic: Nonlinear; least-squares fitting without matrix inversion applied to complex Gaussian; spectra analysis. NIM 134 (1976) 285-289.; [3] T. Awaya: A new method for; curve fitting to the data with low statistics",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:26772,Testability,log,logical,26772," Double_t� fA2Init;������������������� //initial value of background a2; parameter(backgroud is estimated as a0+a1*x+a2*x*x); ��; Double_t� fA2Calc;������������������� //calculated value of background a2; parameter; ��; Double_t� fA2Err; ��������������������//error value of background a2 parameter; ��; Bool_t�� *fFixPosition;�������������� //[fNPeaks] array of logical values which; allow to fix appropriate positions (not fit). However they are present in the; estimated functional�� ; ��; Bool_t ��*fFixAmp;������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes (not fit). However they are present in the; estimated functional����� ; ��; Bool_t��� fFixSigma;����������������� //logical value of sigma parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixT;��������������������� //logical value of t parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixB;��������������������� //logical value of b parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixS;��������������������� //logical value of s parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixA0;�������������������� //logical value of a0 parameter, which; allows to fix the parameter (not to fit).; ��; Bool_t��� fFixA1;�������������������� //logical value of a1 parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixA2;�������������������� //logical value of a2 parameter, which; allows to fix the parameter (not to fit).;  ; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976) 525.; [2] I. A. Slavic: Nonlinear; least-squares fitting without matrix inversion applied to complex Gaussian; spectra analysis. NIM 134 (1976) 285-289.; [3] T. Awaya: A new method for; curve fitting to the data with low statistics not using chi-square method. NIM; 165 (1979) 317-323.; [4] T. Hauschild, M. Jentschel:; Comparison of maximum likelihood estima",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:26899,Testability,log,logical,26899,"; Double_t� fA2Calc;������������������� //calculated value of background a2; parameter; ��; Double_t� fA2Err; ��������������������//error value of background a2 parameter; ��; Bool_t�� *fFixPosition;�������������� //[fNPeaks] array of logical values which; allow to fix appropriate positions (not fit). However they are present in the; estimated functional�� ; ��; Bool_t ��*fFixAmp;������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes (not fit). However they are present in the; estimated functional����� ; ��; Bool_t��� fFixSigma;����������������� //logical value of sigma parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixT;��������������������� //logical value of t parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixB;��������������������� //logical value of b parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixS;��������������������� //logical value of s parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixA0;�������������������� //logical value of a0 parameter, which; allows to fix the parameter (not to fit).; ��; Bool_t��� fFixA1;�������������������� //logical value of a1 parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixA2;�������������������� //logical value of a2 parameter, which; allows to fix the parameter (not to fit).;  ; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976) 525.; [2] I. A. Slavic: Nonlinear; least-squares fitting without matrix inversion applied to complex Gaussian; spectra analysis. NIM 134 (1976) 285-289.; [3] T. Awaya: A new method for; curve fitting to the data with low statistics not using chi-square method. NIM; 165 (1979) 317-323.; [4] T. Hauschild, M. Jentschel:; Comparison of maximum likelihood estimation and chi-square statistics applied; to counting experiments. NIM A 457 (2001) 384-401.; �[5]� M. Morh�č,� J.; Kliman,� M. Jan",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:27029,Testability,log,logical,27029,"�//error value of background a2 parameter; ��; Bool_t�� *fFixPosition;�������������� //[fNPeaks] array of logical values which; allow to fix appropriate positions (not fit). However they are present in the; estimated functional�� ; ��; Bool_t ��*fFixAmp;������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes (not fit). However they are present in the; estimated functional����� ; ��; Bool_t��� fFixSigma;����������������� //logical value of sigma parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixT;��������������������� //logical value of t parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixB;��������������������� //logical value of b parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixS;��������������������� //logical value of s parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixA0;�������������������� //logical value of a0 parameter, which; allows to fix the parameter (not to fit).; ��; Bool_t��� fFixA1;�������������������� //logical value of a1 parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixA2;�������������������� //logical value of a2 parameter, which; allows to fix the parameter (not to fit).;  ; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976) 525.; [2] I. A. Slavic: Nonlinear; least-squares fitting without matrix inversion applied to complex Gaussian; spectra analysis. NIM 134 (1976) 285-289.; [3] T. Awaya: A new method for; curve fitting to the data with low statistics not using chi-square method. NIM; 165 (1979) 317-323.; [4] T. Hauschild, M. Jentschel:; Comparison of maximum likelihood estimation and chi-square statistics applied; to counting experiments. NIM A 457 (2001) 384-401.; �[5]� M. Morh�č,� J.; Kliman,� M. Jandel,� Ľ. Krupa, V. Matou�ek: Study of fitting algorithms; applied to simultaneous analysis of large number of peaks in -ray spect",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:27154,Testability,log,logical,27154,"allow to fix appropriate positions (not fit). However they are present in the; estimated functional�� ; ��; Bool_t ��*fFixAmp;������������������� //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes (not fit). However they are present in the; estimated functional����� ; ��; Bool_t��� fFixSigma;����������������� //logical value of sigma parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixT;��������������������� //logical value of t parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixB;��������������������� //logical value of b parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixS;��������������������� //logical value of s parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixA0;�������������������� //logical value of a0 parameter, which; allows to fix the parameter (not to fit).; ��; Bool_t��� fFixA1;�������������������� //logical value of a1 parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixA2;�������������������� //logical value of a2 parameter, which; allows to fix the parameter (not to fit).;  ; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976) 525.; [2] I. A. Slavic: Nonlinear; least-squares fitting without matrix inversion applied to complex Gaussian; spectra analysis. NIM 134 (1976) 285-289.; [3] T. Awaya: A new method for; curve fitting to the data with low statistics not using chi-square method. NIM; 165 (1979) 317-323.; [4] T. Hauschild, M. Jentschel:; Comparison of maximum likelihood estimation and chi-square statistics applied; to counting experiments. NIM A 457 (2001) 384-401.; �[5]� M. Morh�č,� J.; Kliman,� M. Jandel,� Ľ. Krupa, V. Matou�ek: Study of fitting algorithms; applied to simultaneous analysis of large number of peaks in -ray spectra. Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003; �; Example� � script FitAwmi.c:. Fig. 1 Original spectrum; (black l",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:27282,Testability,log,logical,27282,"������������������ //[fNPeaks] array of logical values which; allow to fix appropriate amplitudes (not fit). However they are present in the; estimated functional����� ; ��; Bool_t��� fFixSigma;����������������� //logical value of sigma parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixT;��������������������� //logical value of t parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixB;��������������������� //logical value of b parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixS;��������������������� //logical value of s parameter, which; allows to fix the parameter (not to fit).����� ; ��; Bool_t��� fFixA0;�������������������� //logical value of a0 parameter, which; allows to fix the parameter (not to fit).; ��; Bool_t��� fFixA1;�������������������� //logical value of a1 parameter, which; allows to fix the parameter (not to fit).�� ; ��; Bool_t��� fFixA2;�������������������� //logical value of a2 parameter, which; allows to fix the parameter (not to fit).;  ; References:; [1] Phillps G.W., Marlow K.W.,; NIM 137 (1976) 525.; [2] I. A. Slavic: Nonlinear; least-squares fitting without matrix inversion applied to complex Gaussian; spectra analysis. NIM 134 (1976) 285-289.; [3] T. Awaya: A new method for; curve fitting to the data with low statistics not using chi-square method. NIM; 165 (1979) 317-323.; [4] T. Hauschild, M. Jentschel:; Comparison of maximum likelihood estimation and chi-square statistics applied; to counting experiments. NIM A 457 (2001) 384-401.; �[5]� M. Morh�č,� J.; Kliman,� M. Jandel,� Ľ. Krupa, V. Matou�ek: Study of fitting algorithms; applied to simultaneous analysis of large number of peaks in -ray spectra. Applied Spectroscopy, Vol. 57, No. 7, pp. 753-760, 2003; �; Example� � script FitAwmi.c:. Fig. 1 Original spectrum; (black line) and fitted spectrum using AWMI algorithm (red line) and number of; iteration steps = 1000. Positions of fitted peaks are ",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:36941,Testability,log,logical,36941," details see references; -statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; -alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; -power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParameters(Double_t sigma, Bool_t fixSigma, const Double_t* positionInit, const Bool_t* fixPosition, const Double_t* ampInit, const Bool_t* fixAmp). SETTER FUNCTION. This function sets the following fitting parameters of peaks:; -sigma - initial value of sigma parameter; -fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); -positionInit - aray of initial values of peaks positions; -fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+a1*x+a2*x*x); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -a1Init - initial value of a1 parameter; -fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); -a2Init - initial value of a2 parameter; -fixA2 - logical value o",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:37106,Testability,log,logical,37106," details see references; -statisticType - type of statistics, possible values kFitOptimChiCounts (chi square statistics with counts as weighting coefficients), kFitOptimChiFuncValues (chi square statistics with function values as weighting coefficients),kFitOptimMaxLikelihood; -alphaOptim - optimization of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; -power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParameters(Double_t sigma, Bool_t fixSigma, const Double_t* positionInit, const Bool_t* fixPosition, const Double_t* ampInit, const Bool_t* fixAmp). SETTER FUNCTION. This function sets the following fitting parameters of peaks:; -sigma - initial value of sigma parameter; -fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); -positionInit - aray of initial values of peaks positions; -fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+a1*x+a2*x*x); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -a1Init - initial value of a1 parameter; -fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); -a2Init - initial value of a2 parameter; -fixA2 - logical value o",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:37301,Testability,log,logical,37301,"tion of convergence algorithm, possible values kFitAlphaHalving, kFitAlphaOptimal; -power - possible values kFitPower2,4,6,8,10,12, for details see references. It applies only for Awmi fitting function.; -fitTaylor - order of Taylor expansion, possible values kFitTaylorOrderFirst, kFitTaylorOrderSecond. It applies only for Awmi fitting function. void SetPeakParameters(Double_t sigma, Bool_t fixSigma, const Double_t* positionInit, const Bool_t* fixPosition, const Double_t* ampInit, const Bool_t* fixAmp). SETTER FUNCTION. This function sets the following fitting parameters of peaks:; -sigma - initial value of sigma parameter; -fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); -positionInit - aray of initial values of peaks positions; -fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+a1*x+a2*x*x); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -a1Init - initial value of a1 parameter; -fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); -a2Init - initial value of a2 parameter; -fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInit - initial value of t parameter",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:37724,Testability,log,logical,37724,"R FUNCTION. This function sets the following fitting parameters of peaks:; -sigma - initial value of sigma parameter; -fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); -positionInit - aray of initial values of peaks positions; -fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+a1*x+a2*x*x); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -a1Init - initial value of a1 parameter; -fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); -a2Init - initial value of a2 parameter; -fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInit - initial value of t parameter; -fixT - logical value of t parameter, which allows to fix the parameter (not to fit); -bInit - initial value of b parameter; -fixB - logical value of b parameter, which allows to fix the parameter (not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -s",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:37853,Testability,log,logical,37853,"R FUNCTION. This function sets the following fitting parameters of peaks:; -sigma - initial value of sigma parameter; -fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); -positionInit - aray of initial values of peaks positions; -fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+a1*x+a2*x*x); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -a1Init - initial value of a1 parameter; -fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); -a2Init - initial value of a2 parameter; -fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInit - initial value of t parameter; -fixT - logical value of t parameter, which allows to fix the parameter (not to fit); -bInit - initial value of b parameter; -fixB - logical value of b parameter, which allows to fix the parameter (not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -s",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:37982,Testability,log,logical,37982,"R FUNCTION. This function sets the following fitting parameters of peaks:; -sigma - initial value of sigma parameter; -fixSigma - logical value of sigma parameter, which allows to fix the parameter (not to fit); -positionInit - aray of initial values of peaks positions; -fixPosition - array of logical values which allow to fix appropriate positions (not fit). However they are present in the estimated functional.; -ampInit - aray of initial values of peaks amplitudes; -fixAmp - aray of logical values which allow to fix appropriate amplitudes (not fit). However they are present in the estimated functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+a1*x+a2*x*x); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -a1Init - initial value of a1 parameter; -fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); -a2Init - initial value of a2 parameter; -fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInit - initial value of t parameter; -fixT - logical value of t parameter, which allows to fix the parameter (not to fit); -bInit - initial value of b parameter; -fixB - logical value of b parameter, which allows to fix the parameter (not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -s",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:38307,Testability,log,logical,38307,"functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+a1*x+a2*x*x); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -a1Init - initial value of a1 parameter; -fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); -a2Init - initial value of a2 parameter; -fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInit - initial value of t parameter; -fixT - logical value of t parameter, which allows to fix the parameter (not to fit); -bInit - initial value of b parameter; -fixB - logical value of b parameter, which allows to fix the parameter (not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -sigmaErr - gets error value of sigma parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -a1 - gets the fitted value of a1 parameter; -a1Err - gets error value of a1 parameter; -a2 - gets the fitted value of a2 parameter; -a2Err - gets error value of a2 parameter. void GetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Doubl",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:38432,Testability,log,logical,38432,"functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+a1*x+a2*x*x); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -a1Init - initial value of a1 parameter; -fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); -a2Init - initial value of a2 parameter; -fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInit - initial value of t parameter; -fixT - logical value of t parameter, which allows to fix the parameter (not to fit); -bInit - initial value of b parameter; -fixB - logical value of b parameter, which allows to fix the parameter (not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -sigmaErr - gets error value of sigma parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -a1 - gets the fitted value of a1 parameter; -a1Err - gets error value of a1 parameter; -a2 - gets the fitted value of a2 parameter; -a2Err - gets error value of a2 parameter. void GetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Doubl",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:38557,Testability,log,logical,38557,"functional. void SetBackgroundParameters(Double_t a0Init, Bool_t fixA0, Double_t a1Init, Bool_t fixA1, Double_t a2Init, Bool_t fixA2). SETTER FUNCTION. This function sets the following fitting parameters of background:; -a0Init - initial value of a0 parameter (backgroud is estimated as a0+a1*x+a2*x*x); -fixA0 - logical value of a0 parameter, which allows to fix the parameter (not to fit); -a1Init - initial value of a1 parameter; -fixA1 - logical value of a1 parameter, which allows to fix the parameter (not to fit); -a2Init - initial value of a2 parameter; -fixA2 - logical value of a2 parameter, which allows to fix the parameter (not to fit). void SetTailParameters(Double_t tInit, Bool_t fixT, Double_t bInit, Bool_t fixB, Double_t sInit, Bool_t fixS). SETTER FUNCTION. This function sets the following fitting parameters of tails of peaks; -tInit - initial value of t parameter; -fixT - logical value of t parameter, which allows to fix the parameter (not to fit); -bInit - initial value of b parameter; -fixB - logical value of b parameter, which allows to fix the parameter (not to fit); -sInit - initial value of s parameter; -fixS - logical value of s parameter, which allows to fix the parameter (not to fit). void GetSigma(Double_t& sigma, Double_t& sigmaErr). GETTER FUNCTION. This function gets the sigma parameter and its error; -sigma - gets the fitted value of sigma parameter; -sigmaErr - gets error value of sigma parameter. void GetBackgroundParameters(Double_t& a0, Double_t& a0Err, Double_t& a1, Double_t& a1Err, Double_t& a2, Double_t& a2Err). GETTER FUNCTION. This function gets the background parameters and their errors; -a0 - gets the fitted value of a0 parameter; -a0Err - gets error value of a0 parameter; -a1 - gets the fitted value of a1 parameter; -a1Err - gets error value of a1 parameter; -a2 - gets the fitted value of a2 parameter; -a2Err - gets error value of a2 parameter. void GetTailParameters(Double_t& t, Double_t& tErr, Double_t& b, Double_t& bErr, Doubl",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumFit.html:1384,Usability,Clear,Clear,1384," virtual~TSpectrumFit(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::",MatchSource.WIKI,root/html604/TSpectrumFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumFit.html
https://root.cern/root/html604/TSpectrumTransform.html:2258,Availability,Error,Error,2258," virtual~TSpectrumTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Op",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:2387,Availability,error,error,2387,"l~TSpectrumTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnhance(const Double_t* source, Double_t* destVector); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidFilterZonal(const Double_t* source, Double_t* destVector); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(co",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:2471,Availability,error,error,2471,"al voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnhance(const Double_t* source, Double_t* destVector); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidFilterZonal(const Double_t* source, Double_t* destVector); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(con",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:924,Energy Efficiency,adapt,adaptive,924,". TSpectrumTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrumTransform. class TSpectrumTransform: public TNamed. THIS CLASS CONTAINS ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrumTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Op",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:1123,Energy Efficiency,adapt,adaptive,1123,".pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrumTransform. class TSpectrumTransform: public TNamed. THIS CLASS CONTAINS ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrumTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virt",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:1279,Energy Efficiency,adapt,adaptive,1279," » SPECTRUM; » TSpectrumTransform. class TSpectrumTransform: public TNamed. THIS CLASS CONTAINS ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrumTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnhance(const Double_t* source, Double_t* destVector); virtual voidTObject::Error(co",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:9714,Energy Efficiency,power,power,9714,"rotected:. Int_tfDegreedegree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms; Int_tfDirectionforward or inverse transform; Double_tfEnhanceCoeffmultiplication coefficient applied in enhanced region;; Double_tfFilterCoeffvalue set in the filtered region; TStringTNamed::fNameobject identifier; Int_tfSizelength of transformed data; TStringTNamed::fTitleobject title; Int_tfTransformTypetype of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); Int_tfXmaxlast channel of filtered or enhanced region; Int_tfXminfirst channel of filtered or enhanced region. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrumTransform. Function documentation; TSpectrumTransform(); default constructor. TSpectrumTransform(Int_t size); the constructor creates TSpectrumTransform object. Its size must be > than zero and must be power of 2.; It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ~TSpectrumTransform(); destructor. void Haar(Double_t* working_space, Int_t num, Int_t direction). AUXILIARY FUNCION. This function calculates Haar transform of a part of data; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data; -direction-forward or inverse transform. void Walsh(Double_t* working_space, Int_t num). AUXILIARY FUNCION. This function calculates Walsh transform of a part of data; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data. void BitReverse(Double_t* working_space, Int_t num). AUXILIARY FUNCION. This function carries out bir-reverse reordering of data; Function parameters:; -working_space-pointer to vector of processed data; -num-length of processed data. void Fourier(Double_t* working_space, Int_t num, Int_t hartley,",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:14472,Energy Efficiency,power,power,14472,"m(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum according to the given input parameters. Transformed data are; written into dest spectrum. Before the Transform function is called the class; must be created by constructor and the type of the transform as well as some; other parameters must be set using a set of setter functions.;  ; Member variables of; TSpectrumTransform class:; �fSource-pointer; to the vector of source spectrum. Its length should be equal to the �fSize�; parameter except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR transforms. These; need �2*fSize� length to supply real and imaginary coefficients. ������������������; fDest-pointer; to the vector of destination spectrum. Its length should be equal to the; �fSize� parameter except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR transforms.; These need �2*fSize� length to store real and imaginary coefficients. ; ������� fSize-basic length; of the source and dest spectrum. It should be power; of 2.; fType-type of transform; ����������� Classic transforms:; ����������������������� kTransformHaar. ����������������������� kTransformWalsh. ����������������������� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartey. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral en",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:15581,Energy Efficiency,adapt,adaptive,15581,"�� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartey. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example �� script Transform.c:. Fig. 1 Original gamma-ray spectrum.  ; Fig. 2 Transformed spectrum from Fig. 1 using Cosine; transform;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Transform.C; �� ; #include <TSpectrum>; #include; <TSpectrumTransform>;  ; void Transform() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new TH1F(""h"",""Transformed; spectrum using Cosine transform"",",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:15783,Energy Efficiency,adapt,adaptive,15783,"ixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example �� script Transform.c:. Fig. 1 Original gamma-ray spectrum.  ; Fig. 2 Transformed spectrum from Fig. 1 using Cosine; transform;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Transform.C; �� ; #include <TSpectrum>; #include; <TSpectrumTransform>;  ; void Transform() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new TH1F(""h"",""Transformed; spectrum using Cosine transform"",nbins,xmin,xmax);; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:15940,Energy Efficiency,adapt,adaptive,15940,"���������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example �� script Transform.c:. Fig. 1 Original gamma-ray spectrum.  ; Fig. 2 Transformed spectrum from Fig. 1 using Cosine; transform;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Transform.C; �� ; #include <TSpectrum>; #include; <TSpectrumTransform>;  ; void Transform() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new TH1F(""h"",""Transformed; spectrum using Cosine transform"",nbins,xmin,xmax);; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);�������� ; �� TCanvas *Transform1 =; gROOT->GetListOfCanvases()->FindObject(""Transform1"");; �� if (!T",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:124,Modifiability,inherit,inheritance,124,". TSpectrumTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrumTransform. class TSpectrumTransform: public TNamed. THIS CLASS CONTAINS ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrumTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Op",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:815,Modifiability,enhance,enhancement,815,". TSpectrumTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrumTransform. class TSpectrumTransform: public TNamed. THIS CLASS CONTAINS ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrumTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Op",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:924,Modifiability,adapt,adaptive,924,". TSpectrumTransform. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrumTransform. class TSpectrumTransform: public TNamed. THIS CLASS CONTAINS ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrumTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Op",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:1123,Modifiability,adapt,adaptive,1123,".pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » SPECTRUM; » TSpectrumTransform. class TSpectrumTransform: public TNamed. THIS CLASS CONTAINS ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrumTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virt",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:1279,Modifiability,adapt,adaptive,1279," » SPECTRUM; » TSpectrumTransform. class TSpectrumTransform: public TNamed. THIS CLASS CONTAINS ORTHOGONAL TRANSFORM FUNCTIONS. These functions were written by:; Miroslav Morhac; Institute of Physics; Slovak Academy of Sciences; Dubravska cesta 9, 842 28 BRATISLAVA; SLOVAKIA. email:fyzimiro@savba.sk, fax:+421 7 54772479. The original code in C has been repackaged as a C++ class by R.Brun. The algorithms in this class have been published in the following; references:. [1] C.V. Hampton, B. Lian, Wm. C. McHarris: Fast-Fourier-transform; spectral enhancement techniques for gamma-ray spectroscopy.NIM A353; (1994) 280-284.; [2] Morhac M., Matousek V., New adaptive Cosine-Walsh transform and; its application to nuclear data compression, IEEE Transactions on; Signal Processing 48 (2000) 2693.; [3] Morhac M., Matousek V., Data compression using new fast adaptive; Cosine-Haar transforms, Digital Signal Processing 8 (1998) 63.; [4] Morhac M., Matousek V.: Multidimensional nuclear data compression; using fast adaptive Walsh-Haar transform. Acta Physica Slovaca 51; (2001) 307. Function Members (Methods); public:. virtual~TSpectrumTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; voidEnhance(const Double_t* source, Double_t* destVector); virtual voidTObject::Error(co",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:3458,Modifiability,Inherit,InheritsFrom,3458,"Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidFilterZonal(const Double_t* source, Double_t* destVector); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:3524,Modifiability,Inherit,InheritsFrom,3524,"Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidFilterZonal(const Double_t* source, Double_t* destVector); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSpectrumTransform&operator=(const TSpectrumTransform",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:5210,Modifiability,enhance,enhanceCoeff,5210,"perator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSpectrumTransform&operator=(const TSpectrumTransform&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDirection(Int_t direction); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEnhanceCoeff(Double_t enhanceCoeff); voidSetFilterCoeff(Double_t filterCoeff); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetRegion(Int_t xmin, Int_t xmax); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTransformType(Int_t transType, Int_t degree); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTransform(const Double_t* source, Double_t* destVector); TSpectrumTransform(); TSpectrumTransform(Int_t size); TSpectrumTransform(const TSpectrumTransform&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:8971,Modifiability,enhance,enhanced,8971,"mFourierHaar; static TSpectrumTransform::(anonymous)kTransformFourierWalsh; static TSpectrumTransform::(anonymous)kTransformHaar; static TSpectrumTransform::(anonymous)kTransformHartley; static TSpectrumTransform::(anonymous)kTransformInverse; static TSpectrumTransform::(anonymous)kTransformSin; static TSpectrumTransform::(anonymous)kTransformSinHaar; static TSpectrumTransform::(anonymous)kTransformSinWalsh; static TSpectrumTransform::(anonymous)kTransformWalsh; static TSpectrumTransform::(anonymous)kTransformWalshHaar; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDegreedegree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms; Int_tfDirectionforward or inverse transform; Double_tfEnhanceCoeffmultiplication coefficient applied in enhanced region;; Double_tfFilterCoeffvalue set in the filtered region; TStringTNamed::fNameobject identifier; Int_tfSizelength of transformed data; TStringTNamed::fTitleobject title; Int_tfTransformTypetype of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); Int_tfXmaxlast channel of filtered or enhanced region; Int_tfXminfirst channel of filtered or enhanced region. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrumTransform. Function documentation; TSpectrumTransform(); default constructor. TSpectrumTransform(Int_t size); the constructor creates TSpectrumTransform object. Its size must be > than zero and must be power of 2.; It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ~TSpectrumTransform(); destructor. void Haar(Double_t* working_space, Int_t num, Int_t direction). AUXILIARY FUNCION. This function calculates Haar transform of a part of data; Function parameters:; -working_space-pointer to vector of ",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:9373,Modifiability,enhance,enhanced,9373,"mFourierHaar; static TSpectrumTransform::(anonymous)kTransformFourierWalsh; static TSpectrumTransform::(anonymous)kTransformHaar; static TSpectrumTransform::(anonymous)kTransformHartley; static TSpectrumTransform::(anonymous)kTransformInverse; static TSpectrumTransform::(anonymous)kTransformSin; static TSpectrumTransform::(anonymous)kTransformSinHaar; static TSpectrumTransform::(anonymous)kTransformSinWalsh; static TSpectrumTransform::(anonymous)kTransformWalsh; static TSpectrumTransform::(anonymous)kTransformWalshHaar; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDegreedegree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms; Int_tfDirectionforward or inverse transform; Double_tfEnhanceCoeffmultiplication coefficient applied in enhanced region;; Double_tfFilterCoeffvalue set in the filtered region; TStringTNamed::fNameobject identifier; Int_tfSizelength of transformed data; TStringTNamed::fTitleobject title; Int_tfTransformTypetype of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); Int_tfXmaxlast channel of filtered or enhanced region; Int_tfXminfirst channel of filtered or enhanced region. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrumTransform. Function documentation; TSpectrumTransform(); default constructor. TSpectrumTransform(Int_t size); the constructor creates TSpectrumTransform object. Its size must be > than zero and must be power of 2.; It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ~TSpectrumTransform(); destructor. void Haar(Double_t* working_space, Int_t num, Int_t direction). AUXILIARY FUNCION. This function calculates Haar transform of a part of data; Function parameters:; -working_space-pointer to vector of ",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:9429,Modifiability,enhance,enhanced,9429,"mFourierHaar; static TSpectrumTransform::(anonymous)kTransformFourierWalsh; static TSpectrumTransform::(anonymous)kTransformHaar; static TSpectrumTransform::(anonymous)kTransformHartley; static TSpectrumTransform::(anonymous)kTransformInverse; static TSpectrumTransform::(anonymous)kTransformSin; static TSpectrumTransform::(anonymous)kTransformSinHaar; static TSpectrumTransform::(anonymous)kTransformSinWalsh; static TSpectrumTransform::(anonymous)kTransformWalsh; static TSpectrumTransform::(anonymous)kTransformWalshHaar; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDegreedegree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms; Int_tfDirectionforward or inverse transform; Double_tfEnhanceCoeffmultiplication coefficient applied in enhanced region;; Double_tfFilterCoeffvalue set in the filtered region; TStringTNamed::fNameobject identifier; Int_tfSizelength of transformed data; TStringTNamed::fTitleobject title; Int_tfTransformTypetype of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); Int_tfXmaxlast channel of filtered or enhanced region; Int_tfXminfirst channel of filtered or enhanced region. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrumTransform. Function documentation; TSpectrumTransform(); default constructor. TSpectrumTransform(Int_t size); the constructor creates TSpectrumTransform object. Its size must be > than zero and must be power of 2.; It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ~TSpectrumTransform(); destructor. void Haar(Double_t* working_space, Int_t num, Int_t direction). AUXILIARY FUNCION. This function calculates Haar transform of a part of data; Function parameters:; -working_space-pointer to vector of ",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:9460,Modifiability,Inherit,Inheritance,9460,"TransformSinWalsh; static TSpectrumTransform::(anonymous)kTransformWalsh; static TSpectrumTransform::(anonymous)kTransformWalshHaar; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Int_tfDegreedegree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms; Int_tfDirectionforward or inverse transform; Double_tfEnhanceCoeffmultiplication coefficient applied in enhanced region;; Double_tfFilterCoeffvalue set in the filtered region; TStringTNamed::fNameobject identifier; Int_tfSizelength of transformed data; TStringTNamed::fTitleobject title; Int_tfTransformTypetype of transformation (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); Int_tfXmaxlast channel of filtered or enhanced region; Int_tfXminfirst channel of filtered or enhanced region. Class Charts. Inheritance Chart:. TObject. ←; TNamed. ←; TSpectrumTransform. Function documentation; TSpectrumTransform(); default constructor. TSpectrumTransform(Int_t size); the constructor creates TSpectrumTransform object. Its size must be > than zero and must be power of 2.; It sets default transform type to be Cosine transform. Transform parameters can be changed using setter functions. ~TSpectrumTransform(); destructor. void Haar(Double_t* working_space, Int_t num, Int_t direction). AUXILIARY FUNCION. This function calculates Haar transform of a part of data; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data; -direction-forward or inverse transform. void Walsh(Double_t* working_space, Int_t num). AUXILIARY FUNCION. This function calculates Walsh transform of a part of data; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data. void BitReverse(Double_t* working_space, Int_t num). AUXILIARY FUNCI",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:13156,Modifiability,enhance,enhance,13156," vector of transformed data; -num-length of processed data; -degree-degree of transform (see manual); -type-type of mixed transform (see manual). void Transform(const Double_t* source, Double_t* destVector). ONE-DIMENSIONAL TRANSFORM FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters.; Transformed data are written into dest spectrum. Function parameters:; source-pointer to the vector of source spectrum, its length should; be size except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transform. These need 2*size length to supply real and; imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be; size except for direct FOURIER, FOUR-WALSH, FOUR-HAAR. These; need 2*size length to store real and imaginary coefficients. . Transform methods;  ; Goal: to analyze experimental; data using orthogonal transforms; �        ; orthogonal transforms can be successfully used for the processing of; nuclear spectra (not only) ; �        ; they can be used to remove high frequency noise, to increase; signal-to-background ratio as well as to enhance low intensity components [1],; to carry out e.g. Fourier analysis etc. ; �        ; we have implemented the function for the calculation of the commonly; used orthogonal transforms as well as functions for the filtration and; enhancement of experimental data;  ; Function:; void TSpectrumTransform::Transform(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum according to the given input parameters. Transformed data are; written into dest spectrum. Before the Transform function is called the class; must be created by constructor and the type of the transform as well as some; other parameters must be set using a set of setter functions.;  ; Member variables of; TSpectrumTransform class:; �fSource-pointer; to the vector of source spectrum. Its length should be equal to the �fSize�; parameter except for inverse FOURIE",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:13390,Modifiability,enhance,enhancement,13390,"m. Function parameters:; source-pointer to the vector of source spectrum, its length should; be size except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transform. These need 2*size length to supply real and; imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be; size except for direct FOURIER, FOUR-WALSH, FOUR-HAAR. These; need 2*size length to store real and imaginary coefficients. . Transform methods;  ; Goal: to analyze experimental; data using orthogonal transforms; �        ; orthogonal transforms can be successfully used for the processing of; nuclear spectra (not only) ; �        ; they can be used to remove high frequency noise, to increase; signal-to-background ratio as well as to enhance low intensity components [1],; to carry out e.g. Fourier analysis etc. ; �        ; we have implemented the function for the calculation of the commonly; used orthogonal transforms as well as functions for the filtration and; enhancement of experimental data;  ; Function:; void TSpectrumTransform::Transform(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum according to the given input parameters. Transformed data are; written into dest spectrum. Before the Transform function is called the class; must be created by constructor and the type of the transform as well as some; other parameters must be set using a set of setter functions.;  ; Member variables of; TSpectrumTransform class:; �fSource-pointer; to the vector of source spectrum. Its length should be equal to the �fSize�; parameter except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR transforms. These; need �2*fSize� length to supply real and imaginary coefficients. ������������������; fDest-pointer; to the vector of destination spectrum. Its length should be equal to the; �fSize� parameter except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR transforms.; These need �2*fSize� length to store real and imaginary coefficients. ; ������� fSize-basic l",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:13856,Modifiability,variab,variables,13856,"; data using orthogonal transforms; �        ; orthogonal transforms can be successfully used for the processing of; nuclear spectra (not only) ; �        ; they can be used to remove high frequency noise, to increase; signal-to-background ratio as well as to enhance low intensity components [1],; to carry out e.g. Fourier analysis etc. ; �        ; we have implemented the function for the calculation of the commonly; used orthogonal transforms as well as functions for the filtration and; enhancement of experimental data;  ; Function:; void TSpectrumTransform::Transform(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum according to the given input parameters. Transformed data are; written into dest spectrum. Before the Transform function is called the class; must be created by constructor and the type of the transform as well as some; other parameters must be set using a set of setter functions.;  ; Member variables of; TSpectrumTransform class:; �fSource-pointer; to the vector of source spectrum. Its length should be equal to the �fSize�; parameter except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR transforms. These; need �2*fSize� length to supply real and imaginary coefficients. ������������������; fDest-pointer; to the vector of destination spectrum. Its length should be equal to the; �fSize� parameter except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR transforms.; These need �2*fSize� length to store real and imaginary coefficients. ; ������� fSize-basic length; of the source and dest spectrum. It should be power; of 2.; fType-type of transform; ����������� Classic transforms:; ����������������������� kTransformHaar. ����������������������� kTransformWalsh. ����������������������� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartey. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTran",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:15469,Modifiability,enhance,enhancement,15469,"power; of 2.; fType-type of transform; ����������� Classic transforms:; ����������������������� kTransformHaar. ����������������������� kTransformWalsh. ����������������������� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartey. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example �� script Transform.c:. Fig. 1 Original gamma-ray spectrum.  ; Fig. 2 Transformed spectrum from Fig. 1 using Cosine; transform;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Transform.C; �� ; #include <TSpectrum>; #include; <TSpectrumTransform>;  ; void Transform() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:15581,Modifiability,adapt,adaptive,15581,"�� kTransformCos. ����������������������� kTransformSin. ����������������������� kTransformFourier. ����������������������� kTransformHartey. ����������� Mixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example �� script Transform.c:. Fig. 1 Original gamma-ray spectrum.  ; Fig. 2 Transformed spectrum from Fig. 1 using Cosine; transform;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Transform.C; �� ; #include <TSpectrum>; #include; <TSpectrumTransform>;  ; void Transform() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new TH1F(""h"",""Transformed; spectrum using Cosine transform"",",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:15783,Modifiability,adapt,adaptive,15783,"ixed transforms:; ����������������������� kTransformFourierWalsh. ����������������������� kTransformFourierHaar. ����������������������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example �� script Transform.c:. Fig. 1 Original gamma-ray spectrum.  ; Fig. 2 Transformed spectrum from Fig. 1 using Cosine; transform;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Transform.C; �� ; #include <TSpectrum>; #include; <TSpectrumTransform>;  ; void Transform() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new TH1F(""h"",""Transformed; spectrum using Cosine transform"",nbins,xmin,xmax);; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:15940,Modifiability,adapt,adaptive,15940,"���������� kTransformWalshHaar. ����������������������� kTransformCosWalsh. ����������������������� kTransformCosHaar. ����������������������� kTransformSinWalsh. ����������������������� kTransformSinHaar. fDirection-direction-transform; direction (forward, inverse); ����������������������� kTransformForward. ����������������������� kTransformInverse. fDegree-applies; only for mixed transforms [2], [3], [4]. ; ����������������; �Allowed range� . ; References:; [1] C.V. Hampton, B. Lian, Wm. C.; McHarris: Fast-Fourier-transform spectral enhancement techniques for gamma-ray; spectroscopy. NIM A353 (1994) 280-284. ; [2] Morh�č M., Matou�ek V.,; New adaptive Cosine-Walsh� transform and its application to nuclear data; compression, IEEE Transactions on Signal Processing 48 (2000) 2693.� ; [3] Morh�č M., Matou�ek V.,; Data compression using new fast adaptive Cosine-Haar transforms, Digital Signal; Processing 8 (1998) 63. ; [4] Morh�č M., Matou�ek V.:; Multidimensional nuclear data compression using fast adaptive Walsh-Haar; transform. Acta Physica Slovaca 51 (2001) 307. ;  ; Example �� script Transform.c:. Fig. 1 Original gamma-ray spectrum.  ; Fig. 2 Transformed spectrum from Fig. 1 using Cosine; transform;  ; Script:; // Example to illustrate; Transform function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Transform.C; �� ; #include <TSpectrum>; #include; <TSpectrumTransform>;  ; void Transform() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new TH1F(""h"",""Transformed; spectrum using Cosine transform"",nbins,xmin,xmax);; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);�������� ; �� TCanvas *Transform1 =; gROOT->GetListOfCanvases()->FindObject(""Transform1"");; �� if (!T",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:20230,Modifiability,Enhance,Enhance,20230," �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new; TH1F(""h"",""Zonal filtering using Cosine; transform"",nbins,xmin,xmax);; �� TH1F *d = new; TH1F(""d"","""",nbins,xmin,xmax);�������� ; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);���� ; �� TCanvas *Transform1 =; gROOT->GetListOfCanvases()->FindObject(""Transform1"");; �� if (!Transform1); Transform1 = new; TCanvas(""Transform"",""Transform1"",10,10,1000,700);; ��; h->SetAxisRange(700,1024);�� ; ��; h->Draw(""L"");�� ; �� TSpectrum *s = new; TSpectrum();; �� TSpectrumTransform *t =; new TSpectrumTransform(4096);; �� t->SetTransformType(t->kTransformCos,0);; ��; t->SetRegion(2048, 4095);; ��; t->FilterZonal(source,dest);���� ; �� for (i = 0; i < nbins; i++) d->SetBinContent(i +; 1,dest[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");; }. void Enhance(const Double_t* source, Double_t* destVector). ONE-DIMENSIONAL ENHANCE ZONAL FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters. Then it multiplies transformed; coefficients in the given region (fXmin, fXmax) by the given; fEnhanceCoeff and transforms it back; Processed data are written into dest spectrum. Function parameters:; source-pointer to the vector of source spectrum, its length should; be size except for inverse FOURIER, FOUR-WALSh, FOUR-HAAR; transform. These need 2*size length to supply real and; imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be; size except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These; need 2*size length to store real and imaginary coefficients. . Example of enhancement;  ; Function:; void TSpectrumTransform::Enhance(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum (for details see Transform function). Before the Enhance; functio",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:20301,Modifiability,ENHANCE,ENHANCE,20301,"ouble_t[nbins];�� ; �� TH1F *h = new; TH1F(""h"",""Zonal filtering using Cosine; transform"",nbins,xmin,xmax);; �� TH1F *d = new; TH1F(""d"","""",nbins,xmin,xmax);�������� ; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);���� ; �� TCanvas *Transform1 =; gROOT->GetListOfCanvases()->FindObject(""Transform1"");; �� if (!Transform1); Transform1 = new; TCanvas(""Transform"",""Transform1"",10,10,1000,700);; ��; h->SetAxisRange(700,1024);�� ; ��; h->Draw(""L"");�� ; �� TSpectrum *s = new; TSpectrum();; �� TSpectrumTransform *t =; new TSpectrumTransform(4096);; �� t->SetTransformType(t->kTransformCos,0);; ��; t->SetRegion(2048, 4095);; ��; t->FilterZonal(source,dest);���� ; �� for (i = 0; i < nbins; i++) d->SetBinContent(i +; 1,dest[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");; }. void Enhance(const Double_t* source, Double_t* destVector). ONE-DIMENSIONAL ENHANCE ZONAL FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters. Then it multiplies transformed; coefficients in the given region (fXmin, fXmax) by the given; fEnhanceCoeff and transforms it back; Processed data are written into dest spectrum. Function parameters:; source-pointer to the vector of source spectrum, its length should; be size except for inverse FOURIER, FOUR-WALSh, FOUR-HAAR; transform. These need 2*size length to supply real and; imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be; size except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These; need 2*size length to store real and imaginary coefficients. . Example of enhancement;  ; Function:; void TSpectrumTransform::Enhance(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum (for details see Transform function). Before the Enhance; function is called the class must be created by constructor and the type of the;",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:21039,Modifiability,enhance,enhancement,21039," i++) d->SetBinContent(i +; 1,dest[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");; }. void Enhance(const Double_t* source, Double_t* destVector). ONE-DIMENSIONAL ENHANCE ZONAL FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters. Then it multiplies transformed; coefficients in the given region (fXmin, fXmax) by the given; fEnhanceCoeff and transforms it back; Processed data are written into dest spectrum. Function parameters:; source-pointer to the vector of source spectrum, its length should; be size except for inverse FOURIER, FOUR-WALSh, FOUR-HAAR; transform. These need 2*size length to supply real and; imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be; size except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These; need 2*size length to store real and imaginary coefficients. . Example of enhancement;  ; Function:; void TSpectrumTransform::Enhance(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum (for details see Transform function). Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter functions.; The Enhance function multiplies transformed coefficients in the given region; (fXmin, fXmax) by the given fEnhancCoeff and transforms it back. Enhanced data; are written into dest spectrum.;  ; Example� � script Enhance.c:.  ; Fig. 1 Original spectrum (black; line) and enhanced spectrum (red line) using Cosine transform (channels 0-1024; were multiplied by 2) ;  ; Script:;  ; // Example to illustrate; Enhance function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Enhance.C;  ; void Enhance() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Doubl",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:21091,Modifiability,Enhance,Enhance,21091," i++) d->SetBinContent(i +; 1,dest[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");; }. void Enhance(const Double_t* source, Double_t* destVector). ONE-DIMENSIONAL ENHANCE ZONAL FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters. Then it multiplies transformed; coefficients in the given region (fXmin, fXmax) by the given; fEnhanceCoeff and transforms it back; Processed data are written into dest spectrum. Function parameters:; source-pointer to the vector of source spectrum, its length should; be size except for inverse FOURIER, FOUR-WALSh, FOUR-HAAR; transform. These need 2*size length to supply real and; imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be; size except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These; need 2*size length to store real and imaginary coefficients. . Example of enhancement;  ; Function:; void TSpectrumTransform::Enhance(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum (for details see Transform function). Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter functions.; The Enhance function multiplies transformed coefficients in the given region; (fXmin, fXmax) by the given fEnhancCoeff and transforms it back. Enhanced data; are written into dest spectrum.;  ; Example� � script Enhance.c:.  ; Fig. 1 Original spectrum (black; line) and enhanced spectrum (red line) using Cosine transform (channels 0-1024; were multiplied by 2) ;  ; Script:;  ; // Example to illustrate; Enhance function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Enhance.C;  ; void Enhance() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Doubl",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:21238,Modifiability,Enhance,Enhance,21238,"ION; This function transforms the source spectrum. The calling program; should fill in input parameters. Then it multiplies transformed; coefficients in the given region (fXmin, fXmax) by the given; fEnhanceCoeff and transforms it back; Processed data are written into dest spectrum. Function parameters:; source-pointer to the vector of source spectrum, its length should; be size except for inverse FOURIER, FOUR-WALSh, FOUR-HAAR; transform. These need 2*size length to supply real and; imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be; size except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These; need 2*size length to store real and imaginary coefficients. . Example of enhancement;  ; Function:; void TSpectrumTransform::Enhance(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum (for details see Transform function). Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter functions.; The Enhance function multiplies transformed coefficients in the given region; (fXmin, fXmax) by the given fEnhancCoeff and transforms it back. Enhanced data; are written into dest spectrum.;  ; Example� � script Enhance.c:.  ; Fig. 1 Original spectrum (black; line) and enhanced spectrum (red line) using Cosine transform (channels 0-1024; were multiplied by 2) ;  ; Script:;  ; // Example to illustrate; Enhance function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Enhance.C;  ; void Enhance() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new; TH1F(""h"",""Enhancement using Cosine transform"",nbins,xmin,xmax);; �� TH1F *d = new; TH1F(""d"","""",nbins,xmin,xmax);�������� ; �� TFile *f = new; TFile(""spectra\\TS",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:21421,Modifiability,Enhance,Enhance,21421,"on (fXmin, fXmax) by the given; fEnhanceCoeff and transforms it back; Processed data are written into dest spectrum. Function parameters:; source-pointer to the vector of source spectrum, its length should; be size except for inverse FOURIER, FOUR-WALSh, FOUR-HAAR; transform. These need 2*size length to supply real and; imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be; size except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These; need 2*size length to store real and imaginary coefficients. . Example of enhancement;  ; Function:; void TSpectrumTransform::Enhance(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum (for details see Transform function). Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter functions.; The Enhance function multiplies transformed coefficients in the given region; (fXmin, fXmax) by the given fEnhancCoeff and transforms it back. Enhanced data; are written into dest spectrum.;  ; Example� � script Enhance.c:.  ; Fig. 1 Original spectrum (black; line) and enhanced spectrum (red line) using Cosine transform (channels 0-1024; were multiplied by 2) ;  ; Script:;  ; // Example to illustrate; Enhance function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Enhance.C;  ; void Enhance() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new; TH1F(""h"",""Enhancement using Cosine transform"",nbins,xmin,xmax);; �� TH1F *d = new; TH1F(""d"","""",nbins,xmin,xmax);�������� ; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);���� ; �� TCanvas *Transform1 = gROOT->Ge",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:21560,Modifiability,Enhance,Enhanced,21560,"n into dest spectrum. Function parameters:; source-pointer to the vector of source spectrum, its length should; be size except for inverse FOURIER, FOUR-WALSh, FOUR-HAAR; transform. These need 2*size length to supply real and; imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be; size except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These; need 2*size length to store real and imaginary coefficients. . Example of enhancement;  ; Function:; void TSpectrumTransform::Enhance(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum (for details see Transform function). Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter functions.; The Enhance function multiplies transformed coefficients in the given region; (fXmin, fXmax) by the given fEnhancCoeff and transforms it back. Enhanced data; are written into dest spectrum.;  ; Example� � script Enhance.c:.  ; Fig. 1 Original spectrum (black; line) and enhanced spectrum (red line) using Cosine transform (channels 0-1024; were multiplied by 2) ;  ; Script:;  ; // Example to illustrate; Enhance function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Enhance.C;  ; void Enhance() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new; TH1F(""h"",""Enhancement using Cosine transform"",nbins,xmin,xmax);; �� TH1F *d = new; TH1F(""d"","""",nbins,xmin,xmax);�������� ; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);���� ; �� TCanvas *Transform1 = gROOT->GetListOfCanvases()->FindObject(""Transform1"");; �� if (!Transform1); Transform1 = new; TCanvas(""Tr",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:21629,Modifiability,Enhance,Enhance,21629,"rs:; source-pointer to the vector of source spectrum, its length should; be size except for inverse FOURIER, FOUR-WALSh, FOUR-HAAR; transform. These need 2*size length to supply real and; imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be; size except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These; need 2*size length to store real and imaginary coefficients. . Example of enhancement;  ; Function:; void TSpectrumTransform::Enhance(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum (for details see Transform function). Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter functions.; The Enhance function multiplies transformed coefficients in the given region; (fXmin, fXmax) by the given fEnhancCoeff and transforms it back. Enhanced data; are written into dest spectrum.;  ; Example� � script Enhance.c:.  ; Fig. 1 Original spectrum (black; line) and enhanced spectrum (red line) using Cosine transform (channels 0-1024; were multiplied by 2) ;  ; Script:;  ; // Example to illustrate; Enhance function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Enhance.C;  ; void Enhance() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new; TH1F(""h"",""Enhancement using Cosine transform"",nbins,xmin,xmax);; �� TH1F *d = new; TH1F(""d"","""",nbins,xmin,xmax);�������� ; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);���� ; �� TCanvas *Transform1 = gROOT->GetListOfCanvases()->FindObject(""Transform1"");; �� if (!Transform1); Transform1 = new; TCanvas(""Transform"",""Transform1"",10,10,1000,700);;",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:21687,Modifiability,enhance,enhanced,21687,"sform. These need 2*size length to supply real and; imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be; size except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These; need 2*size length to store real and imaginary coefficients. . Example of enhancement;  ; Function:; void TSpectrumTransform::Enhance(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum (for details see Transform function). Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter functions.; The Enhance function multiplies transformed coefficients in the given region; (fXmin, fXmax) by the given fEnhancCoeff and transforms it back. Enhanced data; are written into dest spectrum.;  ; Example� � script Enhance.c:.  ; Fig. 1 Original spectrum (black; line) and enhanced spectrum (red line) using Cosine transform (channels 0-1024; were multiplied by 2) ;  ; Script:;  ; // Example to illustrate; Enhance function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Enhance.C;  ; void Enhance() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new; TH1F(""h"",""Enhancement using Cosine transform"",nbins,xmin,xmax);; �� TH1F *d = new; TH1F(""d"","""",nbins,xmin,xmax);�������� ; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);���� ; �� TCanvas *Transform1 = gROOT->GetListOfCanvases()->FindObject(""Transform1"");; �� if (!Transform1); Transform1 = new; TCanvas(""Transform"",""Transform1"",10,10,1000,700);; ��; h->SetAxisRange(700,1024);�� ; ��; h->Draw(""L"");�� ; �� TSpectrum *s = new; TSpectrum();; �� TSpectrumTransform *t =; new TSpectru",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:21822,Modifiability,Enhance,Enhance,21822,"sform. These need 2*size length to supply real and; imaginary coefficients.; destVector-pointer to the vector of dest data, its length should be; size except for direct FOURIER, FOUR-WALSh, FOUR-HAAR. These; need 2*size length to store real and imaginary coefficients. . Example of enhancement;  ; Function:; void TSpectrumTransform::Enhance(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum (for details see Transform function). Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter functions.; The Enhance function multiplies transformed coefficients in the given region; (fXmin, fXmax) by the given fEnhancCoeff and transforms it back. Enhanced data; are written into dest spectrum.;  ; Example� � script Enhance.c:.  ; Fig. 1 Original spectrum (black; line) and enhanced spectrum (red line) using Cosine transform (channels 0-1024; were multiplied by 2) ;  ; Script:;  ; // Example to illustrate; Enhance function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Enhance.C;  ; void Enhance() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new; TH1F(""h"",""Enhancement using Cosine transform"",nbins,xmin,xmax);; �� TH1F *d = new; TH1F(""d"","""",nbins,xmin,xmax);�������� ; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);���� ; �� TCanvas *Transform1 = gROOT->GetListOfCanvases()->FindObject(""Transform1"");; �� if (!Transform1); Transform1 = new; TCanvas(""Transform"",""Transform1"",10,10,1000,700);; ��; h->SetAxisRange(700,1024);�� ; ��; h->Draw(""L"");�� ; �� TSpectrum *s = new; TSpectrum();; �� TSpectrumTransform *t =; new TSpectru",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:21914,Modifiability,Enhance,Enhance,21914,"r direct FOURIER, FOUR-WALSh, FOUR-HAAR. These; need 2*size length to store real and imaginary coefficients. . Example of enhancement;  ; Function:; void TSpectrumTransform::Enhance(const double *fSource,; double; *fDest);  ; This function transforms the; source spectrum (for details see Transform function). Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter functions.; The Enhance function multiplies transformed coefficients in the given region; (fXmin, fXmax) by the given fEnhancCoeff and transforms it back. Enhanced data; are written into dest spectrum.;  ; Example� � script Enhance.c:.  ; Fig. 1 Original spectrum (black; line) and enhanced spectrum (red line) using Cosine transform (channels 0-1024; were multiplied by 2) ;  ; Script:;  ; // Example to illustrate; Enhance function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Enhance.C;  ; void Enhance() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new; TH1F(""h"",""Enhancement using Cosine transform"",nbins,xmin,xmax);; �� TH1F *d = new; TH1F(""d"","""",nbins,xmin,xmax);�������� ; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);���� ; �� TCanvas *Transform1 = gROOT->GetListOfCanvases()->FindObject(""Transform1"");; �� if (!Transform1); Transform1 = new; TCanvas(""Transform"",""Transform1"",10,10,1000,700);; ��; h->SetAxisRange(700,1024);�� ; ��; h->Draw(""L"");�� ; �� TSpectrum *s = new; TSpectrum();; �� TSpectrumTransform *t =; new TSpectrumTransform(4096);; �� t->SetTransformType(t->kTransformCos,0);; �� t->SetRegion(0,; 1024);; ��; t->SetEnhanceCoeff(2);; ��; t->Enhance(source,dest);������� ; ��",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:21933,Modifiability,Enhance,Enhance,21933,"uble; *fDest);  ; This function transforms the; source spectrum (for details see Transform function). Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter functions.; The Enhance function multiplies transformed coefficients in the given region; (fXmin, fXmax) by the given fEnhancCoeff and transforms it back. Enhanced data; are written into dest spectrum.;  ; Example� � script Enhance.c:.  ; Fig. 1 Original spectrum (black; line) and enhanced spectrum (red line) using Cosine transform (channels 0-1024; were multiplied by 2) ;  ; Script:;  ; // Example to illustrate; Enhance function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Enhance.C;  ; void Enhance() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new; TH1F(""h"",""Enhancement using Cosine transform"",nbins,xmin,xmax);; �� TH1F *d = new; TH1F(""d"","""",nbins,xmin,xmax);�������� ; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);���� ; �� TCanvas *Transform1 = gROOT->GetListOfCanvases()->FindObject(""Transform1"");; �� if (!Transform1); Transform1 = new; TCanvas(""Transform"",""Transform1"",10,10,1000,700);; ��; h->SetAxisRange(700,1024);�� ; ��; h->Draw(""L"");�� ; �� TSpectrum *s = new; TSpectrum();; �� TSpectrumTransform *t =; new TSpectrumTransform(4096);; �� t->SetTransformType(t->kTransformCos,0);; �� t->SetRegion(0,; 1024);; ��; t->SetEnhanceCoeff(2);; ��; t->Enhance(source,dest);������� ; �� for (i = 0; i < nbins; i++) d->SetBinContent(i +; 1,dest[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function set",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:22171,Modifiability,Enhance,Enhancement,22171,"uble; *fDest);  ; This function transforms the; source spectrum (for details see Transform function). Before the Enhance; function is called the class must be created by constructor and the type of the; transform as well as some other parameters must be set using a set of setter functions.; The Enhance function multiplies transformed coefficients in the given region; (fXmin, fXmax) by the given fEnhancCoeff and transforms it back. Enhanced data; are written into dest spectrum.;  ; Example� � script Enhance.c:.  ; Fig. 1 Original spectrum (black; line) and enhanced spectrum (red line) using Cosine transform (channels 0-1024; were multiplied by 2) ;  ; Script:;  ; // Example to illustrate; Enhance function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Enhance.C;  ; void Enhance() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new; TH1F(""h"",""Enhancement using Cosine transform"",nbins,xmin,xmax);; �� TH1F *d = new; TH1F(""d"","""",nbins,xmin,xmax);�������� ; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);���� ; �� TCanvas *Transform1 = gROOT->GetListOfCanvases()->FindObject(""Transform1"");; �� if (!Transform1); Transform1 = new; TCanvas(""Transform"",""Transform1"",10,10,1000,700);; ��; h->SetAxisRange(700,1024);�� ; ��; h->Draw(""L"");�� ; �� TSpectrum *s = new; TSpectrum();; �� TSpectrumTransform *t =; new TSpectrumTransform(4096);; �� t->SetTransformType(t->kTransformCos,0);; �� t->SetRegion(0,; 1024);; ��; t->SetEnhanceCoeff(2);; ��; t->Enhance(source,dest);������� ; �� for (i = 0; i < nbins; i++) d->SetBinContent(i +; 1,dest[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function set",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:22884,Modifiability,Enhance,Enhance,22884,"and enhanced spectrum (red line) using Cosine transform (channels 0-1024; were multiplied by 2) ;  ; Script:;  ; // Example to illustrate; Enhance function (class TSpectrumTransform).; // To execute this example,; do; // root > .x Enhance.C;  ; void Enhance() {; �� Int_t i;; �� Double_t nbins =; 4096;; �� Double_t xmin� =; 0;; �� Double_t xmax� =; (Double_t)nbins;; �� Double_t * source = new Double_t[nbins];; �� Double_t * dest = new; Double_t[nbins];�� ; �� TH1F *h = new; TH1F(""h"",""Enhancement using Cosine transform"",nbins,xmin,xmax);; �� TH1F *d = new; TH1F(""d"","""",nbins,xmin,xmax);�������� ; �� TFile *f = new; TFile(""spectra\\TSpectrum.root"");; �� h=(TH1F*); f->Get(""transform1;1"");�� ; �� for (i = 0; i < nbins;; i++) source[i]=h->GetBinContent(i + 1);���� ; �� TCanvas *Transform1 = gROOT->GetListOfCanvases()->FindObject(""Transform1"");; �� if (!Transform1); Transform1 = new; TCanvas(""Transform"",""Transform1"",10,10,1000,700);; ��; h->SetAxisRange(700,1024);�� ; ��; h->Draw(""L"");�� ; �� TSpectrum *s = new; TSpectrum();; �� TSpectrumTransform *t =; new TSpectrumTransform(4096);; �� t->SetTransformType(t->kTransformCos,0);; �� t->SetRegion(0,; 1024);; ��; t->SetEnhanceCoeff(2);; ��; t->Enhance(source,dest);������� ; �� for (i = 0; i < nbins; i++) d->SetBinContent(i +; 1,dest[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax. void SetDirection(Int_t direction). SETTER FUNCION. This functio",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:23586,Modifiability,enhance,enhancement,23586,"nsform"",""Transform1"",10,10,1000,700);; ��; h->SetAxisRange(700,1024);�� ; ��; h->Draw(""L"");�� ; �� TSpectrum *s = new; TSpectrum();; �� TSpectrumTransform *t =; new TSpectrumTransform(4096);; �� t->SetTransformType(t->kTransformCos,0);; �� t->SetRegion(0,; 1024);; ��; t->SetEnhanceCoeff(2);; ��; t->Enhance(source,dest);������� ; �� for (i = 0; i < nbins; i++) d->SetBinContent(i +; 1,dest[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Double_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Double_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrumTransform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to R",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:24029,Modifiability,enhance,enhanceCoeff,24029,"sform1"",10,10,1000,700);; ��; h->SetAxisRange(700,1024);�� ; ��; h->Draw(""L"");�� ; �� TSpectrum *s = new; TSpectrum();; �� TSpectrumTransform *t =; new TSpectrumTransform(4096);; �� t->SetTransformType(t->kTransformCos,0);; �� t->SetRegion(0,; 1024);; ��; t->SetEnhanceCoeff(2);; ��; t->Enhance(source,dest);������� ; �� for (i = 0; i < nbins; i++) d->SetBinContent(i +; 1,dest[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Double_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Double_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrumTransform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:24083,Modifiability,enhance,enhancement,24083,"sform1"",10,10,1000,700);; ��; h->SetAxisRange(700,1024);�� ; ��; h->Draw(""L"");�� ; �� TSpectrum *s = new; TSpectrum();; �� TSpectrumTransform *t =; new TSpectrumTransform(4096);; �� t->SetTransformType(t->kTransformCos,0);; �� t->SetRegion(0,; 1024);; ��; t->SetEnhanceCoeff(2);; ��; t->Enhance(source,dest);������� ; �� for (i = 0; i < nbins; i++) d->SetBinContent(i +; 1,dest[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Double_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Double_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrumTransform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:24110,Modifiability,enhance,enhanceCoeff,24110,"sform1"",10,10,1000,700);; ��; h->SetAxisRange(700,1024);�� ; ��; h->Draw(""L"");�� ; �� TSpectrum *s = new; TSpectrum();; �� TSpectrumTransform *t =; new TSpectrumTransform(4096);; �� t->SetTransformType(t->kTransformCos,0);; �� t->SetRegion(0,; 1024);; ��; t->SetEnhanceCoeff(2);; ��; t->Enhance(source,dest);������� ; �� for (i = 0; i < nbins; i++) d->SetBinContent(i +; 1,dest[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Double_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Double_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrumTransform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:24149,Modifiability,enhance,enhanced,24149,"sform1"",10,10,1000,700);; ��; h->SetAxisRange(700,1024);�� ; ��; h->Draw(""L"");�� ; �� TSpectrum *s = new; TSpectrum();; �� TSpectrumTransform *t =; new TSpectrumTransform(4096);; �� t->SetTransformType(t->kTransformCos,0);; �� t->SetRegion(0,; 1024);; ��; t->SetEnhanceCoeff(2);; ��; t->Enhance(source,dest);������� ; �� for (i = 0; i < nbins; i++) d->SetBinContent(i +; 1,dest[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Double_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Double_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrumTransform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:24230,Modifiability,enhance,enhancement,24230,"sform1"",10,10,1000,700);; ��; h->SetAxisRange(700,1024);�� ; ��; h->Draw(""L"");�� ; �� TSpectrum *s = new; TSpectrum();; �� TSpectrumTransform *t =; new TSpectrumTransform(4096);; �� t->SetTransformType(t->kTransformCos,0);; �� t->SetRegion(0,; 1024);; ��; t->SetEnhanceCoeff(2);; ��; t->Enhance(source,dest);������� ; �� for (i = 0; i < nbins; i++) d->SetBinContent(i +; 1,dest[i]);; ��; d->SetLineColor(kRed);�� ; �� d->Draw(""SAME; L"");; }. void SetTransformType(Int_t transType, Int_t degree). SETTER FUNCION. This function sets the following parameters for transform:; -transType - type of transform (Haar, Walsh, Cosine, Sine, Fourier, Hartley, Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar); -degree - degree of mixed transform, applies only for Fourier-Walsh, Fourier-Haar, Walsh-Haar, Cosine-Walsh, Cosine-Haar, Sine-Walsh, Sine-Haar transforms. void SetRegion(Int_t xmin, Int_t xmax). SETTER FUNCION. This function sets the filtering or enhancement region:; -xmin, xmax. void SetDirection(Int_t direction). SETTER FUNCION. This function sets the direction of the transform:; -direction (forward or inverse). void SetFilterCoeff(Double_t filterCoeff). SETTER FUNCION. This function sets the filter coefficient:; -filterCoeff - after the transform the filtered region (xmin, xmax) is replaced by this coefficient. Applies only for filtereng operation. void SetEnhanceCoeff(Double_t enhanceCoeff). SETTER FUNCION. This function sets the enhancement coefficient:; -enhanceCoeff - after the transform the enhanced region (xmin, xmax) is multiplied by this coefficient. Applies only for enhancement operation. TSpectrumTransform(). » Author: Miroslav Morhac 25/09/06 » Copyright (C) 1995-2006, Rene Brun and Fons Rademakers. *; » Last changed: root/spectrum:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:3348,Security,Hash,Hash,3348,"* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); voidFilterZonal(const Double_t* source, Double_t* destVector); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual const char*TObject::GetIconName() const; virtual const char*TNamed::GetName() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:5911,Testability,Test,TestBit,5911,"bject::operator new[](size_t sz, void* vp); TSpectrumTransform&operator=(const TSpectrumTransform&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDirection(Int_t direction); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEnhanceCoeff(Double_t enhanceCoeff); voidSetFilterCoeff(Double_t filterCoeff); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetRegion(Int_t xmin, Int_t xmax); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTransformType(Int_t transType, Int_t degree); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTransform(const Double_t* source, Double_t* destVector); TSpectrumTransform(); TSpectrumTransform(Int_t size); TSpectrumTransform(const TSpectrumTransform&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:5950,Testability,Test,TestBits,5950,"bject::operator new[](size_t sz, void* vp); TSpectrumTransform&operator=(const TSpectrumTransform&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTNamed::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDirection(Int_t direction); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); voidSetEnhanceCoeff(Double_t enhanceCoeff); voidSetFilterCoeff(Double_t filterCoeff); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); static voidTObject::SetObjectStat(Bool_t stat); voidSetRegion(Int_t xmin, Int_t xmax); virtual voidTNamed::SetTitle(const char* title = """")MENU ; voidSetTransformType(Int_t transType, Int_t degree); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTransform(const Double_t* source, Double_t* destVector); TSpectrumTransform(); TSpectrumTransform(Int_t size); TSpectrumTransform(const TSpectrumTransform&); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:1656,Usability,Clear,Clear,1656," virtual~TSpectrumTransform(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; virtual Int_tTObject::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Op",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSpectrumTransform.html:11664,Usability,clear,clear,11664,"e_t* working_space, Int_t num, Int_t hartley, Int_t direction, Int_t zt_clear). AUXILIARY FUNCION. This function calculates Fourier based transform of a part of data; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data; -hartley-1 if it is Hartley transform, 0 othewise; -direction-forward or inverse transform. void BitReverseHaar(Double_t* working_space, Int_t shift, Int_t num, Int_t start). AUXILIARY FUNCION. This function carries out bir-reverse reordering for Haar transform; Function parameters:; -working_space-pointer to vector of processed data; -shift-shift of position of processing; -start-initial position of processed data; -num-length of processed data. int GeneralExe(Double_t* working_space, Int_t zt_clear, Int_t num, Int_t degree, Int_t type). AUXILIARY FUNCION. This function calculates generalized (mixed) transforms of different degrees; Function parameters:; -working_space-pointer to vector of transformed data; -zt_clear-flag to clear imaginary data before staring; -num-length of processed data; -degree-degree of transform (see manual); -type-type of mixed transform (see manual). int GeneralInv(Double_t* working_space, Int_t num, Int_t degree, Int_t type). AUXILIARY FUNCION. This function calculates inverse generalized (mixed) transforms; Function parameters:; -working_space-pointer to vector of transformed data; -num-length of processed data; -degree-degree of transform (see manual); -type-type of mixed transform (see manual). void Transform(const Double_t* source, Double_t* destVector). ONE-DIMENSIONAL TRANSFORM FUNCTION; This function transforms the source spectrum. The calling program; should fill in input parameters.; Transformed data are written into dest spectrum. Function parameters:; source-pointer to the vector of source spectrum, its length should; be size except for inverse FOURIER, FOUR-WALSH, FOUR-HAAR; transform. These need 2*size length to supply real and; imaginary coefficients.; des",MatchSource.WIKI,root/html604/TSpectrumTransform.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpectrumTransform.html
https://root.cern/root/html604/TSPHE.html:1478,Availability,Error,Error,1478," virtual~TSPHE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObjec",MatchSource.WIKI,root/html604/TSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSPHE.html
https://root.cern/root/html604/TSPHE.html:1607,Availability,error,error,1607,"stractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tGetAspectRatio() const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTShape::GetNumber() const; ",MatchSource.WIKI,root/html604/TSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSPHE.html
https://root.cern/root/html604/TSPHE.html:1691,Availability,error,error,1691,"ion = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Float_tGetAspectRatio() const; virtual const TBuffer3D&GetBuffer3D(Int_t reqSections) const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTShape::GetNumber() const; virtual Int_tGetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t",MatchSource.WIKI,root/html604/TSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSPHE.html
https://root.cern/root/html604/TSPHE.html:111,Modifiability,inherit,inheritance,111,". TSPHE. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » GRAF3D; » G3D; » TSPHE. class TSPHE: public TShape. . SPHE is a Sphere. It has 9 parameters:. - name name of the shape; - title shape's title; - material (see TMaterial); - rmin minimum radius; - rmax maximum radius; - themin theta min; - themax theta max; - phimin phi min; - phimax phi max. Function Members (Methods); public:. virtual~TSPHE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObjec",MatchSource.WIKI,root/html604/TSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSPHE.html
https://root.cern/root/html604/TSPHE.html:3309,Modifiability,Inherit,InheritsFrom,3309,"*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTShape::GetNumber() const; virtual Int_tGetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tGetPhimax() const; virtual Float_tGetPhimin() const; virtual Float_tGetRmax() const; virtual Float_tGetRmin() const; virtual Float_tGetThemax() const; virtual Float_tGetThemin() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); ",MatchSource.WIKI,root/html604/TSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSPHE.html
https://root.cern/root/html604/TSPHE.html:3375,Modifiability,Inherit,InheritsFrom,3375,"or() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTShape::GetNumber() const; virtual Int_tGetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tGetPhimax() const; virtual Float_tGetPhimin() const; virtual Float_tGetRmax() const; virtual Float_tGetRmin() const; virtual Float_tGetThemax() const; virtual Float_tGetThemin() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator ne",MatchSource.WIKI,root/html604/TSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSPHE.html
https://root.cern/root/html604/TSPHE.html:9532,Modifiability,Inherit,Inheritance,9532,". protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; TMaterial*TShape::fMaterialPointer to material; TStringTNamed::fNameobject identifier; Int_tTShape::fNumberShape number; Float_tfPhimaxmaximum phi; Float_tfPhiminminimum phi; Float_tfRmaxmaximum radius; Float_tfRminminimum radius; Float_tfThemaxmaximum theta; Float_tfTheminminimum theta; TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag; Float_tfaXCoeff along Ox; Float_tfaYCoeff along Oy; Float_tfaZCoeff along Oz. private:. Float_tfAspectRatioRelation between asumth and grid size (by default 1.0); Double_t*fCoTab! Table of cos(fPhimin) .... cos(Phi); Double_t*fCoThetaTab! Table of sin(gThemin) .... cos(Theta); Int_tfNdivnumber of divisions; Int_tfNz! number of sections; Double_t*fSiTab! Table of sin(fPhimin) .... sin(Phi). Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←; TSPHE. Function documentation; TSPHE(); SPHE shape default constructor. TSPHE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t themin, Float_t themax, Float_t phimin, Float_t phimax); SPHE shape normal constructor. TSPHE(const char* name, const char* title, const char* material, Float_t rmax); SPHE shape ""simplified"" constructor. ~TSPHE(); SPHE shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a PSPHE. Compute the closest distance of approach from point px,py to each; computed outline point of the PSPHE (stolen from PCON). void SetEllipse(const Float_t* factors); Set ellipse. void SetNumberOfDivisions(Int_t p); Set number of divisions. void SetPoints(Double_t* points) const; Create SPHE points. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). void MakeTableOfCoSin() co",MatchSource.WIKI,root/html604/TSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSPHE.html
https://root.cern/root/html604/TSPHE.html:3199,Security,Hash,Hash,3199,"; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; TMaterial*TShape::GetMaterial() const; virtual const char*TNamed::GetName() const; virtual Int_tTShape::GetNumber() const; virtual Int_tGetNumberOfDivisions() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual Float_tGetPhimax() const; virtual Float_tGetPhimin() const; virtual Float_tGetRmax() const; virtual Float_tGetRmin() const; virtual Float_tGetThemax() const; virtual Float_tGetThemin() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; Int_tTShape::GetVisibility() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delet",MatchSource.WIKI,root/html604/TSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSPHE.html
https://root.cern/root/html604/TSPHE.html:6678,Testability,Test,TestBit,6678,"awOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEllipse(const Float_t* factors); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNumberOfDivisions(Int_t p); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; TSPHE(); TSPHE(const TSPHE&); TSPHE(const char* name, const char* title, const char* material, Float_t rmax); TSPHE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t themin, Float_t themax, Float_t phimin, Float_t phimax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSPHE.html
https://root.cern/root/html604/TSPHE.html:6717,Testability,Test,TestBits,6717,"awOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidSetEllipse(const Float_t* factors); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTShape::SetName(const char* name); virtual voidTNamed::SetNameTitle(const char* name, const char* title); virtual voidSetNumberOfDivisions(Int_t p); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTShape::SetVisibility(Int_t vis)MENU ; virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidSizeof3D() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; voidTShape::TransformPoints(Double_t* points, UInt_t NbPnts) const; TSPHE(); TSPHE(const TSPHE&); TSPHE(const char* name, const char* title, const char* material, Float_t rmax); TSPHE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t themin, Float_t themax, Float_t phimin, Float_t phimax); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSPHE.html
https://root.cern/root/html604/TSPHE.html:837,Usability,Clear,Clear,837," virtual~TSPHE(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidTObject::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObjec",MatchSource.WIKI,root/html604/TSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSPHE.html
https://root.cern/root/html604/TSPHE.html:9967,Usability,simpl,simplified,9967,"i; Float_tfRmaxmaximum radius; Float_tfRminminimum radius; Float_tfThemaxmaximum theta; Float_tfTheminminimum theta; TStringTNamed::fTitleobject title; Int_tTShape::fVisibilityVisibility flag; Float_tfaXCoeff along Ox; Float_tfaYCoeff along Oy; Float_tfaZCoeff along Oz. private:. Float_tfAspectRatioRelation between asumth and grid size (by default 1.0); Double_t*fCoTab! Table of cos(fPhimin) .... cos(Phi); Double_t*fCoThetaTab! Table of sin(gThemin) .... cos(Theta); Int_tfNdivnumber of divisions; Int_tfNz! number of sections; Double_t*fSiTab! Table of sin(fPhimin) .... sin(Phi). Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAtt3D. ←; TShape. ←; TSPHE. Function documentation; TSPHE(); SPHE shape default constructor. TSPHE(const char* name, const char* title, const char* material, Float_t rmin, Float_t rmax, Float_t themin, Float_t themax, Float_t phimin, Float_t phimax); SPHE shape normal constructor. TSPHE(const char* name, const char* title, const char* material, Float_t rmax); SPHE shape ""simplified"" constructor. ~TSPHE(); SPHE shape default destructor. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a PSPHE. Compute the closest distance of approach from point px,py to each; computed outline point of the PSPHE (stolen from PCON). void SetEllipse(const Float_t* factors); Set ellipse. void SetNumberOfDivisions(Int_t p); Set number of divisions. void SetPoints(Double_t* points) const; Create SPHE points. void Sizeof3D() const; Return total X3D needed by TNode::ls (when called with option ""x""). void MakeTableOfCoSin() const; Make table of sine and cosine. void Streamer(TBuffer& ); Stream a class object. const TBuffer3D & GetBuffer3D(Int_t reqSections) const; Get buffer 3d. TSPHE(). Float_t GetRmin() const; {return fRmin;}. Float_t GetRmax() const; {return fRmax;}. Float_t GetThemin() const; {return fThemin;}. Float_t GetThemax() const; {return fThemax;}. Float_t GetPhimin() const; {return fPhimin;}. Float",MatchSource.WIKI,root/html604/TSPHE.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSPHE.html
https://root.cern/root/html604/TSpider.html:623,Availability,avail,availables,623,". TSpider. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TSpider. class TSpider: public TObject, public TAttFill, public TAttLine. Spider class; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as; many polar axes as selected data members. For each of them, it draws on the axis; the position of the present event between the min and max of the data member.; Two modes are availables:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }. Function Members (Methods); public:. virtual~TSpider(); voidTObject::AbstractMethod(const char* method) const; voidAddSuperposed(TSpider* sp); voidAddVariable(const char* varexp)MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clo",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:830,Availability,avail,available,830,". TSpider. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TSpider. class TSpider: public TObject, public TAttFill, public TAttLine. Spider class; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as; many polar axes as selected data members. For each of them, it draws on the axis; the position of the present event between the min and max of the data member.; Two modes are availables:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }. Function Members (Methods); public:. virtual~TSpider(); voidTObject::AbstractMethod(const char* method) const; voidAddSuperposed(TSpider* sp); voidAddVariable(const char* varexp)MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clo",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:2625,Availability,Error,Error,2625,"r(); voidTObject::AbstractMethod(const char* method) const; voidAddSuperposed(TSpider* sp); voidAddVariable(const char* varexp)MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteVariable(const char* varexp)MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Color_tGetAverageFillColor() const; Style_tGetAverageFillStyle() const; Color_tGetAverageLineColor() const; Style_tGetAverageLineStyle() const; Width_tGetAverageLineWidth() const; Long64_tGetCurrentEntry() const; Bool_tGetDisplayAverage() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntriesToProcess(Long64_t firstentry, Long64_t nentries) const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*T",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:2754,Availability,error,error,2754,"NU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteVariable(const char* varexp)MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Color_tGetAverageFillColor() const; Style_tGetAverageFillStyle() const; Color_tGetAverageLineColor() const; Style_tGetAverageLineStyle() const; Width_tGetAverageLineWidth() const; Long64_tGetCurrentEntry() const; Bool_tGetDisplayAverage() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntriesToProcess(Long64_t firstentry, Long64_t nentries) const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtua",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:2838,Availability,error,error,2838,"wse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteVariable(const char* varexp)MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Color_tGetAverageFillColor() const; Style_tGetAverageFillStyle() const; Color_tGetAverageLineColor() const; Style_tGetAverageLineStyle() const; Width_tGetAverageLineWidth() const; Long64_tGetCurrentEntry() const; Bool_tGetDisplayAverage() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntriesToProcess(Long64_t firstentry, Long64_t nentries) const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:1517,Deployability,Toggle,ToggleEditor,1517,"he position of the present event between the min and max of the data member.; Two modes are availables:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }. Function Members (Methods); public:. virtual~TSpider(); voidTObject::AbstractMethod(const char* method) const; voidAddSuperposed(TSpider* sp); voidAddVariable(const char* varexp)MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteVariable(const char* varexp)MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* options = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Op",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:6678,Deployability,TOGGLE,TOGGLE,6678,"dTObject::Print(Option_t* option = """") const; virtual Int_tTObject::Read(const char* name); virtual voidTObject::RecursiveRemove(TObject* obj); virtual voidTAttFill::ResetAttFill(Option_t* option = """"); virtual voidTAttLine::ResetAttLine(Option_t* option = """"); voidTObject::ResetBit(UInt_t f); virtual voidTObject::SaveAs(const char* filename = """", Option_t* option = """") constMENU ; virtual voidTAttFill::SaveFillAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1001); virtual voidTAttLine::SaveLineAttributes(ostream& out, const char* name, Int_t coldef = 1, Int_t stydef = 1, Int_t widdef = 1); virtual voidTObject::SavePrimitive(ostream& out, Option_t* option = """"); voidSetAverageFillColor(Color_t col); voidSetAverageFillStyle(Style_t sty); voidSetAverageLineColor(Color_t col); voidSetAverageLineStyle(Style_t sty); voidSetAverageLineWidth(Width_t wid); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDisplayAverage(Bool_t disp)TOGGLE ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidSetFillColor(Color_t col); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidSetFillStyle(Style_t sty); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidSetLineColor(Color_t col); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidSetLineStyle(Style_t sty); virtual voidSetLineWidth(Width_t wid); voidSetNdivRadial(Int_t div)MENU ; voidSetNx(UInt_t nx)MENU ; voidSetNy(UInt_t ny)MENU ; static voidTObject::SetObjectStat(Bool_t stat); voidSetSegmentDisplay(Bool_t seg)TOGGLE ; voidSetSelectionExpression(const char* selexp); voidSetShowRange(Bool_t showrange); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVariablesExpression(const char* varexp); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidSt",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:7402,Deployability,TOGGLE,TOGGLE,7402,"ageFillColor(Color_t col); voidSetAverageFillStyle(Style_t sty); voidSetAverageLineColor(Color_t col); voidSetAverageLineStyle(Style_t sty); voidSetAverageLineWidth(Width_t wid); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDisplayAverage(Bool_t disp)TOGGLE ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidSetFillColor(Color_t col); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidSetFillStyle(Style_t sty); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidSetLineColor(Color_t col); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidSetLineStyle(Style_t sty); virtual voidSetLineWidth(Width_t wid); voidSetNdivRadial(Int_t div)MENU ; voidSetNx(UInt_t nx)MENU ; voidSetNy(UInt_t ny)MENU ; static voidTObject::SetObjectStat(Bool_t stat); voidSetSegmentDisplay(Bool_t seg)TOGGLE ; voidSetSelectionExpression(const char* selexp); voidSetShowRange(Bool_t showrange); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVariablesExpression(const char* varexp); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidSuperposeTo(TSpider* sp); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpider(); TSpider(const TSpider&); TSpider(TTree* tree, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 0, Long64_t firstentry = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:14972,Deployability,Update,UpdateView,14972,"ty); Set the LineStyle of the average. void SetAverageLineColor(Color_t col); Set the LineColor of the average. void SetAverageLineWidth(Width_t wid); Set the LineWidth of the average. void SetAverageFillColor(Color_t col); Set the FillColor of the average. void SetAverageFillStyle(Style_t sty); Set the FillStyle of the average. void SetDisplayAverage(Bool_t disp); Display or not the average. void SetCurrentEntries(); Set the current selected entries. void SetLineStyle(Style_t sty); Set line style. void SetLineColor(Color_t col); Set lin color. void SetLineWidth(Width_t wid); Set line width. void SetFillColor(Color_t col); Set fill color. void SetFillStyle(Style_t sty); Set fill style. void SetNdivRadial(Int_t div); Set number of radial divisions. void SetNx(UInt_t nx); Set the X number of subpads. void SetNy(UInt_t ny); Set the Y number of subpads. void SetSegmentDisplay(Bool_t seg); Set the segment display or not. void SetSelectionExpression(const char* selexp); Compile selection expression if there is one. void SetVariablesExpression(const char* varexp); Compile the variables expression from the given string varexp. void SyncFormulas(); Create a TreeFormulaManager to coordinate the formulas. void UpdateView(); Update the polylines or the arcs for the current entries. TSpider(). Bool_t GetDisplayAverage() const; {return fDisplayAverage;}. Long64_t GetCurrentEntry() const; {return fEntry;}. Int_t GetNx() const; {return fNx;}. Int_t GetNy() const; {return fNy;}. Bool_t GetSegmentDisplay() const; {return fSegmentDisplay;}. void SetShowRange(Bool_t showrange); {fShowRange = showrange;}. void SuperposeTo(TSpider* sp); {sp->AddSuperposed(this);}. » Author: Bastien Dalla Piazza 20/07/07 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/treeviewer:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:14986,Deployability,Update,Update,14986,"ty); Set the LineStyle of the average. void SetAverageLineColor(Color_t col); Set the LineColor of the average. void SetAverageLineWidth(Width_t wid); Set the LineWidth of the average. void SetAverageFillColor(Color_t col); Set the FillColor of the average. void SetAverageFillStyle(Style_t sty); Set the FillStyle of the average. void SetDisplayAverage(Bool_t disp); Display or not the average. void SetCurrentEntries(); Set the current selected entries. void SetLineStyle(Style_t sty); Set line style. void SetLineColor(Color_t col); Set lin color. void SetLineWidth(Width_t wid); Set line width. void SetFillColor(Color_t col); Set fill color. void SetFillStyle(Style_t sty); Set fill style. void SetNdivRadial(Int_t div); Set number of radial divisions. void SetNx(UInt_t nx); Set the X number of subpads. void SetNy(UInt_t ny); Set the Y number of subpads. void SetSegmentDisplay(Bool_t seg); Set the segment display or not. void SetSelectionExpression(const char* selexp); Compile selection expression if there is one. void SetVariablesExpression(const char* varexp); Compile the variables expression from the given string varexp. void SyncFormulas(); Create a TreeFormulaManager to coordinate the formulas. void UpdateView(); Update the polylines or the arcs for the current entries. TSpider(). Bool_t GetDisplayAverage() const; {return fDisplayAverage;}. Long64_t GetCurrentEntry() const; {return fEntry;}. Int_t GetNx() const; {return fNx;}. Int_t GetNy() const; {return fNy;}. Bool_t GetSegmentDisplay() const; {return fSegmentDisplay;}. void SetShowRange(Bool_t showrange); {fShowRange = showrange;}. void SuperposeTo(TSpider* sp); {sp->AddSuperposed(this);}. » Author: Bastien Dalla Piazza 20/07/07 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/treeviewer:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:113,Modifiability,inherit,inheritance,113,". TSpider. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TSpider. class TSpider: public TObject, public TAttFill, public TAttLine. Spider class; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as; many polar axes as selected data members. For each of them, it draws on the axis; the position of the present event between the min and max of the data member.; Two modes are availables:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }. Function Members (Methods); public:. virtual~TSpider(); voidTObject::AbstractMethod(const char* method) const; voidAddSuperposed(TSpider* sp); voidAddVariable(const char* varexp)MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clo",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:948,Modifiability,variab,variables,948,". TSpider. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TSpider. class TSpider: public TObject, public TAttFill, public TAttLine. Spider class; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as; many polar axes as selected data members. For each of them, it draws on the axis; the position of the present event between the min and max of the data member.; Two modes are availables:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }. Function Members (Methods); public:. virtual~TSpider(); voidTObject::AbstractMethod(const char* method) const; voidAddSuperposed(TSpider* sp); voidAddVariable(const char* varexp)MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clo",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:4468,Modifiability,Inherit,InheritsFrom,4468,"t firstentry, Long64_t nentries) const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; Int_tGetNx() const; Int_tGetNy() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Bool_tGetSegmentDisplay() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidGotoEntry(Long64_t e)MENU ; voidGotoFollowing()MENU ; voidGotoNext()MENU ; voidGotoPreceding()MENU ; voidGotoPrevious()MENU ; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttFill::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp)",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:4534,Modifiability,Inherit,InheritsFrom,4534,"etFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; Int_tGetNx() const; Int_tGetNy() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Bool_tGetSegmentDisplay() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidGotoEntry(Long64_t e)MENU ; voidGotoFollowing()MENU ; voidGotoNext()MENU ; voidGotoPreceding()MENU ; voidGotoPrevious()MENU ; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttFill::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator ",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:10064,Modifiability,variab,variable,10064,ject::EStatusBitsTObject::kCannotPick; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width. private:. Bool_tfAngularLabelsTrue if the labels are oriented according to their axis.; Int_tfArraySizeActual size of the arrays.; Double_t*fAve[fNcols] Average value of each variable.; TPolyLine*fAveragePolyPolygon representing the average variables value.; TArc**fAverageSlices! Average slices.; TCanvas*fCanvas! Pointer to the mother pad.; Long64_t*fCurrentEntries![fNx*fNy] current selected entries;; Bool_tfDisplayAverageDisplay or not the average.; Long64_tfEntryPresent entry number in fTree.; Long64_tfFirstEntryFirst entry.; Bool_tfForceDimForce dimension.; TList*fFormulasList of all formulas to represent.; TList*fInputUsed for fSelector.; TTreeFormulaManager*fManagerCoordinator for the formulas.; Double_t*fMax[fNcols] Maximum value of the variables.; Double_t*fMin[fNcols] Minimum value of the variables.; UInt_tfNcolsNumber of variables.; Long64_tfNentriesNumber of entries.; UInt_tfNxNumber of horizontal spider plots.; UInt_tfNyNumber of vertical spider plots.; TGraphPolargram*fPolargramPolar graph.; TList*fPolyListPolygons representing the variables.; Bool_tfSegmentDisplayTrue if displaying a segment plot.; TTreeFormula*fSelectSelectio,MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:10130,Modifiability,variab,variables,10130,tsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width. private:. Bool_tfAngularLabelsTrue if the labels are oriented according to their axis.; Int_tfArraySizeActual size of the arrays.; Double_t*fAve[fNcols] Average value of each variable.; TPolyLine*fAveragePolyPolygon representing the average variables value.; TArc**fAverageSlices! Average slices.; TCanvas*fCanvas! Pointer to the mother pad.; Long64_t*fCurrentEntries![fNx*fNy] current selected entries;; Bool_tfDisplayAverageDisplay or not the average.; Long64_tfEntryPresent entry number in fTree.; Long64_tfFirstEntryFirst entry.; Bool_tfForceDimForce dimension.; TList*fFormulasList of all formulas to represent.; TList*fInputUsed for fSelector.; TTreeFormulaManager*fManagerCoordinator for the formulas.; Double_t*fMax[fNcols] Maximum value of the variables.; Double_t*fMin[fNcols] Minimum value of the variables.; UInt_tfNcolsNumber of variables.; Long64_tfNentriesNumber of entries.; UInt_tfNxNumber of horizontal spider plots.; UInt_tfNyNumber of vertical spider plots.; TGraphPolargram*fPolargramPolar graph.; TList*fPolyListPolygons representing the variables.; Bool_tfSegmentDisplayTrue if displaying a segment plot.; TTreeFormula*fSelectSelection condition; TSelectorDraw*fSelector! Selector.; Bool_tfShowRang,MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:10642,Modifiability,variab,variables,10642,"e; static TObject::(anonymous)TObject::kZombie. protected:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width. private:. Bool_tfAngularLabelsTrue if the labels are oriented according to their axis.; Int_tfArraySizeActual size of the arrays.; Double_t*fAve[fNcols] Average value of each variable.; TPolyLine*fAveragePolyPolygon representing the average variables value.; TArc**fAverageSlices! Average slices.; TCanvas*fCanvas! Pointer to the mother pad.; Long64_t*fCurrentEntries![fNx*fNy] current selected entries;; Bool_tfDisplayAverageDisplay or not the average.; Long64_tfEntryPresent entry number in fTree.; Long64_tfFirstEntryFirst entry.; Bool_tfForceDimForce dimension.; TList*fFormulasList of all formulas to represent.; TList*fInputUsed for fSelector.; TTreeFormulaManager*fManagerCoordinator for the formulas.; Double_t*fMax[fNcols] Maximum value of the variables.; Double_t*fMin[fNcols] Minimum value of the variables.; UInt_tfNcolsNumber of variables.; Long64_tfNentriesNumber of entries.; UInt_tfNxNumber of horizontal spider plots.; UInt_tfNyNumber of vertical spider plots.; TGraphPolargram*fPolargramPolar graph.; TList*fPolyListPolygons representing the variables.; Bool_tfSegmentDisplayTrue if displaying a segment plot.; TTreeFormula*fSelectSelection condition; TSelectorDraw*fSelector! Selector.; Bool_tfShowRangeShow range of variables or not.; TList*fSuperposedSuperposed spider plots.; TTree*fTreePointer to the TTree to represent. Class Charts. Inheritance Chart:. TObject. TAttFill. TAttLine. ←; TSpider. Function documentation; TSpider(); Default constructor. TSpider(TTree* tree, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 0, Long64_t firstentry = 0); Normal constructor. Options are:. ~TSpider(); Destructor. void AddSuperposed(TSpider* sp); Allow to superpose several spider ",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:10697,Modifiability,variab,variables,10697,"ed:. Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width. private:. Bool_tfAngularLabelsTrue if the labels are oriented according to their axis.; Int_tfArraySizeActual size of the arrays.; Double_t*fAve[fNcols] Average value of each variable.; TPolyLine*fAveragePolyPolygon representing the average variables value.; TArc**fAverageSlices! Average slices.; TCanvas*fCanvas! Pointer to the mother pad.; Long64_t*fCurrentEntries![fNx*fNy] current selected entries;; Bool_tfDisplayAverageDisplay or not the average.; Long64_tfEntryPresent entry number in fTree.; Long64_tfFirstEntryFirst entry.; Bool_tfForceDimForce dimension.; TList*fFormulasList of all formulas to represent.; TList*fInputUsed for fSelector.; TTreeFormulaManager*fManagerCoordinator for the formulas.; Double_t*fMax[fNcols] Maximum value of the variables.; Double_t*fMin[fNcols] Minimum value of the variables.; UInt_tfNcolsNumber of variables.; Long64_tfNentriesNumber of entries.; UInt_tfNxNumber of horizontal spider plots.; UInt_tfNyNumber of vertical spider plots.; TGraphPolargram*fPolargramPolar graph.; TList*fPolyListPolygons representing the variables.; Bool_tfSegmentDisplayTrue if displaying a segment plot.; TTreeFormula*fSelectSelection condition; TSelectorDraw*fSelector! Selector.; Bool_tfShowRangeShow range of variables or not.; TList*fSuperposedSuperposed spider plots.; TTree*fTreePointer to the TTree to represent. Class Charts. Inheritance Chart:. TObject. TAttFill. TAttLine. ←; TSpider. Function documentation; TSpider(); Default constructor. TSpider(TTree* tree, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 0, Long64_t firstentry = 0); Normal constructor. Options are:. ~TSpider(); Destructor. void AddSuperposed(TSpider* sp); Allow to superpose several spider views. void AddVariable(const char* varexp); Add a vari",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:10731,Modifiability,variab,variables,10731,"or; Style_tTAttFill::fFillStylefill area style; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width. private:. Bool_tfAngularLabelsTrue if the labels are oriented according to their axis.; Int_tfArraySizeActual size of the arrays.; Double_t*fAve[fNcols] Average value of each variable.; TPolyLine*fAveragePolyPolygon representing the average variables value.; TArc**fAverageSlices! Average slices.; TCanvas*fCanvas! Pointer to the mother pad.; Long64_t*fCurrentEntries![fNx*fNy] current selected entries;; Bool_tfDisplayAverageDisplay or not the average.; Long64_tfEntryPresent entry number in fTree.; Long64_tfFirstEntryFirst entry.; Bool_tfForceDimForce dimension.; TList*fFormulasList of all formulas to represent.; TList*fInputUsed for fSelector.; TTreeFormulaManager*fManagerCoordinator for the formulas.; Double_t*fMax[fNcols] Maximum value of the variables.; Double_t*fMin[fNcols] Minimum value of the variables.; UInt_tfNcolsNumber of variables.; Long64_tfNentriesNumber of entries.; UInt_tfNxNumber of horizontal spider plots.; UInt_tfNyNumber of vertical spider plots.; TGraphPolargram*fPolargramPolar graph.; TList*fPolyListPolygons representing the variables.; Bool_tfSegmentDisplayTrue if displaying a segment plot.; TTreeFormula*fSelectSelection condition; TSelectorDraw*fSelector! Selector.; Bool_tfShowRangeShow range of variables or not.; TList*fSuperposedSuperposed spider plots.; TTree*fTreePointer to the TTree to represent. Class Charts. Inheritance Chart:. TObject. TAttFill. TAttLine. ←; TSpider. Function documentation; TSpider(); Default constructor. TSpider(TTree* tree, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 0, Long64_t firstentry = 0); Normal constructor. Options are:. ~TSpider(); Destructor. void AddSuperposed(TSpider* sp); Allow to superpose several spider views. void AddVariable(const char* varexp); Add a variable to the plot from its expression. void D",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:10949,Modifiability,variab,variables,10949,"abels are oriented according to their axis.; Int_tfArraySizeActual size of the arrays.; Double_t*fAve[fNcols] Average value of each variable.; TPolyLine*fAveragePolyPolygon representing the average variables value.; TArc**fAverageSlices! Average slices.; TCanvas*fCanvas! Pointer to the mother pad.; Long64_t*fCurrentEntries![fNx*fNy] current selected entries;; Bool_tfDisplayAverageDisplay or not the average.; Long64_tfEntryPresent entry number in fTree.; Long64_tfFirstEntryFirst entry.; Bool_tfForceDimForce dimension.; TList*fFormulasList of all formulas to represent.; TList*fInputUsed for fSelector.; TTreeFormulaManager*fManagerCoordinator for the formulas.; Double_t*fMax[fNcols] Maximum value of the variables.; Double_t*fMin[fNcols] Minimum value of the variables.; UInt_tfNcolsNumber of variables.; Long64_tfNentriesNumber of entries.; UInt_tfNxNumber of horizontal spider plots.; UInt_tfNyNumber of vertical spider plots.; TGraphPolargram*fPolargramPolar graph.; TList*fPolyListPolygons representing the variables.; Bool_tfSegmentDisplayTrue if displaying a segment plot.; TTreeFormula*fSelectSelection condition; TSelectorDraw*fSelector! Selector.; Bool_tfShowRangeShow range of variables or not.; TList*fSuperposedSuperposed spider plots.; TTree*fTreePointer to the TTree to represent. Class Charts. Inheritance Chart:. TObject. TAttFill. TAttLine. ←; TSpider. Function documentation; TSpider(); Default constructor. TSpider(TTree* tree, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 0, Long64_t firstentry = 0); Normal constructor. Options are:. ~TSpider(); Destructor. void AddSuperposed(TSpider* sp); Allow to superpose several spider views. void AddVariable(const char* varexp); Add a variable to the plot from its expression. void DeleteVariable(const char* varexp); Delete a variable from its expression. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute the distance to the spider. void Draw(Option_t* options = """"); Draw the spider. ",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:11125,Modifiability,variab,variables,11125," the average variables value.; TArc**fAverageSlices! Average slices.; TCanvas*fCanvas! Pointer to the mother pad.; Long64_t*fCurrentEntries![fNx*fNy] current selected entries;; Bool_tfDisplayAverageDisplay or not the average.; Long64_tfEntryPresent entry number in fTree.; Long64_tfFirstEntryFirst entry.; Bool_tfForceDimForce dimension.; TList*fFormulasList of all formulas to represent.; TList*fInputUsed for fSelector.; TTreeFormulaManager*fManagerCoordinator for the formulas.; Double_t*fMax[fNcols] Maximum value of the variables.; Double_t*fMin[fNcols] Minimum value of the variables.; UInt_tfNcolsNumber of variables.; Long64_tfNentriesNumber of entries.; UInt_tfNxNumber of horizontal spider plots.; UInt_tfNyNumber of vertical spider plots.; TGraphPolargram*fPolargramPolar graph.; TList*fPolyListPolygons representing the variables.; Bool_tfSegmentDisplayTrue if displaying a segment plot.; TTreeFormula*fSelectSelection condition; TSelectorDraw*fSelector! Selector.; Bool_tfShowRangeShow range of variables or not.; TList*fSuperposedSuperposed spider plots.; TTree*fTreePointer to the TTree to represent. Class Charts. Inheritance Chart:. TObject. TAttFill. TAttLine. ←; TSpider. Function documentation; TSpider(); Default constructor. TSpider(TTree* tree, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 0, Long64_t firstentry = 0); Normal constructor. Options are:. ~TSpider(); Destructor. void AddSuperposed(TSpider* sp); Allow to superpose several spider views. void AddVariable(const char* varexp); Add a variable to the plot from its expression. void DeleteVariable(const char* varexp); Delete a variable from its expression. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute the distance to the spider. void Draw(Option_t* options = """"); Draw the spider. void DrawPolyAverage(Option_t* options); Paint the Polygon representing the average value of the variables. void DrawPoly(Option_t* options); Paint the polygon representing the current ",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:11247,Modifiability,Inherit,Inheritance,11247,"![fNx*fNy] current selected entries;; Bool_tfDisplayAverageDisplay or not the average.; Long64_tfEntryPresent entry number in fTree.; Long64_tfFirstEntryFirst entry.; Bool_tfForceDimForce dimension.; TList*fFormulasList of all formulas to represent.; TList*fInputUsed for fSelector.; TTreeFormulaManager*fManagerCoordinator for the formulas.; Double_t*fMax[fNcols] Maximum value of the variables.; Double_t*fMin[fNcols] Minimum value of the variables.; UInt_tfNcolsNumber of variables.; Long64_tfNentriesNumber of entries.; UInt_tfNxNumber of horizontal spider plots.; UInt_tfNyNumber of vertical spider plots.; TGraphPolargram*fPolargramPolar graph.; TList*fPolyListPolygons representing the variables.; Bool_tfSegmentDisplayTrue if displaying a segment plot.; TTreeFormula*fSelectSelection condition; TSelectorDraw*fSelector! Selector.; Bool_tfShowRangeShow range of variables or not.; TList*fSuperposedSuperposed spider plots.; TTree*fTreePointer to the TTree to represent. Class Charts. Inheritance Chart:. TObject. TAttFill. TAttLine. ←; TSpider. Function documentation; TSpider(); Default constructor. TSpider(TTree* tree, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 0, Long64_t firstentry = 0); Normal constructor. Options are:. ~TSpider(); Destructor. void AddSuperposed(TSpider* sp); Allow to superpose several spider views. void AddVariable(const char* varexp); Add a variable to the plot from its expression. void DeleteVariable(const char* varexp); Delete a variable from its expression. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute the distance to the spider. void Draw(Option_t* options = """"); Draw the spider. void DrawPolyAverage(Option_t* options); Paint the Polygon representing the average value of the variables. void DrawPoly(Option_t* options); Paint the polygon representing the current entry. void DrawSlices(Option_t* options); Draw the slices of the segment plot. void DrawSlicesAverage(Option_t* options); Draw the slices",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:11676,Modifiability,variab,variable,11676,"] Minimum value of the variables.; UInt_tfNcolsNumber of variables.; Long64_tfNentriesNumber of entries.; UInt_tfNxNumber of horizontal spider plots.; UInt_tfNyNumber of vertical spider plots.; TGraphPolargram*fPolargramPolar graph.; TList*fPolyListPolygons representing the variables.; Bool_tfSegmentDisplayTrue if displaying a segment plot.; TTreeFormula*fSelectSelection condition; TSelectorDraw*fSelector! Selector.; Bool_tfShowRangeShow range of variables or not.; TList*fSuperposedSuperposed spider plots.; TTree*fTreePointer to the TTree to represent. Class Charts. Inheritance Chart:. TObject. TAttFill. TAttLine. ←; TSpider. Function documentation; TSpider(); Default constructor. TSpider(TTree* tree, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 0, Long64_t firstentry = 0); Normal constructor. Options are:. ~TSpider(); Destructor. void AddSuperposed(TSpider* sp); Allow to superpose several spider views. void AddVariable(const char* varexp); Add a variable to the plot from its expression. void DeleteVariable(const char* varexp); Delete a variable from its expression. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute the distance to the spider. void Draw(Option_t* options = """"); Draw the spider. void DrawPolyAverage(Option_t* options); Paint the Polygon representing the average value of the variables. void DrawPoly(Option_t* options); Paint the polygon representing the current entry. void DrawSlices(Option_t* options); Draw the slices of the segment plot. void DrawSlicesAverage(Option_t* options); Draw the slices representing the average for the segment plot. Style_t GetAverageLineStyle() const; Get the LineStyle of the average. Color_t GetAverageLineColor() const; Get the LineColor of the average. Width_t GetAverageLineWidth() const; Get the LineWidth of the average. Color_t GetAverageFillColor() const; Get the FillColor of the average. Style_t GetAverageFillStyle() const; Get the FillStyle of the average. void ExecuteEve",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:11768,Modifiability,variab,variable,11768,"iesNumber of entries.; UInt_tfNxNumber of horizontal spider plots.; UInt_tfNyNumber of vertical spider plots.; TGraphPolargram*fPolargramPolar graph.; TList*fPolyListPolygons representing the variables.; Bool_tfSegmentDisplayTrue if displaying a segment plot.; TTreeFormula*fSelectSelection condition; TSelectorDraw*fSelector! Selector.; Bool_tfShowRangeShow range of variables or not.; TList*fSuperposedSuperposed spider plots.; TTree*fTreePointer to the TTree to represent. Class Charts. Inheritance Chart:. TObject. TAttFill. TAttLine. ←; TSpider. Function documentation; TSpider(); Default constructor. TSpider(TTree* tree, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 0, Long64_t firstentry = 0); Normal constructor. Options are:. ~TSpider(); Destructor. void AddSuperposed(TSpider* sp); Allow to superpose several spider views. void AddVariable(const char* varexp); Add a variable to the plot from its expression. void DeleteVariable(const char* varexp); Delete a variable from its expression. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute the distance to the spider. void Draw(Option_t* options = """"); Draw the spider. void DrawPolyAverage(Option_t* options); Paint the Polygon representing the average value of the variables. void DrawPoly(Option_t* options); Paint the polygon representing the current entry. void DrawSlices(Option_t* options); Draw the slices of the segment plot. void DrawSlicesAverage(Option_t* options); Draw the slices representing the average for the segment plot. Style_t GetAverageLineStyle() const; Get the LineStyle of the average. Color_t GetAverageLineColor() const; Get the LineColor of the average. Width_t GetAverageLineWidth() const; Get the LineWidth of the average. Color_t GetAverageFillColor() const; Get the FillColor of the average. Style_t GetAverageFillStyle() const; Get the FillStyle of the average. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute the corresponding event. Int_t FindTex",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:12030,Modifiability,variab,variables,12030," if displaying a segment plot.; TTreeFormula*fSelectSelection condition; TSelectorDraw*fSelector! Selector.; Bool_tfShowRangeShow range of variables or not.; TList*fSuperposedSuperposed spider plots.; TTree*fTreePointer to the TTree to represent. Class Charts. Inheritance Chart:. TObject. TAttFill. TAttLine. ←; TSpider. Function documentation; TSpider(); Default constructor. TSpider(TTree* tree, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 0, Long64_t firstentry = 0); Normal constructor. Options are:. ~TSpider(); Destructor. void AddSuperposed(TSpider* sp); Allow to superpose several spider views. void AddVariable(const char* varexp); Add a variable to the plot from its expression. void DeleteVariable(const char* varexp); Delete a variable from its expression. Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute the distance to the spider. void Draw(Option_t* options = """"); Draw the spider. void DrawPolyAverage(Option_t* options); Paint the Polygon representing the average value of the variables. void DrawPoly(Option_t* options); Paint the polygon representing the current entry. void DrawSlices(Option_t* options); Draw the slices of the segment plot. void DrawSlicesAverage(Option_t* options); Draw the slices representing the average for the segment plot. Style_t GetAverageLineStyle() const; Get the LineStyle of the average. Color_t GetAverageLineColor() const; Get the LineColor of the average. Width_t GetAverageLineWidth() const; Get the LineWidth of the average. Color_t GetAverageFillColor() const; Get the FillColor of the average. Style_t GetAverageFillStyle() const; Get the FillStyle of the average. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute the corresponding event. Int_t FindTextAlign(Double_t theta); Find the alignement rule to apply for TText::SetTextAlign(Short_t). Double_t FindTextAngle(Double_t theta); Determine the orientation of the polar labels according to their angle. Long64_t GetEntriesToProc",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:13652,Modifiability,variab,variable,13652,"AverageFillStyle() const; Get the FillStyle of the average. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute the corresponding event. Int_t FindTextAlign(Double_t theta); Find the alignement rule to apply for TText::SetTextAlign(Short_t). Double_t FindTextAngle(Double_t theta); Determine the orientation of the polar labels according to their angle. Long64_t GetEntriesToProcess(Long64_t firstentry, Long64_t nentries) const; return the number of entries to be processed; this function checks that nentries is not bigger than the number; of entries in the Tree or in the associated TEventlist. void GotoEntry(Long64_t e); Go to a specified entry. void GotoNext(); Go to the next entries. void GotoPrevious(); Go to the prevous entries. void GotoFollowing(); Go to the next entry. void GotoPreceding(); Go to the last entry. void InitArrays(Int_t newsize); Check if the arrays size is enough and reallocate them if not. void InitVariables(Long64_t firstentry, Long64_t nentries); Browse the tree to set the min, max and average value of each variable of fVar. void Paint(Option_t* options); Paint the spider. void SetAverageLineStyle(Style_t sty); Set the LineStyle of the average. void SetAverageLineColor(Color_t col); Set the LineColor of the average. void SetAverageLineWidth(Width_t wid); Set the LineWidth of the average. void SetAverageFillColor(Color_t col); Set the FillColor of the average. void SetAverageFillStyle(Style_t sty); Set the FillStyle of the average. void SetDisplayAverage(Bool_t disp); Display or not the average. void SetCurrentEntries(); Set the current selected entries. void SetLineStyle(Style_t sty); Set line style. void SetLineColor(Color_t col); Set lin color. void SetLineWidth(Width_t wid); Set line width. void SetFillColor(Color_t col); Set fill color. void SetFillStyle(Style_t sty); Set fill style. void SetNdivRadial(Int_t div); Set number of radial divisions. void SetNx(UInt_t nx); Set the X number of subpads. void SetNy(UInt_t ny); Set the Y num",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:14839,Modifiability,variab,variables,14839,"ty); Set the LineStyle of the average. void SetAverageLineColor(Color_t col); Set the LineColor of the average. void SetAverageLineWidth(Width_t wid); Set the LineWidth of the average. void SetAverageFillColor(Color_t col); Set the FillColor of the average. void SetAverageFillStyle(Style_t sty); Set the FillStyle of the average. void SetDisplayAverage(Bool_t disp); Display or not the average. void SetCurrentEntries(); Set the current selected entries. void SetLineStyle(Style_t sty); Set line style. void SetLineColor(Color_t col); Set lin color. void SetLineWidth(Width_t wid); Set line width. void SetFillColor(Color_t col); Set fill color. void SetFillStyle(Style_t sty); Set fill style. void SetNdivRadial(Int_t div); Set number of radial divisions. void SetNx(UInt_t nx); Set the X number of subpads. void SetNy(UInt_t ny); Set the Y number of subpads. void SetSegmentDisplay(Bool_t seg); Set the segment display or not. void SetSelectionExpression(const char* selexp); Compile selection expression if there is one. void SetVariablesExpression(const char* varexp); Compile the variables expression from the given string varexp. void SyncFormulas(); Create a TreeFormulaManager to coordinate the formulas. void UpdateView(); Update the polylines or the arcs for the current entries. TSpider(). Bool_t GetDisplayAverage() const; {return fDisplayAverage;}. Long64_t GetCurrentEntry() const; {return fEntry;}. Int_t GetNx() const; {return fNx;}. Int_t GetNy() const; {return fNy;}. Bool_t GetSegmentDisplay() const; {return fSegmentDisplay;}. void SetShowRange(Bool_t showrange); {fShowRange = showrange;}. void SuperposeTo(TSpider* sp); {sp->AddSuperposed(this);}. » Author: Bastien Dalla Piazza 20/07/07 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/treeviewer:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:4358,Security,Hash,Hash,4358," Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); Long64_tGetEntriesToProcess(Long64_t firstentry, Long64_t nentries) const; virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; virtual const char*TObject::GetIconName() const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual const char*TObject::GetName() const; Int_tGetNx() const; Int_tGetNy() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; Bool_tGetSegmentDisplay() const; virtual const char*TObject::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; voidGotoEntry(Long64_t e)MENU ; voidGotoFollowing()MENU ; voidGotoNext()MENU ; voidGotoPreceding()MENU ; voidGotoPrevious()MENU ; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTObject::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTObject::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttFill::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator del",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:1313,Testability,log,log,1313,"ublic TAttLine. Spider class; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as; many polar axes as selected data members. For each of them, it draws on the axis; the position of the present event between the min and max of the data member.; Two modes are availables:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }. Function Members (Methods); public:. virtual~TSpider(); voidTObject::AbstractMethod(const char* method) const; voidAddSuperposed(TSpider* sp); voidAddVariable(const char* varexp)MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteVariable(const char* varexp)MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:1324,Testability,log,log,1324,"ublic TAttLine. Spider class; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as; many polar axes as selected data members. For each of them, it draws on the axis; the position of the present event between the min and max of the data member.; Two modes are availables:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }. Function Members (Methods); public:. virtual~TSpider(); voidTObject::AbstractMethod(const char* method) const; voidAddSuperposed(TSpider* sp); voidAddVariable(const char* varexp)MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; virtual Int_tTObject::Compare(const TObject* obj) const; virtual voidTObject::Copy(TObject& object) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; voidDeleteVariable(const char* varexp)MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:7858,Testability,Test,TestBit,7858,"ageFillColor(Color_t col); voidSetAverageFillStyle(Style_t sty); voidSetAverageLineColor(Color_t col); voidSetAverageLineStyle(Style_t sty); voidSetAverageLineWidth(Width_t wid); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDisplayAverage(Bool_t disp)TOGGLE ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidSetFillColor(Color_t col); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidSetFillStyle(Style_t sty); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidSetLineColor(Color_t col); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidSetLineStyle(Style_t sty); virtual voidSetLineWidth(Width_t wid); voidSetNdivRadial(Int_t div)MENU ; voidSetNx(UInt_t nx)MENU ; voidSetNy(UInt_t ny)MENU ; static voidTObject::SetObjectStat(Bool_t stat); voidSetSegmentDisplay(Bool_t seg)TOGGLE ; voidSetSelectionExpression(const char* selexp); voidSetShowRange(Bool_t showrange); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVariablesExpression(const char* varexp); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidSuperposeTo(TSpider* sp); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpider(); TSpider(const TSpider&); TSpider(TTree* tree, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 0, Long64_t firstentry = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:7897,Testability,Test,TestBits,7897,"ageFillColor(Color_t col); voidSetAverageFillStyle(Style_t sty); voidSetAverageLineColor(Color_t col); voidSetAverageLineStyle(Style_t sty); voidSetAverageLineWidth(Width_t wid); voidTObject::SetBit(UInt_t f); voidTObject::SetBit(UInt_t f, Bool_t set); voidSetDisplayAverage(Bool_t disp)TOGGLE ; virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidSetFillColor(Color_t col); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidSetFillStyle(Style_t sty); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidSetLineColor(Color_t col); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidSetLineStyle(Style_t sty); virtual voidSetLineWidth(Width_t wid); voidSetNdivRadial(Int_t div)MENU ; voidSetNx(UInt_t nx)MENU ; voidSetNy(UInt_t ny)MENU ; static voidTObject::SetObjectStat(Bool_t stat); voidSetSegmentDisplay(Bool_t seg)TOGGLE ; voidSetSelectionExpression(const char* selexp); voidSetShowRange(Bool_t showrange); virtual voidTObject::SetUniqueID(UInt_t uid); voidSetVariablesExpression(const char* varexp); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); voidSuperposeTo(TSpider* sp); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpider(); TSpider(const TSpider&); TSpider(TTree* tree, const char* varexp, const char* selection, Option_t* option = """", Long64_t nentries = 0, Long64_t firstentry = 0); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:897,Usability,simpl,simply,897,". TSpider. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TSpider. class TSpider: public TObject, public TAttFill, public TAttLine. Spider class; A spider view is a handy way to visualize a set of data stored in a TTree. It draws as; many polar axes as selected data members. For each of them, it draws on the axis; the position of the present event between the min and max of the data member.; Two modes are availables:. The spider view: With each points on the axes is drawn a polyline.; The segment view: For each data member is drawn an arc segment with the radius corresponding to the event. The spider plot is available from the treeviewer called by ""atree->StartViewer()"", or simply by calling its constructor and defining the variables to display. Picture; Source. {; TCanvas *c1 = new TCanvas(""c1"",""TSpider example"",200,10,700,700);; TFile *f = new TFile(""$(ROOTSYS)/tutorials/hsimple.root"");; if (!f || f->IsZombie()) {; printf(""Please run <ROOT location>/tutorials/hsimple.C before."");; return;; }; TNtuple* ntuple = (TNtuple*)f->Get(""ntuple"");; TString varexp = ""px:py:pz:random:sin(px):log(px/py):log(pz)"";; TString selectStr = ""px>0 && py>0 && pz>0"";; TString options = ""average"";; TSpider *spider = new TSpider(ntuple,varexp.Data(),selectStr.Data(),options.Data());; spider->Draw();; c1->ToggleEditor();; c1->Selected(c1,spider,1);; return c1;; }. Function Members (Methods); public:. virtual~TSpider(); voidTObject::AbstractMethod(const char* method) const; voidAddSuperposed(TSpider* sp); voidAddVariable(const char* varexp)MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clo",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpider.html:1950,Usability,Clear,Clear,1950," virtual~TSpider(); voidTObject::AbstractMethod(const char* method) const; voidAddSuperposed(TSpider* sp); voidAddVariable(const char* varexp)MENU ; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clo",MatchSource.WIKI,root/html604/TSpider.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpider.html
https://root.cern/root/html604/TSpiderEditor.html:4757,Availability,Error,Error,4757,"const char* signal); voidTQObject::Emit(const char* signal, Long_t* paramArr); voidTQObject::Emit(const char* signal, const char* params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBa",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:4886,Availability,error,error,4886," params); voidTQObject::Emit(const char* signal, Double_t param); voidTQObject::Emit(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const;",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:4970,Availability,error,error,4970,"(const char* signal, Long_t param); voidTQObject::Emit(const char* signal, Long64_t param); voidTQObject::Emit(const char* signal, Bool_t param); voidTQObject::Emit(const char* signal, Char_t param); voidTQObject::Emit(const char* signal, UChar_t param); voidTQObject::Emit(const char* signal, Short_t param); voidTQObject::Emit(const char* signal, UShort_t param); voidTQObject::Emit(const char* signal, Int_t param); voidTQObject::Emit(const char* signal, UInt_t param); voidTQObject::Emit(const char* signal, ULong_t param); voidTQObject::Emit(const char* signal, ULong64_t param); voidTQObject::Emit(const char* signal, Float_t param); voidTQObject::EmitVA(const char* signal, Int_t nargs, va_list va); voidTQObject::EmitVA<>(const char* signal_name, Int_t); virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTObject::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual TGFrameElement*TGCompositeFrame::FindFrameElement(TGFrame* f) const; virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Pixel_tTGFrame::GetBackground() const; static const TGGC&TGFrame::GetBckgndGC(); static const TGGC&TGFrame::GetBlackGC(); static Pixel_tTGFrame::GetBlackPixel(); Int_tTGFrame::GetBorderWidth() const; TGClient*TGObject::GetClient() const; static Int_tTGWindow::GetCounter(); static Pixel_tTGFrame::GetDefaultFrameBackground(); virtual UInt_tTGCompositeFrame::GetDefaultHeight() const; static Pixel_tTGFrame::GetDefaultSelectedBackground(); virtual TGDimensionTGCompositeFrame::GetDefaultSize() const; virtual UInt_tTGCompositeFrame::GetDefaultWidth() const; virtual TDNDData*TGFrame::GetDNDData(Atom_t); virtual Int_tTGFrame::GetDragType() c",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:19347,Availability,mask,mask,19347,"arAdd variable field.; TGColorSelect*fAvFillColorSelectfill color widget for the average.; TGedPatternSelect*fAvFillPatternSelectfill pattern widget for the average.; TGColorSelect*fAvLineColorSelectline color widget for the average.; TGLineStyleComboBox*fAvLineStyleComboline style combo box for the average.; TGLineWidthComboBox*fAvLineWidthComboline width combo box for the average.; Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; TGButtonGroup*fBgroupGroup of the plot type selection.; Int_tTGFrame::fBorderWidthframe border width; TGCompositeFrame*fBrowseBrowse tab.; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; TGTextEntry*fDeleteVarDelete variable field.; TGCheckButton*fDisplayAverageButton for the display of the average.; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; TGNumberEntryField*fGotoEntryJump to an entry field.; TGPictureButton*fGotoFollowingGo to next entry button.; TGPictureButton*fGotoNextGo to next entries button.; TGPictureButton*fGotoPrecedingGo to last entry button.; TGPictureButton*fGotoPreviousGo to previous entries button.; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListcontainer of frame elements; TList*TQObject::fListOfConnections! list of connections to this object; TList*TQObject::fListOfSignals! list of signals from this object; Bool_tTGCompositeFrame::fMapSubwindowskTRUE - map subwindows; UInt_tTGFrame::fMaxHeightmaximal frame height; UInt_tTGFrame::fMaxWidthmaxim",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:15630,Deployability,Update,Update,15630,"undColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSpiderEditor(const TSpiderEditor&); TSpiderEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:386,Integrability,interface,interface,386,". TSpiderEditor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TSpiderEditor. class TSpiderEditor: public TGedFrame. The TSpider editor class; Provides the graphical user interface to the spider plots.; . Function Members (Methods); public:. virtual~TSpiderEditor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const c",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:11025,Integrability,Message,Message,11025,"TGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow::LowerWindow(); virtual voidTQObject::LowPriority(const char* signal_name, const char* slot_name = 0); virtual voidTObject::ls(Option_t* option = """") const; virtual voidTGFrame::MapRaised(); virtual voidTGCompositeFrame::MapSubwindows(); virtual voidTGFrame::MapWindow(); voidTObject::MayNotUse(const char* method) const; virtual voidTQObject::Message(const char* msg)SIGNAL ; virtual voidTGFrame::Move(Int_t x, Int_t y); virtual voidTGFrame::MoveResize(Int_t x, Int_t y, UInt_t w = 0, UInt_t h = 0); virtual Int_tTGCompositeFrame::MustCleanup() const; virtual Bool_tTObject::Notify(); virtual Int_tTQObject::NumberOfConnections() const; virtual Int_tTQObject::NumberOfSignals() const; voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator new[](size_t sz, void* vp); TSpiderEditor&operator=(const TSpiderEditor&); virtual voidTObject::Paint(Option_t* option = """"); virtual voidTObject::Pop(); virtual voidTGCompositeFrame::Print(Option_t* option = """") const; vi",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:119,Modifiability,inherit,inheritance,119,". TSpiderEditor. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » TREE; » TREEVIEWER; » TSpiderEditor. class TSpiderEditor: public TGedFrame. The TSpider editor class; Provides the graphical user interface to the spider plots.; . Function Members (Methods); public:. virtual~TSpiderEditor(); voidTObject::AbstractMethod(const char* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const c",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:9608,Modifiability,Inherit,InheritsFrom,9608,"irtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() co",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:9674,Modifiability,Inherit,InheritsFrom,9674," Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWindow::IsMapped(); virtual Bool_tTGCompositeFrame::IsMapSubwindows() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTObject::IsSortable() const; Bool_tTGCompositeFrame::IsVisible(TGFrame* f) const; Bool_tTGCompositeFrame::IsVisible(TGFrameElement* ptr) const; Bool_tTObject::IsZombie() const; virtual voidTGCompositeFrame::Layout(); virtual voidTGWindow:",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:18410,Modifiability,variab,variable,18410,"tic TGWindow::EEditModeTGWindow::kEditDisableGrab; static TGWindow::EEditModeTGWindow::kEditDisableHeight; static TGWindow::EEditModeTGWindow::kEditDisableKeyEnable; static TGWindow::EEditModeTGWindow::kEditDisableLayout; static TGWindow::EEditModeTGWindow::kEditDisableResize; static TGWindow::EEditModeTGWindow::kEditDisableWidth; static TGWindow::EEditModeTGWindow::kEditEnable; static TObject::EStatusBitsTObject::kHasUUID; static TObject::EStatusBitsTObject::kInvalidObject; static TObject::(anonymous)TObject::kIsOnHeap; static TObject::EStatusBitsTObject::kIsReferenced; static TObject::EStatusBitsTObject::kMustCleanup; static TObject::EStatusBitsTObject::kNoContextMenu; static TObject::(anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGTextEntry*fAddVarAdd variable field.; TGColorSelect*fAvFillColorSelectfill color widget for the average.; TGedPatternSelect*fAvFillPatternSelectfill pattern widget for the average.; TGColorSelect*fAvLineColorSelectline color widget for the average.; TGLineStyleComboBox*fAvLineStyleComboline style combo box for the average.; TGLineWidthComboBox*fAvLineWidthComboline width combo box for the average.; Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; TGButtonGroup*fBgroupGroup of the plot type selection.; Int_tTGFrame::fBorderWidthframe border width; TGCompositeFrame*fBrowseBrowse tab.; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; TGTextEntry*fDeleteVarDelete variable field.; TGCheckButton*fDisplayAverageButton for the display of the average.; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged edit",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:19155,Modifiability,variab,variable,19155,"anonymous)TObject::kNotDeleted; static TObject::EStatusBitsTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. TGTextEntry*fAddVarAdd variable field.; TGColorSelect*fAvFillColorSelectfill color widget for the average.; TGedPatternSelect*fAvFillPatternSelectfill pattern widget for the average.; TGColorSelect*fAvLineColorSelectline color widget for the average.; TGLineStyleComboBox*fAvLineStyleComboline style combo box for the average.; TGLineWidthComboBox*fAvLineWidthComboline width combo box for the average.; Bool_tTGedFrame::fAvoidSignalflag for executing slots; Pixel_tTGFrame::fBackgroundframe background color; TGButtonGroup*fBgroupGroup of the plot type selection.; Int_tTGFrame::fBorderWidthframe border width; TGCompositeFrame*fBrowseBrowse tab.; TGClient*TGObject::fClientConnection to display server; Int_tTGFrame::fDNDStateEDNDFlags; TGTextEntry*fDeleteVarDelete variable field.; TGCheckButton*fDisplayAverageButton for the display of the average.; UInt_tTGWindow::fEditDisabledflags used for ""guibuilding""; UInt_tTGFrame::fEventMaskcurrenty active event mask; TList*TGedFrame::fExtraTabsaddtional tabs in ged editor; TGFrameElement*TGFrame::fFEpointer to frame element; TGedEditor*TGedFrame::fGedEditormanager of this frame; TGNumberEntryField*fGotoEntryJump to an entry field.; TGPictureButton*fGotoFollowingGo to next entry button.; TGPictureButton*fGotoNextGo to next entries button.; TGPictureButton*fGotoPrecedingGo to last entry button.; TGPictureButton*fGotoPreviousGo to previous entries button.; UInt_tTGFrame::fHeightframe height; Handle_tTGObject::fIdX11/Win32 Window identifier; Bool_tTGedFrame::fInitinit flag for setting signals/slots; Bool_tTGCompositeFrame::fLayoutBrokenno layout manager is used; TGLayoutManager*TGCompositeFrame::fLayoutManagerlayout manager; TList*TGCompositeFrame::fListco",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:22468,Modifiability,Inherit,Inheritance,22468,"frame width; Int_tTGFrame::fXframe x position; Int_tTGFrame::fYframe y position; static Bool_tTQObject::fgAllSignalsBlockedflag used for suppression of all signals; static const TGGC*TGFrame::fgBckgndGC; static const TGGC*TGFrame::fgBlackGC; static Pixel_tTGFrame::fgBlackPixel; static Int_tTGWindow::fgCountercounter of created windows in SavePrimitive; static Window_tTGFrame::fgDbw; static Int_tTGFrame::fgDbx; static Int_tTGFrame::fgDby; static Pixel_tTGFrame::fgDefaultFrameBackground; static TGLayoutHints*TGCompositeFrame::fgDefaultHintsdefault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGedFrame. ←; TSpiderEditor. Function documentation; TSpiderEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Normal constructor. ~TSpiderEditor(); Destructor of the TSpidereditor. void ConnectSignals2Slots(); Connect signals to slots. void MakeBrowse(); Make the Browse tab. void SetModel(TObject* obj); Pick up the used spider attributes. void DoAddVar(); Slot to add a variable. void DoAvLineStyle(Int_t ); Slot to set the average LineStyle. void DoAvLineWidth(Int_t ); Slot to set the average LineWidth. void DoAvLineColor(Pixel_t ); Slot to set the average LineColor. void DoAvFillColor(Pixel_t ); Slot to set the average FillColor. void DoAvFillPattern(Style_t ); Slot to set the average FillStyle. void DoDeleteVar(); Slot to delete a variable. void DoDisplayAverage(Bool_t av); Slot Connected to the average",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:23034,Modifiability,variab,variable,23034,"efault hints used by AddFrame(); static Pixel_tTGFrame::fgDefaultSelectedBackground; static const TGGC*TGFrame::fgHilightGC; static Bool_tTGFrame::fgInit; static UInt_tTGFrame::fgLastButton; static Time_tTGFrame::fgLastClick; static const TGGC*TGFrame::fgShadowGC; static UInt_tTGFrame::fgUserColor; static const TGGC*TGFrame::fgWhiteGC; static Pixel_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGedFrame. ←; TSpiderEditor. Function documentation; TSpiderEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Normal constructor. ~TSpiderEditor(); Destructor of the TSpidereditor. void ConnectSignals2Slots(); Connect signals to slots. void MakeBrowse(); Make the Browse tab. void SetModel(TObject* obj); Pick up the used spider attributes. void DoAddVar(); Slot to add a variable. void DoAvLineStyle(Int_t ); Slot to set the average LineStyle. void DoAvLineWidth(Int_t ); Slot to set the average LineWidth. void DoAvLineColor(Pixel_t ); Slot to set the average LineColor. void DoAvFillColor(Pixel_t ); Slot to set the average FillColor. void DoAvFillPattern(Style_t ); Slot to set the average FillStyle. void DoDeleteVar(); Slot to delete a variable. void DoDisplayAverage(Bool_t av); Slot Connected to the average display. void DoGotoEntry(); Slot to select an entry by number. void DoGotoNext(); Slot to Go to next entries. void DoGotoPrevious(); Slot to go to previous entries. void DoGotoFollowing(); Slot to go to next entry. void DoGotoPreceding(); Slot to go to last entry. void DoSetNx(); Slot connected to the nx setting. void DoSetNy(); Slot connected to the nx setting. void DoSetPlotType(); Slot to set the plot type. TSpiderEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefault",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:23404,Modifiability,variab,variable,23404,"_tTGFrame::fgWhitePixel; static TGFrame::(anonymous)TGFrame::kDeleteWindowCalled. Class Charts. Inheritance Chart:. TObject. ←; TGObject. ←; TGWindow. TQObject. ←; TGFrame. ←; TGCompositeFrame. ←; TGedFrame. ←; TSpiderEditor. Function documentation; TSpiderEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); Normal constructor. ~TSpiderEditor(); Destructor of the TSpidereditor. void ConnectSignals2Slots(); Connect signals to slots. void MakeBrowse(); Make the Browse tab. void SetModel(TObject* obj); Pick up the used spider attributes. void DoAddVar(); Slot to add a variable. void DoAvLineStyle(Int_t ); Slot to set the average LineStyle. void DoAvLineWidth(Int_t ); Slot to set the average LineWidth. void DoAvLineColor(Pixel_t ); Slot to set the average LineColor. void DoAvFillColor(Pixel_t ); Slot to set the average FillColor. void DoAvFillPattern(Style_t ); Slot to set the average FillStyle. void DoDeleteVar(); Slot to delete a variable. void DoDisplayAverage(Bool_t av); Slot Connected to the average display. void DoGotoEntry(); Slot to select an entry by number. void DoGotoNext(); Slot to Go to next entries. void DoGotoPrevious(); Slot to go to previous entries. void DoGotoFollowing(); Slot to go to next entry. void DoGotoPreceding(); Slot to go to last entry. void DoSetNx(); Slot connected to the nx setting. void DoSetNy(); Slot connected to the nx setting. void DoSetPlotType(); Slot to set the plot type. TSpiderEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()). » Author: Bastien Dalla Piazza 20/07/07 » Copyright (C) 1995-2007, Rene Brun and Fons Rademakers. *; » Last changed: root/treeviewer:$Id$ » Last generated: 2015-06-02 16:33; This page has been automatically generated. For comments or suggestions regarding the documentation or ROOT in general please send a mail to ROOT support. ",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:9318,Security,Hash,Hash,9318,"t_t, Int_t); virtual Bool_tTGCompositeFrame::HandleDoubleClick(Event_t*); virtual Bool_tTGCompositeFrame::HandleDragDrop(TGFrame* frame, Int_t x, Int_t y, TGLayoutHints* lo); virtual Bool_tTGCompositeFrame::HandleDragEnter(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragLeave(TGFrame*); virtual Bool_tTGCompositeFrame::HandleDragMotion(TGFrame*); virtual Bool_tTGFrame::HandleEvent(Event_t* event); virtual Bool_tTGWindow::HandleExpose(Event_t* event); virtual Bool_tTGCompositeFrame::HandleFocusChange(Event_t*); virtual Bool_tTGWindow::HandleIdleEvent(TGIdleHandler*); virtual Bool_tTGCompositeFrame::HandleKey(Event_t*); virtual Bool_tTGCompositeFrame::HandleMotion(Event_t*); virtual Bool_tTGCompositeFrame::HandleSelection(Event_t*); virtual Bool_tTGFrame::HandleSelectionClear(Event_t*); virtual Bool_tTGFrame::HandleSelectionRequest(Event_t*); virtual Bool_tTGWindow::HandleTimer(TTimer*); virtual Bool_tTQObject::HasConnection(const char* signal_name) const; virtual ULong_tTGObject::Hash() const; virtual voidTGCompositeFrame::HideFrame(TGFrame* f); virtual voidTQObject::HighPriority(const char* signal_name, const char* slot_name = 0); virtual voidTGWindow::IconifyWindow(); virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTGFrame::Inspect() const; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTGFrame::IsActive() const; Bool_tTGCompositeFrame::IsArranged(TGFrame* f) const; Bool_tTGCompositeFrame::IsArranged(TGFrameElement* ptr) const; virtual Bool_tTGCompositeFrame::IsComposite() const; Bool_tTGFrame::IsDNDSource() const; Bool_tTGFrame::IsDNDTarget() const; virtual Bool_tTGCompositeFrame::IsEditable() const; virtual Bool_tTGObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; virtual Bool_tTGCompositeFrame::IsLayoutBroken() const; virtual Bool_tTGWi",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:15209,Testability,Test,TestBit,15209,"undColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSpiderEditor(const TSpiderEditor&); TSpiderEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:15248,Testability,Test,TestBits,15248,"undColor(Pixel_t); voidTGFrame::SetFrameElement(TGFrameElement* fe); virtual voidTGedFrame::SetGedEditor(TGedEditor* ed); virtual voidTGFrame::SetHeight(UInt_t h); virtual voidTGCompositeFrame::SetLayoutBroken(Bool_t on = kTRUE); virtual voidTGCompositeFrame::SetLayoutManager(TGLayoutManager* l); virtual voidTGCompositeFrame::SetMapSubwindows(Bool_t on); virtual voidTGFrame::SetMaxHeight(UInt_t h); virtual voidTGFrame::SetMaxWidth(UInt_t w); virtual voidTGFrame::SetMinHeight(UInt_t h); virtual voidTGFrame::SetMinWidth(UInt_t w); virtual voidSetModel(TObject* obj); voidTGedFrame::SetModelClass(TClass* mcl); virtual voidTGWindow::SetName(const char* name); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTGFrame::SetSize(const TGDimension& s); virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidTGFrame::SetWidth(UInt_t w); virtual voidTGWindow::SetWindowName(const char* name = 0); virtual voidTGFrame::SetX(Int_t x); virtual voidTGFrame::SetY(Int_t y); virtual voidTGCompositeFrame::ShowFrame(TGFrame* f); virtual voidShowMembers(TMemberInspector& insp) const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; virtual Bool_tTGCompositeFrame::TranslateCoordinates(TGFrame* child, Int_t x, Int_t y, Int_t& fx, Int_t& fy); TSpiderEditor(const TSpiderEditor&); TSpiderEditor(const TGWindow* p = 0, Int_t width = 140, Int_t height = 30, UInt_t options = kChildFrame, Pixel_t back = GetDefaultFrameBackground()); virtual voidTGFrame::UnmapWindow(); virtual voidTGedFrame::Update(); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpiderEditor.html:1515,Usability,Clear,Clear,1515,"ar* method) const; virtual Bool_tTGedFrame::AcceptModel(TObject*); virtual voidTGFrame::Activate(Bool_t); virtual voidTGedFrame::ActivateBaseClassEditors(TClass* cl); virtual voidTGedFrame::AddExtraTab(TGedFrame::TGedSubFrame* sf); virtual voidTGCompositeFrame::AddFrame(TGFrame* f, TGLayoutHints* l = 0); voidTGFrame::AddInput(UInt_t emask); virtual voidTObject::AppendPad(Option_t* option = """"); static Bool_tTQObject::AreAllSignalsBlocked(); Bool_tTQObject::AreSignalsBlocked() const; static Bool_tTQObject::BlockAllSignals(Bool_t b); Bool_tTQObject::BlockSignals(Bool_t b); virtual voidTObject::Browse(TBrowser* b); virtual voidTGFrame::ChangeBackground(Pixel_t back); virtual voidTQObject::ChangedBy(const char* method)SIGNAL ; virtual voidTGCompositeFrame::ChangeOptions(UInt_t options); virtual voidTGCompositeFrame::ChangeSubframesBackground(Pixel_t back); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTGCompositeFrame::Cleanup(); virtual voidTObject::Clear(Option_t* = """"); virtual TObject*TObject::Clone(const char* newname = """") const; voidTQObject::CollectClassSignalLists(TList& list, TClass* cls); virtual Int_tTObject::Compare(const TObject* obj) const; Bool_tTQObject::Connect(const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(TQObject* sender, const char* signal, const char* receiver_class, void* receiver, const char* slot); static Bool_tTQObject::Connect(const char* sender_class, const char* signal, const char* receiver_class, void* receiver, const char* slot); virtual voidTQObject::Connected(const char*); Bool_tTGFrame::Contains(Int_t x, Int_t y) const; virtual voidTObject::Copy(TObject& object) const; virtual TGVerticalFrame*TGedFrame::CreateEditorTabSubFrame(const char* name); virtual voidTGFrame::Delete(Option_t* = """"); virtual voidTGFrame::DeleteWindow(); virtual voidTQObject::Destroyed()SIGNAL ; virtual voidTGWindow::DestroySubwindows(); virtual voidTGWindow::Des",MatchSource.WIKI,root/html604/TSpiderEditor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpiderEditor.html
https://root.cern/root/html604/TSpline.html:574,Availability,avail,available,574,". TSpline. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TSpline. class TSpline: public TNamed, public TAttLine, public TAttFill, public TAttMarker. TSpline. Base class for spline implementation containing the Draw/Paint; methods. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSpline(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) c",MatchSource.WIKI,root/html604/TSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline.html
https://root.cern/root/html604/TSpline.html:1501,Availability,Error,Error,1501," virtual~TSpline(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) c",MatchSource.WIKI,root/html604/TSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline.html
https://root.cern/root/html604/TSpline.html:1670,Availability,error,error,1670,") const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tGetDelta() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1F*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual voidGetKnot(Int_t i, Double_t& x, Double_t& y) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual St",MatchSource.WIKI,root/html604/TSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline.html
https://root.cern/root/html604/TSpline.html:1754,Availability,error,error,1754,":Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; virtual Double_tGetDelta() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1F*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual voidGetKnot(Int_t i, Double_t& x, Double_t& y) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const;",MatchSource.WIKI,root/html604/TSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline.html
https://root.cern/root/html604/TSpline.html:113,Modifiability,inherit,inheritance,113,". TSpline. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TSpline. class TSpline: public TNamed, public TAttLine, public TAttFill, public TAttMarker. TSpline. Base class for spline implementation containing the Draw/Paint; methods. Function Members (Methods);      This is an abstract class, constructors will not be documented.;     Look at the header to check for available constructors.; public:. virtual~TSpline(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) c",MatchSource.WIKI,root/html604/TSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline.html
https://root.cern/root/html604/TSpline.html:3301,Modifiability,Inherit,InheritsFrom,3301,"st; virtual const char*TObject::GetIconName() const; virtual voidGetKnot(Int_t i, Double_t& x, Double_t& y) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNp() const; virtual Int_tGetNpx() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetXmax() const; virtual Double_tGetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); ",MatchSource.WIKI,root/html604/TSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline.html
https://root.cern/root/html604/TSpline.html:3367,Modifiability,Inherit,InheritsFrom,3367,"etKnot(Int_t i, Double_t& x, Double_t& y) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNp() const; virtual Int_tGetNpx() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetXmax() const; virtual Double_tGetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator ne",MatchSource.WIKI,root/html604/TSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline.html
https://root.cern/root/html604/TSpline.html:9122,Modifiability,Inherit,Inheritance,9122,"sTObject::kObjInCanvas; static TObject::(anonymous)TObject::kOverwrite; static TObject::(anonymous)TObject::kSingleKey; static TObject::(anonymous)TObject::kWriteDelete; static TObject::(anonymous)TObject::kZombie. protected:. Double_tfDeltaDistance between equidistant knots; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TGraph*fGraphGraph for drawing the knots; TH1F*fHistogramTemporary histogram; Bool_tfKstepTrue of equidistant knots; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; TStringTNamed::fNameobject identifier; Int_tfNpNumber of knots; Int_tfNpxNumber of points used for graphical representation; TStringTNamed::fTitleobject title; Double_tfXmaxMaximum value of abscissa; Double_tfXminMinimum value of abscissa. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAttMarker. ←; TSpline. ←. TMVA::TSpline1. TMVA::TSpline2. TSpline3. TSpline5. Function documentation; TSpline(const TSpline& ); copy constructor. ~TSpline(); destructor. TSpline& operator=(const TSpline& ); assignment operator. void Draw(Option_t* option = """"); Draw this function with its current attributes. Possible option values are:; ""SAME"" superimpose on top of existing picture; ""L"" connect all computed points with a straight line; ""C"" connect all computed points with a smooth curve.; ""P"" add a polymarker at each knot. Note that the default value is ""L"". Therefore to draw on top; of an existing picture, specify option ""LSAME"". Int_t DistancetoPrimitive(Int_t px, Int_t py); Compute distance from point px,py to a spline. void ExecuteEvent(Int_t event, Int_t px, Int_t py); Execute action corresponding to one event. void Paint(Option_t* option = """"); Paint this function with its current attributes. void Streamer(TBuffer& ); Stream an ",MatchSource.WIKI,root/html604/TSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline.html
https://root.cern/root/html604/TSpline.html:3191,Security,Hash,Hash,3191,"tual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1F*GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual voidGetKnot(Int_t i, Double_t& x, Double_t& y) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual Int_tGetNp() const; virtual Int_tGetNpx() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tGetXmax() const; virtual Double_tGetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delet",MatchSource.WIKI,root/html604/TSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline.html
https://root.cern/root/html604/TSpline.html:6898,Testability,Test,TestBit,6898,"oidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNpx(Int_t n); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpline(); TSpline(const char* title, Double_t delta, Double_t xmin, Double_t xmax, Int_t np, Bool_t step); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline.html
https://root.cern/root/html604/TSpline.html:6937,Testability,Test,TestBits,6937,"oidTObject::SetBit(UInt_t f, Bool_t set); virtual voidTObject::SetDrawOption(Option_t* option = """")MENU ; static voidTObject::SetDtorOnly(void* obj); virtual voidTAttFill::SetFillAttributes()MENU ; virtual voidTAttFill::SetFillColor(Color_t fcolor); virtual voidTAttFill::SetFillColorAlpha(Color_t fcolor, Float_t falpha); virtual voidTAttFill::SetFillStyle(Style_t fstyle); virtual voidTAttLine::SetLineAttributes()MENU ; virtual voidTAttLine::SetLineColor(Color_t lcolor); virtual voidTAttLine::SetLineColorAlpha(Color_t lcolor, Float_t lalpha); virtual voidTAttLine::SetLineStyle(Style_t lstyle); virtual voidTAttLine::SetLineWidth(Width_t lwidth); virtual voidTAttMarker::SetMarkerAttributes()MENU ; virtual voidTAttMarker::SetMarkerColor(Color_t mcolor = 1); virtual voidTAttMarker::SetMarkerColorAlpha(Color_t mcolor, Float_t malpha); virtual voidTAttMarker::SetMarkerSize(Size_t msize = 1); virtual voidTAttMarker::SetMarkerStyle(Style_t mstyle = 1); virtual voidTNamed::SetName(const char* name)MENU ; virtual voidTNamed::SetNameTitle(const char* name, const char* title); voidSetNpx(Int_t n); static voidTObject::SetObjectStat(Bool_t stat); virtual voidTNamed::SetTitle(const char* title = """")MENU ; virtual voidTObject::SetUniqueID(UInt_t uid); virtual voidShowMembers(TMemberInspector& insp) const; virtual Int_tTNamed::Sizeof() const; virtual voidStreamer(TBuffer&); voidStreamerNVirtual(TBuffer& ClassDef_StreamerNVirtual_b); virtual voidTObject::SysError(const char* method, const char* msgfmt) const; Bool_tTObject::TestBit(UInt_t f) const; Int_tTObject::TestBits(UInt_t f) const; TSpline(); TSpline(const char* title, Double_t delta, Double_t xmin, Double_t xmax, Int_t np, Bool_t step); virtual voidTObject::UseCurrentStyle(); virtual voidTObject::Warning(const char* method, const char* msgfmt) const; virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0); virtual Int_tTObject::Write(const char* name = 0, Int_t option = 0, Int_t bufsize = 0) const.",MatchSource.WIKI,root/html604/TSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline.html
https://root.cern/root/html604/TSpline.html:869,Usability,Clear,Clear,869," virtual~TSpline(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tDistancetoPrimitive(Int_t px, Int_t py); virtual voidDraw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) c",MatchSource.WIKI,root/html604/TSpline.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline.html
https://root.cern/root/html604/TSpline3.html:1378,Availability,Error,Error,1378," virtual~TSpline3(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDerivative(Double_t x) const; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTSpline::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTSpline::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTSpline::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tFindX(Double_t x) const; voidGetCoeff(In",MatchSource.WIKI,root/html604/TSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline3.html
https://root.cern/root/html604/TSpline3.html:1547,Availability,error,error,1547," = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDerivative(Double_t x) const; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTSpline::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTSpline::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTSpline::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tFindX(Double_t x) const; voidGetCoeff(Int_t i, Double_t& x, Double_t& y, Double_t& b, Double_t& c, Double_t& d); virtual Double_tTSpline::GetDelta() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1F*TSpline::GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual voidGetKnot(Int_t i, Double_t& x, Double_t& y) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Widt",MatchSource.WIKI,root/html604/TSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline3.html
https://root.cern/root/html604/TSpline3.html:1631,Availability,error,error,1631,"st char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDerivative(Double_t x) const; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTSpline::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTSpline::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTSpline::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tFindX(Double_t x) const; voidGetCoeff(Int_t i, Double_t& x, Double_t& y, Double_t& b, Double_t& c, Double_t& d); virtual Double_tTSpline::GetDelta() const; virtual Option_t*TObject::GetDrawOption() const; static Long_tTObject::GetDtorOnly(); virtual Color_tTAttFill::GetFillColor() const; virtual Style_tTAttFill::GetFillStyle() const; TH1F*TSpline::GetHistogram() const; virtual const char*TObject::GetIconName() const; virtual voidGetKnot(Int_t i, Double_t& x, Double_t& y) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const",MatchSource.WIKI,root/html604/TSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline3.html
https://root.cern/root/html604/TSpline3.html:114,Modifiability,inherit,inheritance,114,". TSpline3. Quick Links:; ROOT Homepage; Class Index; Class Hierarchy. Search. Source:; header file; source file; inheritance tree (.pdf) viewVC header viewVC source. Sections:; class description; function members; data members; class charts. ROOT; » HIST; » HIST; » TSpline3. class TSpline3: public TSpline. TSpline. Base class for spline implementation containing the Draw/Paint; methods. Function Members (Methods); public:. virtual~TSpline3(); voidTObject::AbstractMethod(const char* method) const; virtual voidTObject::AppendPad(Option_t* option = """"); virtual voidTObject::Browse(TBrowser* b); static TClass*Class(); virtual const char*TObject::ClassName() const; virtual voidTNamed::Clear(Option_t* option = """"); virtual TObject*TNamed::Clone(const char* newname = """") const; virtual Int_tTNamed::Compare(const TObject* obj) const; virtual voidTNamed::Copy(TObject& named) const; virtual voidTObject::Delete(Option_t* option = """")MENU ; Double_tDerivative(Double_t x) const; Int_tTAttLine::DistancetoLine(Int_t px, Int_t py, Double_t xp1, Double_t yp1, Double_t xp2, Double_t yp2); virtual Int_tTSpline::DistancetoPrimitive(Int_t px, Int_t py); virtual voidTSpline::Draw(Option_t* option = """"); virtual voidTObject::DrawClass() constMENU ; virtual TObject*TObject::DrawClone(Option_t* option = """") constMENU ; virtual voidTObject::Dump() constMENU ; virtual voidTObject::Error(const char* method, const char* msgfmt) const; virtual Double_tEval(Double_t x) const; virtual voidTObject::Execute(const char* method, const char* params, Int_t* error = 0); virtual voidTObject::Execute(TMethod* method, TObjArray* params, Int_t* error = 0); virtual voidTSpline::ExecuteEvent(Int_t event, Int_t px, Int_t py); virtual voidTObject::Fatal(const char* method, const char* msgfmt) const; virtual voidTNamed::FillBuffer(char*& buffer); virtual TObject*TObject::FindObject(const char* name) const; virtual TObject*TObject::FindObject(const TObject* obj) const; Int_tFindX(Double_t x) const; voidGetCoeff(In",MatchSource.WIKI,root/html604/TSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline3.html
https://root.cern/root/html604/TSpline3.html:3359,Modifiability,Inherit,InheritsFrom,3359,"conName() const; virtual voidGetKnot(Int_t i, Double_t& x, Double_t& y) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual Int_tTSpline::GetNp() const; virtual Int_tTSpline::GetNpx() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tTSpline::GetXmax() const; virtual Double_tTSpline::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); ",MatchSource.WIKI,root/html604/TSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline3.html
https://root.cern/root/html604/TSpline3.html:3425,Modifiability,Inherit,InheritsFrom,3425,"t& y) const; virtual Color_tTAttLine::GetLineColor() const; virtual Style_tTAttLine::GetLineStyle() const; virtual Width_tTAttLine::GetLineWidth() const; virtual Color_tTAttMarker::GetMarkerColor() const; virtual Size_tTAttMarker::GetMarkerSize() const; virtual Style_tTAttMarker::GetMarkerStyle() const; virtual const char*TNamed::GetName() const; virtual Int_tTSpline::GetNp() const; virtual Int_tTSpline::GetNpx() const; virtual char*TObject::GetObjectInfo(Int_t px, Int_t py) const; static Bool_tTObject::GetObjectStat(); virtual Option_t*TObject::GetOption() const; virtual const char*TNamed::GetTitle() const; virtual UInt_tTObject::GetUniqueID() const; virtual Double_tTSpline::GetXmax() const; virtual Double_tTSpline::GetXmin() const; virtual Bool_tTObject::HandleTimer(TTimer* timer); virtual ULong_tTNamed::Hash() const; virtual voidTObject::Info(const char* method, const char* msgfmt) const; virtual Bool_tTObject::InheritsFrom(const char* classname) const; virtual Bool_tTObject::InheritsFrom(const TClass* cl) const; virtual voidTObject::Inspect() constMENU ; voidTObject::InvertBit(UInt_t f); virtual TClass*IsA() const; virtual Bool_tTObject::IsEqual(const TObject* obj) const; virtual Bool_tTObject::IsFolder() const; Bool_tTObject::IsOnHeap() const; virtual Bool_tTNamed::IsSortable() const; virtual Bool_tTAttFill::IsTransparent() const; Bool_tTObject::IsZombie() const; virtual voidTNamed::ls(Option_t* option = """") const; voidTObject::MayNotUse(const char* method) const; virtual voidTAttLine::Modify(); virtual Bool_tTObject::Notify(); voidTObject::Obsolete(const char* method, const char* asOfVers, const char* removedFromVers) const; voidTObject::operator delete(void* ptr); voidTObject::operator delete(void* ptr, void* vp); voidTObject::operator delete[](void* ptr); voidTObject::operator delete[](void* ptr, void* vp); void*TObject::operator new(size_t sz); void*TObject::operator new(size_t sz, void* vp); void*TObject::operator new[](size_t sz); void*TObject::operator ne",MatchSource.WIKI,root/html604/TSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline3.html
https://root.cern/root/html604/TSpline3.html:10421,Modifiability,Inherit,Inheritance,10421,"cond, 1=first derivative, 2=second derivative; Color_tTAttFill::fFillColorfill area color; Style_tTAttFill::fFillStylefill area style; TGraph*TSpline::fGraphGraph for drawing the knots; TH1F*TSpline::fHistogramTemporary histogram; Bool_tTSpline::fKstepTrue of equidistant knots; Color_tTAttLine::fLineColorline color; Style_tTAttLine::fLineStyleline style; Width_tTAttLine::fLineWidthline width; Color_tTAttMarker::fMarkerColorMarker color index; Size_tTAttMarker::fMarkerSizeMarker size; Style_tTAttMarker::fMarkerStyleMarker style; TStringTNamed::fNameobject identifier; Int_tTSpline::fNpNumber of knots; Int_tTSpline::fNpxNumber of points used for graphical representation; TSplinePoly3*fPoly[fNp] Array of polynomial terms; TStringTNamed::fTitleobject title; Double_tfValBegInitial value of first or second derivative; Double_tfValEndEnd value of first or second derivative; Double_tTSpline::fXmaxMaximum value of abscissa; Double_tTSpline::fXminMinimum value of abscissa. Class Charts. Inheritance Chart:. TObject. ←; TNamed. TAttLine. TAttFill. TAttMarker. ←; TSpline. ←; TSpline3. Function documentation; TSpline3(const char *title, Double_t x[], Double_t y[], Int_t n, const char *opt, Double_t valbeg, Double_t valend); Third spline creator given an array of; arbitrary knots in increasing abscissa order and; possibly end point conditions. TSpline3(const char *title, Double_t xmin, Double_t xmax, Double_t y[], Int_t n, const char *opt, Double_t valbeg, Double_t valend); Third spline creator given an array of; arbitrary function values on equidistant n abscissa; values from xmin to xmax and possibly end point conditions. TSpline3(const char* title, Double_t[] x, const TF1* func, Int_t n, const char* opt = 0, Double_t valbeg = 0, Double_t valend = 0); Third spline creator given an array of; arbitrary abscissas in increasing order and a function; to interpolate and possibly end point conditions. TSpline3(const char* title, Double_t xmin, Double_t xmax, const TF1* func, Int_t n, co",MatchSource.WIKI,root/html604/TSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline3.html
https://root.cern/root/html604/TSpline3.html:12314,Modifiability,variab,variables,12314,"o interpolate and possibly end point conditions. TSpline3(const char* title, Double_t xmin, Double_t xmax, const TF1* func, Int_t n, const char* opt = 0, Double_t valbeg = 0, Double_t valend = 0); Third spline creator given a function to be; evaluated on n equidistand abscissa points between xmin; and xmax and possibly end point conditions. TSpline3(const char* title, const TGraph* g, const char* opt = 0, Double_t valbeg = 0, Double_t valend = 0); Third spline creator given a TGraph with; abscissa in increasing order and possibly end; point conditions. TSpline3(const TH1* h, const char* opt = 0, Double_t valbeg = 0, Double_t valend = 0); Third spline creator given a TH1. TSpline3(const TSpline3& ); copy constructor. TSpline3& operator=(const TSpline3& ); assignment operator. void SetCond(const char* opt); Check the boundary conditions. void Test(); Test method for TSpline5. n number of data points.; m 2*m-1 is order of spline.; m = 2 always for third spline.; nn,nm1,mm,; mm1,i,k,; j,jj temporary integer variables.; z,p temporary double precision variables.; x[n] the sequence of knots.; y[n] the prescribed function values at the knots.; a[200][4] two dimensional array whose columns are; the computed spline coefficients; diff[3] maximum values of differences of values and; derivatives to right and left of knots.; com[3] maximum values of coefficients. test of TSpline3 with nonequidistant knots and; equidistant knots follows. Int_t FindX(Double_t x) const; Find X. Double_t Eval(Double_t x) const; Eval this spline at x. Double_t Derivative(Double_t x) const; Derivative. void SaveAs(const char* filename, Option_t* option = """") const; write this spline as a C++ function that can be executed without ROOT; the name of the function is the name of the file up to the ""."" if any. void SavePrimitive(ostream& out, Option_t* option = """"); Save primitive as a C++ statement(s) on output stream out. void SetPoint(Int_t i, Double_t x, Double_t y); set point number i. void SetPointCoeff",MatchSource.WIKI,root/html604/TSpline3.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/root/html604/TSpline3.html
