id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/master/classTMessageHandler.html:716,Integrability,message,message,716,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:745,Integrability,message,message,745,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:838,Integrability,message,message,838,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:884,Integrability,message,message,884,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:933,Integrability,message,message,933,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:979,Integrability,message,message,979,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:1139,Integrability,message,message,1139," all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:1200,Integrability,message,message,1200," all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:1296,Integrability,message,message,1296,"ndler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:1351,Integrability,message,message,1351,"ndler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:1417,Integrability,message,message,1417," system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (T",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:1470,Integrability,message,message,1470,"enerated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:1501,Integrability,message,messages,1501,"enerated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:1624,Integrability,message,message,1624," message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:1749,Integrability,message,messages,1749,"more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructo",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:1865,Integrability,message,message,1865,"s message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newnam",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:2156,Integrability,message,message,2156,";  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TN",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:2215,Integrability,message,message,2215,"  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:2248,Integrability,message,messages,2248,"  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:5670,Integrability,message,message,5670,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:6211,Integrability,message,message,6211,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:7201,Integrability,message,message,7201,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:10166,Integrability,message,message,10166,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class s",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:10539,Integrability,message,message,10539," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, voi",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:17815,Integrability,message,message,17815,"otype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMessageHandler.h>. Inheritance diagram for TMessageHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMessageHandler() [1/2]. TMessageHandler::TMessageHandler ; (; const TClass * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class cl and add it to the list of message handlers. ; Definition at line 41 of file TMessageHandler.cxx. ◆ TMessageHandler() [2/2]. TMessageHandler::TMessageHandler ; (; const char * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class named cl and add it to the list of message handlers. ; Definition at line 63 of file TMessageHandler.cxx. ◆ ~TMessageHandler(). TMessageHandler::~TMessageHandler ; (; ). virtual . Clean up the message handler. ; Definition at line 82 of file TMessageHandler.cxx. Member Function Documentation. ◆ Add(). void TMessageHandler::Add ; (; ). virtual . Add this message handler to the list of messages handlers. ; Definition at line 93 of file TMessageHandler.cxx. ◆ Added(). virtual void TMessageHandler::Added ; (; ). inlinevirtual . Definition at line 64 of file TMessageHandler.h. ◆ Class(). static TClass * TMessageHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMessageHandler::Class_Name ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:17870,Integrability,message,message,17870,"otype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMessageHandler.h>. Inheritance diagram for TMessageHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMessageHandler() [1/2]. TMessageHandler::TMessageHandler ; (; const TClass * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class cl and add it to the list of message handlers. ; Definition at line 41 of file TMessageHandler.cxx. ◆ TMessageHandler() [2/2]. TMessageHandler::TMessageHandler ; (; const char * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class named cl and add it to the list of message handlers. ; Definition at line 63 of file TMessageHandler.cxx. ◆ ~TMessageHandler(). TMessageHandler::~TMessageHandler ; (; ). virtual . Clean up the message handler. ; Definition at line 82 of file TMessageHandler.cxx. Member Function Documentation. ◆ Add(). void TMessageHandler::Add ; (; ). virtual . Add this message handler to the list of messages handlers. ; Definition at line 93 of file TMessageHandler.cxx. ◆ Added(). virtual void TMessageHandler::Added ; (; ). inlinevirtual . Definition at line 64 of file TMessageHandler.h. ◆ Class(). static TClass * TMessageHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMessageHandler::Class_Name ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:18070,Integrability,message,message,18070,"bject of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMessageHandler.h>. Inheritance diagram for TMessageHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMessageHandler() [1/2]. TMessageHandler::TMessageHandler ; (; const TClass * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class cl and add it to the list of message handlers. ; Definition at line 41 of file TMessageHandler.cxx. ◆ TMessageHandler() [2/2]. TMessageHandler::TMessageHandler ; (; const char * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class named cl and add it to the list of message handlers. ; Definition at line 63 of file TMessageHandler.cxx. ◆ ~TMessageHandler(). TMessageHandler::~TMessageHandler ; (; ). virtual . Clean up the message handler. ; Definition at line 82 of file TMessageHandler.cxx. Member Function Documentation. ◆ Add(). void TMessageHandler::Add ; (; ). virtual . Add this message handler to the list of messages handlers. ; Definition at line 93 of file TMessageHandler.cxx. ◆ Added(). virtual void TMessageHandler::Added ; (; ). inlinevirtual . Definition at line 64 of file TMessageHandler.h. ◆ Class(). static TClass * TMessageHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMessageHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMessageHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 68 of file TMessageHandler.h. ◆ DeclFileName(). static",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:18131,Integrability,message,message,18131,"bject of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMessageHandler.h>. Inheritance diagram for TMessageHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMessageHandler() [1/2]. TMessageHandler::TMessageHandler ; (; const TClass * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class cl and add it to the list of message handlers. ; Definition at line 41 of file TMessageHandler.cxx. ◆ TMessageHandler() [2/2]. TMessageHandler::TMessageHandler ; (; const char * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class named cl and add it to the list of message handlers. ; Definition at line 63 of file TMessageHandler.cxx. ◆ ~TMessageHandler(). TMessageHandler::~TMessageHandler ; (; ). virtual . Clean up the message handler. ; Definition at line 82 of file TMessageHandler.cxx. Member Function Documentation. ◆ Add(). void TMessageHandler::Add ; (; ). virtual . Add this message handler to the list of messages handlers. ; Definition at line 93 of file TMessageHandler.cxx. ◆ Added(). virtual void TMessageHandler::Added ; (; ). inlinevirtual . Definition at line 64 of file TMessageHandler.h. ◆ Class(). static TClass * TMessageHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMessageHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMessageHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 68 of file TMessageHandler.h. ◆ DeclFileName(). static",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:18289,Integrability,message,message,18289,"connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMessageHandler.h>. Inheritance diagram for TMessageHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMessageHandler() [1/2]. TMessageHandler::TMessageHandler ; (; const TClass * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class cl and add it to the list of message handlers. ; Definition at line 41 of file TMessageHandler.cxx. ◆ TMessageHandler() [2/2]. TMessageHandler::TMessageHandler ; (; const char * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class named cl and add it to the list of message handlers. ; Definition at line 63 of file TMessageHandler.cxx. ◆ ~TMessageHandler(). TMessageHandler::~TMessageHandler ; (; ). virtual . Clean up the message handler. ; Definition at line 82 of file TMessageHandler.cxx. Member Function Documentation. ◆ Add(). void TMessageHandler::Add ; (; ). virtual . Add this message handler to the list of messages handlers. ; Definition at line 93 of file TMessageHandler.cxx. ◆ Added(). virtual void TMessageHandler::Added ; (; ). inlinevirtual . Definition at line 64 of file TMessageHandler.h. ◆ Class(). static TClass * TMessageHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMessageHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMessageHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 68 of file TMessageHandler.h. ◆ DeclFileName(). static const char * TMessageHandler::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 68 of file TMessageHandler.h. ◆ GetMessageC",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:18452,Integrability,message,message,18452,";  . #include <TMessageHandler.h>. Inheritance diagram for TMessageHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMessageHandler() [1/2]. TMessageHandler::TMessageHandler ; (; const TClass * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class cl and add it to the list of message handlers. ; Definition at line 41 of file TMessageHandler.cxx. ◆ TMessageHandler() [2/2]. TMessageHandler::TMessageHandler ; (; const char * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class named cl and add it to the list of message handlers. ; Definition at line 63 of file TMessageHandler.cxx. ◆ ~TMessageHandler(). TMessageHandler::~TMessageHandler ; (; ). virtual . Clean up the message handler. ; Definition at line 82 of file TMessageHandler.cxx. Member Function Documentation. ◆ Add(). void TMessageHandler::Add ; (; ). virtual . Add this message handler to the list of messages handlers. ; Definition at line 93 of file TMessageHandler.cxx. ◆ Added(). virtual void TMessageHandler::Added ; (; ). inlinevirtual . Definition at line 64 of file TMessageHandler.h. ◆ Class(). static TClass * TMessageHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMessageHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMessageHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 68 of file TMessageHandler.h. ◆ DeclFileName(). static const char * TMessageHandler::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 68 of file TMessageHandler.h. ◆ GetMessageCount(). Int_t TMessageHandler::GetMessageCount ; (; Long_t ; messId); const. virtual . Return counter for message with ID=messid. ; Definition at line 108 of file TMessageHandler.cxx",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:18483,Integrability,message,messages,18483,";  . #include <TMessageHandler.h>. Inheritance diagram for TMessageHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMessageHandler() [1/2]. TMessageHandler::TMessageHandler ; (; const TClass * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class cl and add it to the list of message handlers. ; Definition at line 41 of file TMessageHandler.cxx. ◆ TMessageHandler() [2/2]. TMessageHandler::TMessageHandler ; (; const char * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class named cl and add it to the list of message handlers. ; Definition at line 63 of file TMessageHandler.cxx. ◆ ~TMessageHandler(). TMessageHandler::~TMessageHandler ; (; ). virtual . Clean up the message handler. ; Definition at line 82 of file TMessageHandler.cxx. Member Function Documentation. ◆ Add(). void TMessageHandler::Add ; (; ). virtual . Add this message handler to the list of messages handlers. ; Definition at line 93 of file TMessageHandler.cxx. ◆ Added(). virtual void TMessageHandler::Added ; (; ). inlinevirtual . Definition at line 64 of file TMessageHandler.h. ◆ Class(). static TClass * TMessageHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMessageHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMessageHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 68 of file TMessageHandler.h. ◆ DeclFileName(). static const char * TMessageHandler::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 68 of file TMessageHandler.h. ◆ GetMessageCount(). Int_t TMessageHandler::GetMessageCount ; (; Long_t ; messId); const. virtual . Return counter for message with ID=messid. ; Definition at line 108 of file TMessageHandler.cxx",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:19396,Integrability,message,message,19396,". void TMessageHandler::Add ; (; ). virtual . Add this message handler to the list of messages handlers. ; Definition at line 93 of file TMessageHandler.cxx. ◆ Added(). virtual void TMessageHandler::Added ; (; ). inlinevirtual . Definition at line 64 of file TMessageHandler.h. ◆ Class(). static TClass * TMessageHandler::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMessageHandler::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMessageHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 68 of file TMessageHandler.h. ◆ DeclFileName(). static const char * TMessageHandler::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 68 of file TMessageHandler.h. ◆ GetMessageCount(). Int_t TMessageHandler::GetMessageCount ; (; Long_t ; messId); const. virtual . Return counter for message with ID=messid. ; Definition at line 108 of file TMessageHandler.cxx. ◆ GetSender(). void * TMessageHandler::GetSender ; (; ). inlineoverrideprotectedvirtual . Reimplemented from TQObject.; Definition at line 45 of file TMessageHandler.h. ◆ GetSize(). Int_t TMessageHandler::GetSize ; (; ); const. inline . Definition at line 52 of file TMessageHandler.h. ◆ GetTotalMessageCount(). Int_t TMessageHandler::GetTotalMessageCount ; (; ); const. virtual . Return total number of messages. ; Definition at line 120 of file TMessageHandler.cxx. ◆ HandleDerived(). Bool_t TMessageHandler::HandleDerived ; (; ); const. inline . Definition at line 55 of file TMessageHandler.h. ◆ HandleMessage(). void TMessageHandler::HandleMessage ; (; Long_t ; id, . const TObject * ; obj . ). virtual . Store message origin, keep statistics and call Notify(). ; Definition at line 133 of file TMessageHandler.cxx. ◆ IsA(). TClass * TMessageHandler::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:19878,Integrability,message,messages,19878,"me of this class . ◆ Class_Version(). static constexpr Version_t TMessageHandler::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 68 of file TMessageHandler.h. ◆ DeclFileName(). static const char * TMessageHandler::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 68 of file TMessageHandler.h. ◆ GetMessageCount(). Int_t TMessageHandler::GetMessageCount ; (; Long_t ; messId); const. virtual . Return counter for message with ID=messid. ; Definition at line 108 of file TMessageHandler.cxx. ◆ GetSender(). void * TMessageHandler::GetSender ; (; ). inlineoverrideprotectedvirtual . Reimplemented from TQObject.; Definition at line 45 of file TMessageHandler.h. ◆ GetSize(). Int_t TMessageHandler::GetSize ; (; ); const. inline . Definition at line 52 of file TMessageHandler.h. ◆ GetTotalMessageCount(). Int_t TMessageHandler::GetTotalMessageCount ; (; ); const. virtual . Return total number of messages. ; Definition at line 120 of file TMessageHandler.cxx. ◆ HandleDerived(). Bool_t TMessageHandler::HandleDerived ; (; ); const. inline . Definition at line 55 of file TMessageHandler.h. ◆ HandleMessage(). void TMessageHandler::HandleMessage ; (; Long_t ; id, . const TObject * ; obj . ). virtual . Store message origin, keep statistics and call Notify(). ; Definition at line 133 of file TMessageHandler.cxx. ◆ IsA(). TClass * TMessageHandler::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 68 of file TMessageHandler.h. ◆ Notified(). virtual void TMessageHandler::Notified ; (; ). inlinevirtual . Definition at line 66 of file TMessageHandler.h. ◆ Notify(). Bool_t TMessageHandler::Notify ; (; ). overridevirtual . This method must be overridden to handle object notification. ; Reimplemented from TObject.; Definition at line 184 of file TMessageHandler.cxx. ◆ Print(). void TMessageHandler::Print",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:20190,Integrability,message,message,20190,"ss declaration ; Definition at line 68 of file TMessageHandler.h. ◆ GetMessageCount(). Int_t TMessageHandler::GetMessageCount ; (; Long_t ; messId); const. virtual . Return counter for message with ID=messid. ; Definition at line 108 of file TMessageHandler.cxx. ◆ GetSender(). void * TMessageHandler::GetSender ; (; ). inlineoverrideprotectedvirtual . Reimplemented from TQObject.; Definition at line 45 of file TMessageHandler.h. ◆ GetSize(). Int_t TMessageHandler::GetSize ; (; ); const. inline . Definition at line 52 of file TMessageHandler.h. ◆ GetTotalMessageCount(). Int_t TMessageHandler::GetTotalMessageCount ; (; ); const. virtual . Return total number of messages. ; Definition at line 120 of file TMessageHandler.cxx. ◆ HandleDerived(). Bool_t TMessageHandler::HandleDerived ; (; ); const. inline . Definition at line 55 of file TMessageHandler.h. ◆ HandleMessage(). void TMessageHandler::HandleMessage ; (; Long_t ; id, . const TObject * ; obj . ). virtual . Store message origin, keep statistics and call Notify(). ; Definition at line 133 of file TMessageHandler.cxx. ◆ IsA(). TClass * TMessageHandler::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 68 of file TMessageHandler.h. ◆ Notified(). virtual void TMessageHandler::Notified ; (; ). inlinevirtual . Definition at line 66 of file TMessageHandler.h. ◆ Notify(). Bool_t TMessageHandler::Notify ; (; ). overridevirtual . This method must be overridden to handle object notification. ; Reimplemented from TObject.; Definition at line 184 of file TMessageHandler.cxx. ◆ Print(). void TMessageHandler::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print statistics for this message handler. ; Reimplemented from TObject.; Definition at line 200 of file TMessageHandler.cxx. ◆ Remove(). void TMessageHandler::Remove ; (; ). virtual . Remove this message handler from the list of messages handlers. ; Definition at line 236 of file T",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:20955,Integrability,message,message,20955,"eDerived(). Bool_t TMessageHandler::HandleDerived ; (; ); const. inline . Definition at line 55 of file TMessageHandler.h. ◆ HandleMessage(). void TMessageHandler::HandleMessage ; (; Long_t ; id, . const TObject * ; obj . ). virtual . Store message origin, keep statistics and call Notify(). ; Definition at line 133 of file TMessageHandler.cxx. ◆ IsA(). TClass * TMessageHandler::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 68 of file TMessageHandler.h. ◆ Notified(). virtual void TMessageHandler::Notified ; (; ). inlinevirtual . Definition at line 66 of file TMessageHandler.h. ◆ Notify(). Bool_t TMessageHandler::Notify ; (; ). overridevirtual . This method must be overridden to handle object notification. ; Reimplemented from TObject.; Definition at line 184 of file TMessageHandler.cxx. ◆ Print(). void TMessageHandler::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print statistics for this message handler. ; Reimplemented from TObject.; Definition at line 200 of file TMessageHandler.cxx. ◆ Remove(). void TMessageHandler::Remove ; (; ). virtual . Remove this message handler from the list of messages handlers. ; Definition at line 236 of file TMessageHandler.cxx. ◆ Removed(). virtual void TMessageHandler::Removed ; (; ). inlinevirtual . Definition at line 65 of file TMessageHandler.h. ◆ Streamer(). void TMessageHandler::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMessageHandler::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 68 of file TMessageHandler.h. Member Data Documentation. ◆ fClass. const TClass* TMessageHandler::fClass. protected . Definition at line 37 of file TMessageHandler.h. ◆ fCnts. Int_t* TMessageHandler::fCnts. protected . Definition at line 41 of file TMessageHandler.h. ◆ fDerived. Bool_t TMessageHandler::fD",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:21126,Integrability,message,message,21126,". const TObject * ; obj . ). virtual . Store message origin, keep statistics and call Notify(). ; Definition at line 133 of file TMessageHandler.cxx. ◆ IsA(). TClass * TMessageHandler::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 68 of file TMessageHandler.h. ◆ Notified(). virtual void TMessageHandler::Notified ; (; ). inlinevirtual . Definition at line 66 of file TMessageHandler.h. ◆ Notify(). Bool_t TMessageHandler::Notify ; (; ). overridevirtual . This method must be overridden to handle object notification. ; Reimplemented from TObject.; Definition at line 184 of file TMessageHandler.cxx. ◆ Print(). void TMessageHandler::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print statistics for this message handler. ; Reimplemented from TObject.; Definition at line 200 of file TMessageHandler.cxx. ◆ Remove(). void TMessageHandler::Remove ; (; ). virtual . Remove this message handler from the list of messages handlers. ; Definition at line 236 of file TMessageHandler.cxx. ◆ Removed(). virtual void TMessageHandler::Removed ; (; ). inlinevirtual . Definition at line 65 of file TMessageHandler.h. ◆ Streamer(). void TMessageHandler::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMessageHandler::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 68 of file TMessageHandler.h. Member Data Documentation. ◆ fClass. const TClass* TMessageHandler::fClass. protected . Definition at line 37 of file TMessageHandler.h. ◆ fCnts. Int_t* TMessageHandler::fCnts. protected . Definition at line 41 of file TMessageHandler.h. ◆ fDerived. Bool_t TMessageHandler::fDerived. protected . Definition at line 43 of file TMessageHandler.h. ◆ fMessId. Long_t TMessageHandler::fMessId. protected . Definition at line 39 of file TMessageHandler.h. ◆ fMessIds. Long_t* T",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:21159,Integrability,message,messages,21159,". const TObject * ; obj . ). virtual . Store message origin, keep statistics and call Notify(). ; Definition at line 133 of file TMessageHandler.cxx. ◆ IsA(). TClass * TMessageHandler::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 68 of file TMessageHandler.h. ◆ Notified(). virtual void TMessageHandler::Notified ; (; ). inlinevirtual . Definition at line 66 of file TMessageHandler.h. ◆ Notify(). Bool_t TMessageHandler::Notify ; (; ). overridevirtual . This method must be overridden to handle object notification. ; Reimplemented from TObject.; Definition at line 184 of file TMessageHandler.cxx. ◆ Print(). void TMessageHandler::Print ; (; Option_t * ; option = """"); const. overridevirtual . Print statistics for this message handler. ; Reimplemented from TObject.; Definition at line 200 of file TMessageHandler.cxx. ◆ Remove(). void TMessageHandler::Remove ; (; ). virtual . Remove this message handler from the list of messages handlers. ; Definition at line 236 of file TMessageHandler.cxx. ◆ Removed(). virtual void TMessageHandler::Removed ; (; ). inlinevirtual . Definition at line 65 of file TMessageHandler.h. ◆ Streamer(). void TMessageHandler::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMessageHandler::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 68 of file TMessageHandler.h. Member Data Documentation. ◆ fClass. const TClass* TMessageHandler::fClass. protected . Definition at line 37 of file TMessageHandler.h. ◆ fCnts. Int_t* TMessageHandler::fCnts. protected . Definition at line 41 of file TMessageHandler.h. ◆ fDerived. Bool_t TMessageHandler::fDerived. protected . Definition at line 43 of file TMessageHandler.h. ◆ fMessId. Long_t TMessageHandler::fMessId. protected . Definition at line 39 of file TMessageHandler.h. ◆ fMessIds. Long_t* T",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:2467,Modifiability,inherit,inherited,2467,"o the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify () override;  This method must be overridden to handle object notification. ;  ; void Print (Option_t *option="""") const override;  Print statistics for this message handler. ;  ; virtual void Remove ();  Remove this message handler from the list of messages handlers. ;  ; virtual void Removed ();  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:4207,Modifiability,inherit,inherited,4207,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:5300,Modifiability,inherit,inheritance,5300,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:7299,Modifiability,inherit,inherits,7299,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:7416,Modifiability,inherit,inherits,7416,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:10846,Modifiability,inherit,inherited,10846," SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without args. ;  ; template<typename T > ; void Emit (const char *signal, const T &arg);  Activate signal with single paramet",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:13008,Modifiability,inherit,inherited,13008,"GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:13218,Modifiability,inherit,inherited,13218,"GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:13736,Modifiability,inherit,inherited,13736,"amerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullpt",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:14968,Modifiability,inherit,inherited,14968,"t char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void * GetSender () override;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; const TClass * fClass;  ; Int_t * fCnts;  ; Bool_t fDerived;  ; Long_t fMessId;  ; Long_t * fMessIds;  ; const TObject * fMessObj;  ; Int_t fSize;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:15179,Modifiability,inherit,inherited,15179,"onst char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void * GetSender () override;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; const TClass * fClass;  ; Int_t * fCnts;  ; Bool_t fDerived;  ; Long_t fMessId;  ; Long_t * fMessIds;  ; const TObject * fMessObj;  ; Int_t fSize;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:15451,Modifiability,inherit,inherited,15451,"ic const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void * GetSender () override;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; const TClass * fClass;  ; Int_t * fCnts;  ; Bool_t fDerived;  ; Long_t fMessId;  ; Long_t * fMessIds;  ; const TObject * fMessObj;  ; Int_t fSize;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Prote",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:15533,Modifiability,inherit,inherited,15533,"ic const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Protected Member Functions; void * GetSender () override;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; const TClass * fClass;  ; Int_t * fCnts;  ; Bool_t fDerived;  ; Long_t fMessId;  ; Long_t * fMessIds;  ; const TObject * fMessObj;  ; Int_t fSize;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Prote",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:15761,Modifiability,inherit,inherited,15761,"object sender from slot_method in object receiver. ;  . Protected Member Functions; void * GetSender () override;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  . Protected Attributes; const TClass * fClass;  ; Int_t * fCnts;  ; Bool_t fDerived;  ; Long_t fMessId;  ; Long_t * fMessIds;  ; const TObject * fMessObj;  ; Int_t fSize;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks ",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:16402,Modifiability,inherit,inherited,16402,"ect; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMessageHandler.h>. Inheritance diagram for TMessageHandler:. This b",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:16508,Modifiability,inherit,inherited,16508,"ect; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMessageHandler.h>. Inheritance diagram for TMessageHandler:. This b",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:17364,Modifiability,inherit,inherited,17364,"inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMessageHandler.h>. Inheritance diagram for TMessageHandler:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMessageHandler() [1/2]. TMessageHandler::TMessageHandler ; (; const TClass * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class cl and add it to the list of message handlers. ; Definition at line 41 of file TMessageHandler.cxx. ◆ TMessageHandler() [2/2]. TMessageHandler::TMessageHandler ; (; const char * ; cl, . Bool_t ; derived = kTRUE . ). Create a new message handler for class named cl and add it to the list of message handlers. ; Definition at line 63 of file TMessageHandler.cxx. ◆ ~TMessageHandler(). TMessageHandler::~TMessageHandler ; (; ). virtual . Clean up the message handler. ; Definition at line 82 of file TMessageHandler.cxx. Member Function Documentation. ◆ Add(). voi",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:622,Security,access,access,622,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:3335,Security,hash,hash,3335," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:828,Testability,log,logged,828,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:874,Testability,log,logged,874,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:923,Testability,log,logged,923,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMessageHandler.html:969,Testability,log,logged,969,". ROOT: TMessageHandler Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMessageHandler Class ReferenceCore ROOT classes » Base ROOT classes. ; Handle messages that might be generated by the system. ; By default a handler only keeps track of the different messages generated for a specific class. By deriving from this class and overriding Notify() one can implement custom message handling. In Notify() one has access to the message id and the object generating the message. One can install more than one message handler per class. A message handler can be removed or again added when needed. All Root ""Warnings"" are logged as message 1001; All Root ""Errors"" are logged as message 1002; All Root ""SysErrors"" are logged as message 1003; All Root ""Fatals"" are logged as message 1004 . Definition at line 34 of file TMessageHandler.h. Public Member Functions;  TMessageHandler (const char *cl, Bool_t derived=kTRUE);  Create a new message handler for class named cl and add it to the list of message handlers. ;  ;  TMessageHandler (const TClass *cl, Bool_t derived=kTRUE);  Create a new message handler for class cl and add it to the list of message handlers. ;  ; virtual ~TMessageHandler ();  Clean up the message handler. ;  ; virtual void Add ();  Add this message handler to the list of messages handlers. ;  ; virtual void Added ();  ; virtual Int_t GetMessageCount (Long_t messId) const;  Return counter for message with ID=messid. ;  ; Int_t GetSize () const;  ; virtual Int_t GetTotalMessageCount () const;  Return total number of messages. ;  ; Bool_t HandleDerived () const;  ; virtual void HandleMessage (Long_t id, const TObject *obj);  Store message origin, keep statistics and call Notify(). ;  ; TClass * IsA () const override;  ; virtual void Notified ();  ; Bool_t Notify ()",MatchSource.WIKI,doc/master/classTMessageHandler.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMessageHandler.html
https://root.cern/doc/master/classTMethod.html:2787,Availability,error,error,2787," ; virtual void SetMenuItem (EMenuItemKind menuItem);  ; virtual TMethodCall * SetterMethod ();  Return call environment for this method in case this is a *TOGGLE method which takes a single boolean or integer argument. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t Update (MethodInfo_t *info) override;  Update the TMethod to reflect the new info. ;  ;  Public Member Functions inherited from TFunction;  TFunction (const TFunction &orig);  Copy operator. ;  ;  TFunction (MethodInfo_t *info=nullptr);  Default TFunction ctor. ;  ; virtual ~TFunction ();  TFunction dtor deletes adopted CINT MethodInfo. ;  ; Long_t ExtraProperty () const;  Get property description word. For meaning of bits see EProperty. ;  ; DeclId_t GetDeclId () const;  ; TList * GetListOfMethodArgs ();  Return list containing the TMethodArgs of a TFunction. ;  ; virtual const char * GetMangledName () const;  Returns the mangled name as defined by CINT, or 0 in case of error. ;  ; Int_t GetNargs () const;  Number of function arguments. ;  ; Int_t GetNargsOpt () const;  Number of function optional (default) arguments. ;  ; virtual const char * GetPrototype () const;  Returns the prototype of a function as defined by CINT, or 0 in case of error. ;  ; const char * GetReturnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; const char * GetSignature ();  Return signature of function. ;  ; void * InterfaceMethod () const;  Return pointer to the interface method. ;  ; void ls (Option_t *option="""") const override;  List TFunction name and title. ;  ; TFunction & operator= (const TFunction &rhs);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TFunction name and title. ;  ; Long_t Property () const override;  Get property",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:3060,Availability,error,error,3060," an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t Update (MethodInfo_t *info) override;  Update the TMethod to reflect the new info. ;  ;  Public Member Functions inherited from TFunction;  TFunction (const TFunction &orig);  Copy operator. ;  ;  TFunction (MethodInfo_t *info=nullptr);  Default TFunction ctor. ;  ; virtual ~TFunction ();  TFunction dtor deletes adopted CINT MethodInfo. ;  ; Long_t ExtraProperty () const;  Get property description word. For meaning of bits see EProperty. ;  ; DeclId_t GetDeclId () const;  ; TList * GetListOfMethodArgs ();  Return list containing the TMethodArgs of a TFunction. ;  ; virtual const char * GetMangledName () const;  Returns the mangled name as defined by CINT, or 0 in case of error. ;  ; Int_t GetNargs () const;  Number of function arguments. ;  ; Int_t GetNargsOpt () const;  Number of function optional (default) arguments. ;  ; virtual const char * GetPrototype () const;  Returns the prototype of a function as defined by CINT, or 0 in case of error. ;  ; const char * GetReturnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; const char * GetSignature ();  Return signature of function. ;  ; void * InterfaceMethod () const;  Return pointer to the interface method. ;  ; void ls (Option_t *option="""") const override;  List TFunction name and title. ;  ; TFunction & operator= (const TFunction &rhs);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TFunction name and title. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dic",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:7459,Availability,error,error,7459,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:7548,Availability,error,error,7548,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:7703,Availability,error,error,7703,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:8000,Availability,error,error,8000,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:12084,Availability,error,error,12084,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFunction; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Versio",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:1225,Deployability,update,updates,1225,"r Functions |; Private Attributes |; List of all members ; TMethod Class Reference. ; Each ROOT class (see TClass) has a linked list of methods. ; This class describes one single method (member function). The method info is obtained via the CINT api. See class TCling.; The method information is used a.o. by the THml class and by the TTree class. ; Definition at line 38 of file TMethod.h. Public Member Functions;  TMethod (const TMethod &org);  Copy ctor. ;  ;  TMethod (MethodInfo_t *info=nullptr, TClass *cl=nullptr);  Default TMethod ctor. ;  ; virtual ~TMethod ();  Cleanup. ;  ; TObject * Clone (const char *newname="""") const override;  Clone method. ;  ; virtual TDataMember * FindDataMember ();  Tries to guess DataMember from comment string and Method's name <==(only if 1 Argument!). ;  ; TClass * GetClass () const;  ; virtual const char * GetCommentString ();  Returns a comment string from the class declaration. ;  ; virtual TList * GetListOfMethodArgs ();  Returns methodarg list and additionally updates fDataMember in TMethod by calling FindDataMember();. ;  ; virtual const char * Getter () const;  ; virtual TMethodCall * GetterMethod ();  Return call environment for the getter method in case this is a *TOGGLE method (for the context menu). ;  ; TClass * IsA () const override;  ; EMenuItemKind IsMenuItem () const;  ; Bool_t IsValid () override;  Return true if this function object is pointing to a currently loaded function. ;  ; TMethod & operator= (const TMethod &rhs);  Assignment operator. ;  ; virtual void SetMenuItem (EMenuItemKind menuItem);  ; virtual TMethodCall * SetterMethod ();  Return call environment for this method in case this is a *TOGGLE method which takes a single boolean or integer argument. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t Update (MethodInfo_t *info) override;  Update the TMethod to reflect the new info. ;  ;  Public Member Fu",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:16426,Deployability,update,updated,16426,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TFunction; MethodInfo_t * fInfo;  ; TString fMangledName;  ; TList * fMethodArgs;  ; TString fSignature;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMethod.h>. Inheritance diagram for TMethod:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMethod() [1/2]. TMethod::TMethod ; (; MethodInfo_t * ; info = nullptr, . TClass * ; cl = nullptr . ). Default TMethod ctor. ; TMethods are constructed in TClass. Comment strings are pre-parsed to find out whether the method is a context-menu item. ; Definition at line 41 of file TMethod.cxx. ◆ TMethod() [2/2]. TMethod::TMethod ",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:19548,Deployability,update,updates,19548,"ration ; Definition at line 68 of file TMethod.h. ◆ FindDataMember(). TDataMember * TMethod::FindDataMember ; (; ). virtual . Tries to guess DataMember from comment string and Method's name <==(only if 1 Argument!). ; If more then one argument=> returns pointer to the last argument. It also sets MethodArgs' pointers to point to specified data members.; The form of comment string defining arguments is: void XXX(Int_t x1, Float_t y2) //*ARGS={x1=>fX1,y2=>fY2} where fX1, fY2 are data fields in the same class. (""pointers"" to data members) ; Definition at line 134 of file TMethod.cxx. ◆ GetClass(). TClass * TMethod::GetClass ; (; ); const. inline . Definition at line 55 of file TMethod.h. ◆ GetCommentString(). const char * TMethod::GetCommentString ; (; ). virtual . Returns a comment string from the class declaration. ; Definition at line 107 of file TMethod.cxx. ◆ GetListOfMethodArgs(). TList * TMethod::GetListOfMethodArgs ; (; ). virtual . Returns methodarg list and additionally updates fDataMember in TMethod by calling FindDataMember();. ; Definition at line 307 of file TMethod.cxx. ◆ Getter(). virtual const char * TMethod::Getter ; (; ); const. inlinevirtual . Definition at line 59 of file TMethod.h. ◆ GetterMethod(). TMethodCall * TMethod::GetterMethod ; (; ). virtual . Return call environment for the getter method in case this is a *TOGGLE method (for the context menu). ; Definition at line 264 of file TMethod.cxx. ◆ IsA(). TClass * TMethod::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TFunction.; Definition at line 68 of file TMethod.h. ◆ IsMenuItem(). EMenuItemKind TMethod::IsMenuItem ; (; ); const. inline . Definition at line 56 of file TMethod.h. ◆ IsValid(). Bool_t TMethod::IsValid ; (; ). overridevirtual . Return true if this function object is pointing to a currently loaded function. ; If a function is unloaded after the TMethod is created, the TMethod will be set to be invalid. ; Reimplemented from T",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:3419,Integrability,interface,interface,3419,"  TFunction dtor deletes adopted CINT MethodInfo. ;  ; Long_t ExtraProperty () const;  Get property description word. For meaning of bits see EProperty. ;  ; DeclId_t GetDeclId () const;  ; TList * GetListOfMethodArgs ();  Return list containing the TMethodArgs of a TFunction. ;  ; virtual const char * GetMangledName () const;  Returns the mangled name as defined by CINT, or 0 in case of error. ;  ; Int_t GetNargs () const;  Number of function arguments. ;  ; Int_t GetNargsOpt () const;  Number of function optional (default) arguments. ;  ; virtual const char * GetPrototype () const;  Returns the prototype of a function as defined by CINT, or 0 in case of error. ;  ; const char * GetReturnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; const char * GetSignature ();  Return signature of function. ;  ; void * InterfaceMethod () const;  Return pointer to the interface method. ;  ; void ls (Option_t *option="""") const override;  List TFunction name and title. ;  ; TFunction & operator= (const TFunction &rhs);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TFunction name and title. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy cto",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:7465,Integrability,message,message,7465,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:8006,Integrability,message,message,8006,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:8996,Integrability,message,message,8996,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:12090,Integrability,message,message,12090,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFunction; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Versio",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:12463,Integrability,message,message,12463," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFunction; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental t",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:2220,Modifiability,inherit,inherited,2220,"r in TMethod by calling FindDataMember();. ;  ; virtual const char * Getter () const;  ; virtual TMethodCall * GetterMethod ();  Return call environment for the getter method in case this is a *TOGGLE method (for the context menu). ;  ; TClass * IsA () const override;  ; EMenuItemKind IsMenuItem () const;  ; Bool_t IsValid () override;  Return true if this function object is pointing to a currently loaded function. ;  ; TMethod & operator= (const TMethod &rhs);  Assignment operator. ;  ; virtual void SetMenuItem (EMenuItemKind menuItem);  ; virtual TMethodCall * SetterMethod ();  Return call environment for this method in case this is a *TOGGLE method which takes a single boolean or integer argument. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t Update (MethodInfo_t *info) override;  Update the TMethod to reflect the new info. ;  ;  Public Member Functions inherited from TFunction;  TFunction (const TFunction &orig);  Copy operator. ;  ;  TFunction (MethodInfo_t *info=nullptr);  Default TFunction ctor. ;  ; virtual ~TFunction ();  TFunction dtor deletes adopted CINT MethodInfo. ;  ; Long_t ExtraProperty () const;  Get property description word. For meaning of bits see EProperty. ;  ; DeclId_t GetDeclId () const;  ; TList * GetListOfMethodArgs ();  Return list containing the TMethodArgs of a TFunction. ;  ; virtual const char * GetMangledName () const;  Returns the mangled name as defined by CINT, or 0 in case of error. ;  ; Int_t GetNargs () const;  Number of function arguments. ;  ; Int_t GetNargsOpt () const;  Number of function optional (default) arguments. ;  ; virtual const char * GetPrototype () const;  Returns the prototype of a function as defined by CINT, or 0 in case of error. ;  ; const char * GetReturnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () con",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:3882,Modifiability,inherit,inherited,3882,"rnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; const char * GetSignature ();  Return signature of function. ;  ; void * InterfaceMethod () const;  Return pointer to the interface method. ;  ; void ls (Option_t *option="""") const override;  List TFunction name and title. ;  ; TFunction & operator= (const TFunction &rhs);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TFunction name and title. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULo",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:4262,Modifiability,inherit,inherited,4262,"rnTypeName () const;  Get full type description of function return type, e,g.: ""class TDirectory*"". ;  ; std::string GetReturnTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; const char * GetSignature ();  Return signature of function. ;  ; void * InterfaceMethod () const;  Return pointer to the interface method. ;  ; void ls (Option_t *option="""") const override;  List TFunction name and title. ;  ; TFunction & operator= (const TFunction &rhs);  Assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TFunction name and title. ;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULo",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:6002,Modifiability,inherit,inherited,6002,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:7095,Modifiability,inherit,inheritance,7095,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:9094,Modifiability,inherit,inherits,9094,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:9211,Modifiability,inherit,inherits,9211,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:12964,Modifiability,inherit,inherited,12964,"NLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFunction; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:13177,Modifiability,inherit,inherited,13177,"NLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFunction; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:13710,Modifiability,inherit,inherited,13710," * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFunction; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void CreateSignature () override;  Using the CINT method arg information create a complete signature string. ;  ; void SetMenuItem (const char *docstring);  Set the menu item as prescribed in the doctstring. ;  . Private Attributes; TClass * fClass;  ; TString fGetter;  ; TMethodCall * fGetterMethod;  ; EMenuItemKind fMenuItem;  ; TMethodCall * fSetterMethod;  . Additional Inherited Member",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:13920,Modifiability,inherit,inherited,13920," * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TFunction; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void CreateSignature () override;  Using the CINT method arg information create a complete signature string. ;  ; void SetMenuItem (const char *docstring);  Set the menu item as prescribed in the doctstring. ;  . Private Attributes; TClass * fClass;  ; TString fGetter;  ; TMethodCall * fGetterMethod;  ; EMenuItemKind fMenuItem;  ; TMethodCall * fSetterMethod;  . Additional Inherited Member",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:14841,Modifiability,inherit,inherited,14841,"nctions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions; void CreateSignature () override;  Using the CINT method arg information create a complete signature string. ;  ; void SetMenuItem (const char *docstring);  Set the menu item as prescribed in the doctstring. ;  . Private Attributes; TClass * fClass;  ; TString fGetter;  ; TMethodCall * fGetterMethod;  ; EMenuItemKind fMenuItem;  ; TMethodCall * fSetterMethod;  . Additional Inherited Members;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultimap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiset = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiset = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:15575,Modifiability,inherit,inherited,15575,"ate Attributes; TClass * fClass;  ; TString fGetter;  ; TMethodCall * fGetterMethod;  ; EMenuItemKind fMenuItem;  ; TMethodCall * fSetterMethod;  . Additional Inherited Members;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultimap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiset = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiset = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZom",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:16216,Modifiability,inherit,inherited,16216,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TFunction; MethodInfo_t * fInfo;  ; TString fMangledName;  ; TList * fMethodArgs;  ; TString fSignature;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMethod.h>. Inheritance diagram for TMethod:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMethod() [1/2]. TMethod::TMethod ; (; MethodInfo_t * ; info = nullptr, . TClass * ; cl = nullptr . ). Default TMethod ctor. ; TMethods are constructed in TClass. Comment strings are pre-parsed to find out whether the method is a context-menu item. ; Definition at line 41 of file TMethod.cxx. ◆ TMethod() [2/2]. TMethod::TMethod ",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:16315,Modifiability,inherit,inherited,16315,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TFunction; MethodInfo_t * fInfo;  ; TString fMangledName;  ; TList * fMethodArgs;  ; TString fSignature;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMethod.h>. Inheritance diagram for TMethod:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMethod() [1/2]. TMethod::TMethod ; (; MethodInfo_t * ; info = nullptr, . TClass * ; cl = nullptr . ). Default TMethod ctor. ; TMethods are constructed in TClass. Comment strings are pre-parsed to find out whether the method is a context-menu item. ; Definition at line 41 of file TMethod.cxx. ◆ TMethod() [2/2]. TMethod::TMethod ",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:16478,Modifiability,inherit,inherited,16478,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TFunction; MethodInfo_t * fInfo;  ; TString fMangledName;  ; TList * fMethodArgs;  ; TString fSignature;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMethod.h>. Inheritance diagram for TMethod:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMethod() [1/2]. TMethod::TMethod ; (; MethodInfo_t * ; info = nullptr, . TClass * ; cl = nullptr . ). Default TMethod ctor. ; TMethods are constructed in TClass. Comment strings are pre-parsed to find out whether the method is a context-menu item. ; Definition at line 41 of file TMethod.cxx. ◆ TMethod() [2/2]. TMethod::TMethod ",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:16683,Modifiability,inherit,inherited,16683," kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TFunction; MethodInfo_t * fInfo;  ; TString fMangledName;  ; TList * fMethodArgs;  ; TString fSignature;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMethod.h>. Inheritance diagram for TMethod:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMethod() [1/2]. TMethod::TMethod ; (; MethodInfo_t * ; info = nullptr, . TClass * ; cl = nullptr . ). Default TMethod ctor. ; TMethods are constructed in TClass. Comment strings are pre-parsed to find out whether the method is a context-menu item. ; Definition at line 41 of file TMethod.cxx. ◆ TMethod() [2/2]. TMethod::TMethod ; (; const TMethod & ; org). Copy ctor. ; Definition at line 56 of file TMethod.cxx. ◆ ~TMethod(). TMethod::~TMethod ; (; ). virtual . Cleanup. ; Definition at line 88 of file TMethod.cxx. Member Function Documentation. ◆ Class(). static TClass * TMethod::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const ch",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:16828,Modifiability,inherit,inherited,16828," kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TFunction; MethodInfo_t * fInfo;  ; TString fMangledName;  ; TList * fMethodArgs;  ; TString fSignature;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMethod.h>. Inheritance diagram for TMethod:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMethod() [1/2]. TMethod::TMethod ; (; MethodInfo_t * ; info = nullptr, . TClass * ; cl = nullptr . ). Default TMethod ctor. ; TMethods are constructed in TClass. Comment strings are pre-parsed to find out whether the method is a context-menu item. ; Definition at line 41 of file TMethod.cxx. ◆ TMethod() [2/2]. TMethod::TMethod ; (; const TMethod & ; org). Copy ctor. ; Definition at line 56 of file TMethod.cxx. ◆ ~TMethod(). TMethod::~TMethod ; (; ). virtual . Cleanup. ; Definition at line 88 of file TMethod.cxx. Member Function Documentation. ◆ Class(). static TClass * TMethod::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const ch",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:1645,Performance,load,loaded,1645,"tion at line 38 of file TMethod.h. Public Member Functions;  TMethod (const TMethod &org);  Copy ctor. ;  ;  TMethod (MethodInfo_t *info=nullptr, TClass *cl=nullptr);  Default TMethod ctor. ;  ; virtual ~TMethod ();  Cleanup. ;  ; TObject * Clone (const char *newname="""") const override;  Clone method. ;  ; virtual TDataMember * FindDataMember ();  Tries to guess DataMember from comment string and Method's name <==(only if 1 Argument!). ;  ; TClass * GetClass () const;  ; virtual const char * GetCommentString ();  Returns a comment string from the class declaration. ;  ; virtual TList * GetListOfMethodArgs ();  Returns methodarg list and additionally updates fDataMember in TMethod by calling FindDataMember();. ;  ; virtual const char * Getter () const;  ; virtual TMethodCall * GetterMethod ();  Return call environment for the getter method in case this is a *TOGGLE method (for the context menu). ;  ; TClass * IsA () const override;  ; EMenuItemKind IsMenuItem () const;  ; Bool_t IsValid () override;  Return true if this function object is pointing to a currently loaded function. ;  ; TMethod & operator= (const TMethod &rhs);  Assignment operator. ;  ; virtual void SetMenuItem (EMenuItemKind menuItem);  ; virtual TMethodCall * SetterMethod ();  Return call environment for this method in case this is a *TOGGLE method which takes a single boolean or integer argument. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; Bool_t Update (MethodInfo_t *info) override;  Update the TMethod to reflect the new info. ;  ;  Public Member Functions inherited from TFunction;  TFunction (const TFunction &orig);  Copy operator. ;  ;  TFunction (MethodInfo_t *info=nullptr);  Default TFunction ctor. ;  ; virtual ~TFunction ();  TFunction dtor deletes adopted CINT MethodInfo. ;  ; Long_t ExtraProperty () const;  Get property description word. For meaning of bits see EProperty. ;  ; DeclId_t GetDe",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:20422,Performance,load,loaded,20422,"line 107 of file TMethod.cxx. ◆ GetListOfMethodArgs(). TList * TMethod::GetListOfMethodArgs ; (; ). virtual . Returns methodarg list and additionally updates fDataMember in TMethod by calling FindDataMember();. ; Definition at line 307 of file TMethod.cxx. ◆ Getter(). virtual const char * TMethod::Getter ; (; ); const. inlinevirtual . Definition at line 59 of file TMethod.h. ◆ GetterMethod(). TMethodCall * TMethod::GetterMethod ; (; ). virtual . Return call environment for the getter method in case this is a *TOGGLE method (for the context menu). ; Definition at line 264 of file TMethod.cxx. ◆ IsA(). TClass * TMethod::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TFunction.; Definition at line 68 of file TMethod.h. ◆ IsMenuItem(). EMenuItemKind TMethod::IsMenuItem ; (; ); const. inline . Definition at line 56 of file TMethod.h. ◆ IsValid(). Bool_t TMethod::IsValid ; (; ). overridevirtual . Return true if this function object is pointing to a currently loaded function. ; If a function is unloaded after the TMethod is created, the TMethod will be set to be invalid. ; Reimplemented from TFunction.; Definition at line 277 of file TMethod.cxx. ◆ operator=(). TMethod & TMethod::operator= ; (; const TMethod & ; rhs). Assignment operator. ; Definition at line 68 of file TMethod.cxx. ◆ SetMenuItem() [1/2]. void TMethod::SetMenuItem ; (; const char * ; docstring). private . Set the menu item as prescribed in the doctstring. ; Definition at line 319 of file TMethod.cxx. ◆ SetMenuItem() [2/2]. virtual void TMethod::SetMenuItem ; (; EMenuItemKind ; menuItem). inlinevirtual . Definition at line 64 of file TMethod.h. ◆ SetterMethod(). TMethodCall * TMethod::SetterMethod ; (; ). virtual . Return call environment for this method in case this is a *TOGGLE method which takes a single boolean or integer argument. ; Definition at line 295 of file TMethod.cxx. ◆ Streamer(). void TMethod::Streamer ; (; TBuffer & ; R__b). overridevi",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethod.html:5130,Security,hash,hash,5130,"ctionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMethod.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethod.html
https://root.cern/doc/master/classTMethodArg.html:5604,Availability,error,error,5604,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:5693,Availability,error,error,5693,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:5848,Availability,error,error,5848,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:6145,Availability,error,error,6145,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:10229,Availability,error,error,10229,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Vers",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:14221,Deployability,update,updated,14221,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMethodArg.h>. Inheritance diagram for TMethodArg:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMethodArg() [1/2]. TMethodArg::TMethodArg ; (; const TMethodArg & ; ). privatedelete . ◆ TMethodArg() [2/2]. TMethodArg::TMethodArg ; (; MethodArgInfo_t * ; info = nullptr, . TFunction * ; method = nullptr . ). Default TMethodArg ctor. ; TMethodArgs are constructed in TFunction via a call to TCling::CreateListOfMethodArgs(). ; Definition at line 35 of file TMethodArg.cxx. ◆ ~TMethodArg(). TMethodArg::~TMethodArg ; (; ). virtual . TMethodArg dtor deletes adopted CI",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:5610,Integrability,message,message,5610,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:6151,Integrability,message,message,6151,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:7141,Integrability,message,message,7141,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:10235,Integrability,message,message,10235,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Vers",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:10608,Integrability,message,message,10608," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:2027,Modifiability,inherit,inherited,2027,"r. ;  ; TypeInfo_t * GetTypeInfo () const;  Get the TypeInfo of the method argument. ;  ; const char * GetTypeName () const;  Get type of method argument, e.g.: ""class TDirectory*"" -> ""TDirectory"" Result needs to be used or copied immediately. ;  ; std::string GetTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; TClass * IsA () const override;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (MethodArgInfo_t *info);  Update fInfo (to 0 for unloading and non-zero for reloading). ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Re",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:2407,Modifiability,inherit,inherited,2407,"r. ;  ; TypeInfo_t * GetTypeInfo () const;  Get the TypeInfo of the method argument. ;  ; const char * GetTypeName () const;  Get type of method argument, e.g.: ""class TDirectory*"" -> ""TDirectory"" Result needs to be used or copied immediately. ;  ; std::string GetTypeNormalizedName () const;  Get the normalized name of the return type. ;  ; TClass * IsA () const override;  ; Long_t Property () const override;  Get property description word. For meaning of bits see EProperty. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Update (MethodArgInfo_t *info);  Update fInfo (to 0 for unloading and non-zero for reloading). ;  ;  Public Member Functions inherited from TDictionary;  TDictionary ();  ;  TDictionary (const char *name);  ;  TDictionary (const TDictionary &dict);  ; virtual ~TDictionary ();  ; void CreateAttributeMap ();  ; TDictAttributeMap * GetAttributeMap () const;  ; TDictionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Re",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:4147,Modifiability,inherit,inherited,4147,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:5240,Modifiability,inherit,inheritance,5240,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:7239,Modifiability,inherit,inherits,7239,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:7356,Modifiability,inherit,inherits,7356,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:11109,Modifiability,inherit,inherited,11109," SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object s",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:11642,Modifiability,inherit,inherited,11642,"rtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TMethodArg (const TMethodArg &)=delete;  ; TMethodArg & operator= (const TMethodArg &)=delete;  . Private Attributes; TDataMember * fDataMember;  ; MethodArgInfo_t * fInfo;  ; TFunction * fMethod;  . Friends; class TMethod;  . Additional Inherited Members;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsing",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:11852,Modifiability,inherit,inherited,11852,"rtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TDictionary; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TDictionary * GetDictionary (const char *name);  Retrieve the type (class, fundamental type, typedef etc) named ""name"". ;  ; static TDictionary * GetDictionary (const std::type_info &typeinfo);  ; static bool WantsRegularMembers (EMemberSelection sel);  ; static bool WantsUsingDecls (EMemberSelection sel);  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TMethodArg (const TMethodArg &)=delete;  ; TMethodArg & operator= (const TMethodArg &)=delete;  . Private Attributes; TDataMember * fDataMember;  ; MethodArgInfo_t * fInfo;  ; TFunction * fMethod;  . Friends; class TMethod;  . Additional Inherited Members;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsing",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:12636,Modifiability,inherit,inherited,12636,"char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Member Functions;  TMethodArg (const TMethodArg &)=delete;  ; TMethodArg & operator= (const TMethodArg &)=delete;  . Private Attributes; TDataMember * fDataMember;  ; MethodArgInfo_t * fInfo;  ; TFunction * fMethod;  . Friends; class TMethod;  . Additional Inherited Members;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultimap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiset = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiset = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:13370,Modifiability,inherit,inherited,13370,"dArg &)=delete;  . Private Attributes; TDataMember * fDataMember;  ; MethodArgInfo_t * fInfo;  ; TFunction * fMethod;  . Friends; class TMethod;  . Additional Inherited Members;  Public Types inherited from TDictionary; typedef const void * DeclId_t;  ; enum class  EMemberSelection { kNoUsingDecls; , kOnlyUsingDecls; , kAlsoUsingDecls; };  Kinds of members to include in lists. More...;  ; enum  ESTLType { ;   kNone = ROOT::kNotSTL; , kVector = ROOT::kSTLvector; , kList = ROOT::kSTLlist; , kForwardlist = ROOT::kSTLforwardlist; , ;   kDeque = ROOT::kSTLdeque; , kMap = ROOT::kSTLmap; , kMultimap = ROOT::kSTLmultimap; , kSet = ROOT::kSTLset; , ;   kMultiset = ROOT::kSTLmultiset; , kUnorderedSet = ROOT::kSTLunorderedset; , kUnorderedMultiset = ROOT::kSTLunorderedmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZom",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:14011,Modifiability,inherit,inherited,14011,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMethodArg.h>. Inheritance diagram for TMethodArg:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMethodArg() [1/2]. TMethodArg::TMethodArg ; (; const TMethodArg & ; ). privatedelete . ◆ TMethodArg() [2/2]. TMethodArg::TMethodArg ; (; MethodArgInfo_t * ; info = nullptr, . TFunction * ; method = nullptr . ). Default TMethodArg ctor. ; TMethodArgs are constructed in TFunction via a call to TCling::CreateListOfMethodArgs(). ; Definition at line 35 of file TMethodArg.cxx. ◆ ~TMethodArg(). TMethodArg::~TMethodArg ; (; ). virtual . TMethodArg dtor deletes adopted CI",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:14110,Modifiability,inherit,inherited,14110,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMethodArg.h>. Inheritance diagram for TMethodArg:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMethodArg() [1/2]. TMethodArg::TMethodArg ; (; const TMethodArg & ; ). privatedelete . ◆ TMethodArg() [2/2]. TMethodArg::TMethodArg ; (; MethodArgInfo_t * ; info = nullptr, . TFunction * ; method = nullptr . ). Default TMethodArg ctor. ; TMethodArgs are constructed in TFunction via a call to TCling::CreateListOfMethodArgs(). ; Definition at line 35 of file TMethodArg.cxx. ◆ ~TMethodArg(). TMethodArg::~TMethodArg ; (; ). virtual . TMethodArg dtor deletes adopted CI",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:14273,Modifiability,inherit,inherited,14273,"deredmultiset; , kUnorderedMap = ROOT::kSTLunorderedmap; , ;   kUnorderedMultimap = ROOT::kSTLunorderedmultimap; , kBitset = ROOT::kSTLbitset. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMethodArg.h>. Inheritance diagram for TMethodArg:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMethodArg() [1/2]. TMethodArg::TMethodArg ; (; const TMethodArg & ; ). privatedelete . ◆ TMethodArg() [2/2]. TMethodArg::TMethodArg ; (; MethodArgInfo_t * ; info = nullptr, . TFunction * ; method = nullptr . ). Default TMethodArg ctor. ; TMethodArgs are constructed in TFunction via a call to TCling::CreateListOfMethodArgs(). ; Definition at line 35 of file TMethodArg.cxx. ◆ ~TMethodArg(). TMethodArg::~TMethodArg ; (; ). virtual . TMethodArg dtor deletes adopted CI",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:14478,Modifiability,inherit,inherited,14478,", kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TDictionary; Bool_t UpdateInterpreterStateMarker ();  the Cling ID of the transaction that last updated the object ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMethodArg.h>. Inheritance diagram for TMethodArg:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMethodArg() [1/2]. TMethodArg::TMethodArg ; (; const TMethodArg & ; ). privatedelete . ◆ TMethodArg() [2/2]. TMethodArg::TMethodArg ; (; MethodArgInfo_t * ; info = nullptr, . TFunction * ; method = nullptr . ). Default TMethodArg ctor. ; TMethodArgs are constructed in TFunction via a call to TCling::CreateListOfMethodArgs(). ; Definition at line 35 of file TMethodArg.cxx. ◆ ~TMethodArg(). TMethodArg::~TMethodArg ; (; ). virtual . TMethodArg dtor deletes adopted CINT MethodArgInfo object. ; Definition at line 49 of file TMethodArg.cxx. Member Function Documentation. ◆ Class(). static TClass * TMethodArg::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMethodArg::Class_Name ; (; ). stat",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:3275,Security,hash,hash,3275,"ctionary & operator= (const TDictionary &other);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodArg.html:16379,Usability,learn,learn,16379,"e(). static const char * TMethodArg::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMethodArg::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 64 of file TMethodArg.h. ◆ DeclFileName(). static const char * TMethodArg::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 64 of file TMethodArg.h. ◆ GetDataMember(). TDataMember * TMethodArg::GetDataMember ; (; ); const. Returns TDataMember pointed by this methodarg. ; If you want to specify list of options or current value for your MethodArg (i.e. it is used as initial values in argument-asking dialogs popped up from context-meny),you can get this value from one of data members of the class.; The only restriction is, that this DataMember object must have its Getter/Setter methods set-up correctly - for details look at TDataMember. To learn how to specify the data member to which the argument should ""point"", look at TMethod. This is TMethod which sets up fDataMember, so it could work correctly. ; Definition at line 128 of file TMethodArg.cxx. ◆ GetDefault(). const char * TMethodArg::GetDefault ; (; ); const. Get default value of method argument. ; Definition at line 57 of file TMethodArg.cxx. ◆ GetFullTypeName(). const char * TMethodArg::GetFullTypeName ; (; ); const. Get full type description of method argument, e.g.: ""class TDirectory*"". ; Definition at line 74 of file TMethodArg.cxx. ◆ GetMethod(). TFunction * TMethodArg::GetMethod ; (; ); const. inline . Definition at line 52 of file TMethodArg.h. ◆ GetOptions(). TList * TMethodArg::GetOptions ; (; ); const. Returns list of possible options - according to pointed datamember. ; If there is no datamember field assigned to this methodarg - returns 0. ; Definition at line 110 of file TMethodArg.cxx. ◆ GetTypeInfo(). TypeInfo_t * TMethodArg::GetTypeInfo ; (; ); const. Get the TypeInfo of the method argument. ;",MatchSource.WIKI,doc/master/classTMethodArg.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodArg.html
https://root.cern/doc/master/classTMethodBrowsable.html:715,Availability,avail,available,715,". ROOT: TMethodBrowsable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; List of all members ; TMethodBrowsable Class ReferenceTree Library. ; This helper object allows the browsing of methods of objects stored in branches. ; They will be depicted by a leaf (or a branch, in case the method returns an object) with a red exclamation mark. Only a subset of all methods will be shown in the browser (see IsMethodBrowsable for the criteria a method has to satisfy).; Obviously, methods are only available if the library is loaded which contains the dictionary for the class to be browsed!; If a branch contains a collection, TMethodBrowsable tries to find out what the contained element is (it will only create methods for the contained elements, but never for the collection). If it fails to extract the type of the contained elements, or if there is no guarantee that the type has any other common denominator than TObject (e.g. in the case of a TObjArray, which can hold any object deriving from TObject) no methods will be added. ; Definition at line 103 of file TBranchBrowsable.h. Public Member Functions;  ~TMethodBrowsable () override;  ; const char * GetIconName () const override;  return our special icons ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualBranchBrowsable;  ~TVirtualBranchBrowsable () override;  Destructor. Delete our leaves. ;  ; void Browse (TBrowser *b) override;  Calls TTree::Draw on the method if return type is not a class; otherwise expands returned object's ""folder"". ;  ; const TBranch * GetBranch () const;  return the parent branch (might be many levels up) ; ",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:5838,Availability,error,error,5838,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:5927,Availability,error,error,5927,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the ",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:6082,Availability,error,error,6082,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:6379,Availability,error,error,6379,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns k",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:10239,Availability,error,error,10239,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetBrowsables (TList &list, const TBranch *branch, const TVirtualBranchBrowsable *parent=nullptr);  This methods fills list with TMetho",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:5844,Integrability,message,message,5844,"option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ; ",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:6385,Integrability,message,message,6385,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns k",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:7292,Integrability,message,message,7292,"py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be o",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:10245,Integrability,message,message,10245,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetBrowsables (TList &list, const TBranch *branch, const TVirtualBranchBrowsable *parent=nullptr);  This methods fills list with TMetho",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:10618,Integrability,message,message,10618," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetBrowsables (TList &list, const TBranch *branch, const TVirtualBranchBrowsable *parent=nullptr);  This methods fills list with TMethodBrowsables for the branch's or parent's class and its base classes, and returns the number of added elements. ;  ; static bool IsMethodBrowsable (const TMethod *m);  A TMethod is browsable if it is const, public and not pure virtual, if does not have any parameter without default value, and if it has a (non-void) return value. ;  ; static void Register ();  Wrapper for th",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:19398,Integrability,depend,depending,19398," 111 of file TBranchBrowsable.h. ◆ IsA(). TClass * TMethodBrowsable::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 128 of file TBranchBrowsable.h. ◆ IsMethodBrowsable(). bool TMethodBrowsable::IsMethodBrowsable ; (; const TMethod * ; m). static . A TMethod is browsable if it is const, public and not pure virtual, if does not have any parameter without default value, and if it has a (non-void) return value. ; A method called *, Get*, or get* will not be browsable if there is a persistent data member called f*, _*, or m*, as data member access is faster than method access. Examples: if one of fX, _X, or mX is a persistent data member, the methods GetX(), getX(), and X() will not be browsable. ; Definition at line 530 of file TBranchBrowsable.cxx. ◆ Register(). void TMethodBrowsable::Register ; (; ). static . Wrapper for the registration method. ; Needed against MSVC, which assigned different addr to the same method, depending on what translation unit you're in... ; Definition at line 585 of file TBranchBrowsable.cxx. ◆ Streamer(). void TMethodBrowsable::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMethodBrowsable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 128 of file TBranchBrowsable.h. ◆ Unregister(). void TMethodBrowsable::Unregister ; (; ). static . Wrapper for the registration method. ; Needed against MSVC, which assigned different addr to the same method, depending on what translation unit you're in... ; Definition at line 595 of file TBranchBrowsable.cxx. Member Data Documentation. ◆ fMethod. TMethod* TMethodBrowsable::fMethod {nullptr}. private . Definition at line 127 of file TBranchBrowsable.h. Libraries for TMethodBrowsable:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBran",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:20000,Integrability,depend,depending,20000,"Object.; Definition at line 128 of file TBranchBrowsable.h. ◆ IsMethodBrowsable(). bool TMethodBrowsable::IsMethodBrowsable ; (; const TMethod * ; m). static . A TMethod is browsable if it is const, public and not pure virtual, if does not have any parameter without default value, and if it has a (non-void) return value. ; A method called *, Get*, or get* will not be browsable if there is a persistent data member called f*, _*, or m*, as data member access is faster than method access. Examples: if one of fX, _X, or mX is a persistent data member, the methods GetX(), getX(), and X() will not be browsable. ; Definition at line 530 of file TBranchBrowsable.cxx. ◆ Register(). void TMethodBrowsable::Register ; (; ). static . Wrapper for the registration method. ; Needed against MSVC, which assigned different addr to the same method, depending on what translation unit you're in... ; Definition at line 585 of file TBranchBrowsable.cxx. ◆ Streamer(). void TMethodBrowsable::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMethodBrowsable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 128 of file TBranchBrowsable.h. ◆ Unregister(). void TMethodBrowsable::Unregister ; (; ). static . Wrapper for the registration method. ; Needed against MSVC, which assigned different addr to the same method, depending on what translation unit you're in... ; Definition at line 595 of file TBranchBrowsable.cxx. Member Data Documentation. ◆ fMethod. TMethod* TMethodBrowsable::fMethod {nullptr}. private . Definition at line 127 of file TBranchBrowsable.h. Libraries for TMethodBrowsable:. [legend]; The documentation for this class was generated from the following files:; tree/tree/inc/TBranchBrowsable.h; tree/tree/src/TBranchBrowsable.cxx. TMethodBrowsable. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:43:59 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:1644,Modifiability,inherit,inherited,1644,"e for the criteria a method has to satisfy).; Obviously, methods are only available if the library is loaded which contains the dictionary for the class to be browsed!; If a branch contains a collection, TMethodBrowsable tries to find out what the contained element is (it will only create methods for the contained elements, but never for the collection). If it fails to extract the type of the contained elements, or if there is no guarantee that the type has any other common denominator than TObject (e.g. in the case of a TObjArray, which can hold any object deriving from TObject) no methods will be added. ; Definition at line 103 of file TBranchBrowsable.h. Public Member Functions;  ~TMethodBrowsable () override;  ; const char * GetIconName () const override;  return our special icons ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualBranchBrowsable;  ~TVirtualBranchBrowsable () override;  Destructor. Delete our leaves. ;  ; void Browse (TBrowser *b) override;  Calls TTree::Draw on the method if return type is not a class; otherwise expands returned object's ""folder"". ;  ; const TBranch * GetBranch () const;  return the parent branch (might be many levels up) ;  ; TClass * GetClassType () const;  return the type of this browsable object ;  ; const char * GetIconName () const override;  return icon shown when browsing a TVirtualBranchBrowsable ;  ; TList * GetLeaves () const;  Return list of leaves. If not set up yet we'll create them. ;  ; const TVirtualBranchBrowsable * GetParent () const;  return the parent TVirtualBranchBrowsable ;  ; void GetScope (TString &scope) const;  Returns the full name for TTree::Draw to draw *this. ;  ; TClass * IsA () const override;  ; bool IsFolder () const override;  check whether we have sub-elements ;  ; void Streamer (TBuffer &) override;  Stream an obje",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:2855,Modifiability,inherit,inherited,2855,"d if return type is not a class; otherwise expands returned object's ""folder"". ;  ; const TBranch * GetBranch () const;  return the parent branch (might be many levels up) ;  ; TClass * GetClassType () const;  return the type of this browsable object ;  ; const char * GetIconName () const override;  return icon shown when browsing a TVirtualBranchBrowsable ;  ; TList * GetLeaves () const;  Return list of leaves. If not set up yet we'll create them. ;  ; const TVirtualBranchBrowsable * GetParent () const;  return the parent TVirtualBranchBrowsable ;  ; void GetScope (TString &scope) const;  Returns the full name for TTree::Draw to draw *this. ;  ; TClass * IsA () const override;  ; bool IsFolder () const override;  check whether we have sub-elements ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; bool TypeIsPointer () const;  return whether the type of this browsable object is a pointer ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") c",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:4483,Modifiability,inherit,inherited,4483,"ual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  D",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:5474,Modifiability,inherit,inheritance,5474,"ions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:7390,Modifiability,inherit,inherits,7390,"nst;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op).",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:7507,Modifiability,inherit,inherits,7507,"derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method ",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:11740,Modifiability,inherit,inherited,11740,"Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t GetBrowsables (TList &list, const TBranch *branch, const TVirtualBranchBrowsable *parent=nullptr);  This methods fills list with TMethodBrowsables for the branch's or parent's class and its base classes, and returns the number of added elements. ;  ; static bool IsMethodBrowsable (const TMethod *m);  A TMethod is browsable if it is const, public and not pure virtual, if does not have any parameter without default value, and if it has a (non-void) return value. ;  ; static void Register ();  Wrapper for the registration method. ;  ; static void Unregister ();  Wrapper for the registration method. ;  ;  Static Public Member Functions inherited from TVirtualBranchBrowsable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FillListOfBrowsables (TList &list, const TBranch *branch, const TVirtualBranchBrowsable *parent=nullptr);  Askes all registered generators to fill their browsables into the list. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TMethodBrowsable (const T",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:12164,Modifiability,inherit,inherited,12164,"dBrowsable (const TMethod *m);  A TMethod is browsable if it is const, public and not pure virtual, if does not have any parameter without default value, and if it has a (non-void) return value. ;  ; static void Register ();  Wrapper for the registration method. ;  ; static void Unregister ();  Wrapper for the registration method. ;  ;  Static Public Member Functions inherited from TVirtualBranchBrowsable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FillListOfBrowsables (TList &list, const TBranch *branch, const TVirtualBranchBrowsable *parent=nullptr);  Askes all registered generators to fill their browsables into the list. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TMethodBrowsable (const TBranch *branch, TMethod *m, const TVirtualBranchBrowsable *parent=nullptr);  Constructor. ;  ;  Protected Member Functions inherited from TVirtualBranchBrowsable;  TVirtualBranchBrowsable (const TBranch *b, TClass *type, bool typeIsPointer, const TVirtualBranchBrowsable *parent=nullptr);  Constructor setting all members according to parameters. ;  ; void SetType (TClass *type);  sets the type of this browsable object ;  ; void SetTypeIsPointer (bool set",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:12374,Modifiability,inherit,inherited,12374,"dBrowsable (const TMethod *m);  A TMethod is browsable if it is const, public and not pure virtual, if does not have any parameter without default value, and if it has a (non-void) return value. ;  ; static void Register ();  Wrapper for the registration method. ;  ; static void Unregister ();  Wrapper for the registration method. ;  ;  Static Public Member Functions inherited from TVirtualBranchBrowsable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Int_t FillListOfBrowsables (TList &list, const TBranch *branch, const TVirtualBranchBrowsable *parent=nullptr);  Askes all registered generators to fill their browsables into the list. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TMethodBrowsable (const TBranch *branch, TMethod *m, const TVirtualBranchBrowsable *parent=nullptr);  Constructor. ;  ;  Protected Member Functions inherited from TVirtualBranchBrowsable;  TVirtualBranchBrowsable (const TBranch *b, TClass *type, bool typeIsPointer, const TVirtualBranchBrowsable *parent=nullptr);  Constructor setting all members according to parameters. ;  ; void SetType (TClass *type);  sets the type of this browsable object ;  ; void SetTypeIsPointer (bool set",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:13037,Modifiability,inherit,inherited,13037,"  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TMethodBrowsable (const TBranch *branch, TMethod *m, const TVirtualBranchBrowsable *parent=nullptr);  Constructor. ;  ;  Protected Member Functions inherited from TVirtualBranchBrowsable;  TVirtualBranchBrowsable (const TBranch *b, TClass *type, bool typeIsPointer, const TVirtualBranchBrowsable *parent=nullptr);  Constructor setting all members according to parameters. ;  ; void SetType (TClass *type);  sets the type of this browsable object ;  ; void SetTypeIsPointer (bool set=true);  sets whether the type of this browsable object is a pointer ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void GetBrowsableMethodsForClass (TClass *cl, TList &list);  Given a class, this methods fills list with TMethodBrowsables for the class and its base classes, and returns the number of added elements. ;  ;  Static Protected Member Functions inherited from TVirtualBranchBrowsable; static TClass * GetCollectionContainedType (const TBranch *b, const TVirtualBranchBrowsable *parent, TClass *&contained);  Check whether the branch (or t",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:13473,Modifiability,inherit,inherited,13473,"r * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TMethodBrowsable (const TBranch *branch, TMethod *m, const TVirtualBranchBrowsable *parent=nullptr);  Constructor. ;  ;  Protected Member Functions inherited from TVirtualBranchBrowsable;  TVirtualBranchBrowsable (const TBranch *b, TClass *type, bool typeIsPointer, const TVirtualBranchBrowsable *parent=nullptr);  Constructor setting all members according to parameters. ;  ; void SetType (TClass *type);  sets the type of this browsable object ;  ; void SetTypeIsPointer (bool set=true);  sets whether the type of this browsable object is a pointer ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void GetBrowsableMethodsForClass (TClass *cl, TList &list);  Given a class, this methods fills list with TMethodBrowsables for the class and its base classes, and returns the number of added elements. ;  ;  Static Protected Member Functions inherited from TVirtualBranchBrowsable; static TClass * GetCollectionContainedType (const TBranch *b, const TVirtualBranchBrowsable *parent, TClass *&contained);  Check whether the branch (or the parent) contains a collection. ;  ; static std::list< MethodCreateListOfBrowsables_t > & GetRegisteredGenerators ();  returns the list of registered generator methods ;  ; static void RegisterGenerator (MethodCreateListOfBrowsables_t generator);  Adds a generator to be called when browsing branches. ;  ; sta",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:13939,Modifiability,inherit,inherited,13939,"tions inherited from TVirtualBranchBrowsable;  TVirtualBranchBrowsable (const TBranch *b, TClass *type, bool typeIsPointer, const TVirtualBranchBrowsable *parent=nullptr);  Constructor setting all members according to parameters. ;  ; void SetType (TClass *type);  sets the type of this browsable object ;  ; void SetTypeIsPointer (bool set=true);  sets whether the type of this browsable object is a pointer ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void GetBrowsableMethodsForClass (TClass *cl, TList &list);  Given a class, this methods fills list with TMethodBrowsables for the class and its base classes, and returns the number of added elements. ;  ;  Static Protected Member Functions inherited from TVirtualBranchBrowsable; static TClass * GetCollectionContainedType (const TBranch *b, const TVirtualBranchBrowsable *parent, TClass *&contained);  Check whether the branch (or the parent) contains a collection. ;  ; static std::list< MethodCreateListOfBrowsables_t > & GetRegisteredGenerators ();  returns the list of registered generator methods ;  ; static void RegisterGenerator (MethodCreateListOfBrowsables_t generator);  Adds a generator to be called when browsing branches. ;  ; static void UnregisterGenerator (MethodCreateListOfBrowsables_t generator);  Removes a generator from the list of generators to be called when browsing branches. ;  . Private Attributes; TMethod * fMethod {nullptr};  . Additional Inherited Members;  Public Types inherited from TVirtualBranchBrowsable; typedef Int_t(* MethodCreateListOfBrowsables_t) (TList &, const TBranch *branch, const TVirtualBranchBrowsable *parent);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kB",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:14704,Modifiability,inherit,inherited,14704,", and returns the number of added elements. ;  ;  Static Protected Member Functions inherited from TVirtualBranchBrowsable; static TClass * GetCollectionContainedType (const TBranch *b, const TVirtualBranchBrowsable *parent, TClass *&contained);  Check whether the branch (or the parent) contains a collection. ;  ; static std::list< MethodCreateListOfBrowsables_t > & GetRegisteredGenerators ();  returns the list of registered generator methods ;  ; static void RegisterGenerator (MethodCreateListOfBrowsables_t generator);  Adds a generator to be called when browsing branches. ;  ; static void UnregisterGenerator (MethodCreateListOfBrowsables_t generator);  Removes a generator from the list of generators to be called when browsing branches. ;  . Private Attributes; TMethod * fMethod {nullptr};  . Additional Inherited Members;  Public Types inherited from TVirtualBranchBrowsable; typedef Int_t(* MethodCreateListOfBrowsables_t) (TList &, const TBranch *branch, const TVirtualBranchBrowsable *parent);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchBrowsable.h>. Inheritance diagram for TMethodBrowsable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructo",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:14882,Modifiability,inherit,inherited,14882,", and returns the number of added elements. ;  ;  Static Protected Member Functions inherited from TVirtualBranchBrowsable; static TClass * GetCollectionContainedType (const TBranch *b, const TVirtualBranchBrowsable *parent, TClass *&contained);  Check whether the branch (or the parent) contains a collection. ;  ; static std::list< MethodCreateListOfBrowsables_t > & GetRegisteredGenerators ();  returns the list of registered generator methods ;  ; static void RegisterGenerator (MethodCreateListOfBrowsables_t generator);  Adds a generator to be called when browsing branches. ;  ; static void UnregisterGenerator (MethodCreateListOfBrowsables_t generator);  Removes a generator from the list of generators to be called when browsing branches. ;  . Private Attributes; TMethod * fMethod {nullptr};  . Additional Inherited Members;  Public Types inherited from TVirtualBranchBrowsable; typedef Int_t(* MethodCreateListOfBrowsables_t) (TList &, const TBranch *branch, const TVirtualBranchBrowsable *parent);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchBrowsable.h>. Inheritance diagram for TMethodBrowsable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructo",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:15523,Modifiability,inherit,inherited,15523,"wsing branches. ;  . Private Attributes; TMethod * fMethod {nullptr};  . Additional Inherited Members;  Public Types inherited from TVirtualBranchBrowsable; typedef Int_t(* MethodCreateListOfBrowsables_t) (TList &, const TBranch *branch, const TVirtualBranchBrowsable *parent);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchBrowsable.h>. Inheritance diagram for TMethodBrowsable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TMethodBrowsable(). TMethodBrowsable::~TMethodBrowsable ; (; ). inlineoverride . Definition at line 105 of file TBranchBrowsable.h. ◆ TMethodBrowsable(). TMethodBrowsable::TMethodBrowsable ; (; const TBranch * ; branch, . TMethod * ; m, . const TVirtualBranchBrowsable * ; parent = nullptr . ). protected . Constructor. ; Links a TBranchElement to a TMethod, allowing the TBrowser to browse simple methods.; The c'tor sets the name for a method ""Class::Method(params) const"" to ""Method(params)"", title to TMethod::GetPrototype ; Definition at line 409 of file TBranchBrowsable.cxx. Member Function Documentation. ◆ Class(). static TClass * TMethodBrowsable::Class ; (; ). static . ReturnsTClass des",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:15616,Modifiability,inherit,inherited,15616,"wsing branches. ;  . Private Attributes; TMethod * fMethod {nullptr};  . Additional Inherited Members;  Public Types inherited from TVirtualBranchBrowsable; typedef Int_t(* MethodCreateListOfBrowsables_t) (TList &, const TBranch *branch, const TVirtualBranchBrowsable *parent);  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchBrowsable.h>. Inheritance diagram for TMethodBrowsable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TMethodBrowsable(). TMethodBrowsable::~TMethodBrowsable ; (; ). inlineoverride . Definition at line 105 of file TBranchBrowsable.h. ◆ TMethodBrowsable(). TMethodBrowsable::TMethodBrowsable ; (; const TBranch * ; branch, . TMethod * ; m, . const TVirtualBranchBrowsable * ; parent = nullptr . ). protected . Constructor. ; Links a TBranchElement to a TMethod, allowing the TBrowser to browse simple methods.; The c'tor sets the name for a method ""Class::Method(params) const"" to ""Method(params)"", title to TMethod::GetPrototype ; Definition at line 409 of file TBranchBrowsable.cxx. Member Function Documentation. ◆ Class(). static TClass * TMethodBrowsable::Class ; (; ). static . ReturnsTClass des",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:743,Performance,load,loaded,743,". ROOT: TMethodBrowsable Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; List of all members ; TMethodBrowsable Class ReferenceTree Library. ; This helper object allows the browsing of methods of objects stored in branches. ; They will be depicted by a leaf (or a branch, in case the method returns an object) with a red exclamation mark. Only a subset of all methods will be shown in the browser (see IsMethodBrowsable for the criteria a method has to satisfy).; Obviously, methods are only available if the library is loaded which contains the dictionary for the class to be browsed!; If a branch contains a collection, TMethodBrowsable tries to find out what the contained element is (it will only create methods for the contained elements, but never for the collection). If it fails to extract the type of the contained elements, or if there is no guarantee that the type has any other common denominator than TObject (e.g. in the case of a TObjArray, which can hold any object deriving from TObject) no methods will be added. ; Definition at line 103 of file TBranchBrowsable.h. Public Member Functions;  ~TMethodBrowsable () override;  ; const char * GetIconName () const override;  return our special icons ;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TVirtualBranchBrowsable;  ~TVirtualBranchBrowsable () override;  Destructor. Delete our leaves. ;  ; void Browse (TBrowser *b) override;  Calls TTree::Draw on the method if return type is not a class; otherwise expands returned object's ""folder"". ;  ; const TBranch * GetBranch () const;  return the parent branch (might be many levels up) ; ",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:3723,Security,hash,hash,3723,"amerNVirtual_b);  ; bool TypeIsPointer () const;  return whether the type of this browsable object is a pointer ;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this met",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:19011,Security,access,access,19011,"r of added elements. ; If called from a TBranch::Browse overload, ""branch"" should be set to the calling TBranch, otherwise ""parent"" should be set to the TVirtualBranchBrowsable being browsed. ; Definition at line 501 of file TBranchBrowsable.cxx. ◆ GetIconName(). const char * TMethodBrowsable::GetIconName ; (; ); const. inlineoverridevirtual . return our special icons ; Reimplemented from TObject.; Definition at line 111 of file TBranchBrowsable.h. ◆ IsA(). TClass * TMethodBrowsable::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 128 of file TBranchBrowsable.h. ◆ IsMethodBrowsable(). bool TMethodBrowsable::IsMethodBrowsable ; (; const TMethod * ; m). static . A TMethod is browsable if it is const, public and not pure virtual, if does not have any parameter without default value, and if it has a (non-void) return value. ; A method called *, Get*, or get* will not be browsable if there is a persistent data member called f*, _*, or m*, as data member access is faster than method access. Examples: if one of fX, _X, or mX is a persistent data member, the methods GetX(), getX(), and X() will not be browsable. ; Definition at line 530 of file TBranchBrowsable.cxx. ◆ Register(). void TMethodBrowsable::Register ; (; ). static . Wrapper for the registration method. ; Needed against MSVC, which assigned different addr to the same method, depending on what translation unit you're in... ; Definition at line 585 of file TBranchBrowsable.cxx. ◆ Streamer(). void TMethodBrowsable::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMethodBrowsable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 128 of file TBranchBrowsable.h. ◆ Unregister(). void TMethodBrowsable::Unregister ; (; ). static . Wrapper for the registration method. ; Needed against MSVC, which assigne",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:19040,Security,access,access,19040,"r of added elements. ; If called from a TBranch::Browse overload, ""branch"" should be set to the calling TBranch, otherwise ""parent"" should be set to the TVirtualBranchBrowsable being browsed. ; Definition at line 501 of file TBranchBrowsable.cxx. ◆ GetIconName(). const char * TMethodBrowsable::GetIconName ; (; ); const. inlineoverridevirtual . return our special icons ; Reimplemented from TObject.; Definition at line 111 of file TBranchBrowsable.h. ◆ IsA(). TClass * TMethodBrowsable::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 128 of file TBranchBrowsable.h. ◆ IsMethodBrowsable(). bool TMethodBrowsable::IsMethodBrowsable ; (; const TMethod * ; m). static . A TMethod is browsable if it is const, public and not pure virtual, if does not have any parameter without default value, and if it has a (non-void) return value. ; A method called *, Get*, or get* will not be browsable if there is a persistent data member called f*, _*, or m*, as data member access is faster than method access. Examples: if one of fX, _X, or mX is a persistent data member, the methods GetX(), getX(), and X() will not be browsable. ; Definition at line 530 of file TBranchBrowsable.cxx. ◆ Register(). void TMethodBrowsable::Register ; (; ). static . Wrapper for the registration method. ; Needed against MSVC, which assigned different addr to the same method, depending on what translation unit you're in... ; Definition at line 585 of file TBranchBrowsable.cxx. ◆ Streamer(). void TMethodBrowsable::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMethodBrowsable::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 128 of file TBranchBrowsable.h. ◆ Unregister(). void TMethodBrowsable::Unregister ; (; ). static . Wrapper for the registration method. ; Needed against MSVC, which assigne",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodBrowsable.html:16280,Usability,simpl,simple,16280,"its { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TBranchBrowsable.h>. Inheritance diagram for TMethodBrowsable:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ ~TMethodBrowsable(). TMethodBrowsable::~TMethodBrowsable ; (; ). inlineoverride . Definition at line 105 of file TBranchBrowsable.h. ◆ TMethodBrowsable(). TMethodBrowsable::TMethodBrowsable ; (; const TBranch * ; branch, . TMethod * ; m, . const TVirtualBranchBrowsable * ; parent = nullptr . ). protected . Constructor. ; Links a TBranchElement to a TMethod, allowing the TBrowser to browse simple methods.; The c'tor sets the name for a method ""Class::Method(params) const"" to ""Method(params)"", title to TMethod::GetPrototype ; Definition at line 409 of file TBranchBrowsable.cxx. Member Function Documentation. ◆ Class(). static TClass * TMethodBrowsable::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMethodBrowsable::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMethodBrowsable::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 128 of file TBranchBrowsable.h. ◆ DeclFileName(). static const char * TMethodBrowsable::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 128 of file TBranchBrowsable.h. ◆ GetBrowsableMethodsForClass(). void TMethodBrowsable::GetBrowsableMethodsForClass ; (; TClass * ; cl, . TList & ; li . ). staticprotected ",MatchSource.WIKI,doc/master/classTMethodBrowsable.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodBrowsable.html
https://root.cern/doc/master/classTMethodCall.html:821,Availability,failure,failures,821,". ROOT: TMethodCall Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMethodCall Class Reference. ; Method or function calling interface. ; Objects of this class contain the (CINT) environment to call a global function or a method for an object of a specific class with the desired arguments. This class is especially useful when a method has to be called more times for different objects and/or with different arguments. If a function or method needs to be called only once one better uses TInterpreter::Execute().; A limitation is known with the present implementation: failures can occur if parameters involve temporary object construction. ; Definition at line 37 of file TMethodCall.h. Public Types; using EReturnType = TInterpreter::EReturnType;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMethodCall ();  Default TMethodCall ctor. ;  ;  TMethodCall (const char *function, const char *params);  Create a global function invocation environment. ;  ;  TMethodCall (const TFunction *func);  Create a global function invocation environment base on a TFunction object. ;  ;  TMethodCall (const TMethodCall &org);  Copy ctor. ; ",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:7760,Availability,error,error,7760,"egular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the ",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:7984,Availability,error,error,7984,"onst;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:12548,Availability,error,error,12548," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:19021,Availability,error,error,19021,"TClass * TMethodCall::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMethodCall::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMethodCall::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 128 of file TMethodCall.h. ◆ Clone(). TObject * TMethodCall::Clone ; (; const char * ; newname = """"); const. overridevirtual . Return an exact copy of this object. ; Reimplemented from TObject.; Definition at line 139 of file TMethodCall.cxx. ◆ DeclFileName(). static const char * TMethodCall::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 128 of file TMethodCall.h. ◆ Execute() [1/17]. void TMethodCall::Execute ; (; ). inline . Definition at line 131 of file TMethodCall.h. ◆ Execute() [2/17]. void TMethodCall::Execute ; (; const char * ; method, . const char * ; params, . int * ; error = nullptr . ). inlineoverrideprivatevirtual . Execute method on this object with the given parameter string, e.g. ; ""3.14,1,\""text\"""". ; Reimplemented from TObject.; Definition at line 64 of file TMethodCall.h. ◆ Execute() [3/17]. void TMethodCall::Execute ; (; const char * ; params). inline . Definition at line 133 of file TMethodCall.h. ◆ Execute() [4/17]. void TMethodCall::Execute ; (; const char * ; params, . Double_t & ; retDouble . ). inline . Definition at line 141 of file TMethodCall.h. ◆ Execute() [5/17]. void TMethodCall::Execute ; (; const char * ; params, . Longptr_t & ; retLong . ). inline . Definition at line 137 of file TMethodCall.h. ◆ Execute() [6/17]. void TMethodCall::Execute ; (; Double_t & ; retDouble). inline . Definition at line 139 of file TMethodCall.h. ◆ Execute() [7/17]. void TMethodCall::Execute ; (; Longptr_t & ; retLong). inline . Definition at line 135 of file TMethodCall.h. ◆ Execute() [8/17]. void TMethodCall::Execute ; (; TMethod * ; method, . TObjAr",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:20051,Availability,error,error,20051,"eprivatevirtual . Execute method on this object with the given parameter string, e.g. ; ""3.14,1,\""text\"""". ; Reimplemented from TObject.; Definition at line 64 of file TMethodCall.h. ◆ Execute() [3/17]. void TMethodCall::Execute ; (; const char * ; params). inline . Definition at line 133 of file TMethodCall.h. ◆ Execute() [4/17]. void TMethodCall::Execute ; (; const char * ; params, . Double_t & ; retDouble . ). inline . Definition at line 141 of file TMethodCall.h. ◆ Execute() [5/17]. void TMethodCall::Execute ; (; const char * ; params, . Longptr_t & ; retLong . ). inline . Definition at line 137 of file TMethodCall.h. ◆ Execute() [6/17]. void TMethodCall::Execute ; (; Double_t & ; retDouble). inline . Definition at line 139 of file TMethodCall.h. ◆ Execute() [7/17]. void TMethodCall::Execute ; (; Longptr_t & ; retLong). inline . Definition at line 135 of file TMethodCall.h. ◆ Execute() [8/17]. void TMethodCall::Execute ; (; TMethod * ; method, . TObjArray * ; params, . int * ; error = nullptr . ). inlineoverrideprivatevirtual . Execute method on this object with parameters stored in the TObjArray. ; The TObjArray should contain an argv vector like: argv[0] ... argv[n] = the list of TObjString parameters; TObjStringCollectable string class.Definition TObjString.h:28; nconst Int_t nDefinition legend1.C:16. Reimplemented from TObject.; Definition at line 65 of file TMethodCall.h. ◆ Execute() [9/17]. void TMethodCall::Execute ; (; void * ; objAddress, . const void * ; args[], . int ; nargs, . void * ; ret = nullptr . ). Invoke the method. ; Parameters. [in]objAddressAddress of the object to execute the method (nullptr if it is a free function) ; [in]argsArray of pointer to the address of the argument to pass to the function as is. No conversion is done, the argument must be of the expected type. ; [in]nargsNumber of arguments passed (must be less than actua size of args ; [out]retAddress of value (or object) to use for the return value. . Definition at line 552 of f",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:16670,Energy Efficiency,efficient,efficient,16670,"entation. ◆ EReturnType. using TMethodCall::EReturnType = TInterpreter::EReturnType. Definition at line 40 of file TMethodCall.h. Constructor & Destructor Documentation. ◆ TMethodCall() [1/6]. TMethodCall::TMethodCall ; (; ). Default TMethodCall ctor. ; Use Init() to initialize the method call environment. ; Definition at line 40 of file TMethodCall.cxx. ◆ TMethodCall() [2/6]. TMethodCall::TMethodCall ; (; TClass * ; cl, . CallFunc_t * ; callfunc, . Longptr_t ; offset = 0 . ). Create a method invocation environment for a specific class, method described by the callfunc. ; Definition at line 49 of file TMethodCall.cxx. ◆ TMethodCall() [3/6]. TMethodCall::TMethodCall ; (; TClass * ; cl, . const char * ; method, . const char * ; params . ). Create a method invocation environment for a specific class, method and parameters. ; The parameter string has the form: ""\""aap\"", 3, 4.35"". To execute the method call TMethodCall::Execute(object,...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 62 of file TMethodCall.cxx. ◆ TMethodCall() [4/6]. TMethodCall::TMethodCall ; (; const char * ; function, . const char * ; params . ). Create a global function invocation environment. ; The parameter string has the form: ""\""aap\"", 3, 4,35"". To execute the function call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 75 of file TMethodCall.cxx. ◆ TMethodCall() [5/6]. TMethodCall::TMethodCall ; (; const TFunction * ; func). Create a global function invocation environment base on a TFunction object. ; To execute the function call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 87 of file TMethodCall.cxx. ◆ TMethodCall() [6/6]. TMethodCall::TMethodCall ; (; const TMethodCall & ; org). Copy ctor. ; Definiti",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:17094,Energy Efficiency,efficient,efficient,17094," . CallFunc_t * ; callfunc, . Longptr_t ; offset = 0 . ). Create a method invocation environment for a specific class, method described by the callfunc. ; Definition at line 49 of file TMethodCall.cxx. ◆ TMethodCall() [3/6]. TMethodCall::TMethodCall ; (; TClass * ; cl, . const char * ; method, . const char * ; params . ). Create a method invocation environment for a specific class, method and parameters. ; The parameter string has the form: ""\""aap\"", 3, 4.35"". To execute the method call TMethodCall::Execute(object,...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 62 of file TMethodCall.cxx. ◆ TMethodCall() [4/6]. TMethodCall::TMethodCall ; (; const char * ; function, . const char * ; params . ). Create a global function invocation environment. ; The parameter string has the form: ""\""aap\"", 3, 4,35"". To execute the function call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 75 of file TMethodCall.cxx. ◆ TMethodCall() [5/6]. TMethodCall::TMethodCall ; (; const TFunction * ; func). Create a global function invocation environment base on a TFunction object. ; To execute the function call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 87 of file TMethodCall.cxx. ◆ TMethodCall() [6/6]. TMethodCall::TMethodCall ; (; const TMethodCall & ; org). Copy ctor. ; Definition at line 95 of file TMethodCall.cxx. ◆ ~TMethodCall(). TMethodCall::~TMethodCall ; (; ). TMethodCall dtor. ; Definition at line 130 of file TMethodCall.cxx. Member Function Documentation. ◆ CallDtorOnly(). void TMethodCall::CallDtorOnly ; (; Bool_t ; set = kTRUE). inline . Definition at line 87 of file TMethodCall.h. ◆ Class(). static TClass * TMethodCall::Class ; (; ). static . ReturnsTClass describing this class . ◆ ",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:17463,Energy Efficiency,efficient,efficient,17463,"specific class, method and parameters. ; The parameter string has the form: ""\""aap\"", 3, 4.35"". To execute the method call TMethodCall::Execute(object,...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 62 of file TMethodCall.cxx. ◆ TMethodCall() [4/6]. TMethodCall::TMethodCall ; (; const char * ; function, . const char * ; params . ). Create a global function invocation environment. ; The parameter string has the form: ""\""aap\"", 3, 4,35"". To execute the function call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 75 of file TMethodCall.cxx. ◆ TMethodCall() [5/6]. TMethodCall::TMethodCall ; (; const TFunction * ; func). Create a global function invocation environment base on a TFunction object. ; To execute the function call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 87 of file TMethodCall.cxx. ◆ TMethodCall() [6/6]. TMethodCall::TMethodCall ; (; const TMethodCall & ; org). Copy ctor. ; Definition at line 95 of file TMethodCall.cxx. ◆ ~TMethodCall(). TMethodCall::~TMethodCall ; (; ). TMethodCall dtor. ; Definition at line 130 of file TMethodCall.cxx. Member Function Documentation. ◆ CallDtorOnly(). void TMethodCall::CallDtorOnly ; (; Bool_t ; set = kTRUE). inline . Definition at line 87 of file TMethodCall.h. ◆ Class(). static TClass * TMethodCall::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMethodCall::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMethodCall::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 128 of file TMethodCall.h. ◆ Clone(). TObject * TMethodCall::Clone ; (; const char * ; newname = """"); const. ov",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:23979,Energy Efficiency,efficient,efficient,23979,"Call::GetMethod ; (; ). Returns the TMethod describing the method to be executed. ; This takes all overriding and overloading into account (call TClass::GetMethod()). Since finding the method is expensive the result is cached. ; Definition at line 386 of file TMethodCall.cxx. ◆ GetMethodName(). const char * TMethodCall::GetMethodName ; (; ); const. inline . Definition at line 90 of file TMethodCall.h. ◆ GetParams(). const char * TMethodCall::GetParams ; (; ); const. inline . Definition at line 91 of file TMethodCall.h. ◆ GetProto(). const char * TMethodCall::GetProto ; (; ); const. inline . Definition at line 92 of file TMethodCall.h. ◆ Init() [1/4]. void TMethodCall::Init ; (; const char * ; function, . const char * ; params . ). Initialize the function invocation environment. ; Necessary input information: the function name and the parameter string of the form ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 281 of file TMethodCall.cxx. ◆ Init() [2/4]. void TMethodCall::Init ; (; const TFunction * ; func). Initialize the method invocation environment based on the TFunction object. ; Definition at line 226 of file TMethodCall.cxx. ◆ Init() [3/4]. void TMethodCall::Init ; (; TClass * ; cl, . CallFunc_t * ; func, . Longptr_t ; offset = 0 . ). Initialize the method invocation environment based on the CallFunc object and the TClass describing the function context. ; Definition at line 185 of file TMethodCall.cxx. ◆ Init() [4/4]. void TMethodCall::Init ; (; TClass * ; cl, . const char * ; method, . const char * ; params, . Bool_t ; objectIsConst = kFALSE . ). Initialize the method invocation environment. ; Necessary input information: the class, method name and the parameter string of the form ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(object,...). This two step method is much more efficient th",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:24983,Energy Efficiency,efficient,efficient,24983,"ng for every invocation TInterpreter::Execute(...). ; Definition at line 281 of file TMethodCall.cxx. ◆ Init() [2/4]. void TMethodCall::Init ; (; const TFunction * ; func). Initialize the method invocation environment based on the TFunction object. ; Definition at line 226 of file TMethodCall.cxx. ◆ Init() [3/4]. void TMethodCall::Init ; (; TClass * ; cl, . CallFunc_t * ; func, . Longptr_t ; offset = 0 . ). Initialize the method invocation environment based on the CallFunc object and the TClass describing the function context. ; Definition at line 185 of file TMethodCall.cxx. ◆ Init() [4/4]. void TMethodCall::Init ; (; TClass * ; cl, . const char * ; method, . const char * ; params, . Bool_t ; objectIsConst = kFALSE . ). Initialize the method invocation environment. ; Necessary input information: the class, method name and the parameter string of the form ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(object,...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 260 of file TMethodCall.cxx. ◆ InitImplementation(). void TMethodCall::InitImplementation ; (; const char * ; methodname, . const char * ; params, . const char * ; proto, . Bool_t ; objectIsConst, . TClass * ; cl, . const ClassInfo_t * ; cinfo, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). private . This function implements Init and InitWithPrototype. ; 'methodname' should NOT have any scope information in it. The scope information should be passed via the TClass or CINT ClassInfo. ; Definition at line 296 of file TMethodCall.cxx. ◆ InitWithPrototype() [1/2]. void TMethodCall::InitWithPrototype ; (; const char * ; function, . const char * ; proto, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). Initialize the function invocation environment. ; Necessary input information: the function name and the prototype string of the form: ""char*,int,float"".; To execute the method call TMe",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:26057,Energy Efficiency,efficient,efficient,26057,"ne 260 of file TMethodCall.cxx. ◆ InitImplementation(). void TMethodCall::InitImplementation ; (; const char * ; methodname, . const char * ; params, . const char * ; proto, . Bool_t ; objectIsConst, . TClass * ; cl, . const ClassInfo_t * ; cinfo, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). private . This function implements Init and InitWithPrototype. ; 'methodname' should NOT have any scope information in it. The scope information should be passed via the TClass or CINT ClassInfo. ; Definition at line 296 of file TMethodCall.cxx. ◆ InitWithPrototype() [1/2]. void TMethodCall::InitWithPrototype ; (; const char * ; function, . const char * ; proto, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). Initialize the function invocation environment. ; Necessary input information: the function name and the prototype string of the form: ""char*,int,float"".; To execute the method call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 363 of file TMethodCall.cxx. ◆ InitWithPrototype() [2/2]. void TMethodCall::InitWithPrototype ; (; TClass * ; cl, . const char * ; method, . const char * ; proto, . Bool_t ; objectIsConst = kFALSE, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). Initialize the method invocation environment. ; Necessary input information: the class, method name and the prototype string of the form: ""char*,int,float"".; To execute the method call TMethodCall::Execute(object,...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 342 of file TMethodCall.cxx. ◆ IsA(). TClass * TMethodCall::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 128 of file TMethodCall.h. ◆ IsValid(). Bool_t TMethodCall::IsValid ; (; ); const. Return true if the method call has been",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:26665,Energy Efficiency,efficient,efficient,26665,"tWithPrototype ; (; const char * ; function, . const char * ; proto, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). Initialize the function invocation environment. ; Necessary input information: the function name and the prototype string of the form: ""char*,int,float"".; To execute the method call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 363 of file TMethodCall.cxx. ◆ InitWithPrototype() [2/2]. void TMethodCall::InitWithPrototype ; (; TClass * ; cl, . const char * ; method, . const char * ; proto, . Bool_t ; objectIsConst = kFALSE, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). Initialize the method invocation environment. ; Necessary input information: the class, method name and the prototype string of the form: ""char*,int,float"".; To execute the method call TMethodCall::Execute(object,...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 342 of file TMethodCall.cxx. ◆ IsA(). TClass * TMethodCall::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 128 of file TMethodCall.h. ◆ IsValid(). Bool_t TMethodCall::IsValid ; (; ); const. Return true if the method call has been properly initialized and is usable. ; Definition at line 376 of file TMethodCall.cxx. ◆ operator=(). TMethodCall & TMethodCall::operator= ; (; const TMethodCall & ; rhs). Assignment operator. ; Definition at line 107 of file TMethodCall.cxx. ◆ ResetParam(). void TMethodCall::ResetParam ; (; ). Reset parameter list. To be used before the first call the SetParam(). ; Definition at line 597 of file TMethodCall.cxx. ◆ ReturnType(). TMethodCall::EReturnType TMethodCall::ReturnType ; (; ). Returns the return type of the method. ; Either (unsigned) long, int, short and char, or float and double or anything ",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:376,Integrability,interface,interface,376,". ROOT: TMethodCall Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMethodCall Class Reference. ; Method or function calling interface. ; Objects of this class contain the (CINT) environment to call a global function or a method for an object of a specific class with the desired arguments. This class is especially useful when a method has to be called more times for different objects and/or with different arguments. If a function or method needs to be called only once one better uses TInterpreter::Execute().; A limitation is known with the present implementation: failures can occur if parameters involve temporary object construction. ; Definition at line 37 of file TMethodCall.h. Public Types; using EReturnType = TInterpreter::EReturnType;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMethodCall ();  Default TMethodCall ctor. ;  ;  TMethodCall (const char *function, const char *params);  Create a global function invocation environment. ;  ;  TMethodCall (const TFunction *func);  Create a global function invocation environment base on a TFunction object. ;  ;  TMethodCall (const TMethodCall &org);  Copy ctor. ; ",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:7766,Integrability,message,message,7766,"egular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the ",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:7990,Integrability,message,message,7990,"onst;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:9192,Integrability,message,message,9192,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:12554,Integrability,message,message,12554," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:12927,Integrability,message,message,12927," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Stati",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:1018,Modifiability,inherit,inherited,1018,"nce Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Static Public Attributes |; Private Member Functions |; Private Attributes |; List of all members ; TMethodCall Class Reference. ; Method or function calling interface. ; Objects of this class contain the (CINT) environment to call a global function or a method for an object of a specific class with the desired arguments. This class is especially useful when a method has to be called more times for different objects and/or with different arguments. If a function or method needs to be called only once one better uses TInterpreter::Execute().; A limitation is known with the present implementation: failures can occur if parameters involve temporary object construction. ; Definition at line 37 of file TMethodCall.h. Public Types; using EReturnType = TInterpreter::EReturnType;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMethodCall ();  Default TMethodCall ctor. ;  ;  TMethodCall (const char *function, const char *params);  Create a global function invocation environment. ;  ;  TMethodCall (const TFunction *func);  Create a global function invocation environment base on a TFunction object. ;  ;  TMethodCall (const TMethodCall &org);  Copy ctor. ;  ;  TMethodCall (TClass *cl, CallFunc_t *callfunc, Longptr_t of",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:6116,Modifiability,inherit,inherited,6116,"e;  ; Bool_t IsValid () const;  Return true if the method call has been properly initialized and is usable. ;  ; TMethodCall & operator= (const TMethodCall &rhs);  Assignment operator. ;  ; void ResetParam ();  Reset parameter list. To be used before the first call the SetParam(). ;  ; EReturnType ReturnType ();  Returns the return type of the method. ;  ; void SetParam (Double_t d);  Add a double method parameter. ;  ; void SetParam (Float_t f);  Add a double method parameter. ;  ; void SetParam (Long64_t ll);  Add a long long method parameter. ;  ; void SetParam (Long_t l);  Add a long method parameter. ;  ; void SetParam (ULong64_t ull);  Add a unsigned long long method parameter. ;  ; void SetParamPtrs (void *paramArr, Int_t nparam=-1);  Set pointers to parameters. ;  ; template<typename... T> ; void SetParams (const T &... params);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void ",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:7396,Modifiability,inherit,inheritance,7396,"want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virt",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:9290,Modifiability,inherit,inherits,9290,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:9407,Modifiability,inherit,inherits,9407,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:13428,Modifiability,inherit,inherited,13428,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Static Public Attributes; static const EReturnType kDouble = TInterpreter::EReturnType::kDouble;  ; static const EReturnType kLong = TInterpreter::EReturnType::kLong;  ; static const EReturnType kNone = TInterpreter::EReturnType::kNoReturnType;  ; static const EReturnType kNoReturnType = TInterpreter::EReturnType::kNoReturnType;  ; static const EReturnType kOther = TInterpreter::EReturnType::kOther;  ; static const EReturnType kString = TInterpreter::EReturnType::kString;  . Private Member Functions; void Execute (const",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:15224,Modifiability,inherit,inherited,15224," const EReturnType kString = TInterpreter::EReturnType::kString;  . Private Member Functions; void Execute (const char *, const char *, int *=nullptr) override;  Execute method on this object with the given parameter string, e.g. ;  ; void Execute (TMethod *, TObjArray *, int *=nullptr) override;  Execute method on this object with parameters stored in the TObjArray. ;  ; void InitImplementation (const char *methodname, const char *params, const char *proto, Bool_t objectIsConst, TClass *cl, const ClassInfo_t *cinfo, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch);  This function implements Init and InitWithPrototype. ;  . Private Attributes; TClass * fClass;  ; Bool_t fDtorOnly;  ; CallFunc_t * fFunc;  ; TString fMethod;  ; TFunction * fMetPtr;  ; Longptr_t fOffset;  ; TString fParams;  ; TString fProto;  ; EReturnType fRetType;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMethodCall.h>. Inheritance diagram for TMethodCall:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EReturnType. using TMethodCall::EReturnType = TInterpreter::EReturnType. Definition at line 40 of file TMethodCall.h. Constructor & Destructor Documentation. ◆ TMethodCall() [1/6]. TMethodCall::TMethodCall ; (; ). Default TMethodCall ctor. ; Use Init() to initialize the method call environment. ; Definition at line 40 of file TMethodCall.cxx. ◆ TMethodCall() [2/6]. TMethodCall::TMethodCall ; (; TClass * ; cl, . CallFunc_t * ; callfunc, . Longptr_t ; offset = 0 . ). Create a method invocation environment for a specific class, method described by the callfunc. ; Definition at line 49 of file TMethodCall.cxx. ◆ TMethodCall()",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:15323,Modifiability,inherit,inherited,15323," const EReturnType kString = TInterpreter::EReturnType::kString;  . Private Member Functions; void Execute (const char *, const char *, int *=nullptr) override;  Execute method on this object with the given parameter string, e.g. ;  ; void Execute (TMethod *, TObjArray *, int *=nullptr) override;  Execute method on this object with parameters stored in the TObjArray. ;  ; void InitImplementation (const char *methodname, const char *params, const char *proto, Bool_t objectIsConst, TClass *cl, const ClassInfo_t *cinfo, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch);  This function implements Init and InitWithPrototype. ;  . Private Attributes; TClass * fClass;  ; Bool_t fDtorOnly;  ; CallFunc_t * fFunc;  ; TString fMethod;  ; TFunction * fMetPtr;  ; Longptr_t fOffset;  ; TString fParams;  ; TString fProto;  ; EReturnType fRetType;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMethodCall.h>. Inheritance diagram for TMethodCall:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EReturnType. using TMethodCall::EReturnType = TInterpreter::EReturnType. Definition at line 40 of file TMethodCall.h. Constructor & Destructor Documentation. ◆ TMethodCall() [1/6]. TMethodCall::TMethodCall ; (; ). Default TMethodCall ctor. ; Use Init() to initialize the method call environment. ; Definition at line 40 of file TMethodCall.cxx. ◆ TMethodCall() [2/6]. TMethodCall::TMethodCall ; (; TClass * ; cl, . CallFunc_t * ; callfunc, . Longptr_t ; offset = 0 . ). Create a method invocation environment for a specific class, method described by the callfunc. ; Definition at line 49 of file TMethodCall.cxx. ◆ TMethodCall()",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:23214,Performance,cache,cached,23214,"MethodCall::Execute ; (; void * ; object, . const char * ; params, . Longptr_t & ; retLong . ). Execute the method for the specified object and argument values. ; Definition at line 467 of file TMethodCall.cxx. ◆ Execute() [16/17]. void TMethodCall::Execute ; (; void * ; object, . Double_t & ; retDouble . ). Execute the method (with preset arguments) for the specified object. ; Definition at line 484 of file TMethodCall.cxx. ◆ Execute() [17/17]. void TMethodCall::Execute ; (; void * ; object, . Longptr_t & ; retLong . ). Execute the method (with preset arguments) for the specified object. ; Definition at line 453 of file TMethodCall.cxx. ◆ GetCallFunc(). CallFunc_t * TMethodCall::GetCallFunc ; (; ); const. inline . Definition at line 93 of file TMethodCall.h. ◆ GetMethod(). TFunction * TMethodCall::GetMethod ; (; ). Returns the TMethod describing the method to be executed. ; This takes all overriding and overloading into account (call TClass::GetMethod()). Since finding the method is expensive the result is cached. ; Definition at line 386 of file TMethodCall.cxx. ◆ GetMethodName(). const char * TMethodCall::GetMethodName ; (; ); const. inline . Definition at line 90 of file TMethodCall.h. ◆ GetParams(). const char * TMethodCall::GetParams ; (; ); const. inline . Definition at line 91 of file TMethodCall.h. ◆ GetProto(). const char * TMethodCall::GetProto ; (; ); const. inline . Definition at line 92 of file TMethodCall.h. ◆ Init() [1/4]. void TMethodCall::Init ; (; const char * ; function, . const char * ; params . ). Initialize the function invocation environment. ; Necessary input information: the function name and the parameter string of the form ""\""aap\"", 3, 4.35"".; To execute the method call TMethodCall::Execute(...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 281 of file TMethodCall.cxx. ◆ Init() [2/4]. void TMethodCall::Init ; (; const TFunction * ; func). Initialize the meth",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:27744,Performance,cache,cached,27744,"ter::Execute(...). ; Definition at line 342 of file TMethodCall.cxx. ◆ IsA(). TClass * TMethodCall::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 128 of file TMethodCall.h. ◆ IsValid(). Bool_t TMethodCall::IsValid ; (; ); const. Return true if the method call has been properly initialized and is usable. ; Definition at line 376 of file TMethodCall.cxx. ◆ operator=(). TMethodCall & TMethodCall::operator= ; (; const TMethodCall & ; rhs). Assignment operator. ; Definition at line 107 of file TMethodCall.cxx. ◆ ResetParam(). void TMethodCall::ResetParam ; (; ). Reset parameter list. To be used before the first call the SetParam(). ; Definition at line 597 of file TMethodCall.cxx. ◆ ReturnType(). TMethodCall::EReturnType TMethodCall::ReturnType ; (; ). Returns the return type of the method. ; Either (unsigned) long, int, short and char, or float and double or anything else. Since finding the return type is expensive the result is cached. ; Definition at line 565 of file TMethodCall.cxx. ◆ SetParam() [1/5]. void TMethodCall::SetParam ; (; Double_t ; d). Add a double method parameter. ; Definition at line 624 of file TMethodCall.cxx. ◆ SetParam() [2/5]. void TMethodCall::SetParam ; (; Float_t ; f). Add a double method parameter. ; Definition at line 615 of file TMethodCall.cxx. ◆ SetParam() [3/5]. void TMethodCall::SetParam ; (; Long64_t ; ll). Add a long long method parameter. ; Definition at line 633 of file TMethodCall.cxx. ◆ SetParam() [4/5]. void TMethodCall::SetParam ; (; Long_t ; l). Add a long method parameter. ; Definition at line 606 of file TMethodCall.cxx. ◆ SetParam() [5/5]. void TMethodCall::SetParam ; (; ULong64_t ; ull). Add a unsigned long long method parameter. ; Definition at line 642 of file TMethodCall.cxx. ◆ SetParamPtrs(). void TMethodCall::SetParamPtrs ; (; void * ; paramArr, . Int_t ; nparam = -1 . ). Set pointers to parameters. ; Parameters. paramArran array cont",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:8921,Security,hash,hash,8921," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:5197,Usability,usab,usable,5197,"(const char *function, const char *params);  Initialize the function invocation environment. ;  ; void Init (const TFunction *func);  Initialize the method invocation environment based on the TFunction object. ;  ; void Init (TClass *cl, CallFunc_t *func, Longptr_t offset=0);  Initialize the method invocation environment based on the CallFunc object and the TClass describing the function context. ;  ; void Init (TClass *cl, const char *method, const char *params, Bool_t objectIsConst=kFALSE);  Initialize the method invocation environment. ;  ; void InitWithPrototype (const char *function, const char *proto, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch);  Initialize the function invocation environment. ;  ; void InitWithPrototype (TClass *cl, const char *method, const char *proto, Bool_t objectIsConst=kFALSE, ROOT::EFunctionMatchMode mode=ROOT::kConversionMatch);  Initialize the method invocation environment. ;  ; TClass * IsA () const override;  ; Bool_t IsValid () const;  Return true if the method call has been properly initialized and is usable. ;  ; TMethodCall & operator= (const TMethodCall &rhs);  Assignment operator. ;  ; void ResetParam ();  Reset parameter list. To be used before the first call the SetParam(). ;  ; EReturnType ReturnType ();  Returns the return type of the method. ;  ; void SetParam (Double_t d);  Add a double method parameter. ;  ; void SetParam (Float_t f);  Add a double method parameter. ;  ; void SetParam (Long64_t ll);  Add a long long method parameter. ;  ; void SetParam (Long_t l);  Add a long method parameter. ;  ; void SetParam (ULong64_t ull);  Add a unsigned long long method parameter. ;  ; void SetParamPtrs (void *paramArr, Int_t nparam=-1);  Set pointers to parameters. ;  ; template<typename... T> ; void SetParams (const T &... params);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TO",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMethodCall.html:27102,Usability,usab,usable,27102," calling for every invocation TInterpreter::Execute(...). ; Definition at line 363 of file TMethodCall.cxx. ◆ InitWithPrototype() [2/2]. void TMethodCall::InitWithPrototype ; (; TClass * ; cl, . const char * ; method, . const char * ; proto, . Bool_t ; objectIsConst = kFALSE, . ROOT::EFunctionMatchMode ; mode = ROOT::kConversionMatch . ). Initialize the method invocation environment. ; Necessary input information: the class, method name and the prototype string of the form: ""char*,int,float"".; To execute the method call TMethodCall::Execute(object,...). This two step method is much more efficient than calling for every invocation TInterpreter::Execute(...). ; Definition at line 342 of file TMethodCall.cxx. ◆ IsA(). TClass * TMethodCall::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 128 of file TMethodCall.h. ◆ IsValid(). Bool_t TMethodCall::IsValid ; (; ); const. Return true if the method call has been properly initialized and is usable. ; Definition at line 376 of file TMethodCall.cxx. ◆ operator=(). TMethodCall & TMethodCall::operator= ; (; const TMethodCall & ; rhs). Assignment operator. ; Definition at line 107 of file TMethodCall.cxx. ◆ ResetParam(). void TMethodCall::ResetParam ; (; ). Reset parameter list. To be used before the first call the SetParam(). ; Definition at line 597 of file TMethodCall.cxx. ◆ ReturnType(). TMethodCall::EReturnType TMethodCall::ReturnType ; (; ). Returns the return type of the method. ; Either (unsigned) long, int, short and char, or float and double or anything else. Since finding the return type is expensive the result is cached. ; Definition at line 565 of file TMethodCall.cxx. ◆ SetParam() [1/5]. void TMethodCall::SetParam ; (; Double_t ; d). Add a double method parameter. ; Definition at line 624 of file TMethodCall.cxx. ◆ SetParam() [2/5]. void TMethodCall::SetParam ; (; Float_t ; f). Add a double method parameter. ; Definition at line 615",MatchSource.WIKI,doc/master/classTMethodCall.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMethodCall.html
https://root.cern/doc/master/classTMinuit-members.html:1748,Availability,error,error,1748,"virtual; Contour(Int_t npoints=10, Int_t pa1=0, Int_t pa2=1)TMinuitvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TMinuitinlinestatic; DefineParameter(Int_t parNo, const char *name, Double_t initVal, Double_t initErr, Double_t lowerLimit, Double_t upperLimit)TMinuitvirtual; Delete(Option_t *option="""")TObjectvirtual; DeleteArrays()TMinuitvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Eval(Int_t npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag)TMinuitvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAlimTMinuit; fAminTMinuit; fApsiTMinuit; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBigedmTMinuit; fBitsTObjectprivate; fBlimTMinuit; fCfromTMinuit; fChptTMinuit; fCOMDplistTMinuit; fCONTgccTMinuit; fCONTwTMinuit; fCovmesTMinuit; fCpnamTMinuit; fCstatuTMinuit; fCtitlTMinuit; fCundefTMinuit; fCvrsnTMinuit; fCwordTMinuit; fDcovarTMinuit; fDgrdTMinuit; fDirinTMinuit; fDirinsTMinuit; fEDMTMinuit; fEmptyTMinuit; fEpsiTMinuit; fEpsma2TMinuit; fEpsmacTMinuit; fErnTMinuit; fErpTMinuit; fFCNTMinuit; fFIXPyyTMinuit; fFval3TMinuit; fG2TMinuit; fG2sTMinuit; fgDtorOnlyTObjectprivatestatic; fGinTMinuit; fGlobccTMinuit; fgObjectStatTObjectprivatestatic; fGRADgfTMinuit; fGraphicsModeTMinuit; fGrdTMinuit; fGrdsTMinuit; fGstepTMinuit; fGstepsTMinuit; fHESSyyTMinuit; fIcircTMinuit; fIcomndTMinuit; fIdbgTMinuit; FillBuffer(char *&buffer)",MatchSource.WIKI,doc/master/classTMinuit-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit-members.html
https://root.cern/doc/master/classTMinuit-members.html:1829,Availability,error,error,1829,"virtual; Contour(Int_t npoints=10, Int_t pa1=0, Int_t pa2=1)TMinuitvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TMinuitinlinestatic; DefineParameter(Int_t parNo, const char *name, Double_t initVal, Double_t initErr, Double_t lowerLimit, Double_t upperLimit)TMinuitvirtual; Delete(Option_t *option="""")TObjectvirtual; DeleteArrays()TMinuitvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Eval(Int_t npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag)TMinuitvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAlimTMinuit; fAminTMinuit; fApsiTMinuit; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBigedmTMinuit; fBitsTObjectprivate; fBlimTMinuit; fCfromTMinuit; fChptTMinuit; fCOMDplistTMinuit; fCONTgccTMinuit; fCONTwTMinuit; fCovmesTMinuit; fCpnamTMinuit; fCstatuTMinuit; fCtitlTMinuit; fCundefTMinuit; fCvrsnTMinuit; fCwordTMinuit; fDcovarTMinuit; fDgrdTMinuit; fDirinTMinuit; fDirinsTMinuit; fEDMTMinuit; fEmptyTMinuit; fEpsiTMinuit; fEpsma2TMinuit; fEpsmacTMinuit; fErnTMinuit; fErpTMinuit; fFCNTMinuit; fFIXPyyTMinuit; fFval3TMinuit; fG2TMinuit; fG2sTMinuit; fgDtorOnlyTObjectprivatestatic; fGinTMinuit; fGlobccTMinuit; fgObjectStatTObjectprivatestatic; fGRADgfTMinuit; fGraphicsModeTMinuit; fGrdTMinuit; fGrdsTMinuit; fGstepTMinuit; fGstepsTMinuit; fHESSyyTMinuit; fIcircTMinuit; fIcomndTMinuit; fIdbgTMinuit; FillBuffer(char *&buffer)",MatchSource.WIKI,doc/master/classTMinuit-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit-members.html
https://root.cern/doc/master/classTMinuit-members.html:8220,Availability,toler,toler,8220,"TMinuitvirtual; mndxdi(Double_t pint, Int_t ipar, Double_t &dxdi)TMinuitvirtual; mneig(Double_t *a, Int_t ndima, Int_t n, Int_t mits, Double_t *work, Double_t precis, Int_t &ifault)TMinuitvirtual; mnemat(Double_t *emat, Int_t ndim)TMinuitvirtual; mnerrs(Int_t number, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &gcc)TMinuitvirtual; mneval(Double_t anext, Double_t &fnext, Int_t &ierev)TMinuitvirtual; mnexcm(const char *comand, Double_t *plist, Int_t llist, Int_t &ierflg)TMinuitvirtual; mnexin(Double_t *pint)TMinuitvirtual; mnfixp(Int_t iint, Int_t &ierr)TMinuitvirtual; mnfree(Int_t k)TMinuitvirtual; mngrad()TMinuitvirtual; mnhelp(TString comd)TMinuitvirtual; mnhelp(const char *command="""")TMinuitvirtual; mnhes1()TMinuitvirtual; mnhess()TMinuitvirtual; mnimpr()TMinuitvirtual; mninex(Double_t *pint)TMinuitvirtual; mninit(Int_t i1, Int_t i2, Int_t i3)TMinuitvirtual; mnlims()TMinuitvirtual; mnline(Double_t *start, Double_t fstart, Double_t *step, Double_t slope, Double_t toler)TMinuitvirtual; mnmatu(Int_t kode)TMinuitvirtual; mnmigr()TMinuitvirtual; mnmnos()TMinuitvirtual; mnmnot(Int_t ilax, Int_t ilax2, Double_t &val2pl, Double_t &val2mi)TMinuitvirtual; mnparm(Int_t k, TString cnamj, Double_t uk, Double_t wk, Double_t a, Double_t b, Int_t &ierflg)TMinuitvirtual; mnpars(TString &crdbuf, Int_t &icondn)TMinuitvirtual; mnpfit(Double_t *parx2p, Double_t *pary2p, Int_t npar2p, Double_t *coef2p, Double_t &sdev2p)TMinuitvirtual; mnpint(Double_t &pexti, Int_t i, Double_t &pinti)TMinuitvirtual; mnplot(Double_t *xpt, Double_t *ypt, char *chpt, Int_t nxypt, Int_t npagwd, Int_t npagln)TMinuitvirtual; mnpout(Int_t iuext, TString &chnam, Double_t &val, Double_t &err, Double_t &xlolim, Double_t &xuplim, Int_t &iuint) constTMinuitvirtual; mnprin(Int_t inkode, Double_t fval)TMinuitvirtual; mnpsdf()TMinuitvirtual; mnrazz(Double_t ynew, Double_t *pnew, Double_t *y, Int_t &jh, Int_t &jl)TMinuitvirtual; mnrn15(Double_t &val, Int_t &inseed)TMinuitvirtual; mnrset(Int_t iopt)TMi",MatchSource.WIKI,doc/master/classTMinuit-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit-members.html
https://root.cern/doc/master/classTMinuit-members.html:187,Modifiability,inherit,inherited,187,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMinuit Member List. This is the complete list of members for TMinuit, including all inherited members. AbstractMethod(const char *method) constTObject; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; Browse(TBrowser *b)TObjectvirtual; BuildArrays(Int_t maxpar=15)TMinuitvirtual; CheckedHash()TObjectinline; Class()TMinuitstatic; Class_Name()TMinuitstatic; Class_Version()TMinuitinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTMinuitvirtual; Command(const char *command)TMinuitvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Contour(Int_t npoints=10, Int_t pa1=0, Int_t pa2=1)TMinuitvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TMinuitinlinestatic; DefineParameter(Int_t parNo, const char *name, Double_t initVal, Double_t initErr, Double_t lowerLimit, Double_t upperLimit)TMinuitvirtual; Delete(Option_t *option="""")TObjectvirtual; DeleteArrays()TMinuitvirtual; DistancetoPrimitive(Int_t px, Int_t py)TObjectvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *option="""")TObjectvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Eval(Int_t npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag)TMinuitvirtual; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; fAlimTMinuit; fAminTMinuit; fApsiTMinuit; Fatal(const char *method, const char *m",MatchSource.WIKI,doc/master/classTMinuit-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit-members.html
https://root.cern/doc/master/classTMinuit.html:3336,Availability,down,down,3336,"c) and the data for given values of the parameters. It is the task of MINUIT to find those values of the parameters which give the lowest value of chisquare. Basic concepts - The transformation for parameters with limits.; For variable parameters with limits, MINUIT uses the following transformation:. \[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \]. so that the internal value \(P_{\mathrm{int}}\) can take on any value, while the external value \(P_{\mathrm{ext}}\) can take on values only between the lower limit \(a\) and the upper limit \(b\). Since the transformation is necessarily non-linear, it would transform a nice linear problem into a nasty non-linear one, which is the reason why limits should be avoided if not necessary. In addition, the transformation does require some computer time, so it slows down the computation a little bit, and more importantly, it introduces additional numerical inaccuracy into the problem in addition to what is introduced in the numerical calculation of the FCN value. The effects of non-linearity and numerical roundoff both become more important as the external value gets closer to one of the limits (expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if he puts limits of \((0,10^{10})\) on a parameter, then the values \(0.0\) and \(1.0\) will be indistinguishable to the accuracy of most machines.; The transformation also affects the parameter error matrix, of course, so Minuit does a transformation of the error matrix (and the `‘parabolic’' parameter errors) when there are parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\partial P_{\mathrm{ext}} / \partial P_{\math",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:4012,Availability,error,error,4012,"\(b\). Since the transformation is necessarily non-linear, it would transform a nice linear problem into a nasty non-linear one, which is the reason why limits should be avoided if not necessary. In addition, the transformation does require some computer time, so it slows down the computation a little bit, and more importantly, it introduces additional numerical inaccuracy into the problem in addition to what is introduced in the numerical calculation of the FCN value. The effects of non-linearity and numerical roundoff both become more important as the external value gets closer to one of the limits (expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if he puts limits of \((0,10^{10})\) on a parameter, then the values \(0.0\) and \(1.0\) will be indistinguishable to the accuracy of most machines.; The transformation also affects the parameter error matrix, of course, so Minuit does a transformation of the error matrix (and the `‘parabolic’' parameter errors) when there are parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\). Therefore, it is recommended that:. Limits on variable parameters should be used only when needed in order to prevent the parameter from taking on unphysical values.; When a satisfactory minimum has been found using limits, the limits should then be removed if possible, in order to perform or re-perform the error analysis without limits. How to get the right answer from MINUIT.; MINUIT offers the user a choice of several minimization algorithms. The MIGRAD algorithm is in general the best minimizer for nearly all functions. It is a variable-metric method with inexact line search, a stable metric updating scheme, and checks for positive-",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:4076,Availability,error,error,4076,"\(b\). Since the transformation is necessarily non-linear, it would transform a nice linear problem into a nasty non-linear one, which is the reason why limits should be avoided if not necessary. In addition, the transformation does require some computer time, so it slows down the computation a little bit, and more importantly, it introduces additional numerical inaccuracy into the problem in addition to what is introduced in the numerical calculation of the FCN value. The effects of non-linearity and numerical roundoff both become more important as the external value gets closer to one of the limits (expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if he puts limits of \((0,10^{10})\) on a parameter, then the values \(0.0\) and \(1.0\) will be indistinguishable to the accuracy of most machines.; The transformation also affects the parameter error matrix, of course, so Minuit does a transformation of the error matrix (and the `‘parabolic’' parameter errors) when there are parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\). Therefore, it is recommended that:. Limits on variable parameters should be used only when needed in order to prevent the parameter from taking on unphysical values.; When a satisfactory minimum has been found using limits, the limits should then be removed if possible, in order to perform or re-perform the error analysis without limits. How to get the right answer from MINUIT.; MINUIT offers the user a choice of several minimization algorithms. The MIGRAD algorithm is in general the best minimizer for nearly all functions. It is a variable-metric method with inexact line search, a stable metric updating scheme, and checks for positive-",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:4122,Availability,error,errors,4122,"\(b\). Since the transformation is necessarily non-linear, it would transform a nice linear problem into a nasty non-linear one, which is the reason why limits should be avoided if not necessary. In addition, the transformation does require some computer time, so it slows down the computation a little bit, and more importantly, it introduces additional numerical inaccuracy into the problem in addition to what is introduced in the numerical calculation of the FCN value. The effects of non-linearity and numerical roundoff both become more important as the external value gets closer to one of the limits (expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if he puts limits of \((0,10^{10})\) on a parameter, then the values \(0.0\) and \(1.0\) will be indistinguishable to the accuracy of most machines.; The transformation also affects the parameter error matrix, of course, so Minuit does a transformation of the error matrix (and the `‘parabolic’' parameter errors) when there are parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\). Therefore, it is recommended that:. Limits on variable parameters should be used only when needed in order to prevent the parameter from taking on unphysical values.; When a satisfactory minimum has been found using limits, the limits should then be removed if possible, in order to perform or re-perform the error analysis without limits. How to get the right answer from MINUIT.; MINUIT offers the user a choice of several minimization algorithms. The MIGRAD algorithm is in general the best minimizer for nearly all functions. It is a variable-metric method with inexact line search, a stable metric updating scheme, and checks for positive-",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:4728,Availability,error,error,4728,"(expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if he puts limits of \((0,10^{10})\) on a parameter, then the values \(0.0\) and \(1.0\) will be indistinguishable to the accuracy of most machines.; The transformation also affects the parameter error matrix, of course, so Minuit does a transformation of the error matrix (and the `‘parabolic’' parameter errors) when there are parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\). Therefore, it is recommended that:. Limits on variable parameters should be used only when needed in order to prevent the parameter from taking on unphysical values.; When a satisfactory minimum has been found using limits, the limits should then be removed if possible, in order to perform or re-perform the error analysis without limits. How to get the right answer from MINUIT.; MINUIT offers the user a choice of several minimization algorithms. The MIGRAD algorithm is in general the best minimizer for nearly all functions. It is a variable-metric method with inexact line search, a stable metric updating scheme, and checks for positive-definiteness. Its main weakness is that it depends heavily on knowledge of the first derivatives, and fails miserably if they are very inaccurate.; If parameter limits are needed, in spite of the side effects, then the user should be aware of the following techniques to alleviate problems caused by limits:; Getting the right minimum with limits.; If MIGRAD converges normally to a point where no parameter is near one of its limits, then the existence of limits has probably not prevented MINUIT from finding the right minimum. On the other hand, if one or more parameters is near its limit at the minimum,",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:6490,Availability,error,errors,6490," its limits, then the existence of limits has probably not prevented MINUIT from finding the right minimum. On the other hand, if one or more parameters is near its limit at the minimum, this may be because the true minimum is indeed at a limit, or it may be because the minimizer has become `‘blocked’' at a limit. This may normally happen only if the parameter is so close to a limit (internal value at an odd multiple of \(\pm \frac{\pi}{2}\) that MINUIT prints a warning to this effect when it prints the parameter values.; The minimizer can become blocked at a limit, because at a limit the derivative seen by the minimizer \(\partial F / \partial P_{\mathrm{int}}\) is zero no matter what the real derivative \(\partial F / \partial P_{\mathrm{ext}}\) is. \[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \]. Getting the right parameter errors with limits.; In the best case, where the minimum is far from any limits, MINUIT will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.Jame",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:6607,Availability,error,error,6607," more parameters is near its limit at the minimum, this may be because the true minimum is indeed at a limit, or it may be because the minimizer has become `‘blocked’' at a limit. This may normally happen only if the parameter is so close to a limit (internal value at an odd multiple of \(\pm \frac{\pi}{2}\) that MINUIT prints a warning to this effect when it prints the parameter values.; The minimizer can become blocked at a limit, because at a limit the derivative seen by the minimizer \(\partial F / \partial P_{\mathrm{int}}\) is zero no matter what the real derivative \(\partial F / \partial P_{\mathrm{ext}}\) is. \[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \]. Getting the right parameter errors with limits.; In the best case, where the minimum is far from any limits, MINUIT will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Ea",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:6639,Availability,error,errors,6639," more parameters is near its limit at the minimum, this may be because the true minimum is indeed at a limit, or it may be because the minimizer has become `‘blocked’' at a limit. This may normally happen only if the parameter is so close to a limit (internal value at an odd multiple of \(\pm \frac{\pi}{2}\) that MINUIT prints a warning to this effect when it prints the parameter values.; The minimizer can become blocked at a limit, because at a limit the derivative seen by the minimizer \(\partial F / \partial P_{\mathrm{int}}\) is zero no matter what the real derivative \(\partial F / \partial P_{\mathrm{ext}}\) is. \[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \]. Getting the right parameter errors with limits.; In the best case, where the minimum is far from any limits, MINUIT will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Ea",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:6853,Availability,error,errors,6853,"ay normally happen only if the parameter is so close to a limit (internal value at an odd multiple of \(\pm \frac{\pi}{2}\) that MINUIT prints a warning to this effect when it prints the parameter values.; The minimizer can become blocked at a limit, because at a limit the derivative seen by the minimizer \(\partial F / \partial P_{\mathrm{int}}\) is zero no matter what the real derivative \(\partial F / \partial P_{\mathrm{ext}}\) is. \[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \]. Getting the right parameter errors with limits.; In the best case, where the minimum is far from any limits, MINUIT will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around i",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:6989,Availability,error,error,6989," warning to this effect when it prints the parameter values.; The minimizer can become blocked at a limit, because at a limit the derivative seen by the minimizer \(\partial F / \partial P_{\mathrm{int}}\) is zero no matter what the real derivative \(\partial F / \partial P_{\mathrm{ext}}\) is. \[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \]. Getting the right parameter errors with limits.; In the best case, where the minimum is far from any limits, MINUIT will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:7027,Availability,error,error,7027," limit the derivative seen by the minimizer \(\partial F / \partial P_{\mathrm{int}}\) is zero no matter what the real derivative \(\partial F / \partial P_{\mathrm{ext}}\) is. \[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \]. Getting the right parameter errors with limits.; In the best case, where the minimum is far from any limits, MINUIT will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. A",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:7073,Availability,error,errors,7073," limit the derivative seen by the minimizer \(\partial F / \partial P_{\mathrm{int}}\) is zero no matter what the real derivative \(\partial F / \partial P_{\mathrm{ext}}\) is. \[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \]. Getting the right parameter errors with limits.; In the best case, where the minimum is far from any limits, MINUIT will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. A",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:7208,Availability,reliab,reliability,7208,"partial P_{\mathrm{ext}}\) is. \[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \]. Getting the right parameter errors with limits.; In the best case, where the minimum is far from any limits, MINUIT will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives som",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:7232,Availability,error,error,7232,"partial P_{\mathrm{ext}}\) is. \[; \frac{\partial F}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}}; \frac{\partial P_{\mathrm{ext}}}{\partial P_{\mathrm{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \]. Getting the right parameter errors with limits.; In the best case, where the minimum is far from any limits, MINUIT will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives som",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:7421,Availability,error,error,7421,"m{int}}} =; \frac{\partial F}{\partial P_{\mathrm{ext}}} = 0; \]. Getting the right parameter errors with limits.; In the best case, where the minimum is far from any limits, MINUIT will correctly transform the error matrix, and the parameter errors it reports should be accurate and very close to those you would have got without limits. In other cases (which should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they hav",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:7759,Availability,error,error,7759,"h should be more common, since otherwise you wouldn't need limits), the very meaning of parameter errors becomes problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error a",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:7849,Availability,error,errors,7849,"problematic. Mathematically, since the limit is an absolute constraint on the parameter, a parameter at its limit has no error, at least in one direction. The error matrix, which can assign only symmetric errors, then becomes essentially meaningless. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coeff",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:8093,Availability,error,errors,8093,"ess. Interpretation of Parameter Errors:; There are two kinds of problems that can arise: the reliability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been ba",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:8188,Availability,error,error,8188,"ability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly cor",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:8236,Availability,reliab,reliable,8236,"ability of MINUIT's error estimates, and their statistical interpretation, assuming they are accurate. Statistical interpretation:; For discussion of basic concepts, such as the meaning of the elements of the error matrix, or setting of exact confidence levels see:. F.James. Determining the statistical Significance of experimental Results. Technical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly cor",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:8548,Availability,error,errors,8548,"chnical Report DD/81/02 and CERN Report 81-03, CERN, 1981.; W.T.Eadie, D.Drijard, F.James, M.Roos, and B.Sadoulet. Statistical Methods in Experimental Physics. North-Holland, 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning message, may make both the function minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compar",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:8749,Availability,error,error,8749,", 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning message, may make both the function minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compare the calculated errors with a picture of the function. Theoretically, the covariance matrix for aphysical'' function must be positive-definite at the minimum, although it ma",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:9151,Availability,error,errors,9151,", unless there has been a problem. MINUIT, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning message, may make both the function minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compare the calculated errors with a picture of the function. Theoretically, the covariance matrix for aphysical'' function must be positive-definite at the minimum, although it may not be so for all points far away from the minimum, even for a well-determined physical problem. Therefore, if MIGRAD reports that it has found a non-positive-definite covariance matrix, this may be a sign of one or more of the following:; A non-physical region:; On its way to the minimum, MIGRAD may have traversed a region which has unphysical behaviour, which is of course not a serious pro",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:9346,Availability,error,errors,9346,"SS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning message, may make both the function minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compare the calculated errors with a picture of the function. Theoretically, the covariance matrix for aphysical'' function must be positive-definite at the minimum, although it may not be so for all points far away from the minimum, even for a well-determined physical problem. Therefore, if MIGRAD reports that it has found a non-positive-definite covariance matrix, this may be a sign of one or more of the following:; A non-physical region:; On its way to the minimum, MIGRAD may have traversed a region which has unphysical behaviour, which is of course not a serious problem as long as it recovers and leaves such a region.; An underdetermined problem:; If the matrix is not positive-definite even at the minimum, this may mean that the solution i",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:9420,Availability,error,errors,9420," calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning message, may make both the function minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compare the calculated errors with a picture of the function. Theoretically, the covariance matrix for aphysical'' function must be positive-definite at the minimum, although it may not be so for all points far away from the minimum, even for a well-determined physical problem. Therefore, if MIGRAD reports that it has found a non-positive-definite covariance matrix, this may be a sign of one or more of the following:; A non-physical region:; On its way to the minimum, MIGRAD may have traversed a region which has unphysical behaviour, which is of course not a serious problem as long as it recovers and leaves such a region.; An underdetermined problem:; If the matrix is not positive-definite even at the minimum, this may mean that the solution is not well-defined, for example that there are more unknowns than there are data points, or that the",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:9484,Availability,error,errors,9484,"t MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning message, may make both the function minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compare the calculated errors with a picture of the function. Theoretically, the covariance matrix for aphysical'' function must be positive-definite at the minimum, although it may not be so for all points far away from the minimum, even for a well-determined physical problem. Therefore, if MIGRAD reports that it has found a non-positive-definite covariance matrix, this may be a sign of one or more of the following:; A non-physical region:; On its way to the minimum, MIGRAD may have traversed a region which has unphysical behaviour, which is of course not a serious problem as long as it recovers and leaves such a region.; An underdetermined problem:; If the matrix is not positive-definite even at the minimum, this may mean that the solution is not well-defined, for example that there are more unknowns than there are data points, or that the parameterisation of the fit contains a linear dependence. If this is the case, then MINUIT (or any other program) cannot s",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:9573,Availability,error,errors,9573,"t MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning message, may make both the function minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compare the calculated errors with a picture of the function. Theoretically, the covariance matrix for aphysical'' function must be positive-definite at the minimum, although it may not be so for all points far away from the minimum, even for a well-determined physical problem. Therefore, if MIGRAD reports that it has found a non-positive-definite covariance matrix, this may be a sign of one or more of the following:; A non-physical region:; On its way to the minimum, MIGRAD may have traversed a region which has unphysical behaviour, which is of course not a serious problem as long as it recovers and leaves such a region.; An underdetermined problem:; If the matrix is not positive-definite even at the minimum, this may mean that the solution is not well-defined, for example that there are more unknowns than there are data points, or that the parameterisation of the fit contains a linear dependence. If this is the case, then MINUIT (or any other program) cannot s",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:10145,Availability,recover,recovers,10145,"e to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning message, may make both the function minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compare the calculated errors with a picture of the function. Theoretically, the covariance matrix for aphysical'' function must be positive-definite at the minimum, although it may not be so for all points far away from the minimum, even for a well-determined physical problem. Therefore, if MIGRAD reports that it has found a non-positive-definite covariance matrix, this may be a sign of one or more of the following:; A non-physical region:; On its way to the minimum, MIGRAD may have traversed a region which has unphysical behaviour, which is of course not a serious problem as long as it recovers and leaves such a region.; An underdetermined problem:; If the matrix is not positive-definite even at the minimum, this may mean that the solution is not well-defined, for example that there are more unknowns than there are data points, or that the parameterisation of the fit contains a linear dependence. If this is the case, then MINUIT (or any other program) cannot solve your problem uniquely, and the error matrix will necessarily be largely meaningless, so the user must remove the under-determinedness by reformulating the parameterisation. MINUIT cannot do this itself.; Numerical inaccuracies:; It is possible that the apparent lack of positive-definiteness is in fact only due to excessive roundoff errors in numerical calculations in the user function or not enough precision. This is unlikely in general, but becomes more likely if the ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:10562,Availability,error,error,10562,"th a picture of the function. Theoretically, the covariance matrix for aphysical'' function must be positive-definite at the minimum, although it may not be so for all points far away from the minimum, even for a well-determined physical problem. Therefore, if MIGRAD reports that it has found a non-positive-definite covariance matrix, this may be a sign of one or more of the following:; A non-physical region:; On its way to the minimum, MIGRAD may have traversed a region which has unphysical behaviour, which is of course not a serious problem as long as it recovers and leaves such a region.; An underdetermined problem:; If the matrix is not positive-definite even at the minimum, this may mean that the solution is not well-defined, for example that there are more unknowns than there are data points, or that the parameterisation of the fit contains a linear dependence. If this is the case, then MINUIT (or any other program) cannot solve your problem uniquely, and the error matrix will necessarily be largely meaningless, so the user must remove the under-determinedness by reformulating the parameterisation. MINUIT cannot do this itself.; Numerical inaccuracies:; It is possible that the apparent lack of positive-definiteness is in fact only due to excessive roundoff errors in numerical calculations in the user function or not enough precision. This is unlikely in general, but becomes more likely if the number of free parameters is very large, or if; the parameters are badly scaled (not all of the same order of magnitude), and correlations are also large. In any case, whether the non-positive-definiteness is real or only numerical is largely irrelevant, since in both cases the error matrix will be unreliable and the minimum suspicious.; An ill-posed problem:; For questions of parameter dependence, see the discussion above on positive-definiteness.; Possible other mathematical problems are the following:; Excessive numerical roundoff:; Be especially careful of exponential",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:10865,Availability,error,errors,10865,", if MIGRAD reports that it has found a non-positive-definite covariance matrix, this may be a sign of one or more of the following:; A non-physical region:; On its way to the minimum, MIGRAD may have traversed a region which has unphysical behaviour, which is of course not a serious problem as long as it recovers and leaves such a region.; An underdetermined problem:; If the matrix is not positive-definite even at the minimum, this may mean that the solution is not well-defined, for example that there are more unknowns than there are data points, or that the parameterisation of the fit contains a linear dependence. If this is the case, then MINUIT (or any other program) cannot solve your problem uniquely, and the error matrix will necessarily be largely meaningless, so the user must remove the under-determinedness by reformulating the parameterisation. MINUIT cannot do this itself.; Numerical inaccuracies:; It is possible that the apparent lack of positive-definiteness is in fact only due to excessive roundoff errors in numerical calculations in the user function or not enough precision. This is unlikely in general, but becomes more likely if the number of free parameters is very large, or if; the parameters are badly scaled (not all of the same order of magnitude), and correlations are also large. In any case, whether the non-positive-definiteness is real or only numerical is largely irrelevant, since in both cases the error matrix will be unreliable and the minimum suspicious.; An ill-posed problem:; For questions of parameter dependence, see the discussion above on positive-definiteness.; Possible other mathematical problems are the following:; Excessive numerical roundoff:; Be especially careful of exponential and factorial functions which get big very quickly and lose accuracy.; Starting too far from the solution:; The function may have unphysical local minima, especially at infinity in some variables.; Minuit parameter errors in the presence of limits; This c",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:11283,Availability,error,error,11283,"ven at the minimum, this may mean that the solution is not well-defined, for example that there are more unknowns than there are data points, or that the parameterisation of the fit contains a linear dependence. If this is the case, then MINUIT (or any other program) cannot solve your problem uniquely, and the error matrix will necessarily be largely meaningless, so the user must remove the under-determinedness by reformulating the parameterisation. MINUIT cannot do this itself.; Numerical inaccuracies:; It is possible that the apparent lack of positive-definiteness is in fact only due to excessive roundoff errors in numerical calculations in the user function or not enough precision. This is unlikely in general, but becomes more likely if the number of free parameters is very large, or if; the parameters are badly scaled (not all of the same order of magnitude), and correlations are also large. In any case, whether the non-positive-definiteness is real or only numerical is largely irrelevant, since in both cases the error matrix will be unreliable and the minimum suspicious.; An ill-posed problem:; For questions of parameter dependence, see the discussion above on positive-definiteness.; Possible other mathematical problems are the following:; Excessive numerical roundoff:; Be especially careful of exponential and factorial functions which get big very quickly and lose accuracy.; Starting too far from the solution:; The function may have unphysical local minima, especially at infinity in some variables.; Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors on parameters. It does not apply to the errors reported from Minos, which are in general asymmetric.; The symmetric errors reported by Minuit are always calculated from the covariance matrix, assuming that this matrix has been calculated, usually as the result of a Migrad minimization or a direct calculation by Hesse which inverts the second d",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:11798,Availability,error,errors,11798,"essive roundoff errors in numerical calculations in the user function or not enough precision. This is unlikely in general, but becomes more likely if the number of free parameters is very large, or if; the parameters are badly scaled (not all of the same order of magnitude), and correlations are also large. In any case, whether the non-positive-definiteness is real or only numerical is largely irrelevant, since in both cases the error matrix will be unreliable and the minimum suspicious.; An ill-posed problem:; For questions of parameter dependence, see the discussion above on positive-definiteness.; Possible other mathematical problems are the following:; Excessive numerical roundoff:; Be especially careful of exponential and factorial functions which get big very quickly and lose accuracy.; Starting too far from the solution:; The function may have unphysical local minima, especially at infinity in some variables.; Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors on parameters. It does not apply to the errors reported from Minos, which are in general asymmetric.; The symmetric errors reported by Minuit are always calculated from the covariance matrix, assuming that this matrix has been calculated, usually as the result of a Migrad minimization or a direct calculation by Hesse which inverts the second derivative matrix.; When there are no limits on the parameter in question, the error reported by Minuit should therefore be exactly equal to the square root of the corresponding diagonal element of the error matrix reported by Minuit.; However, when there are limits on the parameter, there is a transformation between the internal parameter values seen by Minuit (which are unbounded) and the external parameter values seen by the user in FCN (which remain inside the desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. T",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:11898,Availability,error,errors,11898,"essive roundoff errors in numerical calculations in the user function or not enough precision. This is unlikely in general, but becomes more likely if the number of free parameters is very large, or if; the parameters are badly scaled (not all of the same order of magnitude), and correlations are also large. In any case, whether the non-positive-definiteness is real or only numerical is largely irrelevant, since in both cases the error matrix will be unreliable and the minimum suspicious.; An ill-posed problem:; For questions of parameter dependence, see the discussion above on positive-definiteness.; Possible other mathematical problems are the following:; Excessive numerical roundoff:; Be especially careful of exponential and factorial functions which get big very quickly and lose accuracy.; Starting too far from the solution:; The function may have unphysical local minima, especially at infinity in some variables.; Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors on parameters. It does not apply to the errors reported from Minos, which are in general asymmetric.; The symmetric errors reported by Minuit are always calculated from the covariance matrix, assuming that this matrix has been calculated, usually as the result of a Migrad minimization or a direct calculation by Hesse which inverts the second derivative matrix.; When there are no limits on the parameter in question, the error reported by Minuit should therefore be exactly equal to the square root of the corresponding diagonal element of the error matrix reported by Minuit.; However, when there are limits on the parameter, there is a transformation between the internal parameter values seen by Minuit (which are unbounded) and the external parameter values seen by the user in FCN (which remain inside the desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. T",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:11945,Availability,error,errors,11945,"n general, but becomes more likely if the number of free parameters is very large, or if; the parameters are badly scaled (not all of the same order of magnitude), and correlations are also large. In any case, whether the non-positive-definiteness is real or only numerical is largely irrelevant, since in both cases the error matrix will be unreliable and the minimum suspicious.; An ill-posed problem:; For questions of parameter dependence, see the discussion above on positive-definiteness.; Possible other mathematical problems are the following:; Excessive numerical roundoff:; Be especially careful of exponential and factorial functions which get big very quickly and lose accuracy.; Starting too far from the solution:; The function may have unphysical local minima, especially at infinity in some variables.; Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors on parameters. It does not apply to the errors reported from Minos, which are in general asymmetric.; The symmetric errors reported by Minuit are always calculated from the covariance matrix, assuming that this matrix has been calculated, usually as the result of a Migrad minimization or a direct calculation by Hesse which inverts the second derivative matrix.; When there are no limits on the parameter in question, the error reported by Minuit should therefore be exactly equal to the square root of the corresponding diagonal element of the error matrix reported by Minuit.; However, when there are limits on the parameter, there is a transformation between the internal parameter values seen by Minuit (which are unbounded) and the external parameter values seen by the user in FCN (which remain inside the desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J), where DEXDIN is the derivative of the exte",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:12021,Availability,error,errors,12021,"ations are also large. In any case, whether the non-positive-definiteness is real or only numerical is largely irrelevant, since in both cases the error matrix will be unreliable and the minimum suspicious.; An ill-posed problem:; For questions of parameter dependence, see the discussion above on positive-definiteness.; Possible other mathematical problems are the following:; Excessive numerical roundoff:; Be especially careful of exponential and factorial functions which get big very quickly and lose accuracy.; Starting too far from the solution:; The function may have unphysical local minima, especially at infinity in some variables.; Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors on parameters. It does not apply to the errors reported from Minos, which are in general asymmetric.; The symmetric errors reported by Minuit are always calculated from the covariance matrix, assuming that this matrix has been calculated, usually as the result of a Migrad minimization or a direct calculation by Hesse which inverts the second derivative matrix.; When there are no limits on the parameter in question, the error reported by Minuit should therefore be exactly equal to the square root of the corresponding diagonal element of the error matrix reported by Minuit.; However, when there are limits on the parameter, there is a transformation between the internal parameter values seen by Minuit (which are unbounded) and the external parameter values seen by the user in FCN (which remain inside the desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J), where DEXDIN is the derivative of the external value with respect to the internal value at the minimum. This is a linearisation of the transformation, and is the only way to produce an error matrix in external coordi",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:12328,Availability,error,error,12328,"tions of parameter dependence, see the discussion above on positive-definiteness.; Possible other mathematical problems are the following:; Excessive numerical roundoff:; Be especially careful of exponential and factorial functions which get big very quickly and lose accuracy.; Starting too far from the solution:; The function may have unphysical local minima, especially at infinity in some variables.; Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors on parameters. It does not apply to the errors reported from Minos, which are in general asymmetric.; The symmetric errors reported by Minuit are always calculated from the covariance matrix, assuming that this matrix has been calculated, usually as the result of a Migrad minimization or a direct calculation by Hesse which inverts the second derivative matrix.; When there are no limits on the parameter in question, the error reported by Minuit should therefore be exactly equal to the square root of the corresponding diagonal element of the error matrix reported by Minuit.; However, when there are limits on the parameter, there is a transformation between the internal parameter values seen by Minuit (which are unbounded) and the external parameter values seen by the user in FCN (which remain inside the desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J), where DEXDIN is the derivative of the external value with respect to the internal value at the minimum. This is a linearisation of the transformation, and is the only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external c",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:12451,Availability,error,error,12451,"tions of parameter dependence, see the discussion above on positive-definiteness.; Possible other mathematical problems are the following:; Excessive numerical roundoff:; Be especially careful of exponential and factorial functions which get big very quickly and lose accuracy.; Starting too far from the solution:; The function may have unphysical local minima, especially at infinity in some variables.; Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors on parameters. It does not apply to the errors reported from Minos, which are in general asymmetric.; The symmetric errors reported by Minuit are always calculated from the covariance matrix, assuming that this matrix has been calculated, usually as the result of a Migrad minimization or a direct calculation by Hesse which inverts the second derivative matrix.; When there are no limits on the parameter in question, the error reported by Minuit should therefore be exactly equal to the square root of the corresponding diagonal element of the error matrix reported by Minuit.; However, when there are limits on the parameter, there is a transformation between the internal parameter values seen by Minuit (which are unbounded) and the external parameter values seen by the user in FCN (which remain inside the desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J), where DEXDIN is the derivative of the external value with respect to the internal value at the minimum. This is a linearisation of the transformation, and is the only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external c",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:12758,Availability,error,error,12758,"rameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors on parameters. It does not apply to the errors reported from Minos, which are in general asymmetric.; The symmetric errors reported by Minuit are always calculated from the covariance matrix, assuming that this matrix has been calculated, usually as the result of a Migrad minimization or a direct calculation by Hesse which inverts the second derivative matrix.; When there are no limits on the parameter in question, the error reported by Minuit should therefore be exactly equal to the square root of the corresponding diagonal element of the error matrix reported by Minuit.; However, when there are limits on the parameter, there is a transformation between the internal parameter values seen by Minuit (which are unbounded) and the external parameter values seen by the user in FCN (which remain inside the desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J), where DEXDIN is the derivative of the external value with respect to the internal value at the minimum. This is a linearisation of the transformation, and is the only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:12821,Availability,error,error,12821,"rameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors on parameters. It does not apply to the errors reported from Minos, which are in general asymmetric.; The symmetric errors reported by Minuit are always calculated from the covariance matrix, assuming that this matrix has been calculated, usually as the result of a Migrad minimization or a direct calculation by Hesse which inverts the second derivative matrix.; When there are no limits on the parameter in question, the error reported by Minuit should therefore be exactly equal to the square root of the corresponding diagonal element of the error matrix reported by Minuit.; However, when there are limits on the parameter, there is a transformation between the internal parameter values seen by Minuit (which are unbounded) and the external parameter values seen by the user in FCN (which remain inside the desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J), where DEXDIN is the derivative of the external value with respect to the internal value at the minimum. This is a linearisation of the transformation, and is the only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:13105,Availability,error,error,13105,"x, assuming that this matrix has been calculated, usually as the result of a Migrad minimization or a direct calculation by Hesse which inverts the second derivative matrix.; When there are no limits on the parameter in question, the error reported by Minuit should therefore be exactly equal to the square root of the corresponding diagonal element of the error matrix reported by Minuit.; However, when there are limits on the parameter, there is a transformation between the internal parameter values seen by Minuit (which are unbounded) and the external parameter values seen by the user in FCN (which remain inside the desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J), where DEXDIN is the derivative of the external value with respect to the internal value at the minimum. This is a linearisation of the transformation, and is the only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the error matrix. The difference is a measure of how much the limits deform the problem. If possible, it is suggested not to use limits on parameters, and the problem goes away. If for some reason limits are necessary, and you are sensitive to the difference between the two ways of calculating the errors,",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:13210,Availability,error,errors,13210,"which inverts the second derivative matrix.; When there are no limits on the parameter in question, the error reported by Minuit should therefore be exactly equal to the square root of the corresponding diagonal element of the error matrix reported by Minuit.; However, when there are limits on the parameter, there is a transformation between the internal parameter values seen by Minuit (which are unbounded) and the external parameter values seen by the user in FCN (which remain inside the desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J), where DEXDIN is the derivative of the external value with respect to the internal value at the minimum. This is a linearisation of the transformation, and is the only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the error matrix. The difference is a measure of how much the limits deform the problem. If possible, it is suggested not to use limits on parameters, and the problem goes away. If for some reason limits are necessary, and you are sensitive to the difference between the two ways of calculating the errors, it is suggested to use Minos errors which take into account the non-linearities much more precisely. ; Definition at line 27 of f",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:13351,Availability,error,error,13351,"therefore be exactly equal to the square root of the corresponding diagonal element of the error matrix reported by Minuit.; However, when there are limits on the parameter, there is a transformation between the internal parameter values seen by Minuit (which are unbounded) and the external parameter values seen by the user in FCN (which remain inside the desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J), where DEXDIN is the derivative of the external value with respect to the internal value at the minimum. This is a linearisation of the transformation, and is the only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the error matrix. The difference is a measure of how much the limits deform the problem. If possible, it is suggested not to use limits on parameters, and the problem goes away. If for some reason limits are necessary, and you are sensitive to the difference between the two ways of calculating the errors, it is suggested to use Minos errors which take into account the non-linearities much more precisely. ; Definition at line 27 of file TMinuit.h. Public Types; enum  { kMAXWARN =100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNo",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:13603,Availability,error,errors,13603,", there is a transformation between the internal parameter values seen by Minuit (which are unbounded) and the external parameter values seen by the user in FCN (which remain inside the desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J), where DEXDIN is the derivative of the external value with respect to the internal value at the minimum. This is a linearisation of the transformation, and is the only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the error matrix. The difference is a measure of how much the limits deform the problem. If possible, it is suggested not to use limits on parameters, and the problem goes away. If for some reason limits are necessary, and you are sensitive to the difference between the two ways of calculating the errors, it is suggested to use Minos errors which take into account the non-linearities much more precisely. ; Definition at line 27 of file TMinuit.h. Public Types; enum  { kMAXWARN =100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:13696,Availability,error,error,13696,"he desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J), where DEXDIN is the derivative of the external value with respect to the internal value at the minimum. This is a linearisation of the transformation, and is the only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the error matrix. The difference is a measure of how much the limits deform the problem. If possible, it is suggested not to use limits on parameters, and the problem goes away. If for some reason limits are necessary, and you are sensitive to the difference between the two ways of calculating the errors, it is suggested to use Minos errors which take into account the non-linearities much more precisely. ; Definition at line 27 of file TMinuit.h. Public Types; enum  { kMAXWARN =100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustClea",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:13792,Availability,error,error,13792,"he desired limits). Therefore the internal error matrix kept by Minuit must be transformed to an external error matrix for the user. This is done by multiplying the (I,J)th element by DEXDIN(I)*DEXDIN(J), where DEXDIN is the derivative of the external value with respect to the internal value at the minimum. This is a linearisation of the transformation, and is the only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the error matrix. The difference is a measure of how much the limits deform the problem. If possible, it is suggested not to use limits on parameters, and the problem goes away. If for some reason limits are necessary, and you are sensitive to the difference between the two ways of calculating the errors, it is suggested to use Minos errors which take into account the non-linearities much more precisely. ; Definition at line 27 of file TMinuit.h. Public Types; enum  { kMAXWARN =100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustClea",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:14087,Availability,error,errors,14087,"e only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the error matrix. The difference is a measure of how much the limits deform the problem. If possible, it is suggested not to use limits on parameters, and the problem goes away. If for some reason limits are necessary, and you are sensitive to the difference between the two ways of calculating the errors, it is suggested to use Minos errors which take into account the non-linearities much more precisely. ; Definition at line 27 of file TMinuit.h. Public Types; enum  { kMAXWARN =100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMinuit ();  Minuit normal constructor. ;  ;  TMinuit (Int_t maxpar);  Minuit normal constructor. ;  ;  ~TMinuit () override;  Minuit ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:14124,Availability,error,errors,14124,"e only way to produce an error matrix in external coordinates meaningful to the user. But when reporting the individual parabolic errors for limited parameters, Minuit can do a little better, so it does. In this case, Minuit actually transforms the ends of the internal ""error bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the error matrix. The difference is a measure of how much the limits deform the problem. If possible, it is suggested not to use limits on parameters, and the problem goes away. If for some reason limits are necessary, and you are sensitive to the difference between the two ways of calculating the errors, it is suggested to use Minos errors which take into account the non-linearities much more precisely. ; Definition at line 27 of file TMinuit.h. Public Types; enum  { kMAXWARN =100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMinuit ();  Minuit normal constructor. ;  ;  TMinuit (Int_t maxpar);  Minuit normal constructor. ;  ;  ~TMinuit () override;  Minuit ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:16553,Availability,error,error,16553,"eParameter (Int_t parNo, const char *name, Double_t initVal, Double_t initErr, Double_t lowerLimit, Double_t upperLimit);  Define a parameter. ;  ; virtual void DeleteArrays ();  Delete internal Minuit arrays. ;  ; virtual Int_t Eval (Int_t npar, Double_t *grad, Double_t &fval, Double_t *par, Int_t flag);  Evaluate the minimisation function Input parameters: ;  ; virtual Int_t FixParameter (Int_t parNo);  fix a parameter ;  ; Int_t GetMaxIterations () const;  ; TMethodCall * GetMethodCall () const;  ; virtual Int_t GetNumFixedPars () const;  returns the number of currently fixed parameters ;  ; virtual Int_t GetNumFreePars () const;  returns the number of currently free parameters ;  ; virtual Int_t GetNumPars () const;  returns the total number of parameters that have been defined as fixed or free. ;  ; TObject * GetObjectFit () const;  ; virtual Int_t GetParameter (Int_t parNo, Double_t &currentValue, Double_t &currentError) const;  return parameter value and error ;  ; virtual TObject * GetPlot () const;  ; Int_t GetStatus () const;  ; TClass * IsA () const override;  ; virtual Int_t Migrad ();  invokes the MIGRAD minimizer ;  ; virtual void mnamin ();  Initialize AMIN. ;  ; virtual void mnbins (Double_t a1, Double_t a2, Int_t naa, Double_t &bl, Double_t &bh, Int_t &nb, Double_t &bwid);  Compute reasonable histogram intervals. ;  ; virtual void mncalf (Double_t *pvec, Double_t &ycalf);  Transform FCN to find further minima. ;  ; virtual void mncler ();  Resets the parameter list to UNDEFINED. ;  ; virtual void mncntr (Int_t ke1, Int_t ke2, Int_t &ierrf);  Print function contours in two variables, on line printer. ;  ; virtual void mncomd (const char *crdbin, Int_t &icondn);  Reads a command string and executes. ;  ; virtual void mncont (Int_t ke1, Int_t ke2, Int_t nptu, Double_t *xptu, Double_t *yptu, Int_t &ierrf);  Find points along a contour where FCN is minimum. ;  ; virtual void mncrck (TString crdbuf, Int_t maxcwd, TString &comand, Int_t &lnc, Int_t mxp, Dou",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:18284,Availability,error,error,18284,"bin, Int_t &icondn);  Reads a command string and executes. ;  ; virtual void mncont (Int_t ke1, Int_t ke2, Int_t nptu, Double_t *xptu, Double_t *yptu, Int_t &ierrf);  Find points along a contour where FCN is minimum. ;  ; virtual void mncrck (TString crdbuf, Int_t maxcwd, TString &comand, Int_t &lnc, Int_t mxp, Double_t *plist, Int_t &llist, Int_t &ierr, Int_t isyswr);  Cracks the free-format input. ;  ; virtual void mncros (Double_t &aopt, Int_t &iercr);  Find point where MNEVAL=AMIN+UP. ;  ; virtual void mncuve ();  Makes sure that the current point is a local minimum. ;  ; virtual void mnderi ();  Calculates the first derivatives of FCN (GRD) ;  ; virtual void mndxdi (Double_t pint, Int_t ipar, Double_t &dxdi);  Calculates the transformation factor between ext/internal values. ;  ; virtual void mneig (Double_t *a, Int_t ndima, Int_t n, Int_t mits, Double_t *work, Double_t precis, Int_t &ifault);  Compute matrix eigen values. ;  ; virtual void mnemat (Double_t *emat, Int_t ndim);  Calculates the external error matrix from the internal matrix. ;  ; virtual void mnerrs (Int_t number, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &gcc);  Utility routine to get MINOS errors. ;  ; virtual void mneval (Double_t anext, Double_t &fnext, Int_t &ierev);  Evaluates the function being analysed by MNCROS. ;  ; virtual void mnexcm (const char *comand, Double_t *plist, Int_t llist, Int_t &ierflg);  Interprets a command and takes appropriate action. ;  ; virtual void mnexin (Double_t *pint);  Transforms the external parameter values U to internal values. ;  ; virtual void mnfixp (Int_t iint, Int_t &ierr);  Removes parameter IINT from the internal parameter list. ;  ; virtual void mnfree (Int_t k);  Restores one or more fixed parameter(s) to variable status. ;  ; virtual void mngrad ();  Interprets the SET GRAD command. ;  ; virtual void mnhelp (const char *command="""");  interface to Minuit help ;  ; virtual void mnhelp (TString comd);  HELP routine for MINUIT inter",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:18462,Availability,error,errors,18462,", Double_t *yptu, Int_t &ierrf);  Find points along a contour where FCN is minimum. ;  ; virtual void mncrck (TString crdbuf, Int_t maxcwd, TString &comand, Int_t &lnc, Int_t mxp, Double_t *plist, Int_t &llist, Int_t &ierr, Int_t isyswr);  Cracks the free-format input. ;  ; virtual void mncros (Double_t &aopt, Int_t &iercr);  Find point where MNEVAL=AMIN+UP. ;  ; virtual void mncuve ();  Makes sure that the current point is a local minimum. ;  ; virtual void mnderi ();  Calculates the first derivatives of FCN (GRD) ;  ; virtual void mndxdi (Double_t pint, Int_t ipar, Double_t &dxdi);  Calculates the transformation factor between ext/internal values. ;  ; virtual void mneig (Double_t *a, Int_t ndima, Int_t n, Int_t mits, Double_t *work, Double_t precis, Int_t &ifault);  Compute matrix eigen values. ;  ; virtual void mnemat (Double_t *emat, Int_t ndim);  Calculates the external error matrix from the internal matrix. ;  ; virtual void mnerrs (Int_t number, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &gcc);  Utility routine to get MINOS errors. ;  ; virtual void mneval (Double_t anext, Double_t &fnext, Int_t &ierev);  Evaluates the function being analysed by MNCROS. ;  ; virtual void mnexcm (const char *comand, Double_t *plist, Int_t llist, Int_t &ierflg);  Interprets a command and takes appropriate action. ;  ; virtual void mnexin (Double_t *pint);  Transforms the external parameter values U to internal values. ;  ; virtual void mnfixp (Int_t iint, Int_t &ierr);  Removes parameter IINT from the internal parameter list. ;  ; virtual void mnfree (Int_t k);  Restores one or more fixed parameter(s) to variable status. ;  ; virtual void mngrad ();  Interprets the SET GRAD command. ;  ; virtual void mnhelp (const char *command="""");  interface to Minuit help ;  ; virtual void mnhelp (TString comd);  HELP routine for MINUIT interactive commands. ;  ; virtual void mnhes1 ();  Calculate first derivatives (GRD) and uncertainties (DGRD) ;  ; virtual void mnhess ()",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:19931,Availability,toler,toler,19931," parameter IINT from the internal parameter list. ;  ; virtual void mnfree (Int_t k);  Restores one or more fixed parameter(s) to variable status. ;  ; virtual void mngrad ();  Interprets the SET GRAD command. ;  ; virtual void mnhelp (const char *command="""");  interface to Minuit help ;  ; virtual void mnhelp (TString comd);  HELP routine for MINUIT interactive commands. ;  ; virtual void mnhes1 ();  Calculate first derivatives (GRD) and uncertainties (DGRD) ;  ; virtual void mnhess ();  Calculates the full second-derivative matrix of FCN. ;  ; virtual void mnimpr ();  Attempts to improve on a good local minimum. ;  ; virtual void mninex (Double_t *pint);  Transforms from internal coordinates (PINT) to external (U) ;  ; virtual void mninit (Int_t i1, Int_t i2, Int_t i3);  Main initialization member function for MINUIT. ;  ; virtual void mnlims ();  Interprets the SET LIM command, to reset the parameter limits. ;  ; virtual void mnline (Double_t *start, Double_t fstart, Double_t *step, Double_t slope, Double_t toler);  Perform a line search from position START. ;  ; virtual void mnmatu (Int_t kode);  Prints the covariance matrix v when KODE=1. ;  ; virtual void mnmigr ();  Performs a local function minimization. ;  ; virtual void mnmnos ();  Performs a MINOS error analysis. ;  ; virtual void mnmnot (Int_t ilax, Int_t ilax2, Double_t &val2pl, Double_t &val2mi);  Performs a MINOS error analysis on one parameter. ;  ; virtual void mnparm (Int_t k, TString cnamj, Double_t uk, Double_t wk, Double_t a, Double_t b, Int_t &ierflg);  Implements one parameter definition. ;  ; virtual void mnpars (TString &crdbuf, Int_t &icondn);  Implements one parameter definition. ;  ; virtual void mnpfit (Double_t *parx2p, Double_t *pary2p, Int_t npar2p, Double_t *coef2p, Double_t &sdev2p);  To fit a parabola to npar2p points. ;  ; virtual void mnpint (Double_t &pexti, Int_t i, Double_t &pinti);  Calculates the internal parameter value PINTI. ;  ; virtual void mnplot (Double_t *xpt, Double_",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:20184,Availability,error,error,20184,"interface to Minuit help ;  ; virtual void mnhelp (TString comd);  HELP routine for MINUIT interactive commands. ;  ; virtual void mnhes1 ();  Calculate first derivatives (GRD) and uncertainties (DGRD) ;  ; virtual void mnhess ();  Calculates the full second-derivative matrix of FCN. ;  ; virtual void mnimpr ();  Attempts to improve on a good local minimum. ;  ; virtual void mninex (Double_t *pint);  Transforms from internal coordinates (PINT) to external (U) ;  ; virtual void mninit (Int_t i1, Int_t i2, Int_t i3);  Main initialization member function for MINUIT. ;  ; virtual void mnlims ();  Interprets the SET LIM command, to reset the parameter limits. ;  ; virtual void mnline (Double_t *start, Double_t fstart, Double_t *step, Double_t slope, Double_t toler);  Perform a line search from position START. ;  ; virtual void mnmatu (Int_t kode);  Prints the covariance matrix v when KODE=1. ;  ; virtual void mnmigr ();  Performs a local function minimization. ;  ; virtual void mnmnos ();  Performs a MINOS error analysis. ;  ; virtual void mnmnot (Int_t ilax, Int_t ilax2, Double_t &val2pl, Double_t &val2mi);  Performs a MINOS error analysis on one parameter. ;  ; virtual void mnparm (Int_t k, TString cnamj, Double_t uk, Double_t wk, Double_t a, Double_t b, Int_t &ierflg);  Implements one parameter definition. ;  ; virtual void mnpars (TString &crdbuf, Int_t &icondn);  Implements one parameter definition. ;  ; virtual void mnpfit (Double_t *parx2p, Double_t *pary2p, Int_t npar2p, Double_t *coef2p, Double_t &sdev2p);  To fit a parabola to npar2p points. ;  ; virtual void mnpint (Double_t &pexti, Int_t i, Double_t &pinti);  Calculates the internal parameter value PINTI. ;  ; virtual void mnplot (Double_t *xpt, Double_t *ypt, char *chpt, Int_t nxypt, Int_t npagwd, Int_t npagln);  Plots points in array xypt onto one page with labelled axes. ;  ; virtual void mnpout (Int_t iuext, TString &chnam, Double_t &val, Double_t &err, Double_t &xlolim, Double_t &xuplim, Int_t &iuint) con",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:20306,Availability,error,error,20306,"e commands. ;  ; virtual void mnhes1 ();  Calculate first derivatives (GRD) and uncertainties (DGRD) ;  ; virtual void mnhess ();  Calculates the full second-derivative matrix of FCN. ;  ; virtual void mnimpr ();  Attempts to improve on a good local minimum. ;  ; virtual void mninex (Double_t *pint);  Transforms from internal coordinates (PINT) to external (U) ;  ; virtual void mninit (Int_t i1, Int_t i2, Int_t i3);  Main initialization member function for MINUIT. ;  ; virtual void mnlims ();  Interprets the SET LIM command, to reset the parameter limits. ;  ; virtual void mnline (Double_t *start, Double_t fstart, Double_t *step, Double_t slope, Double_t toler);  Perform a line search from position START. ;  ; virtual void mnmatu (Int_t kode);  Prints the covariance matrix v when KODE=1. ;  ; virtual void mnmigr ();  Performs a local function minimization. ;  ; virtual void mnmnos ();  Performs a MINOS error analysis. ;  ; virtual void mnmnot (Int_t ilax, Int_t ilax2, Double_t &val2pl, Double_t &val2mi);  Performs a MINOS error analysis on one parameter. ;  ; virtual void mnparm (Int_t k, TString cnamj, Double_t uk, Double_t wk, Double_t a, Double_t b, Int_t &ierflg);  Implements one parameter definition. ;  ; virtual void mnpars (TString &crdbuf, Int_t &icondn);  Implements one parameter definition. ;  ; virtual void mnpfit (Double_t *parx2p, Double_t *pary2p, Int_t npar2p, Double_t *coef2p, Double_t &sdev2p);  To fit a parabola to npar2p points. ;  ; virtual void mnpint (Double_t &pexti, Int_t i, Double_t &pinti);  Calculates the internal parameter value PINTI. ;  ; virtual void mnplot (Double_t *xpt, Double_t *ypt, char *chpt, Int_t nxypt, Int_t npagwd, Int_t npagln);  Plots points in array xypt onto one page with labelled axes. ;  ; virtual void mnpout (Int_t iuext, TString &chnam, Double_t &val, Double_t &err, Double_t &xlolim, Double_t &xuplim, Int_t &iuint) const;  Provides the user with information concerning the current status. ;  ; virtual void mnprin (Int_",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:21766,Availability,error,errors,21766," ; virtual void mnpint (Double_t &pexti, Int_t i, Double_t &pinti);  Calculates the internal parameter value PINTI. ;  ; virtual void mnplot (Double_t *xpt, Double_t *ypt, char *chpt, Int_t nxypt, Int_t npagwd, Int_t npagln);  Plots points in array xypt onto one page with labelled axes. ;  ; virtual void mnpout (Int_t iuext, TString &chnam, Double_t &val, Double_t &err, Double_t &xlolim, Double_t &xuplim, Int_t &iuint) const;  Provides the user with information concerning the current status. ;  ; virtual void mnprin (Int_t inkode, Double_t fval);  Prints the values of the parameters at the time of the call. ;  ; virtual void mnpsdf ();  Calculates the eigenvalues of v to see if positive-def. ;  ; virtual void mnrazz (Double_t ynew, Double_t *pnew, Double_t *y, Int_t &jh, Int_t &jl);  Called only by MNSIMP (and MNIMPR) to add a new point. ;  ; virtual void mnrn15 (Double_t &val, Int_t &inseed);  This is a super-portable random number generator. ;  ; virtual void mnrset (Int_t iopt);  Resets function value and errors to UNDEFINED. ;  ; virtual void mnsave ();  Writes current parameter values and step sizes onto file ISYSSA. ;  ; virtual void mnscan ();  Scans the values of FCN as a function of one parameter. ;  ; virtual void mnseek ();  Performs a rough (but global) minimization by monte carlo search. ;  ; virtual void mnset ();  Interprets the commands that start with SET and SHOW. ;  ; virtual void mnsimp ();  Minimization using the simplex method of Nelder and Mead. ;  ; virtual void mnstat (Double_t &fmin, Double_t &fedm, Double_t &errdef, Int_t &npari, Int_t &nparx, Int_t &istat);  Returns concerning the current status of the minimization. ;  ; virtual void mntiny (Double_t epsp1, Double_t &epsbak);  To find the machine precision. ;  ; Bool_t mnunpt (TString &cfname);  Returns .TRUE. ;  ; virtual void mnvert (Double_t *a, Int_t l, Int_t m, Int_t n, Int_t &ifail);  Inverts a symmetric matrix. ;  ; virtual void mnwarn (const char *copt, const char *corg, const char",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:22848,Availability,error,errors,22848," Writes current parameter values and step sizes onto file ISYSSA. ;  ; virtual void mnscan ();  Scans the values of FCN as a function of one parameter. ;  ; virtual void mnseek ();  Performs a rough (but global) minimization by monte carlo search. ;  ; virtual void mnset ();  Interprets the commands that start with SET and SHOW. ;  ; virtual void mnsimp ();  Minimization using the simplex method of Nelder and Mead. ;  ; virtual void mnstat (Double_t &fmin, Double_t &fedm, Double_t &errdef, Int_t &npari, Int_t &nparx, Int_t &istat);  Returns concerning the current status of the minimization. ;  ; virtual void mntiny (Double_t epsp1, Double_t &epsbak);  To find the machine precision. ;  ; Bool_t mnunpt (TString &cfname);  Returns .TRUE. ;  ; virtual void mnvert (Double_t *a, Int_t l, Int_t m, Int_t n, Int_t &ifail);  Inverts a symmetric matrix. ;  ; virtual void mnwarn (const char *copt, const char *corg, const char *cmes);  Prints Warning messages. ;  ; virtual void mnwerr ();  Calculates the WERR, external parameter errors. ;  ; virtual Int_t Release (Int_t parNo);  release a parameter ;  ; virtual Int_t SetErrorDef (Double_t up);  To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ;  ; virtual void SetFCN (void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t));  To set the address of the minimization function. ;  ; virtual void SetGraphicsMode (Bool_t mode=kTRUE);  ; virtual void SetMaxIterations (Int_t maxiter=500);  ; virtual void SetObjectFit (TObject *obj);  ; virtual Int_t SetPrintLevel (Int_t printLevel=0);  set Minuit print level. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed de",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:22997,Availability,error,error,22997,"on of one parameter. ;  ; virtual void mnseek ();  Performs a rough (but global) minimization by monte carlo search. ;  ; virtual void mnset ();  Interprets the commands that start with SET and SHOW. ;  ; virtual void mnsimp ();  Minimization using the simplex method of Nelder and Mead. ;  ; virtual void mnstat (Double_t &fmin, Double_t &fedm, Double_t &errdef, Int_t &npari, Int_t &nparx, Int_t &istat);  Returns concerning the current status of the minimization. ;  ; virtual void mntiny (Double_t epsp1, Double_t &epsbak);  To find the machine precision. ;  ; Bool_t mnunpt (TString &cfname);  Returns .TRUE. ;  ; virtual void mnvert (Double_t *a, Int_t l, Int_t m, Int_t n, Int_t &ifail);  Inverts a symmetric matrix. ;  ; virtual void mnwarn (const char *copt, const char *corg, const char *cmes);  Prints Warning messages. ;  ; virtual void mnwerr ();  Calculates the WERR, external parameter errors. ;  ; virtual Int_t Release (Int_t parNo);  release a parameter ;  ; virtual Int_t SetErrorDef (Double_t up);  To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ;  ; virtual void SetFCN (void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t));  To set the address of the minimization function. ;  ; virtual void SetGraphicsMode (Bool_t mode=kTRUE);  ; virtual void SetMaxIterations (Int_t maxiter=500);  ; virtual void SetObjectFit (TObject *obj);  ; virtual Int_t SetPrintLevel (Int_t printLevel=0);  set Minuit print level. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const cha",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:26784,Availability,error,error,26784,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:26873,Availability,error,error,26873,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:27028,Availability,error,error,27028,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:27325,Availability,error,error,27325,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:31409,Availability,error,error,31409,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:38566,Availability,avail,available,38566,"512 of file TMinuit.cxx. ◆ Class(). static TClass * TMinuit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMinuit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMinuit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 268 of file TMinuit.h. ◆ Clone(). TObject * TMinuit::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a clone of an object using the Streamer facility. ; Function pointer is copied to Clone ; Reimplemented from TObject.; Definition at line 596 of file TMinuit.cxx. ◆ Command(). Int_t TMinuit::Command ; (; const char * ; command). virtual . Execute a Minuit command. ; Equivalent to MNEXCM except that the command is given as a character string. See TMinuit::mnhelp for the full list of available commands See also the complete documentation of all the available commands; Returns the status of the execution:; 0: command executed normally; 1: command is blank, ignored; 2: command line unreadable, ignored; 3: unknown command, ignored; 4: abnormal termination (e.g., MIGRAD not converged); 5: command is a request to read PARAMETER definitions; 6: 'SET INPUT' command; 7: 'SET TITLE' command; 8: 'SET COVAR' command; 9: reserved; 10: END command; 11: EXIT or STOP command; 12: RETURN command . Definition at line 626 of file TMinuit.cxx. ◆ Contour(). TObject * TMinuit::Contour ; (; Int_t ; npoints = 10, . Int_t ; pa1 = 0, . Int_t ; pa2 = 1 . ). virtual . Creates a TGraph object describing the n-sigma contour of a TMinuit fit. ; The contour of the parameters pa1 and pa2 is calculated using npoints (>=4) points. The TMinuit status will be; 0 on success and; -1 if errors in the calling sequence (pa1, pa2 not variable); 1 if less than four points can be found; 2 if npoints<4; n>3 if only n points can be found (n < npoints) The status can be obtained via TMinuit::GetStatus(). To get the n-sigma con",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:38632,Availability,avail,available,38632,"512 of file TMinuit.cxx. ◆ Class(). static TClass * TMinuit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMinuit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMinuit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 268 of file TMinuit.h. ◆ Clone(). TObject * TMinuit::Clone ; (; const char * ; newname = """"); const. overridevirtual . Make a clone of an object using the Streamer facility. ; Function pointer is copied to Clone ; Reimplemented from TObject.; Definition at line 596 of file TMinuit.cxx. ◆ Command(). Int_t TMinuit::Command ; (; const char * ; command). virtual . Execute a Minuit command. ; Equivalent to MNEXCM except that the command is given as a character string. See TMinuit::mnhelp for the full list of available commands See also the complete documentation of all the available commands; Returns the status of the execution:; 0: command executed normally; 1: command is blank, ignored; 2: command line unreadable, ignored; 3: unknown command, ignored; 4: abnormal termination (e.g., MIGRAD not converged); 5: command is a request to read PARAMETER definitions; 6: 'SET INPUT' command; 7: 'SET TITLE' command; 8: 'SET COVAR' command; 9: reserved; 10: END command; 11: EXIT or STOP command; 12: RETURN command . Definition at line 626 of file TMinuit.cxx. ◆ Contour(). TObject * TMinuit::Contour ; (; Int_t ; npoints = 10, . Int_t ; pa1 = 0, . Int_t ; pa2 = 1 . ). virtual . Creates a TGraph object describing the n-sigma contour of a TMinuit fit. ; The contour of the parameters pa1 and pa2 is calculated using npoints (>=4) points. The TMinuit status will be; 0 on success and; -1 if errors in the calling sequence (pa1, pa2 not variable); 1 if less than four points can be found; 2 if npoints<4; n>3 if only n points can be found (n < npoints) The status can be obtained via TMinuit::GetStatus(). To get the n-sigma con",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:39448,Availability,error,errors,39448," TMinuit::mnhelp for the full list of available commands See also the complete documentation of all the available commands; Returns the status of the execution:; 0: command executed normally; 1: command is blank, ignored; 2: command line unreadable, ignored; 3: unknown command, ignored; 4: abnormal termination (e.g., MIGRAD not converged); 5: command is a request to read PARAMETER definitions; 6: 'SET INPUT' command; 7: 'SET TITLE' command; 8: 'SET COVAR' command; 9: reserved; 10: END command; 11: EXIT or STOP command; 12: RETURN command . Definition at line 626 of file TMinuit.cxx. ◆ Contour(). TObject * TMinuit::Contour ; (; Int_t ; npoints = 10, . Int_t ; pa1 = 0, . Int_t ; pa2 = 1 . ). virtual . Creates a TGraph object describing the n-sigma contour of a TMinuit fit. ; The contour of the parameters pa1 and pa2 is calculated using npoints (>=4) points. The TMinuit status will be; 0 on success and; -1 if errors in the calling sequence (pa1, pa2 not variable); 1 if less than four points can be found; 2 if npoints<4; n>3 if only n points can be found (n < npoints) The status can be obtained via TMinuit::GetStatus(). To get the n-sigma contour the ERRDEF parameter in Minuit has to set to n^2. The fcn function has to be set before the routine is called.; The TGraph object is created via the interpreter. The user must cast it to a TGraph*. Note that the TGraph is created with npoints+1 in order to close the contour (setting last point equal to first point).; You can find an example in $ROOTSYS/tutorials/fit/fitcont.C ; Definition at line 653 of file TMinuit.cxx. ◆ DeclFileName(). static const char * TMinuit::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 268 of file TMinuit.h. ◆ DefineParameter(). Int_t TMinuit::DefineParameter ; (; Int_t ; parNo, . const char * ; name, . Double_t ; initVal, . Double_t ; initErr, . Double_t ; lowerLimit, . Double_t ; upperLimit . ). virtual . Define a parameter. ; Defin",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:43024,Availability,error,error,43024,".h. ◆ GetMethodCall(). TMethodCall * TMinuit::GetMethodCall ; (; ); const. inline . Definition at line 193 of file TMinuit.h. ◆ GetNumFixedPars(). Int_t TMinuit::GetNumFixedPars ; (; ); const. virtual . returns the number of currently fixed parameters ; Definition at line 855 of file TMinuit.cxx. ◆ GetNumFreePars(). Int_t TMinuit::GetNumFreePars ; (; ); const. virtual . returns the number of currently free parameters ; Definition at line 863 of file TMinuit.cxx. ◆ GetNumPars(). Int_t TMinuit::GetNumPars ; (; ); const. virtual . returns the total number of parameters that have been defined as fixed or free. ; The constant parameters are not counted. ; Definition at line 872 of file TMinuit.cxx. ◆ GetObjectFit(). TObject * TMinuit::GetObjectFit ; (; ); const. inline . Definition at line 194 of file TMinuit.h. ◆ GetParameter(). Int_t TMinuit::GetParameter ; (; Int_t ; parNo, . Double_t & ; currentValue, . Double_t & ; currentError . ); const. virtual . return parameter value and error ; Definition at line 841 of file TMinuit.cxx. ◆ GetPlot(). virtual TObject * TMinuit::GetPlot ; (; ); const. inlinevirtual . Definition at line 200 of file TMinuit.h. ◆ GetStatus(). Int_t TMinuit::GetStatus ; (; ); const. inline . Definition at line 201 of file TMinuit.h. ◆ IsA(). TClass * TMinuit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 268 of file TMinuit.h. ◆ Migrad(). Int_t TMinuit::Migrad ; (; ). virtual . invokes the MIGRAD minimizer ; Definition at line 880 of file TMinuit.cxx. ◆ mnamin(). void TMinuit::mnamin ; (; ). virtual . Initialize AMIN. ; Called from many places. Initializes the value of AMIN by calling the user function. Prints out the function value and parameter values if Print Flag value is high enough. ; Definition at line 972 of file TMinuit.cxx. ◆ mnbins(). void TMinuit::mnbins ; (; Double_t ; a1, . Double_t ; a2, . Int_t ; naa, . Double_t & ; bl, . Double_t & ; bh, . Int_t & ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:46445,Availability,error,errors,46445,"nd executed normally; - 1: command is blank, ignored; - 2: command line unreadable, ignored; - 3: unknown command, ignored; - 4: abnormal termination (e.g., MIGRAD not converged); - 5: command is a request to read PARAMETER definitions; - 6: 'SET INPUT' command; - 7: 'SET TITLE' command; - 8: 'SET COVAR' command; - 9: reserved; - 10: END command; - 11: EXIT or STOP command; - 12: RETURN command. Definition at line 1310 of file TMinuit.cxx. ◆ mncont(). void TMinuit::mncont ; (; Int_t ; ike1, . Int_t ; ike2, . Int_t ; nptu, . Double_t * ; xptu, . Double_t * ; yptu, . Int_t & ; ierrf . ). virtual . Find points along a contour where FCN is minimum. ; Find NPTU points along a contour where the function FMIN (X(KE1),X(KE2)) = AMIN+UP. where FMIN is the minimum of FCN with respect to all; the other NPAR-2 variable parameters (if any).; IERRF on return will be equal to the number of points found:; NPTU if normal termination with NPTU points found; -1 if errors in the calling sequence (KE1, KE2 not variable); 0 if less than four points can be found (using MNMNOT); n>3 if only n points can be found (n < NPTU) input arguments: parx, pary, devs, ngrid ; . Definition at line 1395 of file TMinuit.cxx. ◆ mncrck(). void TMinuit::mncrck ; (; TString ; cardbuf, . Int_t ; maxcwd, . TString & ; comand, . Int_t & ; lnc, . Int_t ; mxp, . Double_t * ; plist, . Int_t & ; llist, . Int_t & ; ierr, . Int_t ; isyswr . ). virtual . Cracks the free-format input. ; Cracks the free-format input, expecting zero or more; alphanumeric fields (which it joins into COMAND(1:LNC)); followed by one or more numeric fields separated by; blanks and/or one comma. The numeric fields are put into; the LLIST (but at most MXP) elements of PLIST. IERR :; - = 0 if no errors,; - = 1 if error(s). . Definition at line 1677 of file TMinuit.cxx. ◆ mncros(). void TMinuit::mncros ; (; Double_t & ; aopt, . Int_t & ; iercr . ). virtual . Find point where MNEVAL=AMIN+UP. ; Find point where MNEVAL=AMIN+UP, along the line thro",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:47233,Availability,error,errors,47233,"s the minimum of FCN with respect to all; the other NPAR-2 variable parameters (if any).; IERRF on return will be equal to the number of points found:; NPTU if normal termination with NPTU points found; -1 if errors in the calling sequence (KE1, KE2 not variable); 0 if less than four points can be found (using MNMNOT); n>3 if only n points can be found (n < NPTU) input arguments: parx, pary, devs, ngrid ; . Definition at line 1395 of file TMinuit.cxx. ◆ mncrck(). void TMinuit::mncrck ; (; TString ; cardbuf, . Int_t ; maxcwd, . TString & ; comand, . Int_t & ; lnc, . Int_t ; mxp, . Double_t * ; plist, . Int_t & ; llist, . Int_t & ; ierr, . Int_t ; isyswr . ). virtual . Cracks the free-format input. ; Cracks the free-format input, expecting zero or more; alphanumeric fields (which it joins into COMAND(1:LNC)); followed by one or more numeric fields separated by; blanks and/or one comma. The numeric fields are put into; the LLIST (but at most MXP) elements of PLIST. IERR :; - = 0 if no errors,; - = 1 if error(s). . Definition at line 1677 of file TMinuit.cxx. ◆ mncros(). void TMinuit::mncros ; (; Double_t & ; aopt, . Int_t & ; iercr . ). virtual . Find point where MNEVAL=AMIN+UP. ; Find point where MNEVAL=AMIN+UP, along the line through XMIDCR,YMIDCR with direction XDIRCR,YDIRCR, where X and Y are parameters KE1CR and KE2CR. If KE2CR=0 (from MINOS), only KE1CR is varied. From MNCONT, both are varied. Crossing point is at; (U(KE1),U(KE2)) = (XMID,YMID) + AOPT*(XDIR,YDIR) ; Definition at line 1798 of file TMinuit.cxx. ◆ mncuve(). void TMinuit::mncuve ; (; ). virtual . Makes sure that the current point is a local minimum. ; Makes sure that the current point is a local minimum and that the error matrix exists, or at least something good enough for MINOS and MNCONT ; Definition at line 2130 of file TMinuit.cxx. ◆ mnderi(). void TMinuit::mnderi ; (; ). virtual . Calculates the first derivatives of FCN (GRD) ; Calculates the first derivatives of FCN (GRD), either by finite dif",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:47251,Availability,error,error,47251,"s the minimum of FCN with respect to all; the other NPAR-2 variable parameters (if any).; IERRF on return will be equal to the number of points found:; NPTU if normal termination with NPTU points found; -1 if errors in the calling sequence (KE1, KE2 not variable); 0 if less than four points can be found (using MNMNOT); n>3 if only n points can be found (n < NPTU) input arguments: parx, pary, devs, ngrid ; . Definition at line 1395 of file TMinuit.cxx. ◆ mncrck(). void TMinuit::mncrck ; (; TString ; cardbuf, . Int_t ; maxcwd, . TString & ; comand, . Int_t & ; lnc, . Int_t ; mxp, . Double_t * ; plist, . Int_t & ; llist, . Int_t & ; ierr, . Int_t ; isyswr . ). virtual . Cracks the free-format input. ; Cracks the free-format input, expecting zero or more; alphanumeric fields (which it joins into COMAND(1:LNC)); followed by one or more numeric fields separated by; blanks and/or one comma. The numeric fields are put into; the LLIST (but at most MXP) elements of PLIST. IERR :; - = 0 if no errors,; - = 1 if error(s). . Definition at line 1677 of file TMinuit.cxx. ◆ mncros(). void TMinuit::mncros ; (; Double_t & ; aopt, . Int_t & ; iercr . ). virtual . Find point where MNEVAL=AMIN+UP. ; Find point where MNEVAL=AMIN+UP, along the line through XMIDCR,YMIDCR with direction XDIRCR,YDIRCR, where X and Y are parameters KE1CR and KE2CR. If KE2CR=0 (from MINOS), only KE1CR is varied. From MNCONT, both are varied. Crossing point is at; (U(KE1),U(KE2)) = (XMID,YMID) + AOPT*(XDIR,YDIR) ; Definition at line 1798 of file TMinuit.cxx. ◆ mncuve(). void TMinuit::mncuve ; (; ). virtual . Makes sure that the current point is a local minimum. ; Makes sure that the current point is a local minimum and that the error matrix exists, or at least something good enough for MINOS and MNCONT ; Definition at line 2130 of file TMinuit.cxx. ◆ mnderi(). void TMinuit::mnderi ; (; ). virtual . Calculates the first derivatives of FCN (GRD) ; Calculates the first derivatives of FCN (GRD), either by finite dif",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:47947,Availability,error,error,47947,"t, expecting zero or more; alphanumeric fields (which it joins into COMAND(1:LNC)); followed by one or more numeric fields separated by; blanks and/or one comma. The numeric fields are put into; the LLIST (but at most MXP) elements of PLIST. IERR :; - = 0 if no errors,; - = 1 if error(s). . Definition at line 1677 of file TMinuit.cxx. ◆ mncros(). void TMinuit::mncros ; (; Double_t & ; aopt, . Int_t & ; iercr . ). virtual . Find point where MNEVAL=AMIN+UP. ; Find point where MNEVAL=AMIN+UP, along the line through XMIDCR,YMIDCR with direction XDIRCR,YDIRCR, where X and Y are parameters KE1CR and KE2CR. If KE2CR=0 (from MINOS), only KE1CR is varied. From MNCONT, both are varied. Crossing point is at; (U(KE1),U(KE2)) = (XMID,YMID) + AOPT*(XDIR,YDIR) ; Definition at line 1798 of file TMinuit.cxx. ◆ mncuve(). void TMinuit::mncuve ; (; ). virtual . Makes sure that the current point is a local minimum. ; Makes sure that the current point is a local minimum and that the error matrix exists, or at least something good enough for MINOS and MNCONT ; Definition at line 2130 of file TMinuit.cxx. ◆ mnderi(). void TMinuit::mnderi ; (; ). virtual . Calculates the first derivatives of FCN (GRD) ; Calculates the first derivatives of FCN (GRD), either by finite differences or by transforming the user- supplied derivatives to internal coordinates, according to whether fISW[2] is zero or one. ; Definition at line 2178 of file TMinuit.cxx. ◆ mndxdi(). void TMinuit::mndxdi ; (; Double_t ; pint, . Int_t ; ipar, . Double_t & ; dxdi . ). virtual . Calculates the transformation factor between ext/internal values. ; calculates the transformation factor between external and internal parameter values. this factor is one for parameters which are not limited. called from MNEMAT. ; Definition at line 2293 of file TMinuit.cxx. ◆ mneig(). void TMinuit::mneig ; (; Double_t * ; a, . Int_t ; ndima, . Int_t ; n, . Int_t ; mits, . Double_t * ; work, . Double_t ; precis, . Int_t & ; ifault . ). virtual . Com",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:49156,Availability,error,error,49156,"GRD) ; Calculates the first derivatives of FCN (GRD), either by finite differences or by transforming the user- supplied derivatives to internal coordinates, according to whether fISW[2] is zero or one. ; Definition at line 2178 of file TMinuit.cxx. ◆ mndxdi(). void TMinuit::mndxdi ; (; Double_t ; pint, . Int_t ; ipar, . Double_t & ; dxdi . ). virtual . Calculates the transformation factor between ext/internal values. ; calculates the transformation factor between external and internal parameter values. this factor is one for parameters which are not limited. called from MNEMAT. ; Definition at line 2293 of file TMinuit.cxx. ◆ mneig(). void TMinuit::mneig ; (; Double_t * ; a, . Int_t ; ndima, . Int_t ; n, . Int_t ; mits, . Double_t * ; work, . Double_t ; precis, . Int_t & ; ifault . ). virtual . Compute matrix eigen values. ; Definition at line 2305 of file TMinuit.cxx. ◆ mnemat(). void TMinuit::mnemat ; (; Double_t * ; emat, . Int_t ; ndim . ). virtual . Calculates the external error matrix from the internal matrix. ; Note that if the matrix is declared like Double_t matrix[5][5] in the calling program, one has to call mnemat with, eg gMinuit->mnemat(&matrix[0][0],5); . Definition at line 2501 of file TMinuit.cxx. ◆ mnerrs(). void TMinuit::mnerrs ; (; Int_t ; number, . Double_t & ; eplus, . Double_t & ; eminus, . Double_t & ; eparab, . Double_t & ; gcc . ). virtual . Utility routine to get MINOS errors. ; Called by user.; NUMBER is the parameter number; values returned by MNERRS:; EPLUS, EMINUS are MINOS errors of parameter NUMBER,; EPARAB is 'parabolic' error (from error matrix). (Errors not calculated are set = 0); GCC is global correlation coefficient from error matrix . Definition at line 2578 of file TMinuit.cxx. ◆ mneval(). void TMinuit::mneval ; (; Double_t ; anext, . Double_t & ; fnext, . Int_t & ; ierev . ). virtual . Evaluates the function being analysed by MNCROS. ; Evaluates the function being analysed by MNCROS, which is generally the minimum of FCN wit",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:49582,Availability,error,errors,49582,"ernal values. ; calculates the transformation factor between external and internal parameter values. this factor is one for parameters which are not limited. called from MNEMAT. ; Definition at line 2293 of file TMinuit.cxx. ◆ mneig(). void TMinuit::mneig ; (; Double_t * ; a, . Int_t ; ndima, . Int_t ; n, . Int_t ; mits, . Double_t * ; work, . Double_t ; precis, . Int_t & ; ifault . ). virtual . Compute matrix eigen values. ; Definition at line 2305 of file TMinuit.cxx. ◆ mnemat(). void TMinuit::mnemat ; (; Double_t * ; emat, . Int_t ; ndim . ). virtual . Calculates the external error matrix from the internal matrix. ; Note that if the matrix is declared like Double_t matrix[5][5] in the calling program, one has to call mnemat with, eg gMinuit->mnemat(&matrix[0][0],5); . Definition at line 2501 of file TMinuit.cxx. ◆ mnerrs(). void TMinuit::mnerrs ; (; Int_t ; number, . Double_t & ; eplus, . Double_t & ; eminus, . Double_t & ; eparab, . Double_t & ; gcc . ). virtual . Utility routine to get MINOS errors. ; Called by user.; NUMBER is the parameter number; values returned by MNERRS:; EPLUS, EMINUS are MINOS errors of parameter NUMBER,; EPARAB is 'parabolic' error (from error matrix). (Errors not calculated are set = 0); GCC is global correlation coefficient from error matrix . Definition at line 2578 of file TMinuit.cxx. ◆ mneval(). void TMinuit::mneval ; (; Double_t ; anext, . Double_t & ; fnext, . Int_t & ; ierev . ). virtual . Evaluates the function being analysed by MNCROS. ; Evaluates the function being analysed by MNCROS, which is generally the minimum of FCN with respect to all remaining variable parameters. The class data members contains the data necessary to know the values of U(KE1CR) and U(KE2CR) to be used, namely U(KE1CR) = XMIDCR + ANEXT*XDIRCR and (if KE2CR .NE. 0) U(KE2CR) = YMIDCR + ANEXT*YDIRCR ; Definition at line 2620 of file TMinuit.cxx. ◆ mnexcm(). void TMinuit::mnexcm ; (; const char * ; command, . Double_t * ; plist, . Int_t ; llist, . Int_t & ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:49693,Availability,error,errors,49693,"e for parameters which are not limited. called from MNEMAT. ; Definition at line 2293 of file TMinuit.cxx. ◆ mneig(). void TMinuit::mneig ; (; Double_t * ; a, . Int_t ; ndima, . Int_t ; n, . Int_t ; mits, . Double_t * ; work, . Double_t ; precis, . Int_t & ; ifault . ). virtual . Compute matrix eigen values. ; Definition at line 2305 of file TMinuit.cxx. ◆ mnemat(). void TMinuit::mnemat ; (; Double_t * ; emat, . Int_t ; ndim . ). virtual . Calculates the external error matrix from the internal matrix. ; Note that if the matrix is declared like Double_t matrix[5][5] in the calling program, one has to call mnemat with, eg gMinuit->mnemat(&matrix[0][0],5); . Definition at line 2501 of file TMinuit.cxx. ◆ mnerrs(). void TMinuit::mnerrs ; (; Int_t ; number, . Double_t & ; eplus, . Double_t & ; eminus, . Double_t & ; eparab, . Double_t & ; gcc . ). virtual . Utility routine to get MINOS errors. ; Called by user.; NUMBER is the parameter number; values returned by MNERRS:; EPLUS, EMINUS are MINOS errors of parameter NUMBER,; EPARAB is 'parabolic' error (from error matrix). (Errors not calculated are set = 0); GCC is global correlation coefficient from error matrix . Definition at line 2578 of file TMinuit.cxx. ◆ mneval(). void TMinuit::mneval ; (; Double_t ; anext, . Double_t & ; fnext, . Int_t & ; ierev . ). virtual . Evaluates the function being analysed by MNCROS. ; Evaluates the function being analysed by MNCROS, which is generally the minimum of FCN with respect to all remaining variable parameters. The class data members contains the data necessary to know the values of U(KE1CR) and U(KE2CR) to be used, namely U(KE1CR) = XMIDCR + ANEXT*XDIRCR and (if KE2CR .NE. 0) U(KE2CR) = YMIDCR + ANEXT*YDIRCR ; Definition at line 2620 of file TMinuit.cxx. ◆ mnexcm(). void TMinuit::mnexcm ; (; const char * ; command, . Double_t * ; plist, . Int_t ; llist, . Int_t & ; ierflg . ). virtual . Interprets a command and takes appropriate action. ; either directly by skipping to the corres",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:49744,Availability,error,error,49744,"e for parameters which are not limited. called from MNEMAT. ; Definition at line 2293 of file TMinuit.cxx. ◆ mneig(). void TMinuit::mneig ; (; Double_t * ; a, . Int_t ; ndima, . Int_t ; n, . Int_t ; mits, . Double_t * ; work, . Double_t ; precis, . Int_t & ; ifault . ). virtual . Compute matrix eigen values. ; Definition at line 2305 of file TMinuit.cxx. ◆ mnemat(). void TMinuit::mnemat ; (; Double_t * ; emat, . Int_t ; ndim . ). virtual . Calculates the external error matrix from the internal matrix. ; Note that if the matrix is declared like Double_t matrix[5][5] in the calling program, one has to call mnemat with, eg gMinuit->mnemat(&matrix[0][0],5); . Definition at line 2501 of file TMinuit.cxx. ◆ mnerrs(). void TMinuit::mnerrs ; (; Int_t ; number, . Double_t & ; eplus, . Double_t & ; eminus, . Double_t & ; eparab, . Double_t & ; gcc . ). virtual . Utility routine to get MINOS errors. ; Called by user.; NUMBER is the parameter number; values returned by MNERRS:; EPLUS, EMINUS are MINOS errors of parameter NUMBER,; EPARAB is 'parabolic' error (from error matrix). (Errors not calculated are set = 0); GCC is global correlation coefficient from error matrix . Definition at line 2578 of file TMinuit.cxx. ◆ mneval(). void TMinuit::mneval ; (; Double_t ; anext, . Double_t & ; fnext, . Int_t & ; ierev . ). virtual . Evaluates the function being analysed by MNCROS. ; Evaluates the function being analysed by MNCROS, which is generally the minimum of FCN with respect to all remaining variable parameters. The class data members contains the data necessary to know the values of U(KE1CR) and U(KE2CR) to be used, namely U(KE1CR) = XMIDCR + ANEXT*XDIRCR and (if KE2CR .NE. 0) U(KE2CR) = YMIDCR + ANEXT*YDIRCR ; Definition at line 2620 of file TMinuit.cxx. ◆ mnexcm(). void TMinuit::mnexcm ; (; const char * ; command, . Double_t * ; plist, . Int_t ; llist, . Int_t & ; ierflg . ). virtual . Interprets a command and takes appropriate action. ; either directly by skipping to the corres",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:49756,Availability,error,error,49756,"e for parameters which are not limited. called from MNEMAT. ; Definition at line 2293 of file TMinuit.cxx. ◆ mneig(). void TMinuit::mneig ; (; Double_t * ; a, . Int_t ; ndima, . Int_t ; n, . Int_t ; mits, . Double_t * ; work, . Double_t ; precis, . Int_t & ; ifault . ). virtual . Compute matrix eigen values. ; Definition at line 2305 of file TMinuit.cxx. ◆ mnemat(). void TMinuit::mnemat ; (; Double_t * ; emat, . Int_t ; ndim . ). virtual . Calculates the external error matrix from the internal matrix. ; Note that if the matrix is declared like Double_t matrix[5][5] in the calling program, one has to call mnemat with, eg gMinuit->mnemat(&matrix[0][0],5); . Definition at line 2501 of file TMinuit.cxx. ◆ mnerrs(). void TMinuit::mnerrs ; (; Int_t ; number, . Double_t & ; eplus, . Double_t & ; eminus, . Double_t & ; eparab, . Double_t & ; gcc . ). virtual . Utility routine to get MINOS errors. ; Called by user.; NUMBER is the parameter number; values returned by MNERRS:; EPLUS, EMINUS are MINOS errors of parameter NUMBER,; EPARAB is 'parabolic' error (from error matrix). (Errors not calculated are set = 0); GCC is global correlation coefficient from error matrix . Definition at line 2578 of file TMinuit.cxx. ◆ mneval(). void TMinuit::mneval ; (; Double_t ; anext, . Double_t & ; fnext, . Int_t & ; ierev . ). virtual . Evaluates the function being analysed by MNCROS. ; Evaluates the function being analysed by MNCROS, which is generally the minimum of FCN with respect to all remaining variable parameters. The class data members contains the data necessary to know the values of U(KE1CR) and U(KE2CR) to be used, namely U(KE1CR) = XMIDCR + ANEXT*XDIRCR and (if KE2CR .NE. 0) U(KE2CR) = YMIDCR + ANEXT*YDIRCR ; Definition at line 2620 of file TMinuit.cxx. ◆ mnexcm(). void TMinuit::mnexcm ; (; const char * ; command, . Double_t * ; plist, . Int_t ; llist, . Int_t & ; ierflg . ). virtual . Interprets a command and takes appropriate action. ; either directly by skipping to the corres",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:49851,Availability,error,error,49851,"t::mneig ; (; Double_t * ; a, . Int_t ; ndima, . Int_t ; n, . Int_t ; mits, . Double_t * ; work, . Double_t ; precis, . Int_t & ; ifault . ). virtual . Compute matrix eigen values. ; Definition at line 2305 of file TMinuit.cxx. ◆ mnemat(). void TMinuit::mnemat ; (; Double_t * ; emat, . Int_t ; ndim . ). virtual . Calculates the external error matrix from the internal matrix. ; Note that if the matrix is declared like Double_t matrix[5][5] in the calling program, one has to call mnemat with, eg gMinuit->mnemat(&matrix[0][0],5); . Definition at line 2501 of file TMinuit.cxx. ◆ mnerrs(). void TMinuit::mnerrs ; (; Int_t ; number, . Double_t & ; eplus, . Double_t & ; eminus, . Double_t & ; eparab, . Double_t & ; gcc . ). virtual . Utility routine to get MINOS errors. ; Called by user.; NUMBER is the parameter number; values returned by MNERRS:; EPLUS, EMINUS are MINOS errors of parameter NUMBER,; EPARAB is 'parabolic' error (from error matrix). (Errors not calculated are set = 0); GCC is global correlation coefficient from error matrix . Definition at line 2578 of file TMinuit.cxx. ◆ mneval(). void TMinuit::mneval ; (; Double_t ; anext, . Double_t & ; fnext, . Int_t & ; ierev . ). virtual . Evaluates the function being analysed by MNCROS. ; Evaluates the function being analysed by MNCROS, which is generally the minimum of FCN with respect to all remaining variable parameters. The class data members contains the data necessary to know the values of U(KE1CR) and U(KE2CR) to be used, namely U(KE1CR) = XMIDCR + ANEXT*XDIRCR and (if KE2CR .NE. 0) U(KE2CR) = YMIDCR + ANEXT*YDIRCR ; Definition at line 2620 of file TMinuit.cxx. ◆ mnexcm(). void TMinuit::mnexcm ; (; const char * ; command, . Double_t * ; plist, . Int_t ; llist, . Int_t & ; ierflg . ). virtual . Interprets a command and takes appropriate action. ; either directly by skipping to the corresponding code in; MNEXCM, or by setting up a call to a function; recognized MINUIT commands: obsolete commands: IERFLG is now (94.",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:55229,Availability,toler,toler,55229,"he simplex method from several random starting points.; ref. – Goldstein and Price, Math.Comp. 25, 569 (1971) ; Definition at line 4295 of file TMinuit.cxx. ◆ mninex(). void TMinuit::mninex ; (; Double_t * ; pint). virtual . Transforms from internal coordinates (PINT) to external (U) ; The minimising routines which work in internal coordinates call this routine before calling FCN. ; Definition at line 4506 of file TMinuit.cxx. ◆ mninit(). void TMinuit::mninit ; (; Int_t ; i1, . Int_t ; i2, . Int_t ; i3 . ). virtual . Main initialization member function for MINUIT. ; It initializes some constants (including the logical I/O unit nos.), ; Definition at line 4526 of file TMinuit.cxx. ◆ mnlims(). void TMinuit::mnlims ; (; ). virtual . Interprets the SET LIM command, to reset the parameter limits. ; Called from MNSET ; Definition at line 4616 of file TMinuit.cxx. ◆ mnline(). void TMinuit::mnline ; (; Double_t * ; start, . Double_t ; fstart, . Double_t * ; step, . Double_t ; slope, . Double_t ; toler . ). virtual . Perform a line search from position START. ; along direction STEP, where the length of vector STEP gives the expected position of minimum.; FSTART is value of function at START; SLOPE (if non-zero) is df/dx along STEP at START; TOLER is initial tolerance of minimum in direction STEP. SLAMBG and ALPHA control the maximum individual steps allowed. The first step is always =1. The max length of second step is SLAMBG. The max size of subsequent steps is the maximum previous successful step multiplied by ALPHA + the size of most recent successful step, but cannot be smaller than SLAMBG. ; Definition at line 4736 of file TMinuit.cxx. ◆ mnmatu(). void TMinuit::mnmatu ; (; Int_t ; kode). virtual . Prints the covariance matrix v when KODE=1. ; always prints the global correlations, and calculates and prints the individual correlation coefficients ; Definition at line 4968 of file TMinuit.cxx. ◆ mnmigr(). void TMinuit::mnmigr ; (; ). virtual . Performs a local function min",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:55495,Availability,toler,tolerance,55495," from internal coordinates (PINT) to external (U) ; The minimising routines which work in internal coordinates call this routine before calling FCN. ; Definition at line 4506 of file TMinuit.cxx. ◆ mninit(). void TMinuit::mninit ; (; Int_t ; i1, . Int_t ; i2, . Int_t ; i3 . ). virtual . Main initialization member function for MINUIT. ; It initializes some constants (including the logical I/O unit nos.), ; Definition at line 4526 of file TMinuit.cxx. ◆ mnlims(). void TMinuit::mnlims ; (; ). virtual . Interprets the SET LIM command, to reset the parameter limits. ; Called from MNSET ; Definition at line 4616 of file TMinuit.cxx. ◆ mnline(). void TMinuit::mnline ; (; Double_t * ; start, . Double_t ; fstart, . Double_t * ; step, . Double_t ; slope, . Double_t ; toler . ). virtual . Perform a line search from position START. ; along direction STEP, where the length of vector STEP gives the expected position of minimum.; FSTART is value of function at START; SLOPE (if non-zero) is df/dx along STEP at START; TOLER is initial tolerance of minimum in direction STEP. SLAMBG and ALPHA control the maximum individual steps allowed. The first step is always =1. The max length of second step is SLAMBG. The max size of subsequent steps is the maximum previous successful step multiplied by ALPHA + the size of most recent successful step, but cannot be smaller than SLAMBG. ; Definition at line 4736 of file TMinuit.cxx. ◆ mnmatu(). void TMinuit::mnmatu ; (; Int_t ; kode). virtual . Prints the covariance matrix v when KODE=1. ; always prints the global correlations, and calculates and prints the individual correlation coefficients ; Definition at line 4968 of file TMinuit.cxx. ◆ mnmigr(). void TMinuit::mnmigr ; (; ). virtual . Performs a local function minimization. ; Performs a local function minimization using basically the method of Davidon-Fletcher-Powell as modified by Fletcher; ref. – Fletcher, Comp.J. 13,317 (1970) ""switching method"" ; Definition at line 5048 of file TMinuit.cxx",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:56531,Availability,error,error,56531,"STEP. SLAMBG and ALPHA control the maximum individual steps allowed. The first step is always =1. The max length of second step is SLAMBG. The max size of subsequent steps is the maximum previous successful step multiplied by ALPHA + the size of most recent successful step, but cannot be smaller than SLAMBG. ; Definition at line 4736 of file TMinuit.cxx. ◆ mnmatu(). void TMinuit::mnmatu ; (; Int_t ; kode). virtual . Prints the covariance matrix v when KODE=1. ; always prints the global correlations, and calculates and prints the individual correlation coefficients ; Definition at line 4968 of file TMinuit.cxx. ◆ mnmigr(). void TMinuit::mnmigr ; (; ). virtual . Performs a local function minimization. ; Performs a local function minimization using basically the method of Davidon-Fletcher-Powell as modified by Fletcher; ref. – Fletcher, Comp.J. 13,317 (1970) ""switching method"" ; Definition at line 5048 of file TMinuit.cxx. ◆ mnmnos(). void TMinuit::mnmnos ; (; ). virtual . Performs a MINOS error analysis. ; Performs a MINOS error analysis on those parameters for which it is requested on the MINOS command by calling MNMNOT for each parameter requested. ; Definition at line 5388 of file TMinuit.cxx. ◆ mnmnot(). void TMinuit::mnmnot ; (; Int_t ; ilax, . Int_t ; ilax2, . Double_t & ; val2pl, . Double_t & ; val2mi . ). virtual . Performs a MINOS error analysis on one parameter. ; The parameter ILAX is varied, and the minimum of the function with respect to the other parameters is followed until it crosses the value FMIN+UP. ; Definition at line 5463 of file TMinuit.cxx. ◆ mnparm(). void TMinuit::mnparm ; (; Int_t ; k1, . TString ; cnamj, . Double_t ; uk, . Double_t ; wk, . Double_t ; a, . Double_t ; b, . Int_t & ; ierflg . ). virtual . Implements one parameter definition. ; Called from MNPARS and user-callable Implements one parameter definition, that is:; K (external) parameter number; CNAMK parameter name; UK starting value; WK starting step size or uncertainty; A, B lower",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:56566,Availability,error,error,56566,"ys =1. The max length of second step is SLAMBG. The max size of subsequent steps is the maximum previous successful step multiplied by ALPHA + the size of most recent successful step, but cannot be smaller than SLAMBG. ; Definition at line 4736 of file TMinuit.cxx. ◆ mnmatu(). void TMinuit::mnmatu ; (; Int_t ; kode). virtual . Prints the covariance matrix v when KODE=1. ; always prints the global correlations, and calculates and prints the individual correlation coefficients ; Definition at line 4968 of file TMinuit.cxx. ◆ mnmigr(). void TMinuit::mnmigr ; (; ). virtual . Performs a local function minimization. ; Performs a local function minimization using basically the method of Davidon-Fletcher-Powell as modified by Fletcher; ref. – Fletcher, Comp.J. 13,317 (1970) ""switching method"" ; Definition at line 5048 of file TMinuit.cxx. ◆ mnmnos(). void TMinuit::mnmnos ; (; ). virtual . Performs a MINOS error analysis. ; Performs a MINOS error analysis on those parameters for which it is requested on the MINOS command by calling MNMNOT for each parameter requested. ; Definition at line 5388 of file TMinuit.cxx. ◆ mnmnot(). void TMinuit::mnmnot ; (; Int_t ; ilax, . Int_t ; ilax2, . Double_t & ; val2pl, . Double_t & ; val2mi . ). virtual . Performs a MINOS error analysis on one parameter. ; The parameter ILAX is varied, and the minimum of the function with respect to the other parameters is followed until it crosses the value FMIN+UP. ; Definition at line 5463 of file TMinuit.cxx. ◆ mnparm(). void TMinuit::mnparm ; (; Int_t ; k1, . TString ; cnamj, . Double_t ; uk, . Double_t ; wk, . Double_t ; a, . Double_t ; b, . Int_t & ; ierflg . ). virtual . Implements one parameter definition. ; Called from MNPARS and user-callable Implements one parameter definition, that is:; K (external) parameter number; CNAMK parameter name; UK starting value; WK starting step size or uncertainty; A, B lower and upper physical parameter limits and sets up (updates) the parameter lists. Output:; IE",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:56889,Availability,error,error,56889,". void TMinuit::mnmatu ; (; Int_t ; kode). virtual . Prints the covariance matrix v when KODE=1. ; always prints the global correlations, and calculates and prints the individual correlation coefficients ; Definition at line 4968 of file TMinuit.cxx. ◆ mnmigr(). void TMinuit::mnmigr ; (; ). virtual . Performs a local function minimization. ; Performs a local function minimization using basically the method of Davidon-Fletcher-Powell as modified by Fletcher; ref. – Fletcher, Comp.J. 13,317 (1970) ""switching method"" ; Definition at line 5048 of file TMinuit.cxx. ◆ mnmnos(). void TMinuit::mnmnos ; (; ). virtual . Performs a MINOS error analysis. ; Performs a MINOS error analysis on those parameters for which it is requested on the MINOS command by calling MNMNOT for each parameter requested. ; Definition at line 5388 of file TMinuit.cxx. ◆ mnmnot(). void TMinuit::mnmnot ; (; Int_t ; ilax, . Int_t ; ilax2, . Double_t & ; val2pl, . Double_t & ; val2mi . ). virtual . Performs a MINOS error analysis on one parameter. ; The parameter ILAX is varied, and the minimum of the function with respect to the other parameters is followed until it crosses the value FMIN+UP. ; Definition at line 5463 of file TMinuit.cxx. ◆ mnparm(). void TMinuit::mnparm ; (; Int_t ; k1, . TString ; cnamj, . Double_t ; uk, . Double_t ; wk, . Double_t ; a, . Double_t ; b, . Int_t & ; ierflg . ). virtual . Implements one parameter definition. ; Called from MNPARS and user-callable Implements one parameter definition, that is:; K (external) parameter number; CNAMK parameter name; UK starting value; WK starting step size or uncertainty; A, B lower and upper physical parameter limits and sets up (updates) the parameter lists. Output:; IERFLG=0 if no problems; >0 if MNPARM unable to implement definition . Definition at line 5665 of file TMinuit.cxx. ◆ mnpars(). void TMinuit::mnpars ; (; TString & ; crdbuf, . Int_t & ; icondn . ). virtual . Implements one parameter definition. ; Called from MNREAD and user-ca",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:58042,Availability,error,error,58042,"ct to the other parameters is followed until it crosses the value FMIN+UP. ; Definition at line 5463 of file TMinuit.cxx. ◆ mnparm(). void TMinuit::mnparm ; (; Int_t ; k1, . TString ; cnamj, . Double_t ; uk, . Double_t ; wk, . Double_t ; a, . Double_t ; b, . Int_t & ; ierflg . ). virtual . Implements one parameter definition. ; Called from MNPARS and user-callable Implements one parameter definition, that is:; K (external) parameter number; CNAMK parameter name; UK starting value; WK starting step size or uncertainty; A, B lower and upper physical parameter limits and sets up (updates) the parameter lists. Output:; IERFLG=0 if no problems; >0 if MNPARM unable to implement definition . Definition at line 5665 of file TMinuit.cxx. ◆ mnpars(). void TMinuit::mnpars ; (; TString & ; crdbuf, . Int_t & ; icondn . ). virtual . Implements one parameter definition. ; Called from MNREAD and user-callable Implements one parameter definition, that is: parses the string CRDBUF and calls MNPARM; output conditions:; ICONDN = 0 all OK; ICONDN = 1 error, attempt to define parameter is ignored; ICONDN = 2 end of parameter definitions . Definition at line 5867 of file TMinuit.cxx. ◆ mnpfit(). void TMinuit::mnpfit ; (; Double_t * ; parx2p, . Double_t * ; pary2p, . Int_t ; npar2p, . Double_t * ; coef2p, . Double_t & ; sdev2p . ). virtual . To fit a parabola to npar2p points. . npar2p no. of points; parx2p(i) x value of point i; pary2p(i) y value of point i; coef2p(1...3) coefficients of the fitted parabola; y=coef2p(1) + coef2p(2)*x + coef2p(3)*x**2; sdev2p= variance; method : chi**2 = min equation solved explicitly . Definition at line 5956 of file TMinuit.cxx. ◆ mnpint(). void TMinuit::mnpint ; (; Double_t & ; pexti, . Int_t ; i1, . Double_t & ; pinti . ). virtual . Calculates the internal parameter value PINTI. ; corresponding to the external value PEXTI for parameter I. ; Definition at line 6017 of file TMinuit.cxx. ◆ mnplot(). void TMinuit::mnplot ; (; Double_t * ; xpt, . Double_t * ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:61119,Availability,error,errors,61119,"; val, . Double_t & ; err, . Double_t & ; xlolim, . Double_t & ; xuplim, . Int_t & ; iuint . ); const. virtual . Provides the user with information concerning the current status. ; of parameter number IUEXT. Namely, it returns:; CHNAM: the name of the parameter; VAL: the current (external) value of the parameter; ERR: the current estimate of the parameter uncertainty; XLOLIM: the lower bound (or zero if no limits); XUPLIM: the upper bound (or zero if no limits); IUINT: the internal parameter number (or zero if not variable, or negative if undefined). Note also: If IUEXT is negative, then it is -internal parameter number, and IUINT is returned as the EXTERNAL number. Except for IUINT, this is exactly the inverse of MNPARM User-called ; Definition at line 6247 of file TMinuit.cxx. ◆ mnprin(). void TMinuit::mnprin ; (; Int_t ; inkode, . Double_t ; fval . ). virtual . Prints the values of the parameters at the time of the call. ; also prints other relevant information such as function value, estimated distance to minimum, parameter errors, step sizes.; According to the value of IKODE, the printout is: IKODE=INKODE=; 0 only info about function value; 1 parameter values, errors, limits; 2 values, errors, step sizes, internal values; 3 values, errors, step sizes, first derivs.; 4 values, parabolic errors, MINOS errors. when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1] ; Definition at line 6304 of file TMinuit.cxx. ◆ mnpsdf(). void TMinuit::mnpsdf ; (; ). virtual . Calculates the eigenvalues of v to see if positive-def. ; if not, adds constant along diagonal to make positive. ; Definition at line 6494 of file TMinuit.cxx. ◆ mnrazz(). void TMinuit::mnrazz ; (; Double_t ; ynew, . Double_t * ; pnew, . Double_t * ; y, . Int_t & ; jh, . Int_t & ; jl . ). virtual . Called only by MNSIMP (and MNIMPR) to add a new point. ; and remove an old one from the current simplex, and get the estimated distance to minimum. ; Definition at line 6568 of file TMinuit.cxx. ◆ mnr",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:61259,Availability,error,errors,61259,"s. ; of parameter number IUEXT. Namely, it returns:; CHNAM: the name of the parameter; VAL: the current (external) value of the parameter; ERR: the current estimate of the parameter uncertainty; XLOLIM: the lower bound (or zero if no limits); XUPLIM: the upper bound (or zero if no limits); IUINT: the internal parameter number (or zero if not variable, or negative if undefined). Note also: If IUEXT is negative, then it is -internal parameter number, and IUINT is returned as the EXTERNAL number. Except for IUINT, this is exactly the inverse of MNPARM User-called ; Definition at line 6247 of file TMinuit.cxx. ◆ mnprin(). void TMinuit::mnprin ; (; Int_t ; inkode, . Double_t ; fval . ). virtual . Prints the values of the parameters at the time of the call. ; also prints other relevant information such as function value, estimated distance to minimum, parameter errors, step sizes.; According to the value of IKODE, the printout is: IKODE=INKODE=; 0 only info about function value; 1 parameter values, errors, limits; 2 values, errors, step sizes, internal values; 3 values, errors, step sizes, first derivs.; 4 values, parabolic errors, MINOS errors. when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1] ; Definition at line 6304 of file TMinuit.cxx. ◆ mnpsdf(). void TMinuit::mnpsdf ; (; ). virtual . Calculates the eigenvalues of v to see if positive-def. ; if not, adds constant along diagonal to make positive. ; Definition at line 6494 of file TMinuit.cxx. ◆ mnrazz(). void TMinuit::mnrazz ; (; Double_t ; ynew, . Double_t * ; pnew, . Double_t * ; y, . Int_t & ; jh, . Int_t & ; jl . ). virtual . Called only by MNSIMP (and MNIMPR) to add a new point. ; and remove an old one from the current simplex, and get the estimated distance to minimum. ; Definition at line 6568 of file TMinuit.cxx. ◆ mnrn15(). void TMinuit::mnrn15 ; (; Double_t & ; val, . Int_t & ; inseed . ). virtual . This is a super-portable random number generator. ; It should not overflow on any 32-bit mac",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:61285,Availability,error,errors,61285,"s. ; of parameter number IUEXT. Namely, it returns:; CHNAM: the name of the parameter; VAL: the current (external) value of the parameter; ERR: the current estimate of the parameter uncertainty; XLOLIM: the lower bound (or zero if no limits); XUPLIM: the upper bound (or zero if no limits); IUINT: the internal parameter number (or zero if not variable, or negative if undefined). Note also: If IUEXT is negative, then it is -internal parameter number, and IUINT is returned as the EXTERNAL number. Except for IUINT, this is exactly the inverse of MNPARM User-called ; Definition at line 6247 of file TMinuit.cxx. ◆ mnprin(). void TMinuit::mnprin ; (; Int_t ; inkode, . Double_t ; fval . ). virtual . Prints the values of the parameters at the time of the call. ; also prints other relevant information such as function value, estimated distance to minimum, parameter errors, step sizes.; According to the value of IKODE, the printout is: IKODE=INKODE=; 0 only info about function value; 1 parameter values, errors, limits; 2 values, errors, step sizes, internal values; 3 values, errors, step sizes, first derivs.; 4 values, parabolic errors, MINOS errors. when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1] ; Definition at line 6304 of file TMinuit.cxx. ◆ mnpsdf(). void TMinuit::mnpsdf ; (; ). virtual . Calculates the eigenvalues of v to see if positive-def. ; if not, adds constant along diagonal to make positive. ; Definition at line 6494 of file TMinuit.cxx. ◆ mnrazz(). void TMinuit::mnrazz ; (; Double_t ; ynew, . Double_t * ; pnew, . Double_t * ; y, . Int_t & ; jh, . Int_t & ; jl . ). virtual . Called only by MNSIMP (and MNIMPR) to add a new point. ; and remove an old one from the current simplex, and get the estimated distance to minimum. ; Definition at line 6568 of file TMinuit.cxx. ◆ mnrn15(). void TMinuit::mnrn15 ; (; Double_t & ; val, . Int_t & ; inseed . ). virtual . This is a super-portable random number generator. ; It should not overflow on any 32-bit mac",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:61332,Availability,error,errors,61332,"s. ; of parameter number IUEXT. Namely, it returns:; CHNAM: the name of the parameter; VAL: the current (external) value of the parameter; ERR: the current estimate of the parameter uncertainty; XLOLIM: the lower bound (or zero if no limits); XUPLIM: the upper bound (or zero if no limits); IUINT: the internal parameter number (or zero if not variable, or negative if undefined). Note also: If IUEXT is negative, then it is -internal parameter number, and IUINT is returned as the EXTERNAL number. Except for IUINT, this is exactly the inverse of MNPARM User-called ; Definition at line 6247 of file TMinuit.cxx. ◆ mnprin(). void TMinuit::mnprin ; (; Int_t ; inkode, . Double_t ; fval . ). virtual . Prints the values of the parameters at the time of the call. ; also prints other relevant information such as function value, estimated distance to minimum, parameter errors, step sizes.; According to the value of IKODE, the printout is: IKODE=INKODE=; 0 only info about function value; 1 parameter values, errors, limits; 2 values, errors, step sizes, internal values; 3 values, errors, step sizes, first derivs.; 4 values, parabolic errors, MINOS errors. when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1] ; Definition at line 6304 of file TMinuit.cxx. ◆ mnpsdf(). void TMinuit::mnpsdf ; (; ). virtual . Calculates the eigenvalues of v to see if positive-def. ; if not, adds constant along diagonal to make positive. ; Definition at line 6494 of file TMinuit.cxx. ◆ mnrazz(). void TMinuit::mnrazz ; (; Double_t ; ynew, . Double_t * ; pnew, . Double_t * ; y, . Int_t & ; jh, . Int_t & ; jl . ). virtual . Called only by MNSIMP (and MNIMPR) to add a new point. ; and remove an old one from the current simplex, and get the estimated distance to minimum. ; Definition at line 6568 of file TMinuit.cxx. ◆ mnrn15(). void TMinuit::mnrn15 ; (; Double_t & ; val, . Int_t & ; inseed . ). virtual . This is a super-portable random number generator. ; It should not overflow on any 32-bit mac",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:61387,Availability,error,errors,61387,"er; ERR: the current estimate of the parameter uncertainty; XLOLIM: the lower bound (or zero if no limits); XUPLIM: the upper bound (or zero if no limits); IUINT: the internal parameter number (or zero if not variable, or negative if undefined). Note also: If IUEXT is negative, then it is -internal parameter number, and IUINT is returned as the EXTERNAL number. Except for IUINT, this is exactly the inverse of MNPARM User-called ; Definition at line 6247 of file TMinuit.cxx. ◆ mnprin(). void TMinuit::mnprin ; (; Int_t ; inkode, . Double_t ; fval . ). virtual . Prints the values of the parameters at the time of the call. ; also prints other relevant information such as function value, estimated distance to minimum, parameter errors, step sizes.; According to the value of IKODE, the printout is: IKODE=INKODE=; 0 only info about function value; 1 parameter values, errors, limits; 2 values, errors, step sizes, internal values; 3 values, errors, step sizes, first derivs.; 4 values, parabolic errors, MINOS errors. when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1] ; Definition at line 6304 of file TMinuit.cxx. ◆ mnpsdf(). void TMinuit::mnpsdf ; (; ). virtual . Calculates the eigenvalues of v to see if positive-def. ; if not, adds constant along diagonal to make positive. ; Definition at line 6494 of file TMinuit.cxx. ◆ mnrazz(). void TMinuit::mnrazz ; (; Double_t ; ynew, . Double_t * ; pnew, . Double_t * ; y, . Int_t & ; jh, . Int_t & ; jl . ). virtual . Called only by MNSIMP (and MNIMPR) to add a new point. ; and remove an old one from the current simplex, and get the estimated distance to minimum. ; Definition at line 6568 of file TMinuit.cxx. ◆ mnrn15(). void TMinuit::mnrn15 ; (; Double_t & ; val, . Int_t & ; inseed . ). virtual . This is a super-portable random number generator. ; It should not overflow on any 32-bit machine. The cycle is only ~10**9, so use with care! Note especially that VAL must not be undefined on input.; Set Default Starting Seed ;",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:61401,Availability,error,errors,61401,"er; ERR: the current estimate of the parameter uncertainty; XLOLIM: the lower bound (or zero if no limits); XUPLIM: the upper bound (or zero if no limits); IUINT: the internal parameter number (or zero if not variable, or negative if undefined). Note also: If IUEXT is negative, then it is -internal parameter number, and IUINT is returned as the EXTERNAL number. Except for IUINT, this is exactly the inverse of MNPARM User-called ; Definition at line 6247 of file TMinuit.cxx. ◆ mnprin(). void TMinuit::mnprin ; (; Int_t ; inkode, . Double_t ; fval . ). virtual . Prints the values of the parameters at the time of the call. ; also prints other relevant information such as function value, estimated distance to minimum, parameter errors, step sizes.; According to the value of IKODE, the printout is: IKODE=INKODE=; 0 only info about function value; 1 parameter values, errors, limits; 2 values, errors, step sizes, internal values; 3 values, errors, step sizes, first derivs.; 4 values, parabolic errors, MINOS errors. when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1] ; Definition at line 6304 of file TMinuit.cxx. ◆ mnpsdf(). void TMinuit::mnpsdf ; (; ). virtual . Calculates the eigenvalues of v to see if positive-def. ; if not, adds constant along diagonal to make positive. ; Definition at line 6494 of file TMinuit.cxx. ◆ mnrazz(). void TMinuit::mnrazz ; (; Double_t ; ynew, . Double_t * ; pnew, . Double_t * ; y, . Int_t & ; jh, . Int_t & ; jl . ). virtual . Called only by MNSIMP (and MNIMPR) to add a new point. ; and remove an old one from the current simplex, and get the estimated distance to minimum. ; Definition at line 6568 of file TMinuit.cxx. ◆ mnrn15(). void TMinuit::mnrn15 ; (; Double_t & ; val, . Int_t & ; inseed . ). virtual . This is a super-portable random number generator. ; It should not overflow on any 32-bit machine. The cycle is only ~10**9, so use with care! Note especially that VAL must not be undefined on input.; Set Default Starting Seed ;",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:62522,Availability,error,errors,62522,".cxx. ◆ mnpsdf(). void TMinuit::mnpsdf ; (; ). virtual . Calculates the eigenvalues of v to see if positive-def. ; if not, adds constant along diagonal to make positive. ; Definition at line 6494 of file TMinuit.cxx. ◆ mnrazz(). void TMinuit::mnrazz ; (; Double_t ; ynew, . Double_t * ; pnew, . Double_t * ; y, . Int_t & ; jh, . Int_t & ; jl . ). virtual . Called only by MNSIMP (and MNIMPR) to add a new point. ; and remove an old one from the current simplex, and get the estimated distance to minimum. ; Definition at line 6568 of file TMinuit.cxx. ◆ mnrn15(). void TMinuit::mnrn15 ; (; Double_t & ; val, . Int_t & ; inseed . ). virtual . This is a super-portable random number generator. ; It should not overflow on any 32-bit machine. The cycle is only ~10**9, so use with care! Note especially that VAL must not be undefined on input.; Set Default Starting Seed ; Definition at line 6619 of file TMinuit.cxx. ◆ mnrset(). void TMinuit::mnrset ; (; Int_t ; iopt). virtual . Resets function value and errors to UNDEFINED. . If IOPT=1,; If IOPT=0, sets only MINOS errors to undefined Called from MNCLER and whenever problem changes, for example after SET LIMITS, SET PARAM, CALL FCN 6 . Definition at line 6661 of file TMinuit.cxx. ◆ mnsave(). void TMinuit::mnsave ; (; ). virtual . Writes current parameter values and step sizes onto file ISYSSA. ; in format which can be reread by Minuit for restarting. The covariance matrix is also output if it exists. ; Definition at line 6695 of file TMinuit.cxx. ◆ mnscan(). void TMinuit::mnscan ; (; ). virtual . Scans the values of FCN as a function of one parameter. ; and plots the resulting values as a curve using MNPLOT. It may be called to scan one parameter or all parameters. retains the best function and parameter values found. ; Definition at line 6708 of file TMinuit.cxx. ◆ mnseek(). void TMinuit::mnseek ; (; ). virtual . Performs a rough (but global) minimization by monte carlo search. ; Each time a new minimum is found, the search area is",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:62584,Availability,error,errors,62584,"-def. ; if not, adds constant along diagonal to make positive. ; Definition at line 6494 of file TMinuit.cxx. ◆ mnrazz(). void TMinuit::mnrazz ; (; Double_t ; ynew, . Double_t * ; pnew, . Double_t * ; y, . Int_t & ; jh, . Int_t & ; jl . ). virtual . Called only by MNSIMP (and MNIMPR) to add a new point. ; and remove an old one from the current simplex, and get the estimated distance to minimum. ; Definition at line 6568 of file TMinuit.cxx. ◆ mnrn15(). void TMinuit::mnrn15 ; (; Double_t & ; val, . Int_t & ; inseed . ). virtual . This is a super-portable random number generator. ; It should not overflow on any 32-bit machine. The cycle is only ~10**9, so use with care! Note especially that VAL must not be undefined on input.; Set Default Starting Seed ; Definition at line 6619 of file TMinuit.cxx. ◆ mnrset(). void TMinuit::mnrset ; (; Int_t ; iopt). virtual . Resets function value and errors to UNDEFINED. . If IOPT=1,; If IOPT=0, sets only MINOS errors to undefined Called from MNCLER and whenever problem changes, for example after SET LIMITS, SET PARAM, CALL FCN 6 . Definition at line 6661 of file TMinuit.cxx. ◆ mnsave(). void TMinuit::mnsave ; (; ). virtual . Writes current parameter values and step sizes onto file ISYSSA. ; in format which can be reread by Minuit for restarting. The covariance matrix is also output if it exists. ; Definition at line 6695 of file TMinuit.cxx. ◆ mnscan(). void TMinuit::mnscan ; (; ). virtual . Scans the values of FCN as a function of one parameter. ; and plots the resulting values as a curve using MNPLOT. It may be called to scan one parameter or all parameters. retains the best function and parameter values found. ; Definition at line 6708 of file TMinuit.cxx. ◆ mnseek(). void TMinuit::mnseek ; (; ). virtual . Performs a rough (but global) minimization by monte carlo search. ; Each time a new minimum is found, the search area is shifted to be centered at the best value. Random points are chosen uniformly over a hypercube determined ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:66973,Availability,error,errors,66973," Int_t ; m, . Int_t ; n, . Int_t & ; ifail . ). virtual . Inverts a symmetric matrix. ; inverts a symmetric matrix. matrix is first scaled to have all ones on the diagonal (equivalent to change of units) but no pivoting is done since matrix is positive-definite. ; Definition at line 7696 of file TMinuit.cxx. ◆ mnwarn(). void TMinuit::mnwarn ; (; const char * ; copt1, . const char * ; corg1, . const char * ; cmes1 . ). virtual . Prints Warning messages. . If COPT='W', CMES is a WARning message from CORG.; If COPT='D', CMES is a DEBug message from CORG.; If SET WARnings is in effect (the default), this routine prints the warning message CMES coming from CORG.; If SET NOWarnings is in effect, the warning message is stored in a circular buffer of length kMAXMES.; If called with CORG=CMES='SHO', it prints the messages in the circular buffer, FIFO, and empties the buffer. . Definition at line 7784 of file TMinuit.cxx. ◆ mnwerr(). void TMinuit::mnwerr ; (; ). virtual . Calculates the WERR, external parameter errors. ; and the global correlation coefficients, to be called whenever a new covariance matrix is available. ; Definition at line 7861 of file TMinuit.cxx. ◆ operator=(). TMinuit & TMinuit::operator= ; (; const TMinuit & ; m). private . ◆ Release(). Int_t TMinuit::Release ; (; Int_t ; parNo). virtual . release a parameter ; Definition at line 894 of file TMinuit.cxx. ◆ SetErrorDef(). Int_t TMinuit::SetErrorDef ; (; Double_t ; up). virtual . To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ; Definition at line 908 of file TMinuit.cxx. ◆ SetFCN(). void TMinuit::SetFCN ; (; void(*)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t) ; fcn). virtual . To set the address of the minimization function. ; Definition at line 920 of file TMinuit.cxx. ◆ SetGraphicsMode(). virtual void TMinuit::SetGraphicsMode ; (; Bool_t ; mode = kTRUE). inlinevirtual . Definition at line 263 of file TMinuit.h. ◆ SetMaxIterations(). virtual void TMinuit::SetMaxIterati",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:67073,Availability,avail,available,67073,"ic matrix. ; inverts a symmetric matrix. matrix is first scaled to have all ones on the diagonal (equivalent to change of units) but no pivoting is done since matrix is positive-definite. ; Definition at line 7696 of file TMinuit.cxx. ◆ mnwarn(). void TMinuit::mnwarn ; (; const char * ; copt1, . const char * ; corg1, . const char * ; cmes1 . ). virtual . Prints Warning messages. . If COPT='W', CMES is a WARning message from CORG.; If COPT='D', CMES is a DEBug message from CORG.; If SET WARnings is in effect (the default), this routine prints the warning message CMES coming from CORG.; If SET NOWarnings is in effect, the warning message is stored in a circular buffer of length kMAXMES.; If called with CORG=CMES='SHO', it prints the messages in the circular buffer, FIFO, and empties the buffer. . Definition at line 7784 of file TMinuit.cxx. ◆ mnwerr(). void TMinuit::mnwerr ; (; ). virtual . Calculates the WERR, external parameter errors. ; and the global correlation coefficients, to be called whenever a new covariance matrix is available. ; Definition at line 7861 of file TMinuit.cxx. ◆ operator=(). TMinuit & TMinuit::operator= ; (; const TMinuit & ; m). private . ◆ Release(). Int_t TMinuit::Release ; (; Int_t ; parNo). virtual . release a parameter ; Definition at line 894 of file TMinuit.cxx. ◆ SetErrorDef(). Int_t TMinuit::SetErrorDef ; (; Double_t ; up). virtual . To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ; Definition at line 908 of file TMinuit.cxx. ◆ SetFCN(). void TMinuit::SetFCN ; (; void(*)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t) ; fcn). virtual . To set the address of the minimization function. ; Definition at line 920 of file TMinuit.cxx. ◆ SetGraphicsMode(). virtual void TMinuit::SetGraphicsMode ; (; Bool_t ; mode = kTRUE). inlinevirtual . Definition at line 263 of file TMinuit.h. ◆ SetMaxIterations(). virtual void TMinuit::SetMaxIterations ; (; Int_t ; maxiter = 500). inlinevirtual . Definition at line 264 of f",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:67451,Availability,error,error,67451,"om CORG.; If COPT='D', CMES is a DEBug message from CORG.; If SET WARnings is in effect (the default), this routine prints the warning message CMES coming from CORG.; If SET NOWarnings is in effect, the warning message is stored in a circular buffer of length kMAXMES.; If called with CORG=CMES='SHO', it prints the messages in the circular buffer, FIFO, and empties the buffer. . Definition at line 7784 of file TMinuit.cxx. ◆ mnwerr(). void TMinuit::mnwerr ; (; ). virtual . Calculates the WERR, external parameter errors. ; and the global correlation coefficients, to be called whenever a new covariance matrix is available. ; Definition at line 7861 of file TMinuit.cxx. ◆ operator=(). TMinuit & TMinuit::operator= ; (; const TMinuit & ; m). private . ◆ Release(). Int_t TMinuit::Release ; (; Int_t ; parNo). virtual . release a parameter ; Definition at line 894 of file TMinuit.cxx. ◆ SetErrorDef(). Int_t TMinuit::SetErrorDef ; (; Double_t ; up). virtual . To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ; Definition at line 908 of file TMinuit.cxx. ◆ SetFCN(). void TMinuit::SetFCN ; (; void(*)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t) ; fcn). virtual . To set the address of the minimization function. ; Definition at line 920 of file TMinuit.cxx. ◆ SetGraphicsMode(). virtual void TMinuit::SetGraphicsMode ; (; Bool_t ; mode = kTRUE). inlinevirtual . Definition at line 263 of file TMinuit.h. ◆ SetMaxIterations(). virtual void TMinuit::SetMaxIterations ; (; Int_t ; maxiter = 500). inlinevirtual . Definition at line 264 of file TMinuit.h. ◆ SetObjectFit(). virtual void TMinuit::SetObjectFit ; (; TObject * ; obj). inlinevirtual . Definition at line 265 of file TMinuit.h. ◆ SetPrintLevel(). Int_t TMinuit::SetPrintLevel ; (; Int_t ; printLevel = 0). virtual . set Minuit print level. ; printlevel:; = -1 quiet (also suppress all warnings); = 0 normal; = 1 verbose . Definition at line 952 of file TMinuit.cxx. ◆ Streamer(). void TMinuit::Streamer ;",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:22899,Deployability,release,release,22899,"on of one parameter. ;  ; virtual void mnseek ();  Performs a rough (but global) minimization by monte carlo search. ;  ; virtual void mnset ();  Interprets the commands that start with SET and SHOW. ;  ; virtual void mnsimp ();  Minimization using the simplex method of Nelder and Mead. ;  ; virtual void mnstat (Double_t &fmin, Double_t &fedm, Double_t &errdef, Int_t &npari, Int_t &nparx, Int_t &istat);  Returns concerning the current status of the minimization. ;  ; virtual void mntiny (Double_t epsp1, Double_t &epsbak);  To find the machine precision. ;  ; Bool_t mnunpt (TString &cfname);  Returns .TRUE. ;  ; virtual void mnvert (Double_t *a, Int_t l, Int_t m, Int_t n, Int_t &ifail);  Inverts a symmetric matrix. ;  ; virtual void mnwarn (const char *copt, const char *corg, const char *cmes);  Prints Warning messages. ;  ; virtual void mnwerr ();  Calculates the WERR, external parameter errors. ;  ; virtual Int_t Release (Int_t parNo);  release a parameter ;  ; virtual Int_t SetErrorDef (Double_t up);  To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ;  ; virtual void SetFCN (void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t));  To set the address of the minimization function. ;  ; virtual void SetGraphicsMode (Bool_t mode=kTRUE);  ; virtual void SetMaxIterations (Int_t maxiter=500);  ; virtual void SetObjectFit (TObject *obj);  ; virtual Int_t SetPrintLevel (Int_t printLevel=0);  set Minuit print level. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const cha",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:57580,Deployability,update,updates,57580,"nmnos(). void TMinuit::mnmnos ; (; ). virtual . Performs a MINOS error analysis. ; Performs a MINOS error analysis on those parameters for which it is requested on the MINOS command by calling MNMNOT for each parameter requested. ; Definition at line 5388 of file TMinuit.cxx. ◆ mnmnot(). void TMinuit::mnmnot ; (; Int_t ; ilax, . Int_t ; ilax2, . Double_t & ; val2pl, . Double_t & ; val2mi . ). virtual . Performs a MINOS error analysis on one parameter. ; The parameter ILAX is varied, and the minimum of the function with respect to the other parameters is followed until it crosses the value FMIN+UP. ; Definition at line 5463 of file TMinuit.cxx. ◆ mnparm(). void TMinuit::mnparm ; (; Int_t ; k1, . TString ; cnamj, . Double_t ; uk, . Double_t ; wk, . Double_t ; a, . Double_t ; b, . Int_t & ; ierflg . ). virtual . Implements one parameter definition. ; Called from MNPARS and user-callable Implements one parameter definition, that is:; K (external) parameter number; CNAMK parameter name; UK starting value; WK starting step size or uncertainty; A, B lower and upper physical parameter limits and sets up (updates) the parameter lists. Output:; IERFLG=0 if no problems; >0 if MNPARM unable to implement definition . Definition at line 5665 of file TMinuit.cxx. ◆ mnpars(). void TMinuit::mnpars ; (; TString & ; crdbuf, . Int_t & ; icondn . ). virtual . Implements one parameter definition. ; Called from MNREAD and user-callable Implements one parameter definition, that is: parses the string CRDBUF and calls MNPARM; output conditions:; ICONDN = 0 all OK; ICONDN = 1 error, attempt to define parameter is ignored; ICONDN = 2 end of parameter definitions . Definition at line 5867 of file TMinuit.cxx. ◆ mnpfit(). void TMinuit::mnpfit ; (; Double_t * ; parx2p, . Double_t * ; pary2p, . Int_t ; npar2p, . Double_t * ; coef2p, . Double_t & ; sdev2p . ). virtual . To fit a parabola to npar2p points. . npar2p no. of points; parx2p(i) x value of point i; pary2p(i) y value of point i; coef2p(1..",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:67279,Deployability,release,release,67279," char * ; copt1, . const char * ; corg1, . const char * ; cmes1 . ). virtual . Prints Warning messages. . If COPT='W', CMES is a WARning message from CORG.; If COPT='D', CMES is a DEBug message from CORG.; If SET WARnings is in effect (the default), this routine prints the warning message CMES coming from CORG.; If SET NOWarnings is in effect, the warning message is stored in a circular buffer of length kMAXMES.; If called with CORG=CMES='SHO', it prints the messages in the circular buffer, FIFO, and empties the buffer. . Definition at line 7784 of file TMinuit.cxx. ◆ mnwerr(). void TMinuit::mnwerr ; (; ). virtual . Calculates the WERR, external parameter errors. ; and the global correlation coefficients, to be called whenever a new covariance matrix is available. ; Definition at line 7861 of file TMinuit.cxx. ◆ operator=(). TMinuit & TMinuit::operator= ; (; const TMinuit & ; m). private . ◆ Release(). Int_t TMinuit::Release ; (; Int_t ; parNo). virtual . release a parameter ; Definition at line 894 of file TMinuit.cxx. ◆ SetErrorDef(). Int_t TMinuit::SetErrorDef ; (; Double_t ; up). virtual . To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ; Definition at line 908 of file TMinuit.cxx. ◆ SetFCN(). void TMinuit::SetFCN ; (; void(*)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t) ; fcn). virtual . To set the address of the minimization function. ; Definition at line 920 of file TMinuit.cxx. ◆ SetGraphicsMode(). virtual void TMinuit::SetGraphicsMode ; (; Bool_t ; mode = kTRUE). inlinevirtual . Definition at line 263 of file TMinuit.h. ◆ SetMaxIterations(). virtual void TMinuit::SetMaxIterations ; (; Int_t ; maxiter = 500). inlinevirtual . Definition at line 264 of file TMinuit.h. ◆ SetObjectFit(). virtual void TMinuit::SetObjectFit ; (; TObject * ; obj). inlinevirtual . Definition at line 265 of file TMinuit.h. ◆ SetPrintLevel(). Int_t TMinuit::SetPrintLevel ; (; Int_t ; printLevel = 0). virtual . set Minuit print level. ; printlevel:; =",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:698,Integrability,depend,depending,698,". ROOT: TMinuit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TMinuit Class ReferenceMath » TMinuit. ; See alsoMinuit2 for a newer version of this package; Implementation in C++ of the Minuit package written by Fred James. This is a straightforward conversion of the original Fortran version.; The main changes are:. The variables in the various Minuit labelled common blocks have been changed to the TMinuit class data members.; The internal arrays with a maximum dimension depending on the maximum number of parameters are now data members arrays with a dynamic dimension such that one can fit very large problems by simply initialising the TMinuit constructor with the maximum number of parameters.; The include file Minuit.h has been commented as much as possible using existing comments in the code or the printed documentation; The original Minuit subroutines are now member functions.; Constructors and destructor have been added.; Instead of passing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer.; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file.; The functions SetObjectFit(TObject * obj)/GetObjectFit() can be used inside the FCN function to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The val",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:2027,Integrability,depend,depend,2027,"he printed documentation; The original Minuit subroutines are now member functions.; Constructors and destructor have been added.; Instead of passing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer.; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file.; The functions SetObjectFit(TObject * obj)/GetObjectFit() can be used inside the FCN function to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The value of FCN will in general depend on one or more variable parameters.; To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D) the Fit function defines the Minuit fitting function as being H1FitChisquare or H1FitLikelihood depending on the options selected. H1FitChisquare calculates the chisquare between the user fitting function (gaussian, polynomial, user defined,etc) and the data for given values of the parameters. It is the task of MINUIT to find those values of the parameters which give the lowest value of chisquare. Basic concepts - The transformation for parameters with limits.; For variable parameters with limits, MINUIT uses the following transformation:. \[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \]. so that the internal value \(P_{\mathrm{int}}\) can take on any value, while the external value \(P_{\mathrm{ext}}\) can take on values only between the lower ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:2250,Integrability,depend,depending,2250,"sing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer.; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file.; The functions SetObjectFit(TObject * obj)/GetObjectFit() can be used inside the FCN function to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The value of FCN will in general depend on one or more variable parameters.; To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D) the Fit function defines the Minuit fitting function as being H1FitChisquare or H1FitLikelihood depending on the options selected. H1FitChisquare calculates the chisquare between the user fitting function (gaussian, polynomial, user defined,etc) and the data for given values of the parameters. It is the task of MINUIT to find those values of the parameters which give the lowest value of chisquare. Basic concepts - The transformation for parameters with limits.; For variable parameters with limits, MINUIT uses the following transformation:. \[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \]. so that the internal value \(P_{\mathrm{int}}\) can take on any value, while the external value \(P_{\mathrm{ext}}\) can take on values only between the lower limit \(a\) and the upper limit \(b\). Since the transformation is necessarily non-linear, it would transform a nice linear problem into a nasty n",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:5106,Integrability,depend,depends,5106,"re parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\). Therefore, it is recommended that:. Limits on variable parameters should be used only when needed in order to prevent the parameter from taking on unphysical values.; When a satisfactory minimum has been found using limits, the limits should then be removed if possible, in order to perform or re-perform the error analysis without limits. How to get the right answer from MINUIT.; MINUIT offers the user a choice of several minimization algorithms. The MIGRAD algorithm is in general the best minimizer for nearly all functions. It is a variable-metric method with inexact line search, a stable metric updating scheme, and checks for positive-definiteness. Its main weakness is that it depends heavily on knowledge of the first derivatives, and fails miserably if they are very inaccurate.; If parameter limits are needed, in spite of the side effects, then the user should be aware of the following techniques to alleviate problems caused by limits:; Getting the right minimum with limits.; If MIGRAD converges normally to a point where no parameter is near one of its limits, then the existence of limits has probably not prevented MINUIT from finding the right minimum. On the other hand, if one or more parameters is near its limit at the minimum, this may be because the true minimum is indeed at a limit, or it may be because the minimizer has become `‘blocked’' at a limit. This may normally happen only if the parameter is so close to a limit (internal value at an odd multiple of \(\pm \frac{\pi}{2}\) that MINUIT prints a warning to this effect when it prints the parameter values.; The minimizer can become blocked at a limit, because at a limit the derivative seen by the minimizer \(\partial F / \partial P_{\m",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:8704,Integrability,message,messages,8704,", 1971. Reliability of MINUIT error estimates.; MINUIT always carries around its own current estimates of the parameter errors, which it will print out on request, no matter how accurate they are at any given point in the execution. For example, at initialization, these estimates are just the starting step sizes as specified by the user. After a HESSE step, the errors are usually quite accurate, unless there has been a problem. MINUIT, when it prints out error values, also gives some indication of how reliable it thinks they are. For example, those marked CURRENT GUESS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning message, may make both the function minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compare the calculated errors with a picture of the function. Theoretically, the covariance matrix for aphysical'' function must be positive-definite at the minimum, although it ma",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:9288,Integrability,message,message,9288,"SS ERROR are only working values not to be believed, and APPROXIMATE ERROR means that they have been calculated but there is reason to believe that they may not be accurate.; If no mitigating adjective is given, then at least MINUIT believes the errors are accurate, although there is always a small chance that MINUIT has been fooled. Some visible signs that MINUIT may have been fooled are:. Warning messages produced during the minimization or error analysis.; Failure to find new minimum.; Value of EDM too big (estimated Distance to Minimum).; Correlation coefficients exactly equal to zero, unless some parameters are known to be uncorrelated with the others.; Correlation coefficients very close to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning message, may make both the function minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compare the calculated errors with a picture of the function. Theoretically, the covariance matrix for aphysical'' function must be positive-definite at the minimum, although it may not be so for all points far away from the minimum, even for a well-determined physical problem. Therefore, if MIGRAD reports that it has found a non-positive-definite covariance matrix, this may be a sign of one or more of the following:; A non-physical region:; On its way to the minimum, MIGRAD may have traversed a region which has unphysical behaviour, which is of course not a serious problem as long as it recovers and leaves such a region.; An underdetermined problem:; If the matrix is not positive-definite even at the minimum, this may mean that the solution i",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:10450,Integrability,depend,dependence,10450,"ion minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compare the calculated errors with a picture of the function. Theoretically, the covariance matrix for aphysical'' function must be positive-definite at the minimum, although it may not be so for all points far away from the minimum, even for a well-determined physical problem. Therefore, if MIGRAD reports that it has found a non-positive-definite covariance matrix, this may be a sign of one or more of the following:; A non-physical region:; On its way to the minimum, MIGRAD may have traversed a region which has unphysical behaviour, which is of course not a serious problem as long as it recovers and leaves such a region.; An underdetermined problem:; If the matrix is not positive-definite even at the minimum, this may mean that the solution is not well-defined, for example that there are more unknowns than there are data points, or that the parameterisation of the fit contains a linear dependence. If this is the case, then MINUIT (or any other program) cannot solve your problem uniquely, and the error matrix will necessarily be largely meaningless, so the user must remove the under-determinedness by reformulating the parameterisation. MINUIT cannot do this itself.; Numerical inaccuracies:; It is possible that the apparent lack of positive-definiteness is in fact only due to excessive roundoff errors in numerical calculations in the user function or not enough precision. This is unlikely in general, but becomes more likely if the number of free parameters is very large, or if; the parameters are badly scaled (not all of the same order of magnitude), and correlations are also large. In any case, whether the non-positive-definiteness is real or only numerical is largely irrelevant, since in both cases the error matrix will be unreliable and t",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:11394,Integrability,depend,dependence,11394," the parameterisation of the fit contains a linear dependence. If this is the case, then MINUIT (or any other program) cannot solve your problem uniquely, and the error matrix will necessarily be largely meaningless, so the user must remove the under-determinedness by reformulating the parameterisation. MINUIT cannot do this itself.; Numerical inaccuracies:; It is possible that the apparent lack of positive-definiteness is in fact only due to excessive roundoff errors in numerical calculations in the user function or not enough precision. This is unlikely in general, but becomes more likely if the number of free parameters is very large, or if; the parameters are badly scaled (not all of the same order of magnitude), and correlations are also large. In any case, whether the non-positive-definiteness is real or only numerical is largely irrelevant, since in both cases the error matrix will be unreliable and the minimum suspicious.; An ill-posed problem:; For questions of parameter dependence, see the discussion above on positive-definiteness.; Possible other mathematical problems are the following:; Excessive numerical roundoff:; Be especially careful of exponential and factorial functions which get big very quickly and lose accuracy.; Starting too far from the solution:; The function may have unphysical local minima, especially at infinity in some variables.; Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors on parameters. It does not apply to the errors reported from Minos, which are in general asymmetric.; The symmetric errors reported by Minuit are always calculated from the covariance matrix, assuming that this matrix has been calculated, usually as the result of a Migrad minimization or a direct calculation by Hesse which inverts the second derivative matrix.; When there are no limits on the parameter in question, the error reported by Minuit should therefore be exactly equal to the squar",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:18441,Integrability,rout,routine,18441,", Double_t *yptu, Int_t &ierrf);  Find points along a contour where FCN is minimum. ;  ; virtual void mncrck (TString crdbuf, Int_t maxcwd, TString &comand, Int_t &lnc, Int_t mxp, Double_t *plist, Int_t &llist, Int_t &ierr, Int_t isyswr);  Cracks the free-format input. ;  ; virtual void mncros (Double_t &aopt, Int_t &iercr);  Find point where MNEVAL=AMIN+UP. ;  ; virtual void mncuve ();  Makes sure that the current point is a local minimum. ;  ; virtual void mnderi ();  Calculates the first derivatives of FCN (GRD) ;  ; virtual void mndxdi (Double_t pint, Int_t ipar, Double_t &dxdi);  Calculates the transformation factor between ext/internal values. ;  ; virtual void mneig (Double_t *a, Int_t ndima, Int_t n, Int_t mits, Double_t *work, Double_t precis, Int_t &ifault);  Compute matrix eigen values. ;  ; virtual void mnemat (Double_t *emat, Int_t ndim);  Calculates the external error matrix from the internal matrix. ;  ; virtual void mnerrs (Int_t number, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &gcc);  Utility routine to get MINOS errors. ;  ; virtual void mneval (Double_t anext, Double_t &fnext, Int_t &ierev);  Evaluates the function being analysed by MNCROS. ;  ; virtual void mnexcm (const char *comand, Double_t *plist, Int_t llist, Int_t &ierflg);  Interprets a command and takes appropriate action. ;  ; virtual void mnexin (Double_t *pint);  Transforms the external parameter values U to internal values. ;  ; virtual void mnfixp (Int_t iint, Int_t &ierr);  Removes parameter IINT from the internal parameter list. ;  ; virtual void mnfree (Int_t k);  Restores one or more fixed parameter(s) to variable status. ;  ; virtual void mngrad ();  Interprets the SET GRAD command. ;  ; virtual void mnhelp (const char *command="""");  interface to Minuit help ;  ; virtual void mnhelp (TString comd);  HELP routine for MINUIT interactive commands. ;  ; virtual void mnhes1 ();  Calculate first derivatives (GRD) and uncertainties (DGRD) ;  ; virtual void mnhess ()",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:19167,Integrability,interface,interface,19167,"values. ;  ; virtual void mnemat (Double_t *emat, Int_t ndim);  Calculates the external error matrix from the internal matrix. ;  ; virtual void mnerrs (Int_t number, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &gcc);  Utility routine to get MINOS errors. ;  ; virtual void mneval (Double_t anext, Double_t &fnext, Int_t &ierev);  Evaluates the function being analysed by MNCROS. ;  ; virtual void mnexcm (const char *comand, Double_t *plist, Int_t llist, Int_t &ierflg);  Interprets a command and takes appropriate action. ;  ; virtual void mnexin (Double_t *pint);  Transforms the external parameter values U to internal values. ;  ; virtual void mnfixp (Int_t iint, Int_t &ierr);  Removes parameter IINT from the internal parameter list. ;  ; virtual void mnfree (Int_t k);  Restores one or more fixed parameter(s) to variable status. ;  ; virtual void mngrad ();  Interprets the SET GRAD command. ;  ; virtual void mnhelp (const char *command="""");  interface to Minuit help ;  ; virtual void mnhelp (TString comd);  HELP routine for MINUIT interactive commands. ;  ; virtual void mnhes1 ();  Calculate first derivatives (GRD) and uncertainties (DGRD) ;  ; virtual void mnhess ();  Calculates the full second-derivative matrix of FCN. ;  ; virtual void mnimpr ();  Attempts to improve on a good local minimum. ;  ; virtual void mninex (Double_t *pint);  Transforms from internal coordinates (PINT) to external (U) ;  ; virtual void mninit (Int_t i1, Int_t i2, Int_t i3);  Main initialization member function for MINUIT. ;  ; virtual void mnlims ();  Interprets the SET LIM command, to reset the parameter limits. ;  ; virtual void mnline (Double_t *start, Double_t fstart, Double_t *step, Double_t slope, Double_t toler);  Perform a line search from position START. ;  ; virtual void mnmatu (Int_t kode);  Prints the covariance matrix v when KODE=1. ;  ; virtual void mnmigr ();  Performs a local function minimization. ;  ; virtual void mnmnos ();  Performs a MINOS error analysi",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:19239,Integrability,rout,routine,19239,"values. ;  ; virtual void mnemat (Double_t *emat, Int_t ndim);  Calculates the external error matrix from the internal matrix. ;  ; virtual void mnerrs (Int_t number, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &gcc);  Utility routine to get MINOS errors. ;  ; virtual void mneval (Double_t anext, Double_t &fnext, Int_t &ierev);  Evaluates the function being analysed by MNCROS. ;  ; virtual void mnexcm (const char *comand, Double_t *plist, Int_t llist, Int_t &ierflg);  Interprets a command and takes appropriate action. ;  ; virtual void mnexin (Double_t *pint);  Transforms the external parameter values U to internal values. ;  ; virtual void mnfixp (Int_t iint, Int_t &ierr);  Removes parameter IINT from the internal parameter list. ;  ; virtual void mnfree (Int_t k);  Restores one or more fixed parameter(s) to variable status. ;  ; virtual void mngrad ();  Interprets the SET GRAD command. ;  ; virtual void mnhelp (const char *command="""");  interface to Minuit help ;  ; virtual void mnhelp (TString comd);  HELP routine for MINUIT interactive commands. ;  ; virtual void mnhes1 ();  Calculate first derivatives (GRD) and uncertainties (DGRD) ;  ; virtual void mnhess ();  Calculates the full second-derivative matrix of FCN. ;  ; virtual void mnimpr ();  Attempts to improve on a good local minimum. ;  ; virtual void mninex (Double_t *pint);  Transforms from internal coordinates (PINT) to external (U) ;  ; virtual void mninit (Int_t i1, Int_t i2, Int_t i3);  Main initialization member function for MINUIT. ;  ; virtual void mnlims ();  Interprets the SET LIM command, to reset the parameter limits. ;  ; virtual void mnline (Double_t *start, Double_t fstart, Double_t *step, Double_t slope, Double_t toler);  Perform a line search from position START. ;  ; virtual void mnmatu (Int_t kode);  Prints the covariance matrix v when KODE=1. ;  ; virtual void mnmigr ();  Performs a local function minimization. ;  ; virtual void mnmnos ();  Performs a MINOS error analysi",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:22768,Integrability,message,messages,22768,"t (Int_t iopt);  Resets function value and errors to UNDEFINED. ;  ; virtual void mnsave ();  Writes current parameter values and step sizes onto file ISYSSA. ;  ; virtual void mnscan ();  Scans the values of FCN as a function of one parameter. ;  ; virtual void mnseek ();  Performs a rough (but global) minimization by monte carlo search. ;  ; virtual void mnset ();  Interprets the commands that start with SET and SHOW. ;  ; virtual void mnsimp ();  Minimization using the simplex method of Nelder and Mead. ;  ; virtual void mnstat (Double_t &fmin, Double_t &fedm, Double_t &errdef, Int_t &npari, Int_t &nparx, Int_t &istat);  Returns concerning the current status of the minimization. ;  ; virtual void mntiny (Double_t epsp1, Double_t &epsbak);  To find the machine precision. ;  ; Bool_t mnunpt (TString &cfname);  Returns .TRUE. ;  ; virtual void mnvert (Double_t *a, Int_t l, Int_t m, Int_t n, Int_t &ifail);  Inverts a symmetric matrix. ;  ; virtual void mnwarn (const char *copt, const char *corg, const char *cmes);  Prints Warning messages. ;  ; virtual void mnwerr ();  Calculates the WERR, external parameter errors. ;  ; virtual Int_t Release (Int_t parNo);  release a parameter ;  ; virtual Int_t SetErrorDef (Double_t up);  To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ;  ; virtual void SetFCN (void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t));  To set the address of the minimization function. ;  ; virtual void SetGraphicsMode (Bool_t mode=kTRUE);  ; virtual void SetMaxIterations (Int_t maxiter=500);  ; virtual void SetObjectFit (TObject *obj);  ; virtual Int_t SetPrintLevel (Int_t printLevel=0);  set Minuit print level. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor.",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:26790,Integrability,message,message,26790,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:27331,Integrability,message,message,27331,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:28321,Integrability,message,message,28321,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:31415,Integrability,message,message,31415,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:31788,Integrability,message,message,31788," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:39781,Integrability,rout,routine,39781,"readable, ignored; 3: unknown command, ignored; 4: abnormal termination (e.g., MIGRAD not converged); 5: command is a request to read PARAMETER definitions; 6: 'SET INPUT' command; 7: 'SET TITLE' command; 8: 'SET COVAR' command; 9: reserved; 10: END command; 11: EXIT or STOP command; 12: RETURN command . Definition at line 626 of file TMinuit.cxx. ◆ Contour(). TObject * TMinuit::Contour ; (; Int_t ; npoints = 10, . Int_t ; pa1 = 0, . Int_t ; pa2 = 1 . ). virtual . Creates a TGraph object describing the n-sigma contour of a TMinuit fit. ; The contour of the parameters pa1 and pa2 is calculated using npoints (>=4) points. The TMinuit status will be; 0 on success and; -1 if errors in the calling sequence (pa1, pa2 not variable); 1 if less than four points can be found; 2 if npoints<4; n>3 if only n points can be found (n < npoints) The status can be obtained via TMinuit::GetStatus(). To get the n-sigma contour the ERRDEF parameter in Minuit has to set to n^2. The fcn function has to be set before the routine is called.; The TGraph object is created via the interpreter. The user must cast it to a TGraph*. Note that the TGraph is created with npoints+1 in order to close the contour (setting last point equal to first point).; You can find an example in $ROOTSYS/tutorials/fit/fitcont.C ; Definition at line 653 of file TMinuit.cxx. ◆ DeclFileName(). static const char * TMinuit::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 268 of file TMinuit.h. ◆ DefineParameter(). Int_t TMinuit::DefineParameter ; (; Int_t ; parNo, . const char * ; name, . Double_t ; initVal, . Double_t ; initErr, . Double_t ; lowerLimit, . Double_t ; upperLimit . ). virtual . Define a parameter. ; Definition at line 695 of file TMinuit.cxx. ◆ DeleteArrays(). void TMinuit::DeleteArrays ; (; ). virtual . Delete internal Minuit arrays. ; Definition at line 708 of file TMinuit.cxx. ◆ Eval(). Int_t TMinuit::Eval ; (; Int_t ; npar, . Double_t * ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:49561,Integrability,rout,routine,49561,"ernal values. ; calculates the transformation factor between external and internal parameter values. this factor is one for parameters which are not limited. called from MNEMAT. ; Definition at line 2293 of file TMinuit.cxx. ◆ mneig(). void TMinuit::mneig ; (; Double_t * ; a, . Int_t ; ndima, . Int_t ; n, . Int_t ; mits, . Double_t * ; work, . Double_t ; precis, . Int_t & ; ifault . ). virtual . Compute matrix eigen values. ; Definition at line 2305 of file TMinuit.cxx. ◆ mnemat(). void TMinuit::mnemat ; (; Double_t * ; emat, . Int_t ; ndim . ). virtual . Calculates the external error matrix from the internal matrix. ; Note that if the matrix is declared like Double_t matrix[5][5] in the calling program, one has to call mnemat with, eg gMinuit->mnemat(&matrix[0][0],5); . Definition at line 2501 of file TMinuit.cxx. ◆ mnerrs(). void TMinuit::mnerrs ; (; Int_t ; number, . Double_t & ; eplus, . Double_t & ; eminus, . Double_t & ; eparab, . Double_t & ; gcc . ). virtual . Utility routine to get MINOS errors. ; Called by user.; NUMBER is the parameter number; values returned by MNERRS:; EPLUS, EMINUS are MINOS errors of parameter NUMBER,; EPARAB is 'parabolic' error (from error matrix). (Errors not calculated are set = 0); GCC is global correlation coefficient from error matrix . Definition at line 2578 of file TMinuit.cxx. ◆ mneval(). void TMinuit::mneval ; (; Double_t ; anext, . Double_t & ; fnext, . Int_t & ; ierev . ). virtual . Evaluates the function being analysed by MNCROS. ; Evaluates the function being analysed by MNCROS, which is generally the minimum of FCN with respect to all remaining variable parameters. The class data members contains the data necessary to know the values of U(KE1CR) and U(KE2CR) to be used, namely U(KE1CR) = XMIDCR + ANEXT*XDIRCR and (if KE2CR .NE. 0) U(KE2CR) = YMIDCR + ANEXT*YDIRCR ; Definition at line 2620 of file TMinuit.cxx. ◆ mnexcm(). void TMinuit::mnexcm ; (; const char * ; command, . Double_t * ; plist, . Int_t ; llist, . Int_t & ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:52819,Integrability,interface,interface,52819,"res one or more fixed parameter(s) to variable status by inserting it into the internal parameter list at the appropriate place. - K = 0 means restore all parameters; - K = 1 means restore the last parameter fixed; - K = -I means restore external parameter I (if possible); - IQ = fix-location where internal parameters were stored; - IR = external number of parameter being restored; - IS = internal number of parameter being restored . Definition at line 3256 of file TMinuit.cxx. ◆ mngrad(). void TMinuit::mngrad ; (; ). virtual . Interprets the SET GRAD command. ; - Called from MNSET; - Interprets the SET GRAD command, which informs MINUIT whether; - the first derivatives of FCN will be calculated by the user; - inside FCN. It can check the user derivative calculation; - by comparing it with a finite difference approximation. . Definition at line 3362 of file TMinuit.cxx. ◆ mnhelp() [1/2]. void TMinuit::mnhelp ; (; const char * ; command = """"). virtual . interface to Minuit help ; Definition at line 3422 of file TMinuit.cxx. ◆ mnhelp() [2/2]. void TMinuit::mnhelp ; (; TString ; comd). virtual . HELP routine for MINUIT interactive commands. . COMD ='*' or """" prints a global help for all commands; COMD =Command_name: print detailed help for one command. Note that at least 3 characters must be given for the command name.; Author: Rene Brun comments extracted from the MINUIT documentation file. . Definition at line 3439 of file TMinuit.cxx. ◆ mnhes1(). void TMinuit::mnhes1 ; (; ). virtual . Calculate first derivatives (GRD) and uncertainties (DGRD) ; and appropriate step sizes GSTEP Called from MNHESS and MNGRAD ; Definition at line 4218 of file TMinuit.cxx. ◆ mnhess(). void TMinuit::mnhess ; (; ). virtual . Calculates the full second-derivative matrix of FCN. ; by taking finite differences. When calculating diagonal elements, it may iterate so that step size is nearly that which gives function change= UP/10. The first derivatives of course come as a free side effect, but",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:52967,Integrability,rout,routine,52967," = 0 means restore all parameters; - K = 1 means restore the last parameter fixed; - K = -I means restore external parameter I (if possible); - IQ = fix-location where internal parameters were stored; - IR = external number of parameter being restored; - IS = internal number of parameter being restored . Definition at line 3256 of file TMinuit.cxx. ◆ mngrad(). void TMinuit::mngrad ; (; ). virtual . Interprets the SET GRAD command. ; - Called from MNSET; - Interprets the SET GRAD command, which informs MINUIT whether; - the first derivatives of FCN will be calculated by the user; - inside FCN. It can check the user derivative calculation; - by comparing it with a finite difference approximation. . Definition at line 3362 of file TMinuit.cxx. ◆ mnhelp() [1/2]. void TMinuit::mnhelp ; (; const char * ; command = """"). virtual . interface to Minuit help ; Definition at line 3422 of file TMinuit.cxx. ◆ mnhelp() [2/2]. void TMinuit::mnhelp ; (; TString ; comd). virtual . HELP routine for MINUIT interactive commands. . COMD ='*' or """" prints a global help for all commands; COMD =Command_name: print detailed help for one command. Note that at least 3 characters must be given for the command name.; Author: Rene Brun comments extracted from the MINUIT documentation file. . Definition at line 3439 of file TMinuit.cxx. ◆ mnhes1(). void TMinuit::mnhes1 ; (; ). virtual . Calculate first derivatives (GRD) and uncertainties (DGRD) ; and appropriate step sizes GSTEP Called from MNHESS and MNGRAD ; Definition at line 4218 of file TMinuit.cxx. ◆ mnhess(). void TMinuit::mnhess ; (; ). virtual . Calculates the full second-derivative matrix of FCN. ; by taking finite differences. When calculating diagonal elements, it may iterate so that step size is nearly that which gives function change= UP/10. The first derivatives of course come as a free side effect, but with a smaller step size in order to obtain a known accuracy. ; Definition at line 3993 of file TMinuit.cxx. ◆ mnimpr(). void TMinu",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:54528,Integrability,rout,routines,54528,"xx. ◆ mnhess(). void TMinuit::mnhess ; (; ). virtual . Calculates the full second-derivative matrix of FCN. ; by taking finite differences. When calculating diagonal elements, it may iterate so that step size is nearly that which gives function change= UP/10. The first derivatives of course come as a free side effect, but with a smaller step size in order to obtain a known accuracy. ; Definition at line 3993 of file TMinuit.cxx. ◆ mnimpr(). void TMinuit::mnimpr ; (; ). virtual . Attempts to improve on a good local minimum. ; Attempts to improve on a good local minimum by finding a better one. The quadratic part of FCN is removed by MNCALF and this transformed function is minimised using the simplex method from several random starting points.; ref. – Goldstein and Price, Math.Comp. 25, 569 (1971) ; Definition at line 4295 of file TMinuit.cxx. ◆ mninex(). void TMinuit::mninex ; (; Double_t * ; pint). virtual . Transforms from internal coordinates (PINT) to external (U) ; The minimising routines which work in internal coordinates call this routine before calling FCN. ; Definition at line 4506 of file TMinuit.cxx. ◆ mninit(). void TMinuit::mninit ; (; Int_t ; i1, . Int_t ; i2, . Int_t ; i3 . ). virtual . Main initialization member function for MINUIT. ; It initializes some constants (including the logical I/O unit nos.), ; Definition at line 4526 of file TMinuit.cxx. ◆ mnlims(). void TMinuit::mnlims ; (; ). virtual . Interprets the SET LIM command, to reset the parameter limits. ; Called from MNSET ; Definition at line 4616 of file TMinuit.cxx. ◆ mnline(). void TMinuit::mnline ; (; Double_t * ; start, . Double_t ; fstart, . Double_t * ; step, . Double_t ; slope, . Double_t ; toler . ). virtual . Perform a line search from position START. ; along direction STEP, where the length of vector STEP gives the expected position of minimum.; FSTART is value of function at START; SLOPE (if non-zero) is df/dx along STEP at START; TOLER is initial tolerance of minimum in direction S",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:54582,Integrability,rout,routine,54582,"xx. ◆ mnhess(). void TMinuit::mnhess ; (; ). virtual . Calculates the full second-derivative matrix of FCN. ; by taking finite differences. When calculating diagonal elements, it may iterate so that step size is nearly that which gives function change= UP/10. The first derivatives of course come as a free side effect, but with a smaller step size in order to obtain a known accuracy. ; Definition at line 3993 of file TMinuit.cxx. ◆ mnimpr(). void TMinuit::mnimpr ; (; ). virtual . Attempts to improve on a good local minimum. ; Attempts to improve on a good local minimum by finding a better one. The quadratic part of FCN is removed by MNCALF and this transformed function is minimised using the simplex method from several random starting points.; ref. – Goldstein and Price, Math.Comp. 25, 569 (1971) ; Definition at line 4295 of file TMinuit.cxx. ◆ mninex(). void TMinuit::mninex ; (; Double_t * ; pint). virtual . Transforms from internal coordinates (PINT) to external (U) ; The minimising routines which work in internal coordinates call this routine before calling FCN. ; Definition at line 4506 of file TMinuit.cxx. ◆ mninit(). void TMinuit::mninit ; (; Int_t ; i1, . Int_t ; i2, . Int_t ; i3 . ). virtual . Main initialization member function for MINUIT. ; It initializes some constants (including the logical I/O unit nos.), ; Definition at line 4526 of file TMinuit.cxx. ◆ mnlims(). void TMinuit::mnlims ; (; ). virtual . Interprets the SET LIM command, to reset the parameter limits. ; Called from MNSET ; Definition at line 4616 of file TMinuit.cxx. ◆ mnline(). void TMinuit::mnline ; (; Double_t * ; start, . Double_t ; fstart, . Double_t * ; step, . Double_t ; slope, . Double_t ; toler . ). virtual . Perform a line search from position START. ; along direction STEP, where the length of vector STEP gives the expected position of minimum.; FSTART is value of function at START; SLOPE (if non-zero) is df/dx along STEP at START; TOLER is initial tolerance of minimum in direction S",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:66403,Integrability,message,messages,66403,"xx. ◆ mntiny(). void TMinuit::mntiny ; (; Double_t ; epsp1, . Double_t & ; epsbak . ). virtual . To find the machine precision. ; Compares its argument with the value 1.0, and returns the value .TRUE. if they are equal. To find EPSMAC safely by foiling the Fortran optimiser ; Definition at line 7661 of file TMinuit.cxx. ◆ mnunpt(). Bool_t TMinuit::mnunpt ; (; TString & ; cfname). Returns .TRUE. ; if CFNAME contains unprintable characters ; Definition at line 7670 of file TMinuit.cxx. ◆ mnvert(). void TMinuit::mnvert ; (; Double_t * ; a, . Int_t ; l, . Int_t ; m, . Int_t ; n, . Int_t & ; ifail . ). virtual . Inverts a symmetric matrix. ; inverts a symmetric matrix. matrix is first scaled to have all ones on the diagonal (equivalent to change of units) but no pivoting is done since matrix is positive-definite. ; Definition at line 7696 of file TMinuit.cxx. ◆ mnwarn(). void TMinuit::mnwarn ; (; const char * ; copt1, . const char * ; corg1, . const char * ; cmes1 . ). virtual . Prints Warning messages. . If COPT='W', CMES is a WARning message from CORG.; If COPT='D', CMES is a DEBug message from CORG.; If SET WARnings is in effect (the default), this routine prints the warning message CMES coming from CORG.; If SET NOWarnings is in effect, the warning message is stored in a circular buffer of length kMAXMES.; If called with CORG=CMES='SHO', it prints the messages in the circular buffer, FIFO, and empties the buffer. . Definition at line 7784 of file TMinuit.cxx. ◆ mnwerr(). void TMinuit::mnwerr ; (; ). virtual . Calculates the WERR, external parameter errors. ; and the global correlation coefficients, to be called whenever a new covariance matrix is available. ; Definition at line 7861 of file TMinuit.cxx. ◆ operator=(). TMinuit & TMinuit::operator= ; (; const TMinuit & ; m). private . ◆ Release(). Int_t TMinuit::Release ; (; Int_t ; parNo). virtual . release a parameter ; Definition at line 894 of file TMinuit.cxx. ◆ SetErrorDef(). Int_t TMinuit::SetErrorDef ; (; Double",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:66446,Integrability,message,message,66446,"; Double_t ; epsp1, . Double_t & ; epsbak . ). virtual . To find the machine precision. ; Compares its argument with the value 1.0, and returns the value .TRUE. if they are equal. To find EPSMAC safely by foiling the Fortran optimiser ; Definition at line 7661 of file TMinuit.cxx. ◆ mnunpt(). Bool_t TMinuit::mnunpt ; (; TString & ; cfname). Returns .TRUE. ; if CFNAME contains unprintable characters ; Definition at line 7670 of file TMinuit.cxx. ◆ mnvert(). void TMinuit::mnvert ; (; Double_t * ; a, . Int_t ; l, . Int_t ; m, . Int_t ; n, . Int_t & ; ifail . ). virtual . Inverts a symmetric matrix. ; inverts a symmetric matrix. matrix is first scaled to have all ones on the diagonal (equivalent to change of units) but no pivoting is done since matrix is positive-definite. ; Definition at line 7696 of file TMinuit.cxx. ◆ mnwarn(). void TMinuit::mnwarn ; (; const char * ; copt1, . const char * ; corg1, . const char * ; cmes1 . ). virtual . Prints Warning messages. . If COPT='W', CMES is a WARning message from CORG.; If COPT='D', CMES is a DEBug message from CORG.; If SET WARnings is in effect (the default), this routine prints the warning message CMES coming from CORG.; If SET NOWarnings is in effect, the warning message is stored in a circular buffer of length kMAXMES.; If called with CORG=CMES='SHO', it prints the messages in the circular buffer, FIFO, and empties the buffer. . Definition at line 7784 of file TMinuit.cxx. ◆ mnwerr(). void TMinuit::mnwerr ; (; ). virtual . Calculates the WERR, external parameter errors. ; and the global correlation coefficients, to be called whenever a new covariance matrix is available. ; Definition at line 7861 of file TMinuit.cxx. ◆ operator=(). TMinuit & TMinuit::operator= ; (; const TMinuit & ; m). private . ◆ Release(). Int_t TMinuit::Release ; (; Int_t ; parNo). virtual . release a parameter ; Definition at line 894 of file TMinuit.cxx. ◆ SetErrorDef(). Int_t TMinuit::SetErrorDef ; (; Double_t ; up). virtual . To get the n-sigma ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:66495,Integrability,message,message,66495,"rtual . To find the machine precision. ; Compares its argument with the value 1.0, and returns the value .TRUE. if they are equal. To find EPSMAC safely by foiling the Fortran optimiser ; Definition at line 7661 of file TMinuit.cxx. ◆ mnunpt(). Bool_t TMinuit::mnunpt ; (; TString & ; cfname). Returns .TRUE. ; if CFNAME contains unprintable characters ; Definition at line 7670 of file TMinuit.cxx. ◆ mnvert(). void TMinuit::mnvert ; (; Double_t * ; a, . Int_t ; l, . Int_t ; m, . Int_t ; n, . Int_t & ; ifail . ). virtual . Inverts a symmetric matrix. ; inverts a symmetric matrix. matrix is first scaled to have all ones on the diagonal (equivalent to change of units) but no pivoting is done since matrix is positive-definite. ; Definition at line 7696 of file TMinuit.cxx. ◆ mnwarn(). void TMinuit::mnwarn ; (; const char * ; copt1, . const char * ; corg1, . const char * ; cmes1 . ). virtual . Prints Warning messages. . If COPT='W', CMES is a WARning message from CORG.; If COPT='D', CMES is a DEBug message from CORG.; If SET WARnings is in effect (the default), this routine prints the warning message CMES coming from CORG.; If SET NOWarnings is in effect, the warning message is stored in a circular buffer of length kMAXMES.; If called with CORG=CMES='SHO', it prints the messages in the circular buffer, FIFO, and empties the buffer. . Definition at line 7784 of file TMinuit.cxx. ◆ mnwerr(). void TMinuit::mnwerr ; (; ). virtual . Calculates the WERR, external parameter errors. ; and the global correlation coefficients, to be called whenever a new covariance matrix is available. ; Definition at line 7861 of file TMinuit.cxx. ◆ operator=(). TMinuit & TMinuit::operator= ; (; const TMinuit & ; m). private . ◆ Release(). Int_t TMinuit::Release ; (; Int_t ; parNo). virtual . release a parameter ; Definition at line 894 of file TMinuit.cxx. ◆ SetErrorDef(). Int_t TMinuit::SetErrorDef ; (; Double_t ; up). virtual . To get the n-sigma contour the error def parameter ""up"" has to set to",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:66564,Integrability,rout,routine,66564,".0, and returns the value .TRUE. if they are equal. To find EPSMAC safely by foiling the Fortran optimiser ; Definition at line 7661 of file TMinuit.cxx. ◆ mnunpt(). Bool_t TMinuit::mnunpt ; (; TString & ; cfname). Returns .TRUE. ; if CFNAME contains unprintable characters ; Definition at line 7670 of file TMinuit.cxx. ◆ mnvert(). void TMinuit::mnvert ; (; Double_t * ; a, . Int_t ; l, . Int_t ; m, . Int_t ; n, . Int_t & ; ifail . ). virtual . Inverts a symmetric matrix. ; inverts a symmetric matrix. matrix is first scaled to have all ones on the diagonal (equivalent to change of units) but no pivoting is done since matrix is positive-definite. ; Definition at line 7696 of file TMinuit.cxx. ◆ mnwarn(). void TMinuit::mnwarn ; (; const char * ; copt1, . const char * ; corg1, . const char * ; cmes1 . ). virtual . Prints Warning messages. . If COPT='W', CMES is a WARning message from CORG.; If COPT='D', CMES is a DEBug message from CORG.; If SET WARnings is in effect (the default), this routine prints the warning message CMES coming from CORG.; If SET NOWarnings is in effect, the warning message is stored in a circular buffer of length kMAXMES.; If called with CORG=CMES='SHO', it prints the messages in the circular buffer, FIFO, and empties the buffer. . Definition at line 7784 of file TMinuit.cxx. ◆ mnwerr(). void TMinuit::mnwerr ; (; ). virtual . Calculates the WERR, external parameter errors. ; and the global correlation coefficients, to be called whenever a new covariance matrix is available. ; Definition at line 7861 of file TMinuit.cxx. ◆ operator=(). TMinuit & TMinuit::operator= ; (; const TMinuit & ; m). private . ◆ Release(). Int_t TMinuit::Release ; (; Int_t ; parNo). virtual . release a parameter ; Definition at line 894 of file TMinuit.cxx. ◆ SetErrorDef(). Int_t TMinuit::SetErrorDef ; (; Double_t ; up). virtual . To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ; Definition at line 908 of file TMinuit.cxx. ◆ SetFCN(). void TMinuit::",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:66591,Integrability,message,message,66591,".0, and returns the value .TRUE. if they are equal. To find EPSMAC safely by foiling the Fortran optimiser ; Definition at line 7661 of file TMinuit.cxx. ◆ mnunpt(). Bool_t TMinuit::mnunpt ; (; TString & ; cfname). Returns .TRUE. ; if CFNAME contains unprintable characters ; Definition at line 7670 of file TMinuit.cxx. ◆ mnvert(). void TMinuit::mnvert ; (; Double_t * ; a, . Int_t ; l, . Int_t ; m, . Int_t ; n, . Int_t & ; ifail . ). virtual . Inverts a symmetric matrix. ; inverts a symmetric matrix. matrix is first scaled to have all ones on the diagonal (equivalent to change of units) but no pivoting is done since matrix is positive-definite. ; Definition at line 7696 of file TMinuit.cxx. ◆ mnwarn(). void TMinuit::mnwarn ; (; const char * ; copt1, . const char * ; corg1, . const char * ; cmes1 . ). virtual . Prints Warning messages. . If COPT='W', CMES is a WARning message from CORG.; If COPT='D', CMES is a DEBug message from CORG.; If SET WARnings is in effect (the default), this routine prints the warning message CMES coming from CORG.; If SET NOWarnings is in effect, the warning message is stored in a circular buffer of length kMAXMES.; If called with CORG=CMES='SHO', it prints the messages in the circular buffer, FIFO, and empties the buffer. . Definition at line 7784 of file TMinuit.cxx. ◆ mnwerr(). void TMinuit::mnwerr ; (; ). virtual . Calculates the WERR, external parameter errors. ; and the global correlation coefficients, to be called whenever a new covariance matrix is available. ; Definition at line 7861 of file TMinuit.cxx. ◆ operator=(). TMinuit & TMinuit::operator= ; (; const TMinuit & ; m). private . ◆ Release(). Int_t TMinuit::Release ; (; Int_t ; parNo). virtual . release a parameter ; Definition at line 894 of file TMinuit.cxx. ◆ SetErrorDef(). Int_t TMinuit::SetErrorDef ; (; Double_t ; up). virtual . To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ; Definition at line 908 of file TMinuit.cxx. ◆ SetFCN(). void TMinuit::",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:66667,Integrability,message,message,66667,"r ; Definition at line 7661 of file TMinuit.cxx. ◆ mnunpt(). Bool_t TMinuit::mnunpt ; (; TString & ; cfname). Returns .TRUE. ; if CFNAME contains unprintable characters ; Definition at line 7670 of file TMinuit.cxx. ◆ mnvert(). void TMinuit::mnvert ; (; Double_t * ; a, . Int_t ; l, . Int_t ; m, . Int_t ; n, . Int_t & ; ifail . ). virtual . Inverts a symmetric matrix. ; inverts a symmetric matrix. matrix is first scaled to have all ones on the diagonal (equivalent to change of units) but no pivoting is done since matrix is positive-definite. ; Definition at line 7696 of file TMinuit.cxx. ◆ mnwarn(). void TMinuit::mnwarn ; (; const char * ; copt1, . const char * ; corg1, . const char * ; cmes1 . ). virtual . Prints Warning messages. . If COPT='W', CMES is a WARning message from CORG.; If COPT='D', CMES is a DEBug message from CORG.; If SET WARnings is in effect (the default), this routine prints the warning message CMES coming from CORG.; If SET NOWarnings is in effect, the warning message is stored in a circular buffer of length kMAXMES.; If called with CORG=CMES='SHO', it prints the messages in the circular buffer, FIFO, and empties the buffer. . Definition at line 7784 of file TMinuit.cxx. ◆ mnwerr(). void TMinuit::mnwerr ; (; ). virtual . Calculates the WERR, external parameter errors. ; and the global correlation coefficients, to be called whenever a new covariance matrix is available. ; Definition at line 7861 of file TMinuit.cxx. ◆ operator=(). TMinuit & TMinuit::operator= ; (; const TMinuit & ; m). private . ◆ Release(). Int_t TMinuit::Release ; (; Int_t ; parNo). virtual . release a parameter ; Definition at line 894 of file TMinuit.cxx. ◆ SetErrorDef(). Int_t TMinuit::SetErrorDef ; (; Double_t ; up). virtual . To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ; Definition at line 908 of file TMinuit.cxx. ◆ SetFCN(). void TMinuit::SetFCN ; (; void(*)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t) ; fcn). virtual . To set the addr",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:66772,Integrability,message,messages,66772,"). Returns .TRUE. ; if CFNAME contains unprintable characters ; Definition at line 7670 of file TMinuit.cxx. ◆ mnvert(). void TMinuit::mnvert ; (; Double_t * ; a, . Int_t ; l, . Int_t ; m, . Int_t ; n, . Int_t & ; ifail . ). virtual . Inverts a symmetric matrix. ; inverts a symmetric matrix. matrix is first scaled to have all ones on the diagonal (equivalent to change of units) but no pivoting is done since matrix is positive-definite. ; Definition at line 7696 of file TMinuit.cxx. ◆ mnwarn(). void TMinuit::mnwarn ; (; const char * ; copt1, . const char * ; corg1, . const char * ; cmes1 . ). virtual . Prints Warning messages. . If COPT='W', CMES is a WARning message from CORG.; If COPT='D', CMES is a DEBug message from CORG.; If SET WARnings is in effect (the default), this routine prints the warning message CMES coming from CORG.; If SET NOWarnings is in effect, the warning message is stored in a circular buffer of length kMAXMES.; If called with CORG=CMES='SHO', it prints the messages in the circular buffer, FIFO, and empties the buffer. . Definition at line 7784 of file TMinuit.cxx. ◆ mnwerr(). void TMinuit::mnwerr ; (; ). virtual . Calculates the WERR, external parameter errors. ; and the global correlation coefficients, to be called whenever a new covariance matrix is available. ; Definition at line 7861 of file TMinuit.cxx. ◆ operator=(). TMinuit & TMinuit::operator= ; (; const TMinuit & ; m). private . ◆ Release(). Int_t TMinuit::Release ; (; Int_t ; parNo). virtual . release a parameter ; Definition at line 894 of file TMinuit.cxx. ◆ SetErrorDef(). Int_t TMinuit::SetErrorDef ; (; Double_t ; up). virtual . To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ; Definition at line 908 of file TMinuit.cxx. ◆ SetFCN(). void TMinuit::SetFCN ; (; void(*)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t) ; fcn). virtual . To set the address of the minimization function. ; Definition at line 920 of file TMinuit.cxx. ◆ SetGraphicsMode(). virtu",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:544,Modifiability,variab,variables,544,". ROOT: TMinuit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TMinuit Class ReferenceMath » TMinuit. ; See alsoMinuit2 for a newer version of this package; Implementation in C++ of the Minuit package written by Fred James. This is a straightforward conversion of the original Fortran version.; The main changes are:. The variables in the various Minuit labelled common blocks have been changed to the TMinuit class data members.; The internal arrays with a maximum dimension depending on the maximum number of parameters are now data members arrays with a dynamic dimension such that one can fit very large problems by simply initialising the TMinuit constructor with the maximum number of parameters.; The include file Minuit.h has been commented as much as possible using existing comments in the code or the printed documentation; The original Minuit subroutines are now member functions.; Constructors and destructor have been added.; Instead of passing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer.; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file.; The functions SetObjectFit(TObject * obj)/GetObjectFit() can be used inside the FCN function to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The val",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:1338,Modifiability,flexible,flexible,1338," for a newer version of this package; Implementation in C++ of the Minuit package written by Fred James. This is a straightforward conversion of the original Fortran version.; The main changes are:. The variables in the various Minuit labelled common blocks have been changed to the TMinuit class data members.; The internal arrays with a maximum dimension depending on the maximum number of parameters are now data members arrays with a dynamic dimension such that one can fit very large problems by simply initialising the TMinuit constructor with the maximum number of parameters.; The include file Minuit.h has been commented as much as possible using existing comments in the code or the printed documentation; The original Minuit subroutines are now member functions.; Constructors and destructor have been added.; Instead of passing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer.; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file.; The functions SetObjectFit(TObject * obj)/GetObjectFit() can be used inside the FCN function to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The value of FCN will in general depend on one or more variable parameters.; To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D) the Fit function defines the Minuit fitting function as being H1FitChisquare or H1FitLikelihood depending on the options selected. H1FitChisquare calculates the chisquare between the user",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:1715,Modifiability,variab,variables,1715,"mbers.; The internal arrays with a maximum dimension depending on the maximum number of parameters are now data members arrays with a dynamic dimension such that one can fit very large problems by simply initialising the TMinuit constructor with the maximum number of parameters.; The include file Minuit.h has been commented as much as possible using existing comments in the code or the printed documentation; The original Minuit subroutines are now member functions.; Constructors and destructor have been added.; Instead of passing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer.; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file.; The functions SetObjectFit(TObject * obj)/GetObjectFit() can be used inside the FCN function to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The value of FCN will in general depend on one or more variable parameters.; To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D) the Fit function defines the Minuit fitting function as being H1FitChisquare or H1FitLikelihood depending on the options selected. H1FitChisquare calculates the chisquare between the user fitting function (gaussian, polynomial, user defined,etc) and the data for given values of the parameters. It is the task of MINUIT to find those values of the parameters which give the lowest value of chisquare. Basic concepts - The transformation for parameters with limits.; For variable parameters w",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:2049,Modifiability,variab,variable,2049,"he printed documentation; The original Minuit subroutines are now member functions.; Constructors and destructor have been added.; Instead of passing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer.; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file.; The functions SetObjectFit(TObject * obj)/GetObjectFit() can be used inside the FCN function to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The value of FCN will in general depend on one or more variable parameters.; To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D) the Fit function defines the Minuit fitting function as being H1FitChisquare or H1FitLikelihood depending on the options selected. H1FitChisquare calculates the chisquare between the user fitting function (gaussian, polynomial, user defined,etc) and the data for given values of the parameters. It is the task of MINUIT to find those values of the parameters which give the lowest value of chisquare. Basic concepts - The transformation for parameters with limits.; For variable parameters with limits, MINUIT uses the following transformation:. \[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \]. so that the internal value \(P_{\mathrm{int}}\) can take on any value, while the external value \(P_{\mathrm{ext}}\) can take on values only between the lower ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:2624,Modifiability,variab,variable,2624,"n to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The value of FCN will in general depend on one or more variable parameters.; To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D) the Fit function defines the Minuit fitting function as being H1FitChisquare or H1FitLikelihood depending on the options selected. H1FitChisquare calculates the chisquare between the user fitting function (gaussian, polynomial, user defined,etc) and the data for given values of the parameters. It is the task of MINUIT to find those values of the parameters which give the lowest value of chisquare. Basic concepts - The transformation for parameters with limits.; For variable parameters with limits, MINUIT uses the following transformation:. \[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \]. so that the internal value \(P_{\mathrm{int}}\) can take on any value, while the external value \(P_{\mathrm{ext}}\) can take on values only between the lower limit \(a\) and the upper limit \(b\). Since the transformation is necessarily non-linear, it would transform a nice linear problem into a nasty non-linear one, which is the reason why limits should be avoided if not necessary. In addition, the transformation does require some computer time, so it slows down the computation a little bit, and more importantly, it introduces additional numerical inaccuracy into the problem in addition to what is introduced in the numerical calculation of the FCN value. The effects of non-linearity and numerical roundoff both become more important as the external value gets closer to one of",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:4465,Modifiability,variab,variable,4465,"of the FCN value. The effects of non-linearity and numerical roundoff both become more important as the external value gets closer to one of the limits (expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if he puts limits of \((0,10^{10})\) on a parameter, then the values \(0.0\) and \(1.0\) will be indistinguishable to the accuracy of most machines.; The transformation also affects the parameter error matrix, of course, so Minuit does a transformation of the error matrix (and the `‘parabolic’' parameter errors) when there are parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\). Therefore, it is recommended that:. Limits on variable parameters should be used only when needed in order to prevent the parameter from taking on unphysical values.; When a satisfactory minimum has been found using limits, the limits should then be removed if possible, in order to perform or re-perform the error analysis without limits. How to get the right answer from MINUIT.; MINUIT offers the user a choice of several minimization algorithms. The MIGRAD algorithm is in general the best minimizer for nearly all functions. It is a variable-metric method with inexact line search, a stable metric updating scheme, and checks for positive-definiteness. Its main weakness is that it depends heavily on knowledge of the first derivatives, and fails miserably if they are very inaccurate.; If parameter limits are needed, in spite of the side effects, then the user should be aware of the following techniques to alleviate problems caused by limits:; Getting the right minimum with limits.; If MIGRAD converges normally to a point where no parameter is near one of its limits, then the existence of",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:4957,Modifiability,variab,variable-metric,4957,"error matrix, of course, so Minuit does a transformation of the error matrix (and the `‘parabolic’' parameter errors) when there are parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\). Therefore, it is recommended that:. Limits on variable parameters should be used only when needed in order to prevent the parameter from taking on unphysical values.; When a satisfactory minimum has been found using limits, the limits should then be removed if possible, in order to perform or re-perform the error analysis without limits. How to get the right answer from MINUIT.; MINUIT offers the user a choice of several minimization algorithms. The MIGRAD algorithm is in general the best minimizer for nearly all functions. It is a variable-metric method with inexact line search, a stable metric updating scheme, and checks for positive-definiteness. Its main weakness is that it depends heavily on knowledge of the first derivatives, and fails miserably if they are very inaccurate.; If parameter limits are needed, in spite of the side effects, then the user should be aware of the following techniques to alleviate problems caused by limits:; Getting the right minimum with limits.; If MIGRAD converges normally to a point where no parameter is near one of its limits, then the existence of limits has probably not prevented MINUIT from finding the right minimum. On the other hand, if one or more parameters is near its limit at the minimum, this may be because the true minimum is indeed at a limit, or it may be because the minimizer has become `‘blocked’' at a limit. This may normally happen only if the parameter is so close to a limit (internal value at an odd multiple of \(\pm \frac{\pi}{2}\) that MINUIT prints a warning to this effect when it prints the parameter values.;",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:11769,Modifiability,variab,variables,11769,"ot do this itself.; Numerical inaccuracies:; It is possible that the apparent lack of positive-definiteness is in fact only due to excessive roundoff errors in numerical calculations in the user function or not enough precision. This is unlikely in general, but becomes more likely if the number of free parameters is very large, or if; the parameters are badly scaled (not all of the same order of magnitude), and correlations are also large. In any case, whether the non-positive-definiteness is real or only numerical is largely irrelevant, since in both cases the error matrix will be unreliable and the minimum suspicious.; An ill-posed problem:; For questions of parameter dependence, see the discussion above on positive-definiteness.; Possible other mathematical problems are the following:; Excessive numerical roundoff:; Be especially careful of exponential and factorial functions which get big very quickly and lose accuracy.; Starting too far from the solution:; The function may have unphysical local minima, especially at infinity in some variables.; Minuit parameter errors in the presence of limits; This concerns the way Minuit reports the symmetric (or parabolic) errors on parameters. It does not apply to the errors reported from Minos, which are in general asymmetric.; The symmetric errors reported by Minuit are always calculated from the covariance matrix, assuming that this matrix has been calculated, usually as the result of a Migrad minimization or a direct calculation by Hesse which inverts the second derivative matrix.; When there are no limits on the parameter in question, the error reported by Minuit should therefore be exactly equal to the square root of the corresponding diagonal element of the error matrix reported by Minuit.; However, when there are limits on the parameter, there is a transformation between the internal parameter values seen by Minuit (which are unbounded) and the external parameter values seen by the user in FCN (which remain inside th",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:14296,Modifiability,inherit,inherited,14296,"rror bar"" to external coordinates and reports the length of this transformed interval. Strictly speaking, it is now asymmetric, but since the origin of the asymmetry is only an artificial transformation it does not make much sense, so the transformed errors are symmetrized.; The result of all the above is that for parameters with limits, the error reported by Minuit is not exactly equal to the square root of the diagonal element of the error matrix. The difference is a measure of how much the limits deform the problem. If possible, it is suggested not to use limits on parameters, and the problem goes away. If for some reason limits are necessary, and you are sensitive to the difference between the two ways of calculating the errors, it is suggested to use Minos errors which take into account the non-linearities much more precisely. ; Definition at line 27 of file TMinuit.h. Public Types; enum  { kMAXWARN =100; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMinuit ();  Minuit normal constructor. ;  ;  TMinuit (Int_t maxpar);  Minuit normal constructor. ;  ;  ~TMinuit () override;  Minuit default destructor. ;  ; virtual void BuildArrays (Int_t maxpar=15);  Create internal Minuit arrays for the maxpar parameters. ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Command ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:17193,Modifiability,variab,variables,17193,"ixed parameters ;  ; virtual Int_t GetNumFreePars () const;  returns the number of currently free parameters ;  ; virtual Int_t GetNumPars () const;  returns the total number of parameters that have been defined as fixed or free. ;  ; TObject * GetObjectFit () const;  ; virtual Int_t GetParameter (Int_t parNo, Double_t &currentValue, Double_t &currentError) const;  return parameter value and error ;  ; virtual TObject * GetPlot () const;  ; Int_t GetStatus () const;  ; TClass * IsA () const override;  ; virtual Int_t Migrad ();  invokes the MIGRAD minimizer ;  ; virtual void mnamin ();  Initialize AMIN. ;  ; virtual void mnbins (Double_t a1, Double_t a2, Int_t naa, Double_t &bl, Double_t &bh, Int_t &nb, Double_t &bwid);  Compute reasonable histogram intervals. ;  ; virtual void mncalf (Double_t *pvec, Double_t &ycalf);  Transform FCN to find further minima. ;  ; virtual void mncler ();  Resets the parameter list to UNDEFINED. ;  ; virtual void mncntr (Int_t ke1, Int_t ke2, Int_t &ierrf);  Print function contours in two variables, on line printer. ;  ; virtual void mncomd (const char *crdbin, Int_t &icondn);  Reads a command string and executes. ;  ; virtual void mncont (Int_t ke1, Int_t ke2, Int_t nptu, Double_t *xptu, Double_t *yptu, Int_t &ierrf);  Find points along a contour where FCN is minimum. ;  ; virtual void mncrck (TString crdbuf, Int_t maxcwd, TString &comand, Int_t &lnc, Int_t mxp, Double_t *plist, Int_t &llist, Int_t &ierr, Int_t isyswr);  Cracks the free-format input. ;  ; virtual void mncros (Double_t &aopt, Int_t &iercr);  Find point where MNEVAL=AMIN+UP. ;  ; virtual void mncuve ();  Makes sure that the current point is a local minimum. ;  ; virtual void mnderi ();  Calculates the first derivatives of FCN (GRD) ;  ; virtual void mndxdi (Double_t pint, Int_t ipar, Double_t &dxdi);  Calculates the transformation factor between ext/internal values. ;  ; virtual void mneig (Double_t *a, Int_t ndima, Int_t n, Int_t mits, Double_t *work, Double_t precis, I",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:19035,Modifiability,variab,variable,19035,"transformation factor between ext/internal values. ;  ; virtual void mneig (Double_t *a, Int_t ndima, Int_t n, Int_t mits, Double_t *work, Double_t precis, Int_t &ifault);  Compute matrix eigen values. ;  ; virtual void mnemat (Double_t *emat, Int_t ndim);  Calculates the external error matrix from the internal matrix. ;  ; virtual void mnerrs (Int_t number, Double_t &eplus, Double_t &eminus, Double_t &eparab, Double_t &gcc);  Utility routine to get MINOS errors. ;  ; virtual void mneval (Double_t anext, Double_t &fnext, Int_t &ierev);  Evaluates the function being analysed by MNCROS. ;  ; virtual void mnexcm (const char *comand, Double_t *plist, Int_t llist, Int_t &ierflg);  Interprets a command and takes appropriate action. ;  ; virtual void mnexin (Double_t *pint);  Transforms the external parameter values U to internal values. ;  ; virtual void mnfixp (Int_t iint, Int_t &ierr);  Removes parameter IINT from the internal parameter list. ;  ; virtual void mnfree (Int_t k);  Restores one or more fixed parameter(s) to variable status. ;  ; virtual void mngrad ();  Interprets the SET GRAD command. ;  ; virtual void mnhelp (const char *command="""");  interface to Minuit help ;  ; virtual void mnhelp (TString comd);  HELP routine for MINUIT interactive commands. ;  ; virtual void mnhes1 ();  Calculate first derivatives (GRD) and uncertainties (DGRD) ;  ; virtual void mnhess ();  Calculates the full second-derivative matrix of FCN. ;  ; virtual void mnimpr ();  Attempts to improve on a good local minimum. ;  ; virtual void mninex (Double_t *pint);  Transforms from internal coordinates (PINT) to external (U) ;  ; virtual void mninit (Int_t i1, Int_t i2, Int_t i3);  Main initialization member function for MINUIT. ;  ; virtual void mnlims ();  Interprets the SET LIM command, to reset the parameter limits. ;  ; virtual void mnline (Double_t *start, Double_t fstart, Double_t *step, Double_t slope, Double_t toler);  Perform a line search from position START. ;  ; virtual void mn",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:21666,Modifiability,portab,portable,21666,"ary2p, Int_t npar2p, Double_t *coef2p, Double_t &sdev2p);  To fit a parabola to npar2p points. ;  ; virtual void mnpint (Double_t &pexti, Int_t i, Double_t &pinti);  Calculates the internal parameter value PINTI. ;  ; virtual void mnplot (Double_t *xpt, Double_t *ypt, char *chpt, Int_t nxypt, Int_t npagwd, Int_t npagln);  Plots points in array xypt onto one page with labelled axes. ;  ; virtual void mnpout (Int_t iuext, TString &chnam, Double_t &val, Double_t &err, Double_t &xlolim, Double_t &xuplim, Int_t &iuint) const;  Provides the user with information concerning the current status. ;  ; virtual void mnprin (Int_t inkode, Double_t fval);  Prints the values of the parameters at the time of the call. ;  ; virtual void mnpsdf ();  Calculates the eigenvalues of v to see if positive-def. ;  ; virtual void mnrazz (Double_t ynew, Double_t *pnew, Double_t *y, Int_t &jh, Int_t &jl);  Called only by MNSIMP (and MNIMPR) to add a new point. ;  ; virtual void mnrn15 (Double_t &val, Int_t &inseed);  This is a super-portable random number generator. ;  ; virtual void mnrset (Int_t iopt);  Resets function value and errors to UNDEFINED. ;  ; virtual void mnsave ();  Writes current parameter values and step sizes onto file ISYSSA. ;  ; virtual void mnscan ();  Scans the values of FCN as a function of one parameter. ;  ; virtual void mnseek ();  Performs a rough (but global) minimization by monte carlo search. ;  ; virtual void mnset ();  Interprets the commands that start with SET and SHOW. ;  ; virtual void mnsimp ();  Minimization using the simplex method of Nelder and Mead. ;  ; virtual void mnstat (Double_t &fmin, Double_t &fedm, Double_t &errdef, Int_t &npari, Int_t &nparx, Int_t &istat);  Returns concerning the current status of the minimization. ;  ; virtual void mntiny (Double_t epsp1, Double_t &epsbak);  To find the machine precision. ;  ; Bool_t mnunpt (TString &cfname);  Returns .TRUE. ;  ; virtual void mnvert (Double_t *a, Int_t l, Int_t m, Int_t n, Int_t &ifail);  In",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:23587,Modifiability,inherit,inherited,23587,", Int_t m, Int_t n, Int_t &ifail);  Inverts a symmetric matrix. ;  ; virtual void mnwarn (const char *copt, const char *corg, const char *cmes);  Prints Warning messages. ;  ; virtual void mnwerr ();  Calculates the WERR, external parameter errors. ;  ; virtual Int_t Release (Int_t parNo);  release a parameter ;  ; virtual Int_t SetErrorDef (Double_t up);  To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ;  ; virtual void SetFCN (void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t));  To set the address of the minimization function. ;  ; virtual void SetGraphicsMode (Bool_t mode=kTRUE);  ; virtual void SetMaxIterations (Int_t maxiter=500);  ; virtual void SetObjectFit (TObject *obj);  ; virtual Int_t SetPrintLevel (Int_t printLevel=0);  set Minuit print level. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:25327,Modifiability,inherit,inherited,25327,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:26420,Modifiability,inherit,inheritance,26420,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:28419,Modifiability,inherit,inherits,28419,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:28536,Modifiability,inherit,inherits,28536,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:32289,Modifiability,inherit,inherited,32289,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; Double_t * fAlim;  ; Double_t fAmin;  ; Double_t fApsi;  ; Double_t fBigedm;  ; Double_t * fBlim;  ; TString fCfrom;  ; char * fChpt;  ; Double_t * fCOMDplist;  ; Double_t * fCONTgcc;  ; Double_t * fCONTw;  ; TString fCovmes [4];  ; TString * fCpnam;  Character to be plotted at the X,Y contour positions. ;  ; TString fCstatu;  ; TString fCtitl;  ; TString fCundef;  ; TString fCvrsn;  ; TString fCwo",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:32499,Modifiability,inherit,inherited,32499,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Public Attributes; Double_t * fAlim;  ; Double_t fAmin;  ; Double_t fApsi;  ; Double_t fBigedm;  ; Double_t * fBlim;  ; TString fCfrom;  ; char * fChpt;  ; Double_t * fCOMDplist;  ; Double_t * fCONTgcc;  ; Double_t * fCONTw;  ; TString fCovmes [4];  ; TString * fCpnam;  Character to be plotted at the X,Y contour positions. ;  ; TString fCstatu;  ; TString fCtitl;  ; TString fCundef;  ; TString fCvrsn;  ; TString fCwo",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:36187,Modifiability,inherit,inherited,36187,"fPlot;  ; Double_t * fPrho;  ; Double_t * fPSDFs;  ; Double_t * fPstar;  ; Double_t * fPstst;  ; Double_t * fSEEKxbest;  ; Double_t * fSEEKxmid;  ; Double_t * fSIMPy;  ; Int_t fStatus;  ; Double_t * fU;  ; Double_t fUndefi;  ; Double_t fUp;  ; Double_t fUpdflt;  ; Double_t * fVERTpp;  ; Double_t * fVERTq;  ; Double_t * fVERTs;  ; Double_t * fVhmat;  ; Double_t fVlimhi;  ; Double_t fVlimlo;  ; Double_t * fVthmat;  ; TString fWarmes [kMAXWARN];  ; Double_t * fWerr;  ; Double_t * fWord7;  ; Double_t * fX;  ; Double_t fXdircr;  ; Double_t fXmidcr;  ; Double_t * fXpt;  ; Double_t * fXs;  ; Double_t * fXt;  ; Double_t * fXts;  ; Double_t fYdircr;  ; Double_t fYmidcr;  ; Double_t * fYpt;  . Private Member Functions;  TMinuit (const TMinuit &m);  Private TMinuit copy ctor. TMinuit can not be copied. ;  ; TMinuit & operator= (const TMinuit &m);  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMinuit.h>. Inheritance diagram for TMinuit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkMAXWARN . Definition at line 35 of file TMinuit.h. Constructor & Destructor Documentation. ◆ TMinuit() [1/3]. TMinuit::TMinuit ; (; const TMinuit & ; m). private . Private TMinuit copy ctor. TMinuit can not be copied. ; Definition at line 489 of file TMinuit.cxx. ◆ TMinuit() [2/3]. TMinuit::TMinuit ; (; ). Minuit normal constructor. ; Definition at line 347 of file TMinuit.cxx. ◆ TMinuit() [3/3]. TMinuit::TMinuit ; (; Int_t ; maxpar). Minuit normal constructor. ; maxpar is the maximum number of paramete",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:36286,Modifiability,inherit,inherited,36286,"fPlot;  ; Double_t * fPrho;  ; Double_t * fPSDFs;  ; Double_t * fPstar;  ; Double_t * fPstst;  ; Double_t * fSEEKxbest;  ; Double_t * fSEEKxmid;  ; Double_t * fSIMPy;  ; Int_t fStatus;  ; Double_t * fU;  ; Double_t fUndefi;  ; Double_t fUp;  ; Double_t fUpdflt;  ; Double_t * fVERTpp;  ; Double_t * fVERTq;  ; Double_t * fVERTs;  ; Double_t * fVhmat;  ; Double_t fVlimhi;  ; Double_t fVlimlo;  ; Double_t * fVthmat;  ; TString fWarmes [kMAXWARN];  ; Double_t * fWerr;  ; Double_t * fWord7;  ; Double_t * fX;  ; Double_t fXdircr;  ; Double_t fXmidcr;  ; Double_t * fXpt;  ; Double_t * fXs;  ; Double_t * fXt;  ; Double_t * fXts;  ; Double_t fYdircr;  ; Double_t fYmidcr;  ; Double_t * fYpt;  . Private Member Functions;  TMinuit (const TMinuit &m);  Private TMinuit copy ctor. TMinuit can not be copied. ;  ; TMinuit & operator= (const TMinuit &m);  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMinuit.h>. Inheritance diagram for TMinuit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkMAXWARN . Definition at line 35 of file TMinuit.h. Constructor & Destructor Documentation. ◆ TMinuit() [1/3]. TMinuit::TMinuit ; (; const TMinuit & ; m). private . Private TMinuit copy ctor. TMinuit can not be copied. ; Definition at line 489 of file TMinuit.cxx. ◆ TMinuit() [2/3]. TMinuit::TMinuit ; (; ). Minuit normal constructor. ; Definition at line 347 of file TMinuit.cxx. ◆ TMinuit() [3/3]. TMinuit::TMinuit ; (; Int_t ; maxpar). Minuit normal constructor. ; maxpar is the maximum number of paramete",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:36491,Modifiability,inherit,inherited,36491,"Double_t fUndefi;  ; Double_t fUp;  ; Double_t fUpdflt;  ; Double_t * fVERTpp;  ; Double_t * fVERTq;  ; Double_t * fVERTs;  ; Double_t * fVhmat;  ; Double_t fVlimhi;  ; Double_t fVlimlo;  ; Double_t * fVthmat;  ; TString fWarmes [kMAXWARN];  ; Double_t * fWerr;  ; Double_t * fWord7;  ; Double_t * fX;  ; Double_t fXdircr;  ; Double_t fXmidcr;  ; Double_t * fXpt;  ; Double_t * fXs;  ; Double_t * fXt;  ; Double_t * fXts;  ; Double_t fYdircr;  ; Double_t fYmidcr;  ; Double_t * fYpt;  . Private Member Functions;  TMinuit (const TMinuit &m);  Private TMinuit copy ctor. TMinuit can not be copied. ;  ; TMinuit & operator= (const TMinuit &m);  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMinuit.h>. Inheritance diagram for TMinuit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ anonymous enum. anonymous enum. EnumeratorkMAXWARN . Definition at line 35 of file TMinuit.h. Constructor & Destructor Documentation. ◆ TMinuit() [1/3]. TMinuit::TMinuit ; (; const TMinuit & ; m). private . Private TMinuit copy ctor. TMinuit can not be copied. ; Definition at line 489 of file TMinuit.cxx. ◆ TMinuit() [2/3]. TMinuit::TMinuit ; (; ). Minuit normal constructor. ; Definition at line 347 of file TMinuit.cxx. ◆ TMinuit() [3/3]. TMinuit::TMinuit ; (; Int_t ; maxpar). Minuit normal constructor. ; maxpar is the maximum number of parameters used with this TMinuit object. ; Definition at line 464 of file TMinuit.cxx. ◆ ~TMinuit(). TMinuit::~TMinuit ; (; ). override . Minuit default destructor. ; Definition at line 497 of file TMinuit.cxx. M",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:39493,Modifiability,variab,variable,39493," TMinuit::mnhelp for the full list of available commands See also the complete documentation of all the available commands; Returns the status of the execution:; 0: command executed normally; 1: command is blank, ignored; 2: command line unreadable, ignored; 3: unknown command, ignored; 4: abnormal termination (e.g., MIGRAD not converged); 5: command is a request to read PARAMETER definitions; 6: 'SET INPUT' command; 7: 'SET TITLE' command; 8: 'SET COVAR' command; 9: reserved; 10: END command; 11: EXIT or STOP command; 12: RETURN command . Definition at line 626 of file TMinuit.cxx. ◆ Contour(). TObject * TMinuit::Contour ; (; Int_t ; npoints = 10, . Int_t ; pa1 = 0, . Int_t ; pa2 = 1 . ). virtual . Creates a TGraph object describing the n-sigma contour of a TMinuit fit. ; The contour of the parameters pa1 and pa2 is calculated using npoints (>=4) points. The TMinuit status will be; 0 on success and; -1 if errors in the calling sequence (pa1, pa2 not variable); 1 if less than four points can be found; 2 if npoints<4; n>3 if only n points can be found (n < npoints) The status can be obtained via TMinuit::GetStatus(). To get the n-sigma contour the ERRDEF parameter in Minuit has to set to n^2. The fcn function has to be set before the routine is called.; The TGraph object is created via the interpreter. The user must cast it to a TGraph*. Note that the TGraph is created with npoints+1 in order to close the contour (setting last point equal to first point).; You can find an example in $ROOTSYS/tutorials/fit/fitcont.C ; Definition at line 653 of file TMinuit.cxx. ◆ DeclFileName(). static const char * TMinuit::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 268 of file TMinuit.h. ◆ DefineParameter(). Int_t TMinuit::DefineParameter ; (; Int_t ; parNo, . const char * ; name, . Double_t ; initVal, . Double_t ; initErr, . Double_t ; lowerLimit, . Double_t ; upperLimit . ). virtual . Define a parameter. ; Defin",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:40929,Modifiability,variab,variable,40929,"n example in $ROOTSYS/tutorials/fit/fitcont.C ; Definition at line 653 of file TMinuit.cxx. ◆ DeclFileName(). static const char * TMinuit::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 268 of file TMinuit.h. ◆ DefineParameter(). Int_t TMinuit::DefineParameter ; (; Int_t ; parNo, . const char * ; name, . Double_t ; initVal, . Double_t ; initErr, . Double_t ; lowerLimit, . Double_t ; upperLimit . ). virtual . Define a parameter. ; Definition at line 695 of file TMinuit.cxx. ◆ DeleteArrays(). void TMinuit::DeleteArrays ; (; ). virtual . Delete internal Minuit arrays. ; Definition at line 708 of file TMinuit.cxx. ◆ Eval(). Int_t TMinuit::Eval ; (; Int_t ; npar, . Double_t * ; grad, . Double_t & ; fval, . Double_t * ; par, . Int_t ; flag . ). virtual . Evaluate the minimisation function Input parameters: . npar: number of currently variable parameters; par: array of (constant and variable) parameters; flag: Indicates what is to be calculated (see example below); grad: array of gradients Output parameters:; fval: The calculated function value.; grad: The (optional) vector of first derivatives). The meaning of the parameters par is of course defined by the user, who uses the values of those parameters to calculate their function value. The starting values must be specified by the user. Later values are determined by Minuit as it searches for the minimum or performs whatever analysis is requested by the user.; Note that this virtual function may be redefined in a class derived from TMinuit. The default function calls the function specified in SetFCN; Example of Minimisation function: ; Reimplemented in TMVA::MinuitWrapper.; Definition at line 800 of file TMinuit.cxx. ◆ FixParameter(). Int_t TMinuit::FixParameter ; (; Int_t ; parNo). virtual . fix a parameter ; Definition at line 827 of file TMinuit.cxx. ◆ GetMaxIterations(). Int_t TMinuit::GetMaxIterations ; (; ); const. inline . Definition at line 195 of fi",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:40978,Modifiability,variab,variable,40978,"n example in $ROOTSYS/tutorials/fit/fitcont.C ; Definition at line 653 of file TMinuit.cxx. ◆ DeclFileName(). static const char * TMinuit::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 268 of file TMinuit.h. ◆ DefineParameter(). Int_t TMinuit::DefineParameter ; (; Int_t ; parNo, . const char * ; name, . Double_t ; initVal, . Double_t ; initErr, . Double_t ; lowerLimit, . Double_t ; upperLimit . ). virtual . Define a parameter. ; Definition at line 695 of file TMinuit.cxx. ◆ DeleteArrays(). void TMinuit::DeleteArrays ; (; ). virtual . Delete internal Minuit arrays. ; Definition at line 708 of file TMinuit.cxx. ◆ Eval(). Int_t TMinuit::Eval ; (; Int_t ; npar, . Double_t * ; grad, . Double_t & ; fval, . Double_t * ; par, . Int_t ; flag . ). virtual . Evaluate the minimisation function Input parameters: . npar: number of currently variable parameters; par: array of (constant and variable) parameters; flag: Indicates what is to be calculated (see example below); grad: array of gradients Output parameters:; fval: The calculated function value.; grad: The (optional) vector of first derivatives). The meaning of the parameters par is of course defined by the user, who uses the values of those parameters to calculate their function value. The starting values must be specified by the user. Later values are determined by Minuit as it searches for the minimum or performs whatever analysis is requested by the user.; Note that this virtual function may be redefined in a class derived from TMinuit. The default function calls the function specified in SetFCN; Example of Minimisation function: ; Reimplemented in TMVA::MinuitWrapper.; Definition at line 800 of file TMinuit.cxx. ◆ FixParameter(). Int_t TMinuit::FixParameter ; (; Int_t ; parNo). virtual . fix a parameter ; Definition at line 827 of file TMinuit.cxx. ◆ GetMaxIterations(). Int_t TMinuit::GetMaxIterations ; (; ); const. inline . Definition at line 195 of fi",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:45079,Modifiability,variab,variables,45079,"ompute reasonable histogram intervals. ; Function TO DETERMINE REASONABLE HISTOGRAM INTERVALS GIVEN ABSOLUTE UPPER AND LOWER BOUNDS A1 AND A2 AND DESIRED MAXIMUM NUMBER OF BINS NAA PROGRAM MAKES REASONABLE BINNING FROM BL TO BH OF WIDTH BWID F. JAMES, AUGUST, 1974 , stolen for Minuit, 1988 ; Definition at line 997 of file TMinuit.cxx. ◆ mncalf(). void TMinuit::mncalf ; (; Double_t * ; pvec, . Double_t & ; ycalf . ). virtual . Transform FCN to find further minima. ; Called only from MNIMPR. Transforms the function FCN by dividing out the quadratic part in order to find further minima. Calculates ycalf = (f-fmin)/(x-xmin)*v*(x-xmin) ; Definition at line 1070 of file TMinuit.cxx. ◆ mncler(). void TMinuit::mncler ; (; ). virtual . Resets the parameter list to UNDEFINED. ; Called from MINUIT and by option from MNEXCM ; Definition at line 1103 of file TMinuit.cxx. ◆ mncntr(). void TMinuit::mncntr ; (; Int_t ; ike1, . Int_t ; ike2, . Int_t & ; ierrf . ). virtual . Print function contours in two variables, on line printer. ; input arguments: parx, pary, devs, ngrid ; Definition at line 1132 of file TMinuit.cxx. ◆ mncomd(). void TMinuit::mncomd ; (; const char * ; crdbin, . Int_t & ; icondn . ). virtual . Reads a command string and executes. ; Called by user. 'Reads' a command string and executes.; Equivalent to MNEXCM except that the command is given as a; character string. ICONDN =; - 0: command executed normally; - 1: command is blank, ignored; - 2: command line unreadable, ignored; - 3: unknown command, ignored; - 4: abnormal termination (e.g., MIGRAD not converged); - 5: command is a request to read PARAMETER definitions; - 6: 'SET INPUT' command; - 7: 'SET TITLE' command; - 8: 'SET COVAR' command; - 9: reserved; - 10: END command; - 11: EXIT or STOP command; - 12: RETURN command. Definition at line 1310 of file TMinuit.cxx. ◆ mncont(). void TMinuit::mncont ; (; Int_t ; ike1, . Int_t ; ike2, . Int_t ; nptu, . Double_t * ; xptu, . Double_t * ; yptu, . Int_t & ; ierrf . ).",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:46295,Modifiability,variab,variable,46295,"ndn . ). virtual . Reads a command string and executes. ; Called by user. 'Reads' a command string and executes.; Equivalent to MNEXCM except that the command is given as a; character string. ICONDN =; - 0: command executed normally; - 1: command is blank, ignored; - 2: command line unreadable, ignored; - 3: unknown command, ignored; - 4: abnormal termination (e.g., MIGRAD not converged); - 5: command is a request to read PARAMETER definitions; - 6: 'SET INPUT' command; - 7: 'SET TITLE' command; - 8: 'SET COVAR' command; - 9: reserved; - 10: END command; - 11: EXIT or STOP command; - 12: RETURN command. Definition at line 1310 of file TMinuit.cxx. ◆ mncont(). void TMinuit::mncont ; (; Int_t ; ike1, . Int_t ; ike2, . Int_t ; nptu, . Double_t * ; xptu, . Double_t * ; yptu, . Int_t & ; ierrf . ). virtual . Find points along a contour where FCN is minimum. ; Find NPTU points along a contour where the function FMIN (X(KE1),X(KE2)) = AMIN+UP. where FMIN is the minimum of FCN with respect to all; the other NPAR-2 variable parameters (if any).; IERRF on return will be equal to the number of points found:; NPTU if normal termination with NPTU points found; -1 if errors in the calling sequence (KE1, KE2 not variable); 0 if less than four points can be found (using MNMNOT); n>3 if only n points can be found (n < NPTU) input arguments: parx, pary, devs, ngrid ; . Definition at line 1395 of file TMinuit.cxx. ◆ mncrck(). void TMinuit::mncrck ; (; TString ; cardbuf, . Int_t ; maxcwd, . TString & ; comand, . Int_t & ; lnc, . Int_t ; mxp, . Double_t * ; plist, . Int_t & ; llist, . Int_t & ; ierr, . Int_t ; isyswr . ). virtual . Cracks the free-format input. ; Cracks the free-format input, expecting zero or more; alphanumeric fields (which it joins into COMAND(1:LNC)); followed by one or more numeric fields separated by; blanks and/or one comma. The numeric fields are put into; the LLIST (but at most MXP) elements of PLIST. IERR :; - = 0 if no errors,; - = 1 if error(s). . Definition ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:46490,Modifiability,variab,variable,46490,"nd executed normally; - 1: command is blank, ignored; - 2: command line unreadable, ignored; - 3: unknown command, ignored; - 4: abnormal termination (e.g., MIGRAD not converged); - 5: command is a request to read PARAMETER definitions; - 6: 'SET INPUT' command; - 7: 'SET TITLE' command; - 8: 'SET COVAR' command; - 9: reserved; - 10: END command; - 11: EXIT or STOP command; - 12: RETURN command. Definition at line 1310 of file TMinuit.cxx. ◆ mncont(). void TMinuit::mncont ; (; Int_t ; ike1, . Int_t ; ike2, . Int_t ; nptu, . Double_t * ; xptu, . Double_t * ; yptu, . Int_t & ; ierrf . ). virtual . Find points along a contour where FCN is minimum. ; Find NPTU points along a contour where the function FMIN (X(KE1),X(KE2)) = AMIN+UP. where FMIN is the minimum of FCN with respect to all; the other NPAR-2 variable parameters (if any).; IERRF on return will be equal to the number of points found:; NPTU if normal termination with NPTU points found; -1 if errors in the calling sequence (KE1, KE2 not variable); 0 if less than four points can be found (using MNMNOT); n>3 if only n points can be found (n < NPTU) input arguments: parx, pary, devs, ngrid ; . Definition at line 1395 of file TMinuit.cxx. ◆ mncrck(). void TMinuit::mncrck ; (; TString ; cardbuf, . Int_t ; maxcwd, . TString & ; comand, . Int_t & ; lnc, . Int_t ; mxp, . Double_t * ; plist, . Int_t & ; llist, . Int_t & ; ierr, . Int_t ; isyswr . ). virtual . Cracks the free-format input. ; Cracks the free-format input, expecting zero or more; alphanumeric fields (which it joins into COMAND(1:LNC)); followed by one or more numeric fields separated by; blanks and/or one comma. The numeric fields are put into; the LLIST (but at most MXP) elements of PLIST. IERR :; - = 0 if no errors,; - = 1 if error(s). . Definition at line 1677 of file TMinuit.cxx. ◆ mncros(). void TMinuit::mncros ; (; Double_t & ; aopt, . Int_t & ; iercr . ). virtual . Find point where MNEVAL=AMIN+UP. ; Find point where MNEVAL=AMIN+UP, along the line thro",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:50190,Modifiability,variab,variable,50190,"es the external error matrix from the internal matrix. ; Note that if the matrix is declared like Double_t matrix[5][5] in the calling program, one has to call mnemat with, eg gMinuit->mnemat(&matrix[0][0],5); . Definition at line 2501 of file TMinuit.cxx. ◆ mnerrs(). void TMinuit::mnerrs ; (; Int_t ; number, . Double_t & ; eplus, . Double_t & ; eminus, . Double_t & ; eparab, . Double_t & ; gcc . ). virtual . Utility routine to get MINOS errors. ; Called by user.; NUMBER is the parameter number; values returned by MNERRS:; EPLUS, EMINUS are MINOS errors of parameter NUMBER,; EPARAB is 'parabolic' error (from error matrix). (Errors not calculated are set = 0); GCC is global correlation coefficient from error matrix . Definition at line 2578 of file TMinuit.cxx. ◆ mneval(). void TMinuit::mneval ; (; Double_t ; anext, . Double_t & ; fnext, . Int_t & ; ierev . ). virtual . Evaluates the function being analysed by MNCROS. ; Evaluates the function being analysed by MNCROS, which is generally the minimum of FCN with respect to all remaining variable parameters. The class data members contains the data necessary to know the values of U(KE1CR) and U(KE2CR) to be used, namely U(KE1CR) = XMIDCR + ANEXT*XDIRCR and (if KE2CR .NE. 0) U(KE2CR) = YMIDCR + ANEXT*YDIRCR ; Definition at line 2620 of file TMinuit.cxx. ◆ mnexcm(). void TMinuit::mnexcm ; (; const char * ; command, . Double_t * ; plist, . Int_t ; llist, . Int_t & ; ierflg . ). virtual . Interprets a command and takes appropriate action. ; either directly by skipping to the corresponding code in; MNEXCM, or by setting up a call to a function; recognized MINUIT commands: obsolete commands: IERFLG is now (94.5) defined the same as ICONDN in MNCOMD =; 0: command executed normally; 1: command is blank, ignored; 2: command line unreadable, ignored; 3: unknown command, ignored; 4: abnormal termination (e.g., MIGRAD not converged); 9: reserved; 10: END command; 11: EXIT or STOP command; 12: RETURN command. see also the possible l",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:51828,Modifiability,variab,variable,51828,"(94.5) defined the same as ICONDN in MNCOMD =; 0: command executed normally; 1: command is blank, ignored; 2: command line unreadable, ignored; 3: unknown command, ignored; 4: abnormal termination (e.g., MIGRAD not converged); 9: reserved; 10: END command; 11: EXIT or STOP command; 12: RETURN command. see also the possible list of all Minuit commands. ; Definition at line 2664 of file TMinuit.cxx. ◆ mnexin(). void TMinuit::mnexin ; (; Double_t * ; pint). virtual . Transforms the external parameter values U to internal values. ; Transforms the external parameter values U to internal values in the dense array PINT. ; Definition at line 3151 of file TMinuit.cxx. ◆ mnfixp(). void TMinuit::mnfixp ; (; Int_t ; iint1, . Int_t & ; ierr . ). virtual . Removes parameter IINT from the internal parameter list. ; and arranges the rest of the list to fill the hole. ; Definition at line 3169 of file TMinuit.cxx. ◆ mnfree(). void TMinuit::mnfree ; (; Int_t ; k). virtual . Restores one or more fixed parameter(s) to variable status. ; Restores one or more fixed parameter(s) to variable status by inserting it into the internal parameter list at the appropriate place. - K = 0 means restore all parameters; - K = 1 means restore the last parameter fixed; - K = -I means restore external parameter I (if possible); - IQ = fix-location where internal parameters were stored; - IR = external number of parameter being restored; - IS = internal number of parameter being restored . Definition at line 3256 of file TMinuit.cxx. ◆ mngrad(). void TMinuit::mngrad ; (; ). virtual . Interprets the SET GRAD command. ; - Called from MNSET; - Interprets the SET GRAD command, which informs MINUIT whether; - the first derivatives of FCN will be calculated by the user; - inside FCN. It can check the user derivative calculation; - by comparing it with a finite difference approximation. . Definition at line 3362 of file TMinuit.cxx. ◆ mnhelp() [1/2]. void TMinuit::mnhelp ; (; const char * ; command = """"). virtu",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:51890,Modifiability,variab,variable,51890,"ignored; 2: command line unreadable, ignored; 3: unknown command, ignored; 4: abnormal termination (e.g., MIGRAD not converged); 9: reserved; 10: END command; 11: EXIT or STOP command; 12: RETURN command. see also the possible list of all Minuit commands. ; Definition at line 2664 of file TMinuit.cxx. ◆ mnexin(). void TMinuit::mnexin ; (; Double_t * ; pint). virtual . Transforms the external parameter values U to internal values. ; Transforms the external parameter values U to internal values in the dense array PINT. ; Definition at line 3151 of file TMinuit.cxx. ◆ mnfixp(). void TMinuit::mnfixp ; (; Int_t ; iint1, . Int_t & ; ierr . ). virtual . Removes parameter IINT from the internal parameter list. ; and arranges the rest of the list to fill the hole. ; Definition at line 3169 of file TMinuit.cxx. ◆ mnfree(). void TMinuit::mnfree ; (; Int_t ; k). virtual . Restores one or more fixed parameter(s) to variable status. ; Restores one or more fixed parameter(s) to variable status by inserting it into the internal parameter list at the appropriate place. - K = 0 means restore all parameters; - K = 1 means restore the last parameter fixed; - K = -I means restore external parameter I (if possible); - IQ = fix-location where internal parameters were stored; - IR = external number of parameter being restored; - IS = internal number of parameter being restored . Definition at line 3256 of file TMinuit.cxx. ◆ mngrad(). void TMinuit::mngrad ; (; ). virtual . Interprets the SET GRAD command. ; - Called from MNSET; - Interprets the SET GRAD command, which informs MINUIT whether; - the first derivatives of FCN will be calculated by the user; - inside FCN. It can check the user derivative calculation; - by comparing it with a finite difference approximation. . Definition at line 3362 of file TMinuit.cxx. ◆ mnhelp() [1/2]. void TMinuit::mnhelp ; (; const char * ; command = """"). virtual . interface to Minuit help ; Definition at line 3422 of file TMinuit.cxx. ◆ mnhelp() [2/2]. voi",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:60595,Modifiability,variab,variable,60595," get the plot, you can do: TGraph *gr = (TGraph*)gMinuit->GetPlot();; gr->Draw(""al"");; gMinuitR__EXTERN TMinuit * gMinuitDefinition TMinuit.h:271; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TGraph::Drawvoid Draw(Option_t *chopt="""") overrideDraw this graph with its current attributes.Definition TGraph.cxx:831; TMinuit::GetPlotvirtual TObject * GetPlot() constDefinition TMinuit.h:200; grTGraphErrors * grDefinition legend1.C:25; . Definition at line 6068 of file TMinuit.cxx. ◆ mnpout(). void TMinuit::mnpout ; (; Int_t ; iuext1, . TString & ; chnam, . Double_t & ; val, . Double_t & ; err, . Double_t & ; xlolim, . Double_t & ; xuplim, . Int_t & ; iuint . ); const. virtual . Provides the user with information concerning the current status. ; of parameter number IUEXT. Namely, it returns:; CHNAM: the name of the parameter; VAL: the current (external) value of the parameter; ERR: the current estimate of the parameter uncertainty; XLOLIM: the lower bound (or zero if no limits); XUPLIM: the upper bound (or zero if no limits); IUINT: the internal parameter number (or zero if not variable, or negative if undefined). Note also: If IUEXT is negative, then it is -internal parameter number, and IUINT is returned as the EXTERNAL number. Except for IUINT, this is exactly the inverse of MNPARM User-called ; Definition at line 6247 of file TMinuit.cxx. ◆ mnprin(). void TMinuit::mnprin ; (; Int_t ; inkode, . Double_t ; fval . ). virtual . Prints the values of the parameters at the time of the call. ; also prints other relevant information such as function value, estimated distance to minimum, parameter errors, step sizes.; According to the value of IKODE, the printout is: IKODE=INKODE=; 0 only info about function value; 1 parameter values, errors, limits; 2 values, errors, step sizes, internal values; 3 values, errors, step sizes, first derivs.; 4 values, parabolic errors, MINOS errors. when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, a",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:62176,Modifiability,portab,portable,62176,"t is: IKODE=INKODE=; 0 only info about function value; 1 parameter values, errors, limits; 2 values, errors, step sizes, internal values; 3 values, errors, step sizes, first derivs.; 4 values, parabolic errors, MINOS errors. when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1] ; Definition at line 6304 of file TMinuit.cxx. ◆ mnpsdf(). void TMinuit::mnpsdf ; (; ). virtual . Calculates the eigenvalues of v to see if positive-def. ; if not, adds constant along diagonal to make positive. ; Definition at line 6494 of file TMinuit.cxx. ◆ mnrazz(). void TMinuit::mnrazz ; (; Double_t ; ynew, . Double_t * ; pnew, . Double_t * ; y, . Int_t & ; jh, . Int_t & ; jl . ). virtual . Called only by MNSIMP (and MNIMPR) to add a new point. ; and remove an old one from the current simplex, and get the estimated distance to minimum. ; Definition at line 6568 of file TMinuit.cxx. ◆ mnrn15(). void TMinuit::mnrn15 ; (; Double_t & ; val, . Int_t & ; inseed . ). virtual . This is a super-portable random number generator. ; It should not overflow on any 32-bit machine. The cycle is only ~10**9, so use with care! Note especially that VAL must not be undefined on input.; Set Default Starting Seed ; Definition at line 6619 of file TMinuit.cxx. ◆ mnrset(). void TMinuit::mnrset ; (; Int_t ; iopt). virtual . Resets function value and errors to UNDEFINED. . If IOPT=1,; If IOPT=0, sets only MINOS errors to undefined Called from MNCLER and whenever problem changes, for example after SET LIMITS, SET PARAM, CALL FCN 6 . Definition at line 6661 of file TMinuit.cxx. ◆ mnsave(). void TMinuit::mnsave ; (; ). virtual . Writes current parameter values and step sizes onto file ISYSSA. ; in format which can be reread by Minuit for restarting. The covariance matrix is also output if it exists. ; Definition at line 6695 of file TMinuit.cxx. ◆ mnscan(). void TMinuit::mnscan ; (; ). virtual . Scans the values of FCN as a function of one parameter. ; and plots the resulting values as a curve using MNP",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:65056,Modifiability,variab,variable,65056," or 'OFF', 'SUPPRESSED' or 'REPORTED ' explanation of print level numbers -1:3 and strategies 0:2 identification of debug options things that can be set or shown options not intended for normal users ; Definition at line 6913 of file TMinuit.cxx. ◆ mnsimp(). void TMinuit::mnsimp ; (; ). virtual . Minimization using the simplex method of Nelder and Mead. ; Performs a minimization using the simplex method of Nelder and Mead (ref. – Comp. J. 7,308 (1965)). ; Definition at line 7431 of file TMinuit.cxx. ◆ mnstat(). void TMinuit::mnstat ; (; Double_t & ; fmin, . Double_t & ; fedm, . Double_t & ; errdef, . Int_t & ; npari, . Int_t & ; nparx, . Int_t & ; istat . ). virtual . Returns concerning the current status of the minimization. ; User-called Namely, it returns:; FMIN: the best function value found so far; FEDM: the estimated vertical distance remaining to minimum; ERRDEF: the value of UP defining parameter uncertainties; NPARI: the number of currently variable parameters; NPARX: the highest (external) parameter number defined by user; ISTAT: a status integer indicating how good is the covariance matrix:; 0= not calculated at all; 1= approximation only, not accurate; 2= full matrix, but forced positive-definite; 3= full accurate covariance matrix . Definition at line 7638 of file TMinuit.cxx. ◆ mntiny(). void TMinuit::mntiny ; (; Double_t ; epsp1, . Double_t & ; epsbak . ). virtual . To find the machine precision. ; Compares its argument with the value 1.0, and returns the value .TRUE. if they are equal. To find EPSMAC safely by foiling the Fortran optimiser ; Definition at line 7661 of file TMinuit.cxx. ◆ mnunpt(). Bool_t TMinuit::mnunpt ; (; TString & ; cfname). Returns .TRUE. ; if CFNAME contains unprintable characters ; Definition at line 7670 of file TMinuit.cxx. ◆ mnvert(). void TMinuit::mnvert ; (; Double_t * ; a, . Int_t ; l, . Int_t ; m, . Int_t ; n, . Int_t & ; ifail . ). virtual . Inverts a symmetric matrix. ; inverts a symmetric matrix. matrix is first scal",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:4702,Performance,perform,perform,4702,"(expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if he puts limits of \((0,10^{10})\) on a parameter, then the values \(0.0\) and \(1.0\) will be indistinguishable to the accuracy of most machines.; The transformation also affects the parameter error matrix, of course, so Minuit does a transformation of the error matrix (and the `‘parabolic’' parameter errors) when there are parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\). Therefore, it is recommended that:. Limits on variable parameters should be used only when needed in order to prevent the parameter from taking on unphysical values.; When a satisfactory minimum has been found using limits, the limits should then be removed if possible, in order to perform or re-perform the error analysis without limits. How to get the right answer from MINUIT.; MINUIT offers the user a choice of several minimization algorithms. The MIGRAD algorithm is in general the best minimizer for nearly all functions. It is a variable-metric method with inexact line search, a stable metric updating scheme, and checks for positive-definiteness. Its main weakness is that it depends heavily on knowledge of the first derivatives, and fails miserably if they are very inaccurate.; If parameter limits are needed, in spite of the side effects, then the user should be aware of the following techniques to alleviate problems caused by limits:; Getting the right minimum with limits.; If MIGRAD converges normally to a point where no parameter is near one of its limits, then the existence of limits has probably not prevented MINUIT from finding the right minimum. On the other hand, if one or more parameters is near its limit at the minimum,",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:4716,Performance,perform,perform,4716,"(expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if he puts limits of \((0,10^{10})\) on a parameter, then the values \(0.0\) and \(1.0\) will be indistinguishable to the accuracy of most machines.; The transformation also affects the parameter error matrix, of course, so Minuit does a transformation of the error matrix (and the `‘parabolic’' parameter errors) when there are parameter limits. Users should however realize that the transformation is only a linear approximation, and that it cannot give a meaningful result if one or more parameters is very close to a limit, where \(\partial P_{\mathrm{ext}} / \partial P_{\mathrm{int}} \approx 0\). Therefore, it is recommended that:. Limits on variable parameters should be used only when needed in order to prevent the parameter from taking on unphysical values.; When a satisfactory minimum has been found using limits, the limits should then be removed if possible, in order to perform or re-perform the error analysis without limits. How to get the right answer from MINUIT.; MINUIT offers the user a choice of several minimization algorithms. The MIGRAD algorithm is in general the best minimizer for nearly all functions. It is a variable-metric method with inexact line search, a stable metric updating scheme, and checks for positive-definiteness. Its main weakness is that it depends heavily on knowledge of the first derivatives, and fails miserably if they are very inaccurate.; If parameter limits are needed, in spite of the side effects, then the user should be aware of the following techniques to alleviate problems caused by limits:; Getting the right minimum with limits.; If MIGRAD converges normally to a point where no parameter is near one of its limits, then the existence of limits has probably not prevented MINUIT from finding the right minimum. On the other hand, if one or more parameters is near its limit at the minimum,",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:41462,Performance,perform,performs,41462,"owerLimit, . Double_t ; upperLimit . ). virtual . Define a parameter. ; Definition at line 695 of file TMinuit.cxx. ◆ DeleteArrays(). void TMinuit::DeleteArrays ; (; ). virtual . Delete internal Minuit arrays. ; Definition at line 708 of file TMinuit.cxx. ◆ Eval(). Int_t TMinuit::Eval ; (; Int_t ; npar, . Double_t * ; grad, . Double_t & ; fval, . Double_t * ; par, . Int_t ; flag . ). virtual . Evaluate the minimisation function Input parameters: . npar: number of currently variable parameters; par: array of (constant and variable) parameters; flag: Indicates what is to be calculated (see example below); grad: array of gradients Output parameters:; fval: The calculated function value.; grad: The (optional) vector of first derivatives). The meaning of the parameters par is of course defined by the user, who uses the values of those parameters to calculate their function value. The starting values must be specified by the user. Later values are determined by Minuit as it searches for the minimum or performs whatever analysis is requested by the user.; Note that this virtual function may be redefined in a class derived from TMinuit. The default function calls the function specified in SetFCN; Example of Minimisation function: ; Reimplemented in TMVA::MinuitWrapper.; Definition at line 800 of file TMinuit.cxx. ◆ FixParameter(). Int_t TMinuit::FixParameter ; (; Int_t ; parNo). virtual . fix a parameter ; Definition at line 827 of file TMinuit.cxx. ◆ GetMaxIterations(). Int_t TMinuit::GetMaxIterations ; (; ); const. inline . Definition at line 195 of file TMinuit.h. ◆ GetMethodCall(). TMethodCall * TMinuit::GetMethodCall ; (; ); const. inline . Definition at line 193 of file TMinuit.h. ◆ GetNumFixedPars(). Int_t TMinuit::GetNumFixedPars ; (; ); const. virtual . returns the number of currently fixed parameters ; Definition at line 855 of file TMinuit.cxx. ◆ GetNumFreePars(). Int_t TMinuit::GetNumFreePars ; (; ); const. virtual . returns the number of currently free parameter",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:3233,Safety,avoid,avoided,3233,"unction defines the Minuit fitting function as being H1FitChisquare or H1FitLikelihood depending on the options selected. H1FitChisquare calculates the chisquare between the user fitting function (gaussian, polynomial, user defined,etc) and the data for given values of the parameters. It is the task of MINUIT to find those values of the parameters which give the lowest value of chisquare. Basic concepts - The transformation for parameters with limits.; For variable parameters with limits, MINUIT uses the following transformation:. \[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \]. so that the internal value \(P_{\mathrm{int}}\) can take on any value, while the external value \(P_{\mathrm{ext}}\) can take on values only between the lower limit \(a\) and the upper limit \(b\). Since the transformation is necessarily non-linear, it would transform a nice linear problem into a nasty non-linear one, which is the reason why limits should be avoided if not necessary. In addition, the transformation does require some computer time, so it slows down the computation a little bit, and more importantly, it introduces additional numerical inaccuracy into the problem in addition to what is introduced in the numerical calculation of the FCN value. The effects of non-linearity and numerical roundoff both become more important as the external value gets closer to one of the limits (expressed as the distance to nearest limit divided by distance between limits). The user must therefore be aware of the fact that, for example, if he puts limits of \((0,10^{10})\) on a parameter, then the values \(0.0\) and \(1.0\) will be indistinguishable to the accuracy of most machines.; The transformation also affects the parameter error matrix, of course, so Minuit does a transformation of the error matrix (and the `‘parabolic’' parameter errors) when there are parameter limits. U",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:10145,Safety,recover,recovers,10145,"e to one (greater than 0.99). This indicates both an exceptionally difficult problem, and one which has been badly parameterised so that individual errors are not very meaningful because they are so highly correlated.; Parameter at limit. This condition, signalled by a MINUIT warning message, may make both the function minimum and parameter errors unreliable. See the discussion above `‘Getting the right parameter errors with limits’'. The best way to be absolutely sure of the errors, is to use independent'' calculations and compare them, or compare the calculated errors with a picture of the function. Theoretically, the covariance matrix for aphysical'' function must be positive-definite at the minimum, although it may not be so for all points far away from the minimum, even for a well-determined physical problem. Therefore, if MIGRAD reports that it has found a non-positive-definite covariance matrix, this may be a sign of one or more of the following:; A non-physical region:; On its way to the minimum, MIGRAD may have traversed a region which has unphysical behaviour, which is of course not a serious problem as long as it recovers and leaves such a region.; An underdetermined problem:; If the matrix is not positive-definite even at the minimum, this may mean that the solution is not well-defined, for example that there are more unknowns than there are data points, or that the parameterisation of the fit contains a linear dependence. If this is the case, then MINUIT (or any other program) cannot solve your problem uniquely, and the error matrix will necessarily be largely meaningless, so the user must remove the under-determinedness by reformulating the parameterisation. MINUIT cannot do this itself.; Numerical inaccuracies:; It is possible that the apparent lack of positive-definiteness is in fact only due to excessive roundoff errors in numerical calculations in the user function or not enough precision. This is unlikely in general, but becomes more likely if the ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:65634,Safety,safe,safely,65634,"; fedm, . Double_t & ; errdef, . Int_t & ; npari, . Int_t & ; nparx, . Int_t & ; istat . ). virtual . Returns concerning the current status of the minimization. ; User-called Namely, it returns:; FMIN: the best function value found so far; FEDM: the estimated vertical distance remaining to minimum; ERRDEF: the value of UP defining parameter uncertainties; NPARI: the number of currently variable parameters; NPARX: the highest (external) parameter number defined by user; ISTAT: a status integer indicating how good is the covariance matrix:; 0= not calculated at all; 1= approximation only, not accurate; 2= full matrix, but forced positive-definite; 3= full accurate covariance matrix . Definition at line 7638 of file TMinuit.cxx. ◆ mntiny(). void TMinuit::mntiny ; (; Double_t ; epsp1, . Double_t & ; epsbak . ). virtual . To find the machine precision. ; Compares its argument with the value 1.0, and returns the value .TRUE. if they are equal. To find EPSMAC safely by foiling the Fortran optimiser ; Definition at line 7661 of file TMinuit.cxx. ◆ mnunpt(). Bool_t TMinuit::mnunpt ; (; TString & ; cfname). Returns .TRUE. ; if CFNAME contains unprintable characters ; Definition at line 7670 of file TMinuit.cxx. ◆ mnvert(). void TMinuit::mnvert ; (; Double_t * ; a, . Int_t ; l, . Int_t ; m, . Int_t ; n, . Int_t & ; ifail . ). virtual . Inverts a symmetric matrix. ; inverts a symmetric matrix. matrix is first scaled to have all ones on the diagonal (equivalent to change of units) but no pivoting is done since matrix is positive-definite. ; Definition at line 7696 of file TMinuit.cxx. ◆ mnwarn(). void TMinuit::mnwarn ; (; const char * ; copt1, . const char * ; corg1, . const char * ; cmes1 . ). virtual . Prints Warning messages. . If COPT='W', CMES is a WARning message from CORG.; If COPT='D', CMES is a DEBug message from CORG.; If SET WARnings is in effect (the default), this routine prints the warning message CMES coming from CORG.; If SET NOWarnings is in effect, the warning ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:24455,Security,hash,hash,24455," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:54844,Testability,log,logical,54844," free side effect, but with a smaller step size in order to obtain a known accuracy. ; Definition at line 3993 of file TMinuit.cxx. ◆ mnimpr(). void TMinuit::mnimpr ; (; ). virtual . Attempts to improve on a good local minimum. ; Attempts to improve on a good local minimum by finding a better one. The quadratic part of FCN is removed by MNCALF and this transformed function is minimised using the simplex method from several random starting points.; ref. – Goldstein and Price, Math.Comp. 25, 569 (1971) ; Definition at line 4295 of file TMinuit.cxx. ◆ mninex(). void TMinuit::mninex ; (; Double_t * ; pint). virtual . Transforms from internal coordinates (PINT) to external (U) ; The minimising routines which work in internal coordinates call this routine before calling FCN. ; Definition at line 4506 of file TMinuit.cxx. ◆ mninit(). void TMinuit::mninit ; (; Int_t ; i1, . Int_t ; i2, . Int_t ; i3 . ). virtual . Main initialization member function for MINUIT. ; It initializes some constants (including the logical I/O unit nos.), ; Definition at line 4526 of file TMinuit.cxx. ◆ mnlims(). void TMinuit::mnlims ; (; ). virtual . Interprets the SET LIM command, to reset the parameter limits. ; Called from MNSET ; Definition at line 4616 of file TMinuit.cxx. ◆ mnline(). void TMinuit::mnline ; (; Double_t * ; start, . Double_t ; fstart, . Double_t * ; step, . Double_t ; slope, . Double_t ; toler . ). virtual . Perform a line search from position START. ; along direction STEP, where the length of vector STEP gives the expected position of minimum.; FSTART is value of function at START; SLOPE (if non-zero) is df/dx along STEP at START; TOLER is initial tolerance of minimum in direction STEP. SLAMBG and ALPHA control the maximum individual steps allowed. The first step is always =1. The max length of second step is SLAMBG. The max size of subsequent steps is the maximum previous successful step multiplied by ALPHA + the size of most recent successful step, but cannot be smaller than ",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:842,Usability,simpl,simply,842,". ROOT: TMinuit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Public Attributes |; Private Member Functions |; List of all members ; TMinuit Class ReferenceMath » TMinuit. ; See alsoMinuit2 for a newer version of this package; Implementation in C++ of the Minuit package written by Fred James. This is a straightforward conversion of the original Fortran version.; The main changes are:. The variables in the various Minuit labelled common blocks have been changed to the TMinuit class data members.; The internal arrays with a maximum dimension depending on the maximum number of parameters are now data members arrays with a dynamic dimension such that one can fit very large problems by simply initialising the TMinuit constructor with the maximum number of parameters.; The include file Minuit.h has been commented as much as possible using existing comments in the code or the printed documentation; The original Minuit subroutines are now member functions.; Constructors and destructor have been added.; Instead of passing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer.; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file.; The functions SetObjectFit(TObject * obj)/GetObjectFit() can be used inside the FCN function to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The val",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:2081,Usability,simpl,simple,2081,"sing the FCN function in the argument list, the addresses of this function is stored as pointer in the data members of the class. This is by far more elegant and flexible in an interactive environment. The member function SetFCN can be used to define this pointer.; The ROOT static function Printf is provided to replace all format statements and to print on currently defined output file.; The functions SetObjectFit(TObject * obj)/GetObjectFit() can be used inside the FCN function to set/get a referenced object instead of using global variables. Basic concepts of MINUIT; The MINUIT package acts on a multiparameter Fortran function to which one must give the generic name FCN. In the ROOT implementation, the function FCN is defined via the MINUIT SetFCN member function when an Histogram.Fit command is invoked. The value of FCN will in general depend on one or more variable parameters.; To take a simple example, in case of ROOT histograms (classes TH1C,TH1S,TH1F,TH1D) the Fit function defines the Minuit fitting function as being H1FitChisquare or H1FitLikelihood depending on the options selected. H1FitChisquare calculates the chisquare between the user fitting function (gaussian, polynomial, user defined,etc) and the data for given values of the parameters. It is the task of MINUIT to find those values of the parameters which give the lowest value of chisquare. Basic concepts - The transformation for parameters with limits.; For variable parameters with limits, MINUIT uses the following transformation:. \[; P_{\mathrm{int}} = \arcsin; \left( 2\: \frac{P_{\mathrm{ext}}-a}{b-a} - 1 \right); P_{\mathrm{ext}} = a + \frac{b - a}{2} \left( \sin P_{\mathrm{int}} + 1 \right); \]. so that the internal value \(P_{\mathrm{int}}\) can take on any value, while the external value \(P_{\mathrm{ext}}\) can take on values only between the lower limit \(a\) and the upper limit \(b\). Since the transformation is necessarily non-linear, it would transform a nice linear problem into a nasty n",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:22200,Usability,simpl,simplex,22200," with information concerning the current status. ;  ; virtual void mnprin (Int_t inkode, Double_t fval);  Prints the values of the parameters at the time of the call. ;  ; virtual void mnpsdf ();  Calculates the eigenvalues of v to see if positive-def. ;  ; virtual void mnrazz (Double_t ynew, Double_t *pnew, Double_t *y, Int_t &jh, Int_t &jl);  Called only by MNSIMP (and MNIMPR) to add a new point. ;  ; virtual void mnrn15 (Double_t &val, Int_t &inseed);  This is a super-portable random number generator. ;  ; virtual void mnrset (Int_t iopt);  Resets function value and errors to UNDEFINED. ;  ; virtual void mnsave ();  Writes current parameter values and step sizes onto file ISYSSA. ;  ; virtual void mnscan ();  Scans the values of FCN as a function of one parameter. ;  ; virtual void mnseek ();  Performs a rough (but global) minimization by monte carlo search. ;  ; virtual void mnset ();  Interprets the commands that start with SET and SHOW. ;  ; virtual void mnsimp ();  Minimization using the simplex method of Nelder and Mead. ;  ; virtual void mnstat (Double_t &fmin, Double_t &fedm, Double_t &errdef, Int_t &npari, Int_t &nparx, Int_t &istat);  Returns concerning the current status of the minimization. ;  ; virtual void mntiny (Double_t epsp1, Double_t &epsbak);  To find the machine precision. ;  ; Bool_t mnunpt (TString &cfname);  Returns .TRUE. ;  ; virtual void mnvert (Double_t *a, Int_t l, Int_t m, Int_t n, Int_t &ifail);  Inverts a symmetric matrix. ;  ; virtual void mnwarn (const char *copt, const char *corg, const char *cmes);  Prints Warning messages. ;  ; virtual void mnwerr ();  Calculates the WERR, external parameter errors. ;  ; virtual Int_t Release (Int_t parNo);  release a parameter ;  ; virtual Int_t SetErrorDef (Double_t up);  To get the n-sigma contour the error def parameter ""up"" has to set to n^2. ;  ; virtual void SetFCN (void(*fcn)(Int_t &, Double_t *, Double_t &f, Double_t *, Int_t));  To set the address of the minimization function. ;  ; vi",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:54229,Usability,simpl,simplex,54229,"Brun comments extracted from the MINUIT documentation file. . Definition at line 3439 of file TMinuit.cxx. ◆ mnhes1(). void TMinuit::mnhes1 ; (; ). virtual . Calculate first derivatives (GRD) and uncertainties (DGRD) ; and appropriate step sizes GSTEP Called from MNHESS and MNGRAD ; Definition at line 4218 of file TMinuit.cxx. ◆ mnhess(). void TMinuit::mnhess ; (; ). virtual . Calculates the full second-derivative matrix of FCN. ; by taking finite differences. When calculating diagonal elements, it may iterate so that step size is nearly that which gives function change= UP/10. The first derivatives of course come as a free side effect, but with a smaller step size in order to obtain a known accuracy. ; Definition at line 3993 of file TMinuit.cxx. ◆ mnimpr(). void TMinuit::mnimpr ; (; ). virtual . Attempts to improve on a good local minimum. ; Attempts to improve on a good local minimum by finding a better one. The quadratic part of FCN is removed by MNCALF and this transformed function is minimised using the simplex method from several random starting points.; ref. – Goldstein and Price, Math.Comp. 25, 569 (1971) ; Definition at line 4295 of file TMinuit.cxx. ◆ mninex(). void TMinuit::mninex ; (; Double_t * ; pint). virtual . Transforms from internal coordinates (PINT) to external (U) ; The minimising routines which work in internal coordinates call this routine before calling FCN. ; Definition at line 4506 of file TMinuit.cxx. ◆ mninit(). void TMinuit::mninit ; (; Int_t ; i1, . Int_t ; i2, . Int_t ; i3 . ). virtual . Main initialization member function for MINUIT. ; It initializes some constants (including the logical I/O unit nos.), ; Definition at line 4526 of file TMinuit.cxx. ◆ mnlims(). void TMinuit::mnlims ; (; ). virtual . Interprets the SET LIM command, to reset the parameter limits. ; Called from MNSET ; Definition at line 4616 of file TMinuit.cxx. ◆ mnline(). void TMinuit::mnline ; (; Double_t * ; start, . Double_t ; fstart, . Double_t * ; step, . Double",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:61971,Usability,simpl,simplex,61971,"e parameters at the time of the call. ; also prints other relevant information such as function value, estimated distance to minimum, parameter errors, step sizes.; According to the value of IKODE, the printout is: IKODE=INKODE=; 0 only info about function value; 1 parameter values, errors, limits; 2 values, errors, step sizes, internal values; 3 values, errors, step sizes, first derivs.; 4 values, parabolic errors, MINOS errors. when INKODE=5, MNPRIN chooses IKODE=1,2, or 3, according to fISW[1] ; Definition at line 6304 of file TMinuit.cxx. ◆ mnpsdf(). void TMinuit::mnpsdf ; (; ). virtual . Calculates the eigenvalues of v to see if positive-def. ; if not, adds constant along diagonal to make positive. ; Definition at line 6494 of file TMinuit.cxx. ◆ mnrazz(). void TMinuit::mnrazz ; (; Double_t ; ynew, . Double_t * ; pnew, . Double_t * ; y, . Int_t & ; jh, . Int_t & ; jl . ). virtual . Called only by MNSIMP (and MNIMPR) to add a new point. ; and remove an old one from the current simplex, and get the estimated distance to minimum. ; Definition at line 6568 of file TMinuit.cxx. ◆ mnrn15(). void TMinuit::mnrn15 ; (; Double_t & ; val, . Int_t & ; inseed . ). virtual . This is a super-portable random number generator. ; It should not overflow on any 32-bit machine. The cycle is only ~10**9, so use with care! Note especially that VAL must not be undefined on input.; Set Default Starting Seed ; Definition at line 6619 of file TMinuit.cxx. ◆ mnrset(). void TMinuit::mnrset ; (; Int_t ; iopt). virtual . Resets function value and errors to UNDEFINED. . If IOPT=1,; If IOPT=0, sets only MINOS errors to undefined Called from MNCLER and whenever problem changes, for example after SET LIMITS, SET PARAM, CALL FCN 6 . Definition at line 6661 of file TMinuit.cxx. ◆ mnsave(). void TMinuit::mnsave ; (; ). virtual . Writes current parameter values and step sizes onto file ISYSSA. ; in format which can be reread by Minuit for restarting. The covariance matrix is also output if it exists.",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:64413,Usability,simpl,simplex,64413,"ut global) minimization by monte carlo search. ; Each time a new minimum is found, the search area is shifted to be centered at the best value. Random points are chosen uniformly over a hypercube determined by current step sizes. The Metropolis algorithm accepts a worse point with probability exp(-d/UP), where d is the degradation. Improved points are of course always accepted. Actual steps are random multiples of the nominal steps (DIRIN). ; Definition at line 6818 of file TMinuit.cxx. ◆ mnset(). void TMinuit::mnset ; (; ). virtual . Interprets the commands that start with SET and SHOW. ; Called from MNEXCM file characteristics for SET INPUT 'SET ' or 'SHOW', 'ON ' or 'OFF', 'SUPPRESSED' or 'REPORTED ' explanation of print level numbers -1:3 and strategies 0:2 identification of debug options things that can be set or shown options not intended for normal users ; Definition at line 6913 of file TMinuit.cxx. ◆ mnsimp(). void TMinuit::mnsimp ; (; ). virtual . Minimization using the simplex method of Nelder and Mead. ; Performs a minimization using the simplex method of Nelder and Mead (ref. – Comp. J. 7,308 (1965)). ; Definition at line 7431 of file TMinuit.cxx. ◆ mnstat(). void TMinuit::mnstat ; (; Double_t & ; fmin, . Double_t & ; fedm, . Double_t & ; errdef, . Int_t & ; npari, . Int_t & ; nparx, . Int_t & ; istat . ). virtual . Returns concerning the current status of the minimization. ; User-called Namely, it returns:; FMIN: the best function value found so far; FEDM: the estimated vertical distance remaining to minimum; ERRDEF: the value of UP defining parameter uncertainties; NPARI: the number of currently variable parameters; NPARX: the highest (external) parameter number defined by user; ISTAT: a status integer indicating how good is the covariance matrix:; 0= not calculated at all; 1= approximation only, not accurate; 2= full matrix, but forced positive-definite; 3= full accurate covariance matrix . Definition at line 7638 of file TMinuit.cxx. ◆ mntiny(). voi",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit.html:64484,Usability,simpl,simplex,64484,"nimum is found, the search area is shifted to be centered at the best value. Random points are chosen uniformly over a hypercube determined by current step sizes. The Metropolis algorithm accepts a worse point with probability exp(-d/UP), where d is the degradation. Improved points are of course always accepted. Actual steps are random multiples of the nominal steps (DIRIN). ; Definition at line 6818 of file TMinuit.cxx. ◆ mnset(). void TMinuit::mnset ; (; ). virtual . Interprets the commands that start with SET and SHOW. ; Called from MNEXCM file characteristics for SET INPUT 'SET ' or 'SHOW', 'ON ' or 'OFF', 'SUPPRESSED' or 'REPORTED ' explanation of print level numbers -1:3 and strategies 0:2 identification of debug options things that can be set or shown options not intended for normal users ; Definition at line 6913 of file TMinuit.cxx. ◆ mnsimp(). void TMinuit::mnsimp ; (; ). virtual . Minimization using the simplex method of Nelder and Mead. ; Performs a minimization using the simplex method of Nelder and Mead (ref. – Comp. J. 7,308 (1965)). ; Definition at line 7431 of file TMinuit.cxx. ◆ mnstat(). void TMinuit::mnstat ; (; Double_t & ; fmin, . Double_t & ; fedm, . Double_t & ; errdef, . Int_t & ; npari, . Int_t & ; nparx, . Int_t & ; istat . ). virtual . Returns concerning the current status of the minimization. ; User-called Namely, it returns:; FMIN: the best function value found so far; FEDM: the estimated vertical distance remaining to minimum; ERRDEF: the value of UP defining parameter uncertainties; NPARI: the number of currently variable parameters; NPARX: the highest (external) parameter number defined by user; ISTAT: a status integer indicating how good is the covariance matrix:; 0= not calculated at all; 1= approximation only, not accurate; 2= full matrix, but forced positive-definite; 3= full accurate covariance matrix . Definition at line 7638 of file TMinuit.cxx. ◆ mntiny(). void TMinuit::mntiny ; (; Double_t ; epsp1, . Double_t & ; epsbak . ).",MatchSource.WIKI,doc/master/classTMinuit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:4257,Availability,error,error,4257,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:4346,Availability,error,error,4346,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:4501,Availability,error,error,4501,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:4798,Availability,error,error,4798,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:8882,Availability,error,error,8882,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:4263,Integrability,message,message,4263,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:4804,Integrability,message,message,4804,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:5794,Integrability,message,message,5794,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:8888,Integrability,message,message,8888,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:9261,Integrability,message,message,9261," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:808,Modifiability,inherit,inherited,808,". ROOT: TMinuit2TraceObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMinuit2TraceObject Class Reference. . Definition at line 30 of file TMinuit2TraceObject.h. Public Member Functions;  TMinuit2TraceObject (int parNumber=-1);  ;  ~TMinuit2TraceObject () override;  ; void Init (const ROOT::Minuit2::MnUserParameterState &state) override;  ; TClass * IsA () const override;  ; void operator() (int i, const ROOT::Minuit2::MinimumState &state) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Minuit2::MnTraceObject;  MnTraceObject (int parNumber=-1);  ; virtual ~MnTraceObject ();  ; int ParNumber () const;  ; void SetParNumber (int number);  ; const MnUserParameterState & UserState () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:1060,Modifiability,inherit,inherited,1060,". ROOT: TMinuit2TraceObject Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMinuit2TraceObject Class Reference. . Definition at line 30 of file TMinuit2TraceObject.h. Public Member Functions;  TMinuit2TraceObject (int parNumber=-1);  ;  ~TMinuit2TraceObject () override;  ; void Init (const ROOT::Minuit2::MnUserParameterState &state) override;  ; TClass * IsA () const override;  ; void operator() (int i, const ROOT::Minuit2::MinimumState &state) override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from ROOT::Minuit2::MnTraceObject;  MnTraceObject (int parNumber=-1);  ; virtual ~MnTraceObject ();  ; int ParNumber () const;  ; void SetParNumber (int number);  ; const MnUserParameterState & UserState () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:2800,Modifiability,inherit,inherited,2800,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:3893,Modifiability,inherit,inheritance,3893,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:5892,Modifiability,inherit,inherits,5892,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:6009,Modifiability,inherit,inherits,6009,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:9762,Modifiability,inherit,inherited,9762,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TH1 * fHistoEdm;  ; TH1 * fHistoFval;  ; TList * fHistoParList;  ; int fIterOffset;  ; TVirtualPad * fMinuitPad;  ; TVirtualPad * fOldPad;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 ));",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:9972,Modifiability,inherit,inherited,9972,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TH1 * fHistoEdm;  ; TH1 * fHistoFval;  ; TList * fHistoParList;  ; int fIterOffset;  ; TVirtualPad * fMinuitPad;  ; TVirtualPad * fOldPad;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 ));",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:10664,Modifiability,inherit,inherited,10664,"  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TH1 * fHistoEdm;  ; TH1 * fHistoFval;  ; TList * fHistoParList;  ; int fIterOffset;  ; TVirtualPad * fMinuitPad;  ; TVirtualPad * fOldPad;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMinuit2TraceObject.h>. Inheritance diagram for ",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:11305,Modifiability,inherit,inherited,11305,"g of objects in the TObjectTable. ;  . Private Attributes; TH1 * fHistoEdm;  ; TH1 * fHistoFval;  ; TList * fHistoParList;  ; int fIterOffset;  ; TVirtualPad * fMinuitPad;  ; TVirtualPad * fOldPad;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMinuit2TraceObject.h>. Inheritance diagram for TMinuit2TraceObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMinuit2TraceObject(). TMinuit2TraceObject::TMinuit2TraceObject ; (; int ; parNumber = -1). Definition at line 19 of file TMinuit2TraceObject.cxx. ◆ ~TMinuit2TraceObject(). TMinuit2TraceObject::~TMinuit2TraceObject ; (; ). override . Definition at line 25 of file TMinuit2TraceObject.cxx. Member Function Documentation. ◆ Class(). static TClass * TMinuit2TraceObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMinuit2TraceObject::Class_Name ; (; ). static . ReturnsName of this",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:11404,Modifiability,inherit,inherited,11404,"g of objects in the TObjectTable. ;  . Private Attributes; TH1 * fHistoEdm;  ; TH1 * fHistoFval;  ; TList * fHistoParList;  ; int fIterOffset;  ; TVirtualPad * fMinuitPad;  ; TVirtualPad * fOldPad;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMinuit2TraceObject.h>. Inheritance diagram for TMinuit2TraceObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMinuit2TraceObject(). TMinuit2TraceObject::TMinuit2TraceObject ; (; int ; parNumber = -1). Definition at line 19 of file TMinuit2TraceObject.cxx. ◆ ~TMinuit2TraceObject(). TMinuit2TraceObject::~TMinuit2TraceObject ; (; ). override . Definition at line 25 of file TMinuit2TraceObject.cxx. Member Function Documentation. ◆ Class(). static TClass * TMinuit2TraceObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMinuit2TraceObject::Class_Name ; (; ). static . ReturnsName of this",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:11609,Modifiability,inherit,inherited,11609,"ad;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TMinuit2TraceObject.h>. Inheritance diagram for TMinuit2TraceObject:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMinuit2TraceObject(). TMinuit2TraceObject::TMinuit2TraceObject ; (; int ; parNumber = -1). Definition at line 19 of file TMinuit2TraceObject.cxx. ◆ ~TMinuit2TraceObject(). TMinuit2TraceObject::~TMinuit2TraceObject ; (; ). override . Definition at line 25 of file TMinuit2TraceObject.cxx. Member Function Documentation. ◆ Class(). static TClass * TMinuit2TraceObject::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMinuit2TraceObject::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMinuit2TraceObject::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 41 of file TMinuit2Tr",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuit2TraceObject.html:1928,Security,hash,hash,1928," ; int ParNumber () const;  ; void SetParNumber (int number);  ; const MnUserParameterState & UserState () const;  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMinuit2TraceObject.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuit2TraceObject.html
https://root.cern/doc/master/classTMinuitMinimizer.html:1704,Availability,error,errors,1704,"ug-in with name Minuit2 Minimization Library or TMinuit). In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex) ; Definition at line 51 of file TMinuitMinimizer.h. Public Member Functions;  TMinuitMinimizer (const char *type, unsigned int ndim=0);  Constructor from a char * (used by PM) ;  ;  TMinuitMinimizer (ROOT::Minuit::EMinimizerType type=ROOT::Minuit::kMigrad, unsigned int ndim=0);  Default constructor. ;  ;  ~TMinuitMinimizer () override;  Destructor (no operations) ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:1931,Availability,error,errors,1931,"ug-in with name Minuit2 Minimization Library or TMinuit). In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex) ; Definition at line 51 of file TMinuitMinimizer.h. Public Member Functions;  TMinuitMinimizer (const char *type, unsigned int ndim=0);  Constructor from a char * (used by PM) ;  ;  TMinuitMinimizer (ROOT::Minuit::EMinimizerType type=ROOT::Minuit::kMigrad, unsigned int ndim=0);  Default constructor. ;  ;  ~TMinuitMinimizer () override;  Destructor (no operations) ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:2575,Availability,error,error,2575,"dm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit::ParameterSettings &) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; double GlobalCC (unsigned int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:2978,Availability,error,error,2978,"dm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit::ParameterSettings &) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; double GlobalCC (unsigned int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:4156,Availability,error,error,4156,"onst override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void PrintResults () override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool ReleaseVariable (unsigned int) override;  release an existing variable ;  ; bool Scan (unsigned int i, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0) override;  scan a parameter i around the minimum. ;  ; bool SetDebug (bool on=true);  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVa",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:4166,Availability,error,error,4166,"onst override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void PrintResults () override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool ReleaseVariable (unsigned int) override;  release an existing variable ;  ; bool Scan (unsigned int i, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0) override;  scan a parameter i around the minimum. ;  ; bool SetDebug (bool on=true);  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVa",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:7228,Availability,error,error,7228," with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string VariableName (unsigned int ivar) const override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial co",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:7378,Availability,error,error,7378,":string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string VariableName (unsigned int ivar) const override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivat",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:8491,Availability,error,errors,8491,"const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:9404,Availability,toler,tolerance,9404,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool UseStaticMinuit (bool ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:9503,Availability,error,error,9503,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool UseStaticMinuit (bool ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:10146,Availability,toler,tolerance,10146,"void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool UseStaticMinuit (bool on=true);  static function to switch on/off usage of static global TMinuit instance (gMinuit) By default it is used (i.e. ;  . Protected Member Functions; bool CheckMinuitInstance () const;  check TMinuit instance ;  ; bool CheckVarIndex (unsigned int ivar) const;  check parameter ;  ; void DoClear ();  reset ;  ; void DoReleaseFixParameter (int ivar);  release a parameter that is fixed when it is redefined ;  ; void InitTMinuit (int ndim);  initialize the TMinuit instance ;  ; void RetrieveErrorMatrix ();  retrieve error matrix from TMinuit ;  ; void RetrieveParams ();  retrieve minimum param",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:10904,Availability,error,error,10904," VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool UseStaticMinuit (bool on=true);  static function to switch on/off usage of static global TMinuit instance (gMinuit) By default it is used (i.e. ;  . Protected Member Functions; bool CheckMinuitInstance () const;  check TMinuit instance ;  ; bool CheckVarIndex (unsigned int ivar) const;  check parameter ;  ; void DoClear ();  reset ;  ; void DoReleaseFixParameter (int ivar);  release a parameter that is fixed when it is redefined ;  ; void InitTMinuit (int ndim);  initialize the TMinuit instance ;  ; void RetrieveErrorMatrix ();  retrieve error matrix from TMinuit ;  ; void RetrieveParams ();  retrieve minimum parameters and errors from TMinuit ;  . Static Protected Member Functions; static void Fcn (int &, double *, double &f, double *, int);  implementation of FCN for Minuit ;  ; static void FcnGrad (int &, double *g, double &f, double *, int);  implementation of FCN for Minuit when user provided gradient is used ;  . Private Attributes; std::vector< double > fCovar;  ; unsigned int fDim;  ; std::vector< double > fErrors;  ; bool fMinosRun;  ; int fMinosStatus = -1;  ; TMinuit * fMinuit;  ; std::vector< double > fParams;  ; ROOT::Minuit::EMinimizerType fType;  ; bool fUsed;  . Static Private Attributes; static TMinuit * fgMinuit = nullptr;  ; static bool fgUsed = false;  ; static bool fgUseStaticMinuit = true;  . Additional Inherited Members;  Protected Attributes inherited from",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:10992,Availability,error,errors,10992," VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool UseStaticMinuit (bool on=true);  static function to switch on/off usage of static global TMinuit instance (gMinuit) By default it is used (i.e. ;  . Protected Member Functions; bool CheckMinuitInstance () const;  check TMinuit instance ;  ; bool CheckVarIndex (unsigned int ivar) const;  check parameter ;  ; void DoClear ();  reset ;  ; void DoReleaseFixParameter (int ivar);  release a parameter that is fixed when it is redefined ;  ; void InitTMinuit (int ndim);  initialize the TMinuit instance ;  ; void RetrieveErrorMatrix ();  retrieve error matrix from TMinuit ;  ; void RetrieveParams ();  retrieve minimum parameters and errors from TMinuit ;  . Static Protected Member Functions; static void Fcn (int &, double *, double &f, double *, int);  implementation of FCN for Minuit ;  ; static void FcnGrad (int &, double *g, double &f, double *, int);  implementation of FCN for Minuit when user provided gradient is used ;  . Private Attributes; std::vector< double > fCovar;  ; unsigned int fDim;  ; std::vector< double > fErrors;  ; bool fMinosRun;  ; int fMinosStatus = -1;  ; TMinuit * fMinuit;  ; std::vector< double > fParams;  ; ROOT::Minuit::EMinimizerType fType;  ; bool fUsed;  . Static Private Attributes; static TMinuit * fgMinuit = nullptr;  ; static bool fgUsed = false;  ; static bool fgUseStaticMinuit = true;  . Additional Inherited Members;  Protected Attributes inherited from",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:11927,Availability,error,errors,11927,"nuit instance ;  ; void RetrieveErrorMatrix ();  retrieve error matrix from TMinuit ;  ; void RetrieveParams ();  retrieve minimum parameters and errors from TMinuit ;  . Static Protected Member Functions; static void Fcn (int &, double *, double &f, double *, int);  implementation of FCN for Minuit ;  ; static void FcnGrad (int &, double *g, double &f, double *, int);  implementation of FCN for Minuit when user provided gradient is used ;  . Private Attributes; std::vector< double > fCovar;  ; unsigned int fDim;  ; std::vector< double > fErrors;  ; bool fMinosRun;  ; int fMinosStatus = -1;  ; TMinuit * fMinuit;  ; std::vector< double > fParams;  ; ROOT::Minuit::EMinimizerType fType;  ; bool fUsed;  . Static Private Attributes; static TMinuit * fgMinuit = nullptr;  ; static bool fgUsed = false;  ; static bool fgUseStaticMinuit = true;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <TMinuitMinimizer.h>. Inheritance diagram for TMinuitMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMinuitMinimizer() [1/2]. TMinuitMinimizer::TMinuitMinimizer ; (; ROOT::Minuit::EMinimizerType ; type = ROOT::Minuit::kMigrad, . unsigned int ; ndim = 0 . ). Default constructor. ; Definition at line 57 of file TMinuitMinimizer.cxx. ◆ TMinuitMinimizer() [2/2]. TMinuitMinimizer::TMinuitMinimizer ; (; const char * ; type, . unsigned int ; ndim = 0 . ). Constructor from a char * (used by PM) ; Definition at line 73 of file TMinuitMinimizer.cxx. ◆ ~TMinuitMinimizer(). TMinuitMinimizer::~TMinuitMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 101 of file TMinuitMinimizer.cxx. Member Function Documentation.",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:14285,Availability,error,errors,14285," (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMinuitMinimizer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMinuitMinimizer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 272 of file TMinuitMinimizer.h. ◆ Contour(). bool TMinuitMinimizer::Contour ; (; unsigned int ; i, . unsigned int ; j, . unsigned int & ; npoints, . double * ; xi, . double * ; xj . ). overridevirtual . find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 884 of file TMinuitMinimizer.cxx. ◆ CovMatrix(). double TMinuitMinimizer::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. inlineoverridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 146 of file TMinuitMinimizer.h. ◆ CovMatrixStatus(). int TMinuitMinimizer::CovMatrixStatus ; (; ); const. overridevirtual . return status of covariance matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 721 of file TMinuitMinimizer.cxx. ◆ DeclFileName(). static const char * TMinuitMinimizer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 272 of file TMinuitMinimizer.h. ◆ DoClear(). void TMinuitMinimizer::DoClear ; (; ). protected . reset ; Definition at line 826 of file TMinuitMinimizer.cxx. ◆ DoReleaseFixParameter(). void TMinuitMinimizer::DoReleaseFixParameter ; (; int ; ivar). protected . release a parameter that is fixed when it is redefined ; Definition at line 841 of file TMinuitMinimizer.cxx. ◆ Edm(). double TMinuitMinimizer::Edm ; (; ); const. overridevirtual . return expected distanc",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:15469,Availability,error,errors,15469,"covariance matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 721 of file TMinuitMinimizer.cxx. ◆ DeclFileName(). static const char * TMinuitMinimizer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 272 of file TMinuitMinimizer.h. ◆ DoClear(). void TMinuitMinimizer::DoClear ; (; ). protected . reset ; Definition at line 826 of file TMinuitMinimizer.cxx. ◆ DoReleaseFixParameter(). void TMinuitMinimizer::DoReleaseFixParameter ; (; int ; ivar). protected . release a parameter that is fixed when it is redefined ; Definition at line 841 of file TMinuitMinimizer.cxx. ◆ Edm(). double TMinuitMinimizer::Edm ; (; ); const. overridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 654 of file TMinuitMinimizer.cxx. ◆ Errors(). const double * TMinuitMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 140 of file TMinuitMinimizer.h. ◆ Fcn(). void TMinuitMinimizer::Fcn ; (; int & ; , . double * ; , . double & ; f, . double * ; x, . int ;  . ). staticprotected . implementation of FCN for Minuit ; Definition at line 224 of file TMinuitMinimizer.cxx. ◆ FcnGrad(). void TMinuitMinimizer::FcnGrad ; (; int & ; , . double * ; g, . double & ; f, . double * ; x, . int ; iflag . ). staticprotected . implementation of FCN for Minuit when user provided gradient is used ; Definition at line 230 of file TMinuitMinimizer.cxx. ◆ FixVariable(). bool TMinuitMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 388 of file TMinuitMinimizer.cxx. ◆ GetCovMatrix(). bool TMinuitMinimizer::GetCovMatrix ; (; double * ; cov); const. overridevirtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:16600,Availability,error,errors,16600,"e TMinuitMinimizer.h. ◆ Fcn(). void TMinuitMinimizer::Fcn ; (; int & ; , . double * ; , . double & ; f, . double * ; x, . int ;  . ). staticprotected . implementation of FCN for Minuit ; Definition at line 224 of file TMinuitMinimizer.cxx. ◆ FcnGrad(). void TMinuitMinimizer::FcnGrad ; (; int & ; , . double * ; g, . double & ; f, . double * ; x, . int ; iflag . ). staticprotected . implementation of FCN for Minuit when user provided gradient is used ; Definition at line 230 of file TMinuitMinimizer.cxx. ◆ FixVariable(). bool TMinuitMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 388 of file TMinuitMinimizer.cxx. ◆ GetCovMatrix(). bool TMinuitMinimizer::GetCovMatrix ; (; double * ; cov); const. overridevirtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ; The array will be filled as cov[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 670 of file TMinuitMinimizer.cxx. ◆ GetHessianMatrix(). bool TMinuitMinimizer::GetHessianMatrix ; (; double * ; h); const. overridevirtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 682 of file TMinuitMinimizer.cxx. ◆ GetMinosError(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:17494,Availability,error,error,17494,"v[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 670 of file TMinuitMinimizer.cxx. ◆ GetHessianMatrix(). bool TMinuitMinimizer::GetHessianMatrix ; (; double * ; h); const. overridevirtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 682 of file TMinuitMinimizer.cxx. ◆ GetMinosError(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 746 of file TMinuitMinimizer.cxx. ◆ GetVariableSettings(). bool TMinuitMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; var . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 411 of file TMinuitMinimizer.cxx. ◆ GlobalCC(). double TMinuitMinimizer::GlobalCC ; (; unsigned int ; i); const. overridevirtual . global correlation coefficient for variable i ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 734 of file TMinuitMinimizer.cxx. ◆ Hesse(). bool TMinuitMinimizer::Hesse ; (; ). overridevirtual . perform a full calculation of the Hessian matrix for error calculation ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 1004 of file TMinuitMinimizer.cxx. ◆ InitTMinuit(). void TMinuitMinimizer::InitTMinuit ; (; int ; ndim). protected .",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:18340,Availability,error,error,18340,"Error(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 746 of file TMinuitMinimizer.cxx. ◆ GetVariableSettings(). bool TMinuitMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; var . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 411 of file TMinuitMinimizer.cxx. ◆ GlobalCC(). double TMinuitMinimizer::GlobalCC ; (; unsigned int ; i); const. overridevirtual . global correlation coefficient for variable i ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 734 of file TMinuitMinimizer.cxx. ◆ Hesse(). bool TMinuitMinimizer::Hesse ; (; ). overridevirtual . perform a full calculation of the Hessian matrix for error calculation ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 1004 of file TMinuitMinimizer.cxx. ◆ InitTMinuit(). void TMinuitMinimizer::InitTMinuit ; (; int ; ndim). protected . initialize the TMinuit instance ; Definition at line 117 of file TMinuitMinimizer.cxx. ◆ IsA(). virtual TClass * TMinuitMinimizer::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 272 of file TMinuitMinimizer.h. ◆ IsFixedVariable(). bool TMinuitMinimizer::IsFixedVariable ; (; unsigned int ; ivar); const. overridevirtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 404 of file TMinuitMinimizer.cxx. ◆ MinGradient(). const double * TMinuitMinimizer::MinGradient ; (; ); const. inlineoverridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Defi",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:21416,Availability,error,error,21416,"rtual . this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ; Implements ROOT::Math::Minimizer.; Definition at line 130 of file TMinuitMinimizer.h. ◆ NFree(). unsigned int TMinuitMinimizer::NFree ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 663 of file TMinuitMinimizer.cxx. ◆ PrintResults(). void TMinuitMinimizer::PrintResults ; (; ). overridevirtual . return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ; print the result according to set level (implemented for TMinuit for maintaining Minuit-style printing) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 862 of file TMinuitMinimizer.cxx. ◆ ProvidesError(). bool TMinuitMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 137 of file TMinuitMinimizer.h. ◆ ReleaseVariable(). bool TMinuitMinimizer::ReleaseVariable ; (; unsigned int ; ivar). overridevirtual . release an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 396 of file TMinuitMinimizer.cxx. ◆ RetrieveErrorMatrix(). void TMinuitMinimizer::RetrieveErrorMatrix ; (; ). protected . retrieve error matrix from TMinuit ; Definition at line 601 of file TMinuitMinimizer.cxx. ◆ RetrieveParams(). void TMinuitMinimizer::RetrieveParams ; (; ). protected . retrieve minimum parameters and errors from TMinuit ; Definition at line 587 of file TMinuitMinimizer.cxx. ◆ Scan(). bool TMinuitMinimizer::Scan ; (; unsigned int ; i, . unsigned int & ; nstep, . double * ; x, . double * ; y, . double ; xmin = 0, . double ; xmax = 0 . ). overridevirtual . scan a parameter i around the minimum. ; A minimization must have been done before, return false if it is not the case ; Reimp",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:21426,Availability,error,error,21426,"rtual . this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ; Implements ROOT::Math::Minimizer.; Definition at line 130 of file TMinuitMinimizer.h. ◆ NFree(). unsigned int TMinuitMinimizer::NFree ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 663 of file TMinuitMinimizer.cxx. ◆ PrintResults(). void TMinuitMinimizer::PrintResults ; (; ). overridevirtual . return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ; print the result according to set level (implemented for TMinuit for maintaining Minuit-style printing) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 862 of file TMinuitMinimizer.cxx. ◆ ProvidesError(). bool TMinuitMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 137 of file TMinuitMinimizer.h. ◆ ReleaseVariable(). bool TMinuitMinimizer::ReleaseVariable ; (; unsigned int ; ivar). overridevirtual . release an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 396 of file TMinuitMinimizer.cxx. ◆ RetrieveErrorMatrix(). void TMinuitMinimizer::RetrieveErrorMatrix ; (; ). protected . retrieve error matrix from TMinuit ; Definition at line 601 of file TMinuitMinimizer.cxx. ◆ RetrieveParams(). void TMinuitMinimizer::RetrieveParams ; (; ). protected . retrieve minimum parameters and errors from TMinuit ; Definition at line 587 of file TMinuitMinimizer.cxx. ◆ Scan(). bool TMinuitMinimizer::Scan ; (; unsigned int ; i, . unsigned int & ; nstep, . double * ; x, . double * ; y, . double ; xmin = 0, . double ; xmax = 0 . ). overridevirtual . scan a parameter i around the minimum. ; A minimization must have been done before, return false if it is not the case ; Reimp",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:21864,Availability,error,error,21864,"Minimizer.cxx. ◆ PrintResults(). void TMinuitMinimizer::PrintResults ; (; ). overridevirtual . return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ; print the result according to set level (implemented for TMinuit for maintaining Minuit-style printing) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 862 of file TMinuitMinimizer.cxx. ◆ ProvidesError(). bool TMinuitMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 137 of file TMinuitMinimizer.h. ◆ ReleaseVariable(). bool TMinuitMinimizer::ReleaseVariable ; (; unsigned int ; ivar). overridevirtual . release an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 396 of file TMinuitMinimizer.cxx. ◆ RetrieveErrorMatrix(). void TMinuitMinimizer::RetrieveErrorMatrix ; (; ). protected . retrieve error matrix from TMinuit ; Definition at line 601 of file TMinuitMinimizer.cxx. ◆ RetrieveParams(). void TMinuitMinimizer::RetrieveParams ; (; ). protected . retrieve minimum parameters and errors from TMinuit ; Definition at line 587 of file TMinuitMinimizer.cxx. ◆ Scan(). bool TMinuitMinimizer::Scan ; (; unsigned int ; i, . unsigned int & ; nstep, . double * ; x, . double * ; y, . double ; xmin = 0, . double ; xmax = 0 . ). overridevirtual . scan a parameter i around the minimum. ; A minimization must have been done before, return false if it is not the case ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 932 of file TMinuitMinimizer.cxx. ◆ SetDebug(). bool TMinuitMinimizer::SetDebug ; (; bool ; on = true). set debug mode. Return true if setting was successful ; Definition at line 1049 of file TMinuitMinimizer.cxx. ◆ SetFixedVariable(). bool TMinuitMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set fixed variable (override if",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:22055,Availability,error,errors,22055," & Function() const = 0; ; print the result according to set level (implemented for TMinuit for maintaining Minuit-style printing) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 862 of file TMinuitMinimizer.cxx. ◆ ProvidesError(). bool TMinuitMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 137 of file TMinuitMinimizer.h. ◆ ReleaseVariable(). bool TMinuitMinimizer::ReleaseVariable ; (; unsigned int ; ivar). overridevirtual . release an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 396 of file TMinuitMinimizer.cxx. ◆ RetrieveErrorMatrix(). void TMinuitMinimizer::RetrieveErrorMatrix ; (; ). protected . retrieve error matrix from TMinuit ; Definition at line 601 of file TMinuitMinimizer.cxx. ◆ RetrieveParams(). void TMinuitMinimizer::RetrieveParams ; (; ). protected . retrieve minimum parameters and errors from TMinuit ; Definition at line 587 of file TMinuitMinimizer.cxx. ◆ Scan(). bool TMinuitMinimizer::Scan ; (; unsigned int ; i, . unsigned int & ; nstep, . double * ; x, . double * ; y, . double ; xmin = 0, . double ; xmax = 0 . ). overridevirtual . scan a parameter i around the minimum. ; A minimization must have been done before, return false if it is not the case ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 932 of file TMinuitMinimizer.cxx. ◆ SetDebug(). bool TMinuitMinimizer::SetDebug ; (; bool ; on = true). set debug mode. Return true if setting was successful ; Definition at line 1049 of file TMinuitMinimizer.cxx. ◆ SetFixedVariable(). bool TMinuitMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 309 of file TMinuitMinimizer.cxx. ◆ SetFunction(). void TMinuitMinimizer::SetFunction ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:4231,Deployability,release,release,4231,"onst override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void PrintResults () override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool ReleaseVariable (unsigned int) override;  release an existing variable ;  ; bool Scan (unsigned int i, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0) override;  scan a parameter i around the minimum. ;  ; bool SetDebug (bool on=true);  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVa",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:8080,Deployability,configurat,configuration,8080,"const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:10738,Deployability,release,release,10738," VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool UseStaticMinuit (bool on=true);  static function to switch on/off usage of static global TMinuit instance (gMinuit) By default it is used (i.e. ;  . Protected Member Functions; bool CheckMinuitInstance () const;  check TMinuit instance ;  ; bool CheckVarIndex (unsigned int ivar) const;  check parameter ;  ; void DoClear ();  reset ;  ; void DoReleaseFixParameter (int ivar);  release a parameter that is fixed when it is redefined ;  ; void InitTMinuit (int ndim);  initialize the TMinuit instance ;  ; void RetrieveErrorMatrix ();  retrieve error matrix from TMinuit ;  ; void RetrieveParams ();  retrieve minimum parameters and errors from TMinuit ;  . Static Protected Member Functions; static void Fcn (int &, double *, double &f, double *, int);  implementation of FCN for Minuit ;  ; static void FcnGrad (int &, double *g, double &f, double *, int);  implementation of FCN for Minuit when user provided gradient is used ;  . Private Attributes; std::vector< double > fCovar;  ; unsigned int fDim;  ; std::vector< double > fErrors;  ; bool fMinosRun;  ; int fMinosStatus = -1;  ; TMinuit * fMinuit;  ; std::vector< double > fParams;  ; ROOT::Minuit::EMinimizerType fType;  ; bool fUsed;  . Static Private Attributes; static TMinuit * fgMinuit = nullptr;  ; static bool fgUsed = false;  ; static bool fgUseStaticMinuit = true;  . Additional Inherited Members;  Protected Attributes inherited from",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:15042,Deployability,release,release,15042,"nt ; i, . unsigned int ; j . ); const. inlineoverridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 146 of file TMinuitMinimizer.h. ◆ CovMatrixStatus(). int TMinuitMinimizer::CovMatrixStatus ; (; ); const. overridevirtual . return status of covariance matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 721 of file TMinuitMinimizer.cxx. ◆ DeclFileName(). static const char * TMinuitMinimizer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 272 of file TMinuitMinimizer.h. ◆ DoClear(). void TMinuitMinimizer::DoClear ; (; ). protected . reset ; Definition at line 826 of file TMinuitMinimizer.cxx. ◆ DoReleaseFixParameter(). void TMinuitMinimizer::DoReleaseFixParameter ; (; int ; ivar). protected . release a parameter that is fixed when it is redefined ; Definition at line 841 of file TMinuitMinimizer.cxx. ◆ Edm(). double TMinuitMinimizer::Edm ; (; ); const. overridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 654 of file TMinuitMinimizer.cxx. ◆ Errors(). const double * TMinuitMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 140 of file TMinuitMinimizer.h. ◆ Fcn(). void TMinuitMinimizer::Fcn ; (; int & ; , . double * ; , . double & ; f, . double * ; x, . int ;  . ). staticprotected . implementation of FCN for Minuit ; Definition at line 224 of file TMinuitMinimizer.cxx. ◆ FcnGrad(). void TMinuitMinimizer::FcnGrad ; (; int & ; , . double * ; g, . double & ; f, . double * ; x, . int ; iflag . ). staticprotected . implementation of FCN for Minuit when user provided gradient is used ; Definition at line 230 of file TMinuitMinimizer.cxx. ◆ FixVariable(). bool",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:21640,Deployability,release,release,21640," ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 663 of file TMinuitMinimizer.cxx. ◆ PrintResults(). void TMinuitMinimizer::PrintResults ; (; ). overridevirtual . return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ; print the result according to set level (implemented for TMinuit for maintaining Minuit-style printing) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 862 of file TMinuitMinimizer.cxx. ◆ ProvidesError(). bool TMinuitMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 137 of file TMinuitMinimizer.h. ◆ ReleaseVariable(). bool TMinuitMinimizer::ReleaseVariable ; (; unsigned int ; ivar). overridevirtual . release an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 396 of file TMinuitMinimizer.cxx. ◆ RetrieveErrorMatrix(). void TMinuitMinimizer::RetrieveErrorMatrix ; (; ). protected . retrieve error matrix from TMinuit ; Definition at line 601 of file TMinuitMinimizer.cxx. ◆ RetrieveParams(). void TMinuitMinimizer::RetrieveParams ; (; ). protected . retrieve minimum parameters and errors from TMinuit ; Definition at line 587 of file TMinuitMinimizer.cxx. ◆ Scan(). bool TMinuitMinimizer::Scan ; (; unsigned int ; i, . unsigned int & ; nstep, . double * ; x, . double * ; y, . double ; xmin = 0, . double ; xmax = 0 . ). overridevirtual . scan a parameter i around the minimum. ; A minimization must have been done before, return false if it is not the case ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 932 of file TMinuitMinimizer.cxx. ◆ SetDebug(). bool TMinuitMinimizer::SetDebug ; (; bool ; on = true). set debug mode. Return true if setting was successful ; Definition at line 1",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:590,Integrability,interface,interface,590,". ROOT: TMinuitMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMinuitMinimizer Class ReferenceMath » TMinuit. ; TMinuitMinimizer class: ROOT::Math::Minimizer implementation based on TMinuit. ; See alsoMinuit2 for a newer version of this class TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface using TMinuit. This class is normally instantiated using the plug-in manager (plug-in with name Minuit2 Minimization Library or TMinuit). In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex) ; Definition at line 51 of file TMinuitMinimizer.h. Public Member Functions;  TMinuitMinimizer (const char *type, unsigned int ndim=0);  Constructor from a char * (used by PM) ;  ;  TMinuitMinimizer (ROOT::Minuit::EMinimizerType type=ROOT::Minuit::kMigrad, unsigned int ndim=0);  Default constructor. ;  ;  ~TMinuitMinimizer () override;  Destructor (no operations) ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:16662,Integrability,interface,interface,16662,"ted . implementation of FCN for Minuit ; Definition at line 224 of file TMinuitMinimizer.cxx. ◆ FcnGrad(). void TMinuitMinimizer::FcnGrad ; (; int & ; , . double * ; g, . double & ; f, . double * ; x, . int ; iflag . ). staticprotected . implementation of FCN for Minuit when user provided gradient is used ; Definition at line 230 of file TMinuitMinimizer.cxx. ◆ FixVariable(). bool TMinuitMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 388 of file TMinuitMinimizer.cxx. ◆ GetCovMatrix(). bool TMinuitMinimizer::GetCovMatrix ; (; double * ; cov); const. overridevirtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ; The array will be filled as cov[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 670 of file TMinuitMinimizer.cxx. ◆ GetHessianMatrix(). bool TMinuitMinimizer::GetHessianMatrix ; (; double * ; h); const. overridevirtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 682 of file TMinuitMinimizer.cxx. ◆ GetMinosError(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 746 of file TMinuitMinimizer.cxx. ◆ GetVariableSettings(). bool TMinuitMinimizer::GetVariableSettings ;",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:661,Modifiability,plug-in,plug-in,661,". ROOT: TMinuitMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMinuitMinimizer Class ReferenceMath » TMinuit. ; TMinuitMinimizer class: ROOT::Math::Minimizer implementation based on TMinuit. ; See alsoMinuit2 for a newer version of this class TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface using TMinuit. This class is normally instantiated using the plug-in manager (plug-in with name Minuit2 Minimization Library or TMinuit). In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex) ; Definition at line 51 of file TMinuitMinimizer.h. Public Member Functions;  TMinuitMinimizer (const char *type, unsigned int ndim=0);  Constructor from a char * (used by PM) ;  ;  TMinuitMinimizer (ROOT::Minuit::EMinimizerType type=ROOT::Minuit::kMigrad, unsigned int ndim=0);  Default constructor. ;  ;  ~TMinuitMinimizer () override;  Destructor (no operations) ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:678,Modifiability,plug-in,plug-in,678,". ROOT: TMinuitMinimizer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Private Attributes |; Static Private Attributes |; List of all members ; TMinuitMinimizer Class ReferenceMath » TMinuit. ; TMinuitMinimizer class: ROOT::Math::Minimizer implementation based on TMinuit. ; See alsoMinuit2 for a newer version of this class TMinuitMinimizer class implementing the ROOT::Math::Minimizer interface using TMinuit. This class is normally instantiated using the plug-in manager (plug-in with name Minuit2 Minimization Library or TMinuit). In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex) ; Definition at line 51 of file TMinuitMinimizer.h. Public Member Functions;  TMinuitMinimizer (const char *type, unsigned int ndim=0);  Constructor from a char * (used by PM) ;  ;  TMinuitMinimizer (ROOT::Minuit::EMinimizerType type=ROOT::Minuit::kMigrad, unsigned int ndim=0);  Default constructor. ;  ;  ~TMinuitMinimizer () override;  Destructor (no operations) ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:1619,Modifiability,variab,variable,1619,"ug-in with name Minuit2 Minimization Library or TMinuit). In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex) ; Definition at line 51 of file TMinuitMinimizer.h. Public Member Functions;  TMinuitMinimizer (const char *type, unsigned int ndim=0);  Constructor from a char * (used by PM) ;  ;  TMinuitMinimizer (ROOT::Minuit::EMinimizerType type=ROOT::Minuit::kMigrad, unsigned int ndim=0);  Default constructor. ;  ;  ~TMinuitMinimizer () override;  Destructor (no operations) ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:1676,Modifiability,variab,variables,1676,"ug-in with name Minuit2 Minimization Library or TMinuit). In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex) ; Definition at line 51 of file TMinuitMinimizer.h. Public Member Functions;  TMinuitMinimizer (const char *type, unsigned int ndim=0);  Constructor from a char * (used by PM) ;  ;  TMinuitMinimizer (ROOT::Minuit::EMinimizerType type=ROOT::Minuit::kMigrad, unsigned int ndim=0);  Default constructor. ;  ;  ~TMinuitMinimizer () override;  Destructor (no operations) ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:2017,Modifiability,variab,variable,2017,"ug-in with name Minuit2 Minimization Library or TMinuit). In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex) ; Definition at line 51 of file TMinuitMinimizer.h. Public Member Functions;  TMinuitMinimizer (const char *type, unsigned int ndim=0);  Constructor from a char * (used by PM) ;  ;  TMinuitMinimizer (ROOT::Minuit::EMinimizerType type=ROOT::Minuit::kMigrad, unsigned int ndim=0);  Default constructor. ;  ;  ~TMinuitMinimizer () override;  Destructor (no operations) ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:2145,Modifiability,variab,variable,2145,"ug-in with name Minuit2 Minimization Library or TMinuit). In addition the user can choose the minimizer algorithm: Migrad (the default one), Simplex, or Minimize (combined Migrad + Simplex) ; Definition at line 51 of file TMinuitMinimizer.h. Public Member Functions;  TMinuitMinimizer (const char *type, unsigned int ndim=0);  Constructor from a char * (used by PM) ;  ;  TMinuitMinimizer (ROOT::Minuit::EMinimizerType type=ROOT::Minuit::kMigrad, unsigned int ndim=0);  Default constructor. ;  ;  ~TMinuitMinimizer () override;  Destructor (no operations) ;  ; bool Contour (unsigned int i, unsigned int j, unsigned int &npoints, double *xi, double *xj) override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:2412,Modifiability,variab,variable,2412,"override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit::ParameterSettings &) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; double GlobalCC (unsigned int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const ov",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:2459,Modifiability,variab,variables,2459,"override;  find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ;  ; double CovMatrix (unsigned int i, unsigned int j) const override;  return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ;  ; int CovMatrixStatus () const override;  return status of covariance matrix ;  ; double Edm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit::ParameterSettings &) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; double GlobalCC (unsigned int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const ov",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:2585,Modifiability,variab,variable,2585,"dm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit::ParameterSettings &) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; double GlobalCC (unsigned int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:2724,Modifiability,variab,variable,2724,"dm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit::ParameterSettings &) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; double GlobalCC (unsigned int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:2747,Modifiability,variab,variable,2747,"dm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit::ParameterSettings &) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; double GlobalCC (unsigned int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:2884,Modifiability,variab,variable,2884,"dm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit::ParameterSettings &) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; double GlobalCC (unsigned int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:3109,Modifiability,variab,variable,3109,"dm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit::ParameterSettings &) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; double GlobalCC (unsigned int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:3766,Modifiability,variab,variables,3766,"int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void PrintResults () override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool ReleaseVariable (unsigned int) override;  release an existing variable ;  ; bool Scan (unsigned int i, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0) override;  scan a parameter i around the minimum. ;  ; bool SetDebug (bool on=true);  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, do",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:3860,Modifiability,variab,variables,3860,"int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void PrintResults () override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool ReleaseVariable (unsigned int) override;  release an existing variable ;  ; bool Scan (unsigned int i, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0) override;  scan a parameter i around the minimum. ;  ; bool SetDebug (bool on=true);  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, do",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:4251,Modifiability,variab,variable,4251,"onst override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void PrintResults () override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool ReleaseVariable (unsigned int) override;  release an existing variable ;  ; bool Scan (unsigned int i, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0) override;  scan a parameter i around the minimum. ;  ; bool SetDebug (bool on=true);  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVa",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:4597,Modifiability,variab,variable,4597,"  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an existing variable ;  ; bool SetVariableLowerLimit (unsigned int, double) override;  set the lower-limit of an existing variable ;  ; bool SetVariableStepSize (unsigned int, double) override;  set the step size of an existing variable ;  ; bool SetVariableUpperLimit (unsigned int, double) override;  set the upper-limit of an existing variable ;  ; bool SetVariableValue (unsigned int, double) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:4901,Modifiability,variab,variable,4901,"  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an existing variable ;  ; bool SetVariableLowerLimit (unsigned int, double) override;  set the lower-limit of an existing variable ;  ; bool SetVariableStepSize (unsigned int, double) override;  set the step size of an existing variable ;  ; bool SetVariableUpperLimit (unsigned int, double) override;  set the upper-limit of an existing variable ;  ; bool SetVariableValue (unsigned int, double) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:5094,Modifiability,variab,variable,5094,"  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an existing variable ;  ; bool SetVariableLowerLimit (unsigned int, double) override;  set the lower-limit of an existing variable ;  ; bool SetVariableStepSize (unsigned int, double) override;  set the step size of an existing variable ;  ; bool SetVariableUpperLimit (unsigned int, double) override;  set the upper-limit of an existing variable ;  ; bool SetVariableValue (unsigned int, double) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:5287,Modifiability,variab,variable,5287,"  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an existing variable ;  ; bool SetVariableLowerLimit (unsigned int, double) override;  set the lower-limit of an existing variable ;  ; bool SetVariableStepSize (unsigned int, double) override;  set the step size of an existing variable ;  ; bool SetVariableUpperLimit (unsigned int, double) override;  set the upper-limit of an existing variable ;  ; bool SetVariableValue (unsigned int, double) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:5447,Modifiability,variab,variable,5447,"  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an existing variable ;  ; bool SetVariableLowerLimit (unsigned int, double) override;  set the lower-limit of an existing variable ;  ; bool SetVariableStepSize (unsigned int, double) override;  set the step size of an existing variable ;  ; bool SetVariableUpperLimit (unsigned int, double) override;  set the upper-limit of an existing variable ;  ; bool SetVariableValue (unsigned int, double) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:5573,Modifiability,variab,variable,5573,"  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an existing variable ;  ; bool SetVariableLowerLimit (unsigned int, double) override;  set the lower-limit of an existing variable ;  ; bool SetVariableStepSize (unsigned int, double) override;  set the step size of an existing variable ;  ; bool SetVariableUpperLimit (unsigned int, double) override;  set the upper-limit of an existing variable ;  ; bool SetVariableValue (unsigned int, double) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:5683,Modifiability,variab,variable,5683,"  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an existing variable ;  ; bool SetVariableLowerLimit (unsigned int, double) override;  set the lower-limit of an existing variable ;  ; bool SetVariableStepSize (unsigned int, double) override;  set the step size of an existing variable ;  ; bool SetVariableUpperLimit (unsigned int, double) override;  set the upper-limit of an existing variable ;  ; bool SetVariableValue (unsigned int, double) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:5789,Modifiability,variab,variable,5789,"  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an existing variable ;  ; bool SetVariableLowerLimit (unsigned int, double) override;  set the lower-limit of an existing variable ;  ; bool SetVariableStepSize (unsigned int, double) override;  set the step size of an existing variable ;  ; bool SetVariableUpperLimit (unsigned int, double) override;  set the upper-limit of an existing variable ;  ; bool SetVariableValue (unsigned int, double) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:5899,Modifiability,variab,variable,5899,"  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an existing variable ;  ; bool SetVariableLowerLimit (unsigned int, double) override;  set the lower-limit of an existing variable ;  ; bool SetVariableStepSize (unsigned int, double) override;  set the step size of an existing variable ;  ; bool SetVariableUpperLimit (unsigned int, double) override;  set the upper-limit of an existing variable ;  ; bool SetVariableValue (unsigned int, double) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:5998,Modifiability,variab,variable,5998,"  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an existing variable ;  ; bool SetVariableLowerLimit (unsigned int, double) override;  set the lower-limit of an existing variable ;  ; bool SetVariableStepSize (unsigned int, double) override;  set the step size of an existing variable ;  ; bool SetVariableUpperLimit (unsigned int, double) override;  set the upper-limit of an existing variable ;  ; bool SetVariableValue (unsigned int, double) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:6376,Modifiability,variab,variable,6376,"  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an existing variable ;  ; bool SetVariableLowerLimit (unsigned int, double) override;  set the lower-limit of an existing variable ;  ; bool SetVariableStepSize (unsigned int, double) override;  set the step size of an existing variable ;  ; bool SetVariableUpperLimit (unsigned int, double) override;  set the upper-limit of an existing variable ;  ; bool SetVariableValue (unsigned int, double) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:6393,Modifiability,variab,variable,6393,"  set debug mode. Return true if setting was successful ;  ; bool SetFixedVariable (unsigned int, const std::string &, double) override;  set fixed variable (override if minimizer supports them ) ;  ; void SetFunction (const ROOT::Math::IMultiGenFunction &func) override;  set the function to minimize ;  ; bool SetLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double, double) override;  set upper/lower limited variable (override if minimizer supports them ) ;  ; bool SetLowerLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double lower) override;  set lower limit variable (override if minimizer supports them ) ;  ; bool SetUpperLimitedVariable (unsigned int ivar, const std::string &name, double val, double step, double upper) override;  set upper limit variable (override if minimizer supports them ) ;  ; bool SetVariable (unsigned int ivar, const std::string &name, double val, double step) override;  set free variable ;  ; bool SetVariableLimits (unsigned int ivar, double lower, double upper) override;  set the limits of an existing variable ;  ; bool SetVariableLowerLimit (unsigned int, double) override;  set the lower-limit of an existing variable ;  ; bool SetVariableStepSize (unsigned int, double) override;  set the step size of an existing variable ;  ; bool SetVariableUpperLimit (unsigned int, double) override;  set the upper-limit of an existing variable ;  ; bool SetVariableValue (unsigned int, double) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:6717,Modifiability,inherit,inherited,6717,"t (unsigned int, double) override;  set the lower-limit of an existing variable ;  ; bool SetVariableStepSize (unsigned int, double) override;  set the step size of an existing variable ;  ; bool SetVariableUpperLimit (unsigned int, double) override;  set the upper-limit of an existing variable ;  ; bool SetVariableValue (unsigned int, double) override;  set the value of an existing variable ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string VariableName (unsigned int ivar) const override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual unsigned int NIterations () const;  number ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:7126,Modifiability,variab,variable,7126,"TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void SuppressMinuitWarnings (bool nowarn=true);  suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ;  ; int VariableIndex (const std::string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string VariableName (unsigned int ivar) const override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default o",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:8080,Modifiability,config,configuration,8080,"const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivatives ;  ; void SetDefaultOptions ();  reset the default options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:9658,Modifiability,variab,variable,9658,"le >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool UseStaticMinuit (bool on=true);  static function to switch on/off usage of static global TMinuit instance (gMinuit) By default it is used (i.e. ;  . Protected Member Functions; bool CheckMinuitInstance () const;  check TMinuit instance ;  ; bool CheckVarIndex (unsigned int ivar) const;  check parameter",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:9792,Modifiability,variab,variables,9792,"le >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool UseStaticMinuit (bool on=true);  static function to switch on/off usage of static global TMinuit instance (gMinuit) By default it is used (i.e. ;  . Protected Member Functions; bool CheckMinuitInstance () const;  check TMinuit instance ;  ; bool CheckVarIndex (unsigned int ivar) const;  check parameter",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:9821,Modifiability,variab,variables,9821,"void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool UseStaticMinuit (bool on=true);  static function to switch on/off usage of static global TMinuit instance (gMinuit) By default it is used (i.e. ;  . Protected Member Functions; bool CheckMinuitInstance () const;  check TMinuit instance ;  ; bool CheckVarIndex (unsigned int ivar) const;  check parameter ;  ; void DoClear ();  reset ;  ; void DoReleaseFixParameter (int ivar);  release a parameter that is fixed when it is redefined ;  ; void InitTMinuit (int ndim);  initialize the TMinuit instance ;  ; void RetrieveErrorMatrix ();  retrieve error matrix from TMinuit ;  ; void RetrieveParams ();  retrieve minimum param",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:9937,Modifiability,variab,variables,9937,"void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool UseStaticMinuit (bool on=true);  static function to switch on/off usage of static global TMinuit instance (gMinuit) By default it is used (i.e. ;  . Protected Member Functions; bool CheckMinuitInstance () const;  check TMinuit instance ;  ; bool CheckVarIndex (unsigned int ivar) const;  check parameter ;  ; void DoClear ();  reset ;  ; void DoReleaseFixParameter (int ivar);  release a parameter that is fixed when it is redefined ;  ; void InitTMinuit (int ndim);  initialize the TMinuit instance ;  ; void RetrieveErrorMatrix ();  retrieve error matrix from TMinuit ;  ; void RetrieveParams ();  retrieve minimum param",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:11748,Modifiability,inherit,inherited,11748,"nuit instance ;  ; void RetrieveErrorMatrix ();  retrieve error matrix from TMinuit ;  ; void RetrieveParams ();  retrieve minimum parameters and errors from TMinuit ;  . Static Protected Member Functions; static void Fcn (int &, double *, double &f, double *, int);  implementation of FCN for Minuit ;  ; static void FcnGrad (int &, double *g, double &f, double *, int);  implementation of FCN for Minuit when user provided gradient is used ;  . Private Attributes; std::vector< double > fCovar;  ; unsigned int fDim;  ; std::vector< double > fErrors;  ; bool fMinosRun;  ; int fMinosStatus = -1;  ; TMinuit * fMinuit;  ; std::vector< double > fParams;  ; ROOT::Minuit::EMinimizerType fType;  ; bool fUsed;  . Static Private Attributes; static TMinuit * fgMinuit = nullptr;  ; static bool fgUsed = false;  ; static bool fgUseStaticMinuit = true;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <TMinuitMinimizer.h>. Inheritance diagram for TMinuitMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMinuitMinimizer() [1/2]. TMinuitMinimizer::TMinuitMinimizer ; (; ROOT::Minuit::EMinimizerType ; type = ROOT::Minuit::kMigrad, . unsigned int ; ndim = 0 . ). Default constructor. ; Definition at line 57 of file TMinuitMinimizer.cxx. ◆ TMinuitMinimizer() [2/2]. TMinuitMinimizer::TMinuitMinimizer ; (; const char * ; type, . unsigned int ; ndim = 0 . ). Constructor from a char * (used by PM) ; Definition at line 73 of file TMinuitMinimizer.cxx. ◆ ~TMinuitMinimizer(). TMinuitMinimizer::~TMinuitMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 101 of file TMinuitMinimizer.cxx. Member Function Documentation.",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:14200,Modifiability,variab,variable,14200," (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMinuitMinimizer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMinuitMinimizer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 272 of file TMinuitMinimizer.h. ◆ Contour(). bool TMinuitMinimizer::Contour ; (; unsigned int ; i, . unsigned int ; j, . unsigned int & ; npoints, . double * ; xi, . double * ; xj . ). overridevirtual . find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 884 of file TMinuitMinimizer.cxx. ◆ CovMatrix(). double TMinuitMinimizer::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. inlineoverridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 146 of file TMinuitMinimizer.h. ◆ CovMatrixStatus(). int TMinuitMinimizer::CovMatrixStatus ; (; ); const. overridevirtual . return status of covariance matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 721 of file TMinuitMinimizer.cxx. ◆ DeclFileName(). static const char * TMinuitMinimizer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 272 of file TMinuitMinimizer.h. ◆ DoClear(). void TMinuitMinimizer::DoClear ; (; ). protected . reset ; Definition at line 826 of file TMinuitMinimizer.cxx. ◆ DoReleaseFixParameter(). void TMinuitMinimizer::DoReleaseFixParameter ; (; int ; ivar). protected . release a parameter that is fixed when it is redefined ; Definition at line 841 of file TMinuitMinimizer.cxx. ◆ Edm(). double TMinuitMinimizer::Edm ; (; ); const. overridevirtual . return expected distanc",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:14257,Modifiability,variab,variables,14257," (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMinuitMinimizer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMinuitMinimizer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 272 of file TMinuitMinimizer.h. ◆ Contour(). bool TMinuitMinimizer::Contour ; (; unsigned int ; i, . unsigned int ; j, . unsigned int & ; npoints, . double * ; xi, . double * ; xj . ). overridevirtual . find the contour points (xi,xj) of the function for parameter i and j around the minimum The contour will be find for value of the function = Min + ErrorUp(); ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 884 of file TMinuitMinimizer.cxx. ◆ CovMatrix(). double TMinuitMinimizer::CovMatrix ; (; unsigned int ; i, . unsigned int ; j . ); const. inlineoverridevirtual . return covariance matrices elements if the variable is fixed the matrix is zero The ordering of the variables is the same as in errors ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 146 of file TMinuitMinimizer.h. ◆ CovMatrixStatus(). int TMinuitMinimizer::CovMatrixStatus ; (; ); const. overridevirtual . return status of covariance matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 721 of file TMinuitMinimizer.cxx. ◆ DeclFileName(). static const char * TMinuitMinimizer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 272 of file TMinuitMinimizer.h. ◆ DoClear(). void TMinuitMinimizer::DoClear ; (; ). protected . reset ; Definition at line 826 of file TMinuitMinimizer.cxx. ◆ DoReleaseFixParameter(). void TMinuitMinimizer::DoReleaseFixParameter ; (; int ; ivar). protected . release a parameter that is fixed when it is redefined ; Definition at line 841 of file TMinuitMinimizer.cxx. ◆ Edm(). double TMinuitMinimizer::Edm ; (; ); const. overridevirtual . return expected distanc",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:16186,Modifiability,variab,variable,16186,". overridevirtual . return expected distance reached from the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 654 of file TMinuitMinimizer.cxx. ◆ Errors(). const double * TMinuitMinimizer::Errors ; (; ); const. inlineoverridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 140 of file TMinuitMinimizer.h. ◆ Fcn(). void TMinuitMinimizer::Fcn ; (; int & ; , . double * ; , . double & ; f, . double * ; x, . int ;  . ). staticprotected . implementation of FCN for Minuit ; Definition at line 224 of file TMinuitMinimizer.cxx. ◆ FcnGrad(). void TMinuitMinimizer::FcnGrad ; (; int & ; , . double * ; g, . double & ; f, . double * ; x, . int ; iflag . ). staticprotected . implementation of FCN for Minuit when user provided gradient is used ; Definition at line 230 of file TMinuitMinimizer.cxx. ◆ FixVariable(). bool TMinuitMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 388 of file TMinuitMinimizer.cxx. ◆ GetCovMatrix(). bool TMinuitMinimizer::GetCovMatrix ; (; double * ; cov); const. overridevirtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ; The array will be filled as cov[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 670 of file TMinuitMinimizer.cxx. ◆ GetHessianMatrix(). bool TMinuitMinimizer::GetHessianMatrix ; (; double * ; h); const. overridevirtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array wi",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:16459,Modifiability,variab,variable,16459,"ridevirtual . return errors at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 140 of file TMinuitMinimizer.h. ◆ Fcn(). void TMinuitMinimizer::Fcn ; (; int & ; , . double * ; , . double & ; f, . double * ; x, . int ;  . ). staticprotected . implementation of FCN for Minuit ; Definition at line 224 of file TMinuitMinimizer.cxx. ◆ FcnGrad(). void TMinuitMinimizer::FcnGrad ; (; int & ; , . double * ; g, . double & ; f, . double * ; x, . int ; iflag . ). staticprotected . implementation of FCN for Minuit when user provided gradient is used ; Definition at line 230 of file TMinuitMinimizer.cxx. ◆ FixVariable(). bool TMinuitMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 388 of file TMinuitMinimizer.cxx. ◆ GetCovMatrix(). bool TMinuitMinimizer::GetCovMatrix ; (; double * ; cov); const. overridevirtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ; The array will be filled as cov[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 670 of file TMinuitMinimizer.cxx. ◆ GetHessianMatrix(). bool TMinuitMinimizer::GetHessianMatrix ; (; double * ; h); const. overridevirtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 682 of file TMinuitMinimizer.cxx. ◆ GetMinosError(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; err",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:16572,Modifiability,variab,variables,16572,"e TMinuitMinimizer.h. ◆ Fcn(). void TMinuitMinimizer::Fcn ; (; int & ; , . double * ; , . double & ; f, . double * ; x, . int ;  . ). staticprotected . implementation of FCN for Minuit ; Definition at line 224 of file TMinuitMinimizer.cxx. ◆ FcnGrad(). void TMinuitMinimizer::FcnGrad ; (; int & ; , . double * ; g, . double & ; f, . double * ; x, . int ; iflag . ). staticprotected . implementation of FCN for Minuit when user provided gradient is used ; Definition at line 230 of file TMinuitMinimizer.cxx. ◆ FixVariable(). bool TMinuitMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 388 of file TMinuitMinimizer.cxx. ◆ GetCovMatrix(). bool TMinuitMinimizer::GetCovMatrix ; (; double * ; cov); const. overridevirtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ; The array will be filled as cov[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 670 of file TMinuitMinimizer.cxx. ◆ GetHessianMatrix(). bool TMinuitMinimizer::GetHessianMatrix ; (; double * ; h); const. overridevirtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 682 of file TMinuitMinimizer.cxx. ◆ GetMinosError(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:16733,Modifiability,variab,variable,16733,"ted . implementation of FCN for Minuit ; Definition at line 224 of file TMinuitMinimizer.cxx. ◆ FcnGrad(). void TMinuitMinimizer::FcnGrad ; (; int & ; , . double * ; g, . double & ; f, . double * ; x, . int ; iflag . ). staticprotected . implementation of FCN for Minuit when user provided gradient is used ; Definition at line 230 of file TMinuitMinimizer.cxx. ◆ FixVariable(). bool TMinuitMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 388 of file TMinuitMinimizer.cxx. ◆ GetCovMatrix(). bool TMinuitMinimizer::GetCovMatrix ; (; double * ; cov); const. overridevirtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ; The array will be filled as cov[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 670 of file TMinuitMinimizer.cxx. ◆ GetHessianMatrix(). bool TMinuitMinimizer::GetHessianMatrix ; (; double * ; h); const. overridevirtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 682 of file TMinuitMinimizer.cxx. ◆ GetMinosError(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 746 of file TMinuitMinimizer.cxx. ◆ GetVariableSettings(). bool TMinuitMinimizer::GetVariableSettings ;",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:17123,Modifiability,variab,variable,17123,"◆ FixVariable(). bool TMinuitMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 388 of file TMinuitMinimizer.cxx. ◆ GetCovMatrix(). bool TMinuitMinimizer::GetCovMatrix ; (; double * ; cov); const. overridevirtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ; The array will be filled as cov[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 670 of file TMinuitMinimizer.cxx. ◆ GetHessianMatrix(). bool TMinuitMinimizer::GetHessianMatrix ; (; double * ; h); const. overridevirtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 682 of file TMinuitMinimizer.cxx. ◆ GetMinosError(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 746 of file TMinuitMinimizer.cxx. ◆ GetVariableSettings(). bool TMinuitMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; var . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 411 of file TMinuitMinimizer.cxx. ◆ GlobalCC(). double TMinuitMinimizer::GlobalCC ; (; unsigned int ; i); const. overridevirtua",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:17170,Modifiability,variab,variables,17170,"◆ FixVariable(). bool TMinuitMinimizer::FixVariable ; (; unsigned int ; ivar). overridevirtual . fix an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 388 of file TMinuitMinimizer.cxx. ◆ GetCovMatrix(). bool TMinuitMinimizer::GetCovMatrix ; (; double * ; cov); const. overridevirtual . Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ; The array will be filled as cov[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 670 of file TMinuitMinimizer.cxx. ◆ GetHessianMatrix(). bool TMinuitMinimizer::GetHessianMatrix ; (; double * ; h); const. overridevirtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 682 of file TMinuitMinimizer.cxx. ◆ GetMinosError(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 746 of file TMinuitMinimizer.cxx. ◆ GetVariableSettings(). bool TMinuitMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; var . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 411 of file TMinuitMinimizer.cxx. ◆ GlobalCC(). double TMinuitMinimizer::GlobalCC ; (; unsigned int ; i); const. overridevirtua",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:17504,Modifiability,variab,variable,17504,"v[i *ndim + j] The ordering of the variables is the same as in errors and parameter value. This is different from the direct interface of Minuit2 or TMinuit where the values were obtained only to variable parameters ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 670 of file TMinuitMinimizer.cxx. ◆ GetHessianMatrix(). bool TMinuitMinimizer::GetHessianMatrix ; (; double * ; h); const. overridevirtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 682 of file TMinuitMinimizer.cxx. ◆ GetMinosError(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 746 of file TMinuitMinimizer.cxx. ◆ GetVariableSettings(). bool TMinuitMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; var . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 411 of file TMinuitMinimizer.cxx. ◆ GlobalCC(). double TMinuitMinimizer::GlobalCC ; (; unsigned int ; i); const. overridevirtual . global correlation coefficient for variable i ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 734 of file TMinuitMinimizer.cxx. ◆ Hesse(). bool TMinuitMinimizer::Hesse ; (; ). overridevirtual . perform a full calculation of the Hessian matrix for error calculation ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 1004 of file TMinuitMinimizer.cxx. ◆ InitTMinuit(). void TMinuitMinimizer::InitTMinuit ; (; int ; ndim). protected .",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:17810,Modifiability,variab,variable,17810,"trix(). bool TMinuitMinimizer::GetHessianMatrix ; (; double * ; h); const. overridevirtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 682 of file TMinuitMinimizer.cxx. ◆ GetMinosError(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 746 of file TMinuitMinimizer.cxx. ◆ GetVariableSettings(). bool TMinuitMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; var . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 411 of file TMinuitMinimizer.cxx. ◆ GlobalCC(). double TMinuitMinimizer::GlobalCC ; (; unsigned int ; i); const. overridevirtual . global correlation coefficient for variable i ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 734 of file TMinuitMinimizer.cxx. ◆ Hesse(). bool TMinuitMinimizer::Hesse ; (; ). overridevirtual . perform a full calculation of the Hessian matrix for error calculation ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 1004 of file TMinuitMinimizer.cxx. ◆ InitTMinuit(). void TMinuitMinimizer::InitTMinuit ; (; int ; ndim). protected . initialize the TMinuit instance ; Definition at line 117 of file TMinuitMinimizer.cxx. ◆ IsA(). virtual TClass * TMinuitMinimizer::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 272 of file TMinuitMinimizer.h. ◆ IsFixedVariable(). bool TMinuitMinimizer::IsFixedVariable ; (; un",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:17833,Modifiability,variab,variable,17833,"trix(). bool TMinuitMinimizer::GetHessianMatrix ; (; double * ; h); const. overridevirtual . Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 682 of file TMinuitMinimizer.cxx. ◆ GetMinosError(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 746 of file TMinuitMinimizer.cxx. ◆ GetVariableSettings(). bool TMinuitMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; var . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 411 of file TMinuitMinimizer.cxx. ◆ GlobalCC(). double TMinuitMinimizer::GlobalCC ; (; unsigned int ; i); const. overridevirtual . global correlation coefficient for variable i ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 734 of file TMinuitMinimizer.cxx. ◆ Hesse(). bool TMinuitMinimizer::Hesse ; (; ). overridevirtual . perform a full calculation of the Hessian matrix for error calculation ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 1004 of file TMinuitMinimizer.cxx. ◆ InitTMinuit(). void TMinuitMinimizer::InitTMinuit ; (; int ; ndim). protected . initialize the TMinuit instance ; Definition at line 117 of file TMinuitMinimizer.cxx. ◆ IsA(). virtual TClass * TMinuitMinimizer::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 272 of file TMinuitMinimizer.h. ◆ IsFixedVariable(). bool TMinuitMinimizer::IsFixedVariable ; (; un",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:18112,Modifiability,variab,variable,18112,"e variable is fixed or const the values for that variables are zero. ; The array will be filled as h[i *ndim + j] ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 682 of file TMinuitMinimizer.cxx. ◆ GetMinosError(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 746 of file TMinuitMinimizer.cxx. ◆ GetVariableSettings(). bool TMinuitMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; var . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 411 of file TMinuitMinimizer.cxx. ◆ GlobalCC(). double TMinuitMinimizer::GlobalCC ; (; unsigned int ; i); const. overridevirtual . global correlation coefficient for variable i ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 734 of file TMinuitMinimizer.cxx. ◆ Hesse(). bool TMinuitMinimizer::Hesse ; (; ). overridevirtual . perform a full calculation of the Hessian matrix for error calculation ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 1004 of file TMinuitMinimizer.cxx. ◆ InitTMinuit(). void TMinuitMinimizer::InitTMinuit ; (; int ; ndim). protected . initialize the TMinuit instance ; Definition at line 117 of file TMinuitMinimizer.cxx. ◆ IsA(). virtual TClass * TMinuitMinimizer::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 272 of file TMinuitMinimizer.h. ◆ IsFixedVariable(). bool TMinuitMinimizer::IsFixedVariable ; (; unsigned int ; ivar); const. overridevirtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 404 of fil",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:18931,Modifiability,variab,variable,18931,inition at line 411 of file TMinuitMinimizer.cxx. ◆ GlobalCC(). double TMinuitMinimizer::GlobalCC ; (; unsigned int ; i); const. overridevirtual . global correlation coefficient for variable i ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 734 of file TMinuitMinimizer.cxx. ◆ Hesse(). bool TMinuitMinimizer::Hesse ; (; ). overridevirtual . perform a full calculation of the Hessian matrix for error calculation ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 1004 of file TMinuitMinimizer.cxx. ◆ InitTMinuit(). void TMinuitMinimizer::InitTMinuit ; (; int ; ndim). protected . initialize the TMinuit instance ; Definition at line 117 of file TMinuitMinimizer.cxx. ◆ IsA(). virtual TClass * TMinuitMinimizer::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 272 of file TMinuitMinimizer.h. ◆ IsFixedVariable(). bool TMinuitMinimizer::IsFixedVariable ; (; unsigned int ; ivar); const. overridevirtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 404 of file TMinuitMinimizer.cxx. ◆ MinGradient(). const double * TMinuitMinimizer::MinGradient ; (; ); const. inlineoverridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 123 of file TMinuitMinimizer.h. ◆ Minimize(). bool TMinuitMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Implements ROOT::Math::Minimizer.; Definition at line 440 of file TMinuitMinimizer.cxx. ◆ MinosStatus(). int TMinuitMinimizer::MinosStatus ; (; ); const. inlineoverridevirtual . minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 182 of file TMinuitMinimizer.,MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:19023,Modifiability,variab,variables,19023,balCC ; (; unsigned int ; i); const. overridevirtual . global correlation coefficient for variable i ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 734 of file TMinuitMinimizer.cxx. ◆ Hesse(). bool TMinuitMinimizer::Hesse ; (; ). overridevirtual . perform a full calculation of the Hessian matrix for error calculation ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 1004 of file TMinuitMinimizer.cxx. ◆ InitTMinuit(). void TMinuitMinimizer::InitTMinuit ; (; int ; ndim). protected . initialize the TMinuit instance ; Definition at line 117 of file TMinuitMinimizer.cxx. ◆ IsA(). virtual TClass * TMinuitMinimizer::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 272 of file TMinuitMinimizer.h. ◆ IsFixedVariable(). bool TMinuitMinimizer::IsFixedVariable ; (; unsigned int ; ivar); const. overridevirtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 404 of file TMinuitMinimizer.cxx. ◆ MinGradient(). const double * TMinuitMinimizer::MinGradient ; (; ); const. inlineoverridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 123 of file TMinuitMinimizer.h. ◆ Minimize(). bool TMinuitMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Implements ROOT::Math::Minimizer.; Definition at line 440 of file TMinuitMinimizer.cxx. ◆ MinosStatus(). int TMinuitMinimizer::MinosStatus ; (; ); const. inlineoverridevirtual . minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 182 of file TMinuitMinimizer.h. ◆ MinValue(). double TMinuitMinimizer::MinValue ; (; ); const. overridevirtual . return ,MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:20505,Modifiability,variab,variables,20505,:Minimizer.; Definition at line 440 of file TMinuitMinimizer.cxx. ◆ MinosStatus(). int TMinuitMinimizer::MinosStatus ; (; ); const. inlineoverridevirtual . minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 182 of file TMinuitMinimizer.h. ◆ MinValue(). double TMinuitMinimizer::MinValue ; (; ); const. overridevirtual . return minimum function value ; Implements ROOT::Math::Minimizer.; Definition at line 644 of file TMinuitMinimizer.cxx. ◆ NCalls(). unsigned int TMinuitMinimizer::NCalls ; (; ); const. overridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 638 of file TMinuitMinimizer.cxx. ◆ NDim(). unsigned int TMinuitMinimizer::NDim ; (; ); const. inlineoverridevirtual . this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ; Implements ROOT::Math::Minimizer.; Definition at line 130 of file TMinuitMinimizer.h. ◆ NFree(). unsigned int TMinuitMinimizer::NFree ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 663 of file TMinuitMinimizer.cxx. ◆ PrintResults(). void TMinuitMinimizer::PrintResults ; (; ). overridevirtual . return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ; print the result according to set level (implemented for TMinuit for maintaining Minuit-style printing) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 862 of file TMinuitMinimizer.cxx. ◆ ProvidesError(). bool TMinuitMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 137 of file TMinuit,MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:20724,Modifiability,variab,variables,20724,un = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 182 of file TMinuitMinimizer.h. ◆ MinValue(). double TMinuitMinimizer::MinValue ; (; ); const. overridevirtual . return minimum function value ; Implements ROOT::Math::Minimizer.; Definition at line 644 of file TMinuitMinimizer.cxx. ◆ NCalls(). unsigned int TMinuitMinimizer::NCalls ; (; ); const. overridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 638 of file TMinuitMinimizer.cxx. ◆ NDim(). unsigned int TMinuitMinimizer::NDim ; (; ); const. inlineoverridevirtual . this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ; Implements ROOT::Math::Minimizer.; Definition at line 130 of file TMinuitMinimizer.h. ◆ NFree(). unsigned int TMinuitMinimizer::NFree ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 663 of file TMinuitMinimizer.cxx. ◆ PrintResults(). void TMinuitMinimizer::PrintResults ; (; ). overridevirtual . return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ; print the result according to set level (implemented for TMinuit for maintaining Minuit-style printing) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 862 of file TMinuitMinimizer.cxx. ◆ ProvidesError(). bool TMinuitMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 137 of file TMinuitMinimizer.h. ◆ ReleaseVariable(). bool TMinuitMinimizer::ReleaseVariable ; (; unsigned int ; ivar). overridevirtual . release an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 396 of file TMi,MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:21660,Modifiability,variab,variable,21660," ; (; ); const. overridevirtual . number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 663 of file TMinuitMinimizer.cxx. ◆ PrintResults(). void TMinuitMinimizer::PrintResults ; (; ). overridevirtual . return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ; print the result according to set level (implemented for TMinuit for maintaining Minuit-style printing) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 862 of file TMinuitMinimizer.cxx. ◆ ProvidesError(). bool TMinuitMinimizer::ProvidesError ; (; ); const. inlineoverridevirtual . minimizer provides error and error matrix ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 137 of file TMinuitMinimizer.h. ◆ ReleaseVariable(). bool TMinuitMinimizer::ReleaseVariable ; (; unsigned int ; ivar). overridevirtual . release an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 396 of file TMinuitMinimizer.cxx. ◆ RetrieveErrorMatrix(). void TMinuitMinimizer::RetrieveErrorMatrix ; (; ). protected . retrieve error matrix from TMinuit ; Definition at line 601 of file TMinuitMinimizer.cxx. ◆ RetrieveParams(). void TMinuitMinimizer::RetrieveParams ; (; ). protected . retrieve minimum parameters and errors from TMinuit ; Definition at line 587 of file TMinuitMinimizer.cxx. ◆ Scan(). bool TMinuitMinimizer::Scan ; (; unsigned int ; i, . unsigned int & ; nstep, . double * ; x, . double * ; y, . double ; xmin = 0, . double ; xmax = 0 . ). overridevirtual . scan a parameter i around the minimum. ; A minimization must have been done before, return false if it is not the case ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 932 of file TMinuitMinimizer.cxx. ◆ SetDebug(). bool TMinuitMinimizer::SetDebug ; (; bool ; on = true). set debug mode. Return true if setting was successful ; Definition at line 1",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:22876,Modifiability,variab,variable,22876,"f file TMinuitMinimizer.cxx. ◆ RetrieveParams(). void TMinuitMinimizer::RetrieveParams ; (; ). protected . retrieve minimum parameters and errors from TMinuit ; Definition at line 587 of file TMinuitMinimizer.cxx. ◆ Scan(). bool TMinuitMinimizer::Scan ; (; unsigned int ; i, . unsigned int & ; nstep, . double * ; x, . double * ; y, . double ; xmin = 0, . double ; xmax = 0 . ). overridevirtual . scan a parameter i around the minimum. ; A minimization must have been done before, return false if it is not the case ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 932 of file TMinuitMinimizer.cxx. ◆ SetDebug(). bool TMinuitMinimizer::SetDebug ; (; bool ; on = true). set debug mode. Return true if setting was successful ; Definition at line 1049 of file TMinuitMinimizer.cxx. ◆ SetFixedVariable(). bool TMinuitMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 309 of file TMinuitMinimizer.cxx. ◆ SetFunction(). void TMinuitMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Definition at line 192 of file TMinuitMinimizer.cxx. ◆ SetLimitedVariable(). bool TMinuitMinimizer::SetLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower, . double ; upper . ). overridevirtual . set upper/lower limited variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 259 of file TMinuitMinimizer.cxx. ◆ SetLowerLimitedVariable(). bool TMinuitMinimizer::SetLowerLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower . ). overridevirtual . set lower limit variable (override if minimizer supports them ) ;",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:23500,Modifiability,variab,variable,23500,"etDebug(). bool TMinuitMinimizer::SetDebug ; (; bool ; on = true). set debug mode. Return true if setting was successful ; Definition at line 1049 of file TMinuitMinimizer.cxx. ◆ SetFixedVariable(). bool TMinuitMinimizer::SetFixedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val . ). overridevirtual . set fixed variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 309 of file TMinuitMinimizer.cxx. ◆ SetFunction(). void TMinuitMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Definition at line 192 of file TMinuitMinimizer.cxx. ◆ SetLimitedVariable(). bool TMinuitMinimizer::SetLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower, . double ; upper . ). overridevirtual . set upper/lower limited variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 259 of file TMinuitMinimizer.cxx. ◆ SetLowerLimitedVariable(). bool TMinuitMinimizer::SetLowerLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower . ). overridevirtual . set lower limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 275 of file TMinuitMinimizer.cxx. ◆ SetUpperLimitedVariable(). bool TMinuitMinimizer::SetUpperLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; upper . ). overridevirtual . set upper limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 282 of file TMinuitMinimizer.cxx. ◆ SetVariable(). bool TMinuitMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). override",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:23867,Modifiability,variab,variable,23867,"zer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 309 of file TMinuitMinimizer.cxx. ◆ SetFunction(). void TMinuitMinimizer::SetFunction ; (; const ROOT::Math::IMultiGenFunction & ; func). overridevirtual . set the function to minimize ; Implements ROOT::Math::Minimizer.; Definition at line 192 of file TMinuitMinimizer.cxx. ◆ SetLimitedVariable(). bool TMinuitMinimizer::SetLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower, . double ; upper . ). overridevirtual . set upper/lower limited variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 259 of file TMinuitMinimizer.cxx. ◆ SetLowerLimitedVariable(). bool TMinuitMinimizer::SetLowerLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower . ). overridevirtual . set lower limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 275 of file TMinuitMinimizer.cxx. ◆ SetUpperLimitedVariable(). bool TMinuitMinimizer::SetUpperLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; upper . ). overridevirtual . set upper limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 282 of file TMinuitMinimizer.cxx. ◆ SetVariable(). bool TMinuitMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set free variable ; Implements ROOT::Math::Minimizer.; Definition at line 243 of file TMinuitMinimizer.cxx. ◆ SetVariableLimits(). bool TMinuitMinimizer::SetVariableLimits ; (; unsigned int ; ivar, . double ; lower, . double ; upper . ). overridevirtual . set the limits of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 37",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:24234,Modifiability,variab,variable,24234,"itedVariable(). bool TMinuitMinimizer::SetLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower, . double ; upper . ). overridevirtual . set upper/lower limited variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 259 of file TMinuitMinimizer.cxx. ◆ SetLowerLimitedVariable(). bool TMinuitMinimizer::SetLowerLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower . ). overridevirtual . set lower limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 275 of file TMinuitMinimizer.cxx. ◆ SetUpperLimitedVariable(). bool TMinuitMinimizer::SetUpperLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; upper . ). overridevirtual . set upper limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 282 of file TMinuitMinimizer.cxx. ◆ SetVariable(). bool TMinuitMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set free variable ; Implements ROOT::Math::Minimizer.; Definition at line 243 of file TMinuitMinimizer.cxx. ◆ SetVariableLimits(). bool TMinuitMinimizer::SetVariableLimits ; (; unsigned int ; ivar, . double ; lower, . double ; upper . ). overridevirtual . set the limits of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 371 of file TMinuitMinimizer.cxx. ◆ SetVariableLowerLimit(). bool TMinuitMinimizer::SetVariableLowerLimit ; (; unsigned int ; ivar, . double ; lower . ). overridevirtual . set the lower-limit of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 358 of file TMinuitMinimizer.cxx. ◆ SetVariableStepSize(). bool TMinuitMinimizer::SetVari",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:24552,Modifiability,variab,variable,24552,"ROOT::Math::Minimizer.; Definition at line 259 of file TMinuitMinimizer.cxx. ◆ SetLowerLimitedVariable(). bool TMinuitMinimizer::SetLowerLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; lower . ). overridevirtual . set lower limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 275 of file TMinuitMinimizer.cxx. ◆ SetUpperLimitedVariable(). bool TMinuitMinimizer::SetUpperLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; upper . ). overridevirtual . set upper limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 282 of file TMinuitMinimizer.cxx. ◆ SetVariable(). bool TMinuitMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set free variable ; Implements ROOT::Math::Minimizer.; Definition at line 243 of file TMinuitMinimizer.cxx. ◆ SetVariableLimits(). bool TMinuitMinimizer::SetVariableLimits ; (; unsigned int ; ivar, . double ; lower, . double ; upper . ). overridevirtual . set the limits of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 371 of file TMinuitMinimizer.cxx. ◆ SetVariableLowerLimit(). bool TMinuitMinimizer::SetVariableLowerLimit ; (; unsigned int ; ivar, . double ; lower . ). overridevirtual . set the lower-limit of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 358 of file TMinuitMinimizer.cxx. ◆ SetVariableStepSize(). bool TMinuitMinimizer::SetVariableStepSize ; (; unsigned int ; ivar, . double ; step . ). overridevirtual . set the step size of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 342 of file TMinuitMinimizer.cxx. ◆ SetVariableUpperLimit(). bool TMinuitMinimizer::SetVariableUpperLimit ; (; uns",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:24829,Modifiability,variab,variable,24829,"devirtual . set lower limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 275 of file TMinuitMinimizer.cxx. ◆ SetUpperLimitedVariable(). bool TMinuitMinimizer::SetUpperLimitedVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step, . double ; upper . ). overridevirtual . set upper limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 282 of file TMinuitMinimizer.cxx. ◆ SetVariable(). bool TMinuitMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set free variable ; Implements ROOT::Math::Minimizer.; Definition at line 243 of file TMinuitMinimizer.cxx. ◆ SetVariableLimits(). bool TMinuitMinimizer::SetVariableLimits ; (; unsigned int ; ivar, . double ; lower, . double ; upper . ). overridevirtual . set the limits of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 371 of file TMinuitMinimizer.cxx. ◆ SetVariableLowerLimit(). bool TMinuitMinimizer::SetVariableLowerLimit ; (; unsigned int ; ivar, . double ; lower . ). overridevirtual . set the lower-limit of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 358 of file TMinuitMinimizer.cxx. ◆ SetVariableStepSize(). bool TMinuitMinimizer::SetVariableStepSize ; (; unsigned int ; ivar, . double ; step . ). overridevirtual . set the step size of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 342 of file TMinuitMinimizer.cxx. ◆ SetVariableUpperLimit(). bool TMinuitMinimizer::SetVariableUpperLimit ; (; unsigned int ; ivar, . double ; upper . ). overridevirtual . set the upper-limit of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 364 of file TMinuitMinimizer.cxx. ◆ SetVariableValue(). bool TMinuitMinimizer::SetVariableValue ; (; unsi",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:25109,Modifiability,variab,variable,25109,"const std::string & ; name, . double ; val, . double ; step, . double ; upper . ). overridevirtual . set upper limit variable (override if minimizer supports them ) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 282 of file TMinuitMinimizer.cxx. ◆ SetVariable(). bool TMinuitMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set free variable ; Implements ROOT::Math::Minimizer.; Definition at line 243 of file TMinuitMinimizer.cxx. ◆ SetVariableLimits(). bool TMinuitMinimizer::SetVariableLimits ; (; unsigned int ; ivar, . double ; lower, . double ; upper . ). overridevirtual . set the limits of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 371 of file TMinuitMinimizer.cxx. ◆ SetVariableLowerLimit(). bool TMinuitMinimizer::SetVariableLowerLimit ; (; unsigned int ; ivar, . double ; lower . ). overridevirtual . set the lower-limit of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 358 of file TMinuitMinimizer.cxx. ◆ SetVariableStepSize(). bool TMinuitMinimizer::SetVariableStepSize ; (; unsigned int ; ivar, . double ; step . ). overridevirtual . set the step size of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 342 of file TMinuitMinimizer.cxx. ◆ SetVariableUpperLimit(). bool TMinuitMinimizer::SetVariableUpperLimit ; (; unsigned int ; ivar, . double ; upper . ). overridevirtual . set the upper-limit of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 364 of file TMinuitMinimizer.cxx. ◆ SetVariableValue(). bool TMinuitMinimizer::SetVariableValue ; (; unsigned int ; ivar, . double ; val . ). overridevirtual . set the value of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 328 of file TMinuitMinimizer.cxx. ◆ Streamer(). virtual void TMinuitMinimizer::Streamer ; (; TBuffer & ; ). virtual . ◆ ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:25382,Modifiability,variab,variable,25382,"le(). bool TMinuitMinimizer::SetVariable ; (; unsigned int ; ivar, . const std::string & ; name, . double ; val, . double ; step . ). overridevirtual . set free variable ; Implements ROOT::Math::Minimizer.; Definition at line 243 of file TMinuitMinimizer.cxx. ◆ SetVariableLimits(). bool TMinuitMinimizer::SetVariableLimits ; (; unsigned int ; ivar, . double ; lower, . double ; upper . ). overridevirtual . set the limits of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 371 of file TMinuitMinimizer.cxx. ◆ SetVariableLowerLimit(). bool TMinuitMinimizer::SetVariableLowerLimit ; (; unsigned int ; ivar, . double ; lower . ). overridevirtual . set the lower-limit of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 358 of file TMinuitMinimizer.cxx. ◆ SetVariableStepSize(). bool TMinuitMinimizer::SetVariableStepSize ; (; unsigned int ; ivar, . double ; step . ). overridevirtual . set the step size of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 342 of file TMinuitMinimizer.cxx. ◆ SetVariableUpperLimit(). bool TMinuitMinimizer::SetVariableUpperLimit ; (; unsigned int ; ivar, . double ; upper . ). overridevirtual . set the upper-limit of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 364 of file TMinuitMinimizer.cxx. ◆ SetVariableValue(). bool TMinuitMinimizer::SetVariableValue ; (; unsigned int ; ivar, . double ; val . ). overridevirtual . set the value of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 328 of file TMinuitMinimizer.cxx. ◆ Streamer(). virtual void TMinuitMinimizer::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMinuitMinimizer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 272 of file TMinuitMinimizer.h. ◆ SuppressMinuitWarnings(). void TMinuitMinimizer::SuppressMinuitWarnings ; (; bool ; nowarn = true). suppr",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:25662,Modifiability,variab,variable,25662,"(). bool TMinuitMinimizer::SetVariableLimits ; (; unsigned int ; ivar, . double ; lower, . double ; upper . ). overridevirtual . set the limits of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 371 of file TMinuitMinimizer.cxx. ◆ SetVariableLowerLimit(). bool TMinuitMinimizer::SetVariableLowerLimit ; (; unsigned int ; ivar, . double ; lower . ). overridevirtual . set the lower-limit of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 358 of file TMinuitMinimizer.cxx. ◆ SetVariableStepSize(). bool TMinuitMinimizer::SetVariableStepSize ; (; unsigned int ; ivar, . double ; step . ). overridevirtual . set the step size of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 342 of file TMinuitMinimizer.cxx. ◆ SetVariableUpperLimit(). bool TMinuitMinimizer::SetVariableUpperLimit ; (; unsigned int ; ivar, . double ; upper . ). overridevirtual . set the upper-limit of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 364 of file TMinuitMinimizer.cxx. ◆ SetVariableValue(). bool TMinuitMinimizer::SetVariableValue ; (; unsigned int ; ivar, . double ; val . ). overridevirtual . set the value of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 328 of file TMinuitMinimizer.cxx. ◆ Streamer(). virtual void TMinuitMinimizer::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMinuitMinimizer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 272 of file TMinuitMinimizer.h. ◆ SuppressMinuitWarnings(). void TMinuitMinimizer::SuppressMinuitWarnings ; (; bool ; nowarn = true). suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ; Definition at line 873 of file TMinuitMinimizer.cxx. ◆ UseStaticMinuit(). bool TMinuitMinimizer::UseStaticMinuit ; (; bool ; on = true). static . sta",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:25924,Modifiability,variab,variable,25924," ◆ SetVariableLowerLimit(). bool TMinuitMinimizer::SetVariableLowerLimit ; (; unsigned int ; ivar, . double ; lower . ). overridevirtual . set the lower-limit of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 358 of file TMinuitMinimizer.cxx. ◆ SetVariableStepSize(). bool TMinuitMinimizer::SetVariableStepSize ; (; unsigned int ; ivar, . double ; step . ). overridevirtual . set the step size of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 342 of file TMinuitMinimizer.cxx. ◆ SetVariableUpperLimit(). bool TMinuitMinimizer::SetVariableUpperLimit ; (; unsigned int ; ivar, . double ; upper . ). overridevirtual . set the upper-limit of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 364 of file TMinuitMinimizer.cxx. ◆ SetVariableValue(). bool TMinuitMinimizer::SetVariableValue ; (; unsigned int ; ivar, . double ; val . ). overridevirtual . set the value of an existing variable ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 328 of file TMinuitMinimizer.cxx. ◆ Streamer(). virtual void TMinuitMinimizer::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMinuitMinimizer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 272 of file TMinuitMinimizer.h. ◆ SuppressMinuitWarnings(). void TMinuitMinimizer::SuppressMinuitWarnings ; (; bool ; nowarn = true). suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ; Definition at line 873 of file TMinuitMinimizer.cxx. ◆ UseStaticMinuit(). bool TMinuitMinimizer::UseStaticMinuit ; (; bool ; on = true). static . static function to switch on/off usage of static global TMinuit instance (gMinuit) By default it is used (i.e. ; is on). Method returns the previous state ; Definition at line 110 of file TMinuitMinimizer.cxx. ◆ VariableIndex(). int TMinuitMinimizer::VariableIndex ; (",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:27004,Modifiability,variab,variable,27004,.cxx. ◆ Streamer(). virtual void TMinuitMinimizer::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMinuitMinimizer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 272 of file TMinuitMinimizer.h. ◆ SuppressMinuitWarnings(). void TMinuitMinimizer::SuppressMinuitWarnings ; (; bool ; nowarn = true). suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ; Definition at line 873 of file TMinuitMinimizer.cxx. ◆ UseStaticMinuit(). bool TMinuitMinimizer::UseStaticMinuit ; (; bool ; on = true). static . static function to switch on/off usage of static global TMinuit instance (gMinuit) By default it is used (i.e. ; is on). Method returns the previous state ; Definition at line 110 of file TMinuitMinimizer.cxx. ◆ VariableIndex(). int TMinuitMinimizer::VariableIndex ; (; const std::string & ; name); const. overridevirtual . get index of variable given a variable given a name return always -1 . ; (It is Not implemented) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 434 of file TMinuitMinimizer.cxx. ◆ VariableName(). std::string TMinuitMinimizer::VariableName ; (; unsigned int ; ivar); const. overridevirtual . return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ; get name of variables (override if minimizer support storing of variable names) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 427 of file TMinuitMinimizer.cxx. ◆ X(). const double * TMinuitMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 120 of file TMinuitMinimizer.h. Member Data Documentation. ◆ fCovar. std::vector<double> TMinuitMinimizer::fCovar. private . Definition at line 262 of file TMinuitMinimizer.h. ◆ fDim. unsigned int TMinuitMinimizer::fDim. private . Definition at line 258 of file TMin,MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:27021,Modifiability,variab,variable,27021,.cxx. ◆ Streamer(). virtual void TMinuitMinimizer::Streamer ; (; TBuffer & ; ). virtual . ◆ StreamerNVirtual(). void TMinuitMinimizer::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 272 of file TMinuitMinimizer.h. ◆ SuppressMinuitWarnings(). void TMinuitMinimizer::SuppressMinuitWarnings ; (; bool ; nowarn = true). suppress the minuit warnings (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ; Definition at line 873 of file TMinuitMinimizer.cxx. ◆ UseStaticMinuit(). bool TMinuitMinimizer::UseStaticMinuit ; (; bool ; on = true). static . static function to switch on/off usage of static global TMinuit instance (gMinuit) By default it is used (i.e. ; is on). Method returns the previous state ; Definition at line 110 of file TMinuitMinimizer.cxx. ◆ VariableIndex(). int TMinuitMinimizer::VariableIndex ; (; const std::string & ; name); const. overridevirtual . get index of variable given a variable given a name return always -1 . ; (It is Not implemented) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 434 of file TMinuitMinimizer.cxx. ◆ VariableName(). std::string TMinuitMinimizer::VariableName ; (; unsigned int ; ivar); const. overridevirtual . return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ; get name of variables (override if minimizer support storing of variable names) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 427 of file TMinuitMinimizer.cxx. ◆ X(). const double * TMinuitMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 120 of file TMinuitMinimizer.h. Member Data Documentation. ◆ fCovar. std::vector<double> TMinuitMinimizer::fCovar. private . Definition at line 262 of file TMinuitMinimizer.h. ◆ fDim. unsigned int TMinuitMinimizer::fDim. private . Definition at line 258 of file TMin,MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:27415,Modifiability,variab,variables,27415,gs (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ; Definition at line 873 of file TMinuitMinimizer.cxx. ◆ UseStaticMinuit(). bool TMinuitMinimizer::UseStaticMinuit ; (; bool ; on = true). static . static function to switch on/off usage of static global TMinuit instance (gMinuit) By default it is used (i.e. ; is on). Method returns the previous state ; Definition at line 110 of file TMinuitMinimizer.cxx. ◆ VariableIndex(). int TMinuitMinimizer::VariableIndex ; (; const std::string & ; name); const. overridevirtual . get index of variable given a variable given a name return always -1 . ; (It is Not implemented) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 434 of file TMinuitMinimizer.cxx. ◆ VariableName(). std::string TMinuitMinimizer::VariableName ; (; unsigned int ; ivar); const. overridevirtual . return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ; get name of variables (override if minimizer support storing of variable names) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 427 of file TMinuitMinimizer.cxx. ◆ X(). const double * TMinuitMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 120 of file TMinuitMinimizer.h. Member Data Documentation. ◆ fCovar. std::vector<double> TMinuitMinimizer::fCovar. private . Definition at line 262 of file TMinuitMinimizer.h. ◆ fDim. unsigned int TMinuitMinimizer::fDim. private . Definition at line 258 of file TMinuitMinimizer.h. ◆ fErrors. std::vector<double> TMinuitMinimizer::fErrors. private . Definition at line 261 of file TMinuitMinimizer.h. ◆ fgMinuit. TMinuit * TMinuitMinimizer::fgMinuit = nullptr. staticprivate . Definition at line 267 of file TMinuitMinimizer.h. ◆ fgUsed. bool TMinuitMinimizer::fgUsed = false. staticprivate . Definition at line 269 of file TMinuitMinimizer.h. ◆ fgUseS,MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:27467,Modifiability,variab,variable,27467,gs (if called with false will enable them) By default they are suppressed only when the printlevel is <= 0 ; Definition at line 873 of file TMinuitMinimizer.cxx. ◆ UseStaticMinuit(). bool TMinuitMinimizer::UseStaticMinuit ; (; bool ; on = true). static . static function to switch on/off usage of static global TMinuit instance (gMinuit) By default it is used (i.e. ; is on). Method returns the previous state ; Definition at line 110 of file TMinuitMinimizer.cxx. ◆ VariableIndex(). int TMinuitMinimizer::VariableIndex ; (; const std::string & ; name); const. overridevirtual . get index of variable given a variable given a name return always -1 . ; (It is Not implemented) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 434 of file TMinuitMinimizer.cxx. ◆ VariableName(). std::string TMinuitMinimizer::VariableName ; (; unsigned int ; ivar); const. overridevirtual . return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ; get name of variables (override if minimizer support storing of variable names) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 427 of file TMinuitMinimizer.cxx. ◆ X(). const double * TMinuitMinimizer::X ; (; ); const. inlineoverridevirtual . return pointer to X values at the minimum ; Implements ROOT::Math::Minimizer.; Definition at line 120 of file TMinuitMinimizer.h. Member Data Documentation. ◆ fCovar. std::vector<double> TMinuitMinimizer::fCovar. private . Definition at line 262 of file TMinuitMinimizer.h. ◆ fDim. unsigned int TMinuitMinimizer::fDim. private . Definition at line 258 of file TMinuitMinimizer.h. ◆ fErrors. std::vector<double> TMinuitMinimizer::fErrors. private . Definition at line 261 of file TMinuitMinimizer.h. ◆ fgMinuit. TMinuit * TMinuitMinimizer::fgMinuit = nullptr. staticprivate . Definition at line 267 of file TMinuitMinimizer.h. ◆ fgUsed. bool TMinuitMinimizer::fgUsed = false. staticprivate . Definition at line 269 of file TMinuitMinimizer.h. ◆ fgUseS,MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:2925,Performance,perform,perform,2925,"dm () const override;  return expected distance reached from the minimum ;  ; const double * Errors () const override;  return errors at the minimum ;  ; bool FixVariable (unsigned int) override;  fix an existing variable ;  ; bool GetCovMatrix (double *cov) const override;  Fill the passed array with the covariance matrix elements if the variable is fixed or const the value is zero. ;  ; bool GetHessianMatrix (double *h) const override;  Fill the passed array with the Hessian matrix elements The Hessian matrix is the matrix of the second derivatives and is the inverse of the covariance matrix If the variable is fixed or const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit::ParameterSettings &) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; double GlobalCC (unsigned int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:3277,Performance,perform,perform,3277,"r const the values for that variables are zero. ;  ; bool GetMinosError (unsigned int i, double &errLow, double &errUp, int=0) override;  minos error for variable i, return false if Minos failed ;  ; bool GetVariableSettings (unsigned int, ROOT::Fit::ParameterSettings &) const override;  get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ;  ; double GlobalCC (unsigned int) const override;  global correlation coefficient for variable i ;  ; bool Hesse () override;  perform a full calculation of the Hessian matrix for error calculation ;  ; virtual TClass * IsA () const;  ; bool IsFixedVariable (unsigned int) const override;  query if an existing variable is fixed (i.e. ;  ; const double * MinGradient () const override;  return pointer to gradient values at the minimum ;  ; bool Minimize () override;  method to perform the minimization ;  ; int MinosStatus () const override;  minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ;  ; double MinValue () const override;  return minimum function value ;  ; unsigned int NCalls () const override;  number of function calls to reach the minimum ;  ; unsigned int NDim () const override;  this is <= Function().NDim() which is the total number of variables (free+ constrained ones) ;  ; unsigned int NFree () const override;  number of free variables (real dimension of the problem) this is <= Function().NDim() which is the total ;  ; void PrintResults () override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const = 0; ;  ; bool ProvidesError () const override;  minimizer provides error and error matrix ;  ; bool ReleaseVariable (unsigned int) override;  release an existing variable ;  ; bool Scan (unsigned int i, unsigned int &nstep, double *x, double *y, double xmin=0, double xmax=0) override;  scan a parameter i around the minimum. ;  ; bool SetDeb",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:7357,Performance,perform,performed,7357,":string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string VariableName (unsigned int ivar) const override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivat",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:9486,Performance,perform,perform,9486,"fault options (defined in MinimizerOptions) ;  ; void SetErrorDef (double up);  set scale for calculating the errors ;  ; void SetExtraOptions (const IOptions &extraOptions);  set only the extra options ;  ; virtual void SetHessianFunction (std::function< bool(std::span< const double >, double *)>);  set the function implementing Hessian computation (re-implemented by Minimizer using it) ;  ; void SetMaxFunctionCalls (unsigned int maxfcn);  set maximum of function calls ;  ; void SetMaxIterations (unsigned int maxiter);  set maximum iterations (one iteration can have many function calls) ;  ; void SetOptions (const MinimizerOptions &opt);  set all options in one go ;  ; void SetPrecision (double prec);  set in the minimizer the objective function evaluation precision ( a value <=0 means the minimizer will choose its optimal value automatically, i.e. ;  ; void SetPrintLevel (int level);  set print level ;  ; void SetStrategy (int strategyLevel);  set the strategy ;  ; void SetTolerance (double tol);  set the tolerance ;  ; void SetValidError (bool on);  flag to check if minimizer needs to perform accurate error analysis (e.g. run Hesse for Minuit) ;  ; virtual bool SetVariableInitialRange (unsigned int, double, double);  set the initial range of an existing variable ;  ; template<class VariableIterator > ; int SetVariables (const VariableIterator &begin, const VariableIterator &end);  add variables . Return number of variables successfully added ;  ; virtual bool SetVariableValues (const double *x);  set the values of all existing variables (array must be dimensioned to the size of the existing parameters) ;  ; int Status () const;  status code of minimizer ;  ; int Strategy () const;  strategy ;  ; double Tolerance () const;  absolute tolerance ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool UseStaticMinuit (bool ",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:18287,Performance,perform,perform,18287,"Error(). bool TMinuitMinimizer::GetMinosError ; (; unsigned int ; i, . double & ; errLow, . double & ; errUp, . int ; = 0 . ). overridevirtual . minos error for variable i, return false if Minos failed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 746 of file TMinuitMinimizer.cxx. ◆ GetVariableSettings(). bool TMinuitMinimizer::GetVariableSettings ; (; unsigned int ; ivar, . ROOT::Fit::ParameterSettings & ; var . ); const. overridevirtual . get variable settings in a variable object (like ROOT::Fit::ParamsSettings) ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 411 of file TMinuitMinimizer.cxx. ◆ GlobalCC(). double TMinuitMinimizer::GlobalCC ; (; unsigned int ; i); const. overridevirtual . global correlation coefficient for variable i ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 734 of file TMinuitMinimizer.cxx. ◆ Hesse(). bool TMinuitMinimizer::Hesse ; (; ). overridevirtual . perform a full calculation of the Hessian matrix for error calculation ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 1004 of file TMinuitMinimizer.cxx. ◆ InitTMinuit(). void TMinuitMinimizer::InitTMinuit ; (; int ; ndim). protected . initialize the TMinuit instance ; Definition at line 117 of file TMinuitMinimizer.cxx. ◆ IsA(). virtual TClass * TMinuitMinimizer::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 272 of file TMinuitMinimizer.h. ◆ IsFixedVariable(). bool TMinuitMinimizer::IsFixedVariable ; (; unsigned int ; ivar); const. overridevirtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 404 of file TMinuitMinimizer.cxx. ◆ MinGradient(). const double * TMinuitMinimizer::MinGradient ; (; ); const. inlineoverridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Defi",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:19473,Performance,perform,perform,19473,InitTMinuit ; (; int ; ndim). protected . initialize the TMinuit instance ; Definition at line 117 of file TMinuitMinimizer.cxx. ◆ IsA(). virtual TClass * TMinuitMinimizer::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Definition at line 272 of file TMinuitMinimizer.h. ◆ IsFixedVariable(). bool TMinuitMinimizer::IsFixedVariable ; (; unsigned int ; ivar); const. overridevirtual . query if an existing variable is fixed (i.e. ; considered constant in the minimization) note that by default all variables are not fixed ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 404 of file TMinuitMinimizer.cxx. ◆ MinGradient(). const double * TMinuitMinimizer::MinGradient ; (; ); const. inlineoverridevirtual . return pointer to gradient values at the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 123 of file TMinuitMinimizer.h. ◆ Minimize(). bool TMinuitMinimizer::Minimize ; (; ). overridevirtual . method to perform the minimization ; Implements ROOT::Math::Minimizer.; Definition at line 440 of file TMinuitMinimizer.cxx. ◆ MinosStatus(). int TMinuitMinimizer::MinosStatus ; (; ); const. inlineoverridevirtual . minos status code of last Minos run minos status = -1 : Minos is not run = 0 : last MINOS run was successful > 0 : some problems encountered when running MINOS ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 182 of file TMinuitMinimizer.h. ◆ MinValue(). double TMinuitMinimizer::MinValue ; (; ); const. overridevirtual . return minimum function value ; Implements ROOT::Math::Minimizer.; Definition at line 644 of file TMinuitMinimizer.cxx. ◆ NCalls(). unsigned int TMinuitMinimizer::NCalls ; (; ); const. overridevirtual . number of function calls to reach the minimum ; Reimplemented from ROOT::Math::Minimizer.; Definition at line 638 of file TMinuitMinimizer.cxx. ◆ NDim(). unsigned int TMinuitMinimizer::NDim ; (; ); const. inlineoverridevirtual . this is <= Function().NDim() which is the total num,MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:7384,Security,validat,validation,7384,":string &name) const override;  get index of variable given a variable given a name return always -1 . ;  ; std::string VariableName (unsigned int ivar) const override;  return reference to the objective function virtual const ROOT::Math::IGenFunction & Function() const; ;  ; const double * X () const override;  return pointer to X values at the minimum ;  ;  Public Member Functions inherited from ROOT::Math::Minimizer;  Minimizer ();  Default constructor. ;  ;  Minimizer (Minimizer &&)=delete;  ;  Minimizer (Minimizer const &)=delete;  ; virtual ~Minimizer ();  Destructor (no operations). ;  ; virtual void Clear ();  reset for consecutive minimization - implement if needed ;  ; virtual double Correlation (unsigned int i, unsigned int j) const;  return correlation coefficient between variable i and j. ;  ; double ErrorDef () const;  return the statistical scale used for calculate the error is typically 1 for Chi2 and 0.5 for likelihood minimization ;  ; bool IsValidError () const;  return true if Minimizer has performed a detailed error validation (e.g. run Hesse for Minuit) ;  ; unsigned int MaxFunctionCalls () const;  max number of function calls ;  ; unsigned int MaxIterations () const;  max iterations ;  ; virtual unsigned int NIterations () const;  number of iterations to reach the minimum ;  ; Minimizer & operator= (Minimizer &&)=delete;  ; Minimizer & operator= (Minimizer const &)=delete;  ; virtual MinimizerOptions Options () const;  retrieve the minimizer options (implement derived class if needed) ;  ; double Precision () const;  precision of minimizer in the evaluation of the objective function ( a value <=0 corresponds to the let the minimizer choose its default one) ;  ; int PrintLevel () const;  minimizer configuration parameters ;  ; virtual bool SetCovariance (std::span< const double > cov, unsigned int nrow);  set initial covariance matrix ;  ; virtual bool SetCovarianceDiag (std::span< const double > d2, unsigned int n);  set initial second derivat",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMinuitMinimizer.html:11944,Security,validat,validated,11944,"nuit instance ;  ; void RetrieveErrorMatrix ();  retrieve error matrix from TMinuit ;  ; void RetrieveParams ();  retrieve minimum parameters and errors from TMinuit ;  . Static Protected Member Functions; static void Fcn (int &, double *, double &f, double *, int);  implementation of FCN for Minuit ;  ; static void FcnGrad (int &, double *g, double &f, double *, int);  implementation of FCN for Minuit when user provided gradient is used ;  . Private Attributes; std::vector< double > fCovar;  ; unsigned int fDim;  ; std::vector< double > fErrors;  ; bool fMinosRun;  ; int fMinosStatus = -1;  ; TMinuit * fMinuit;  ; std::vector< double > fParams;  ; ROOT::Minuit::EMinimizerType fType;  ; bool fUsed;  . Static Private Attributes; static TMinuit * fgMinuit = nullptr;  ; static bool fgUsed = false;  ; static bool fgUseStaticMinuit = true;  . Additional Inherited Members;  Protected Attributes inherited from ROOT::Math::Minimizer; MinimizerOptions fOptions;  minimizer options ;  ; int fStatus = -1;  status of minimizer ;  ; bool fValidError = false;  flag to control if errors have been validated (Hesse has been run in case of Minuit) ;  . #include <TMinuitMinimizer.h>. Inheritance diagram for TMinuitMinimizer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMinuitMinimizer() [1/2]. TMinuitMinimizer::TMinuitMinimizer ; (; ROOT::Minuit::EMinimizerType ; type = ROOT::Minuit::kMigrad, . unsigned int ; ndim = 0 . ). Default constructor. ; Definition at line 57 of file TMinuitMinimizer.cxx. ◆ TMinuitMinimizer() [2/2]. TMinuitMinimizer::TMinuitMinimizer ; (; const char * ; type, . unsigned int ; ndim = 0 . ). Constructor from a char * (used by PM) ; Definition at line 73 of file TMinuitMinimizer.cxx. ◆ ~TMinuitMinimizer(). TMinuitMinimizer::~TMinuitMinimizer ; (; ). override . Destructor (no operations) ; Definition at line 101 of file TMinuitMinimizer.cxx. Member Function Documentation.",MatchSource.WIKI,doc/master/classTMinuitMinimizer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMinuitMinimizer.html
https://root.cern/doc/master/classTMixture.html:4989,Availability,error,error,4989,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:5078,Availability,error,error,5078,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:5233,Availability,error,error,5233,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:5530,Availability,error,error,5530,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:9614,Availability,error,error,9614,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFil",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:4995,Integrability,message,message,4995,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:5536,Integrability,message,message,5536,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:6526,Integrability,message,message,6526,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:9620,Integrability,message,message,9620,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFil",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:9993,Integrability,message,message,9993," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttribu",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:1057,Modifiability,inherit,inherited,1057,". master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMixture Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; Manages a detector mixture. ; See class TGeometry. ; Definition at line 27 of file TMixture.h. Public Member Functions;  TMixture ();  Mixture default constructor. ;  ;  TMixture (const char *name, const char *title, Int_t nmixt);  Mixture normal constructor. ;  ;  ~TMixture () override;  Mixture default destructor. ;  ; virtual void DefineElement (Int_t n, Float_t a, Float_t z, Float_t w);  Define one mixture element. ;  ; Float_t * GetAmixt () const;  ; Int_t GetNmixt () const;  ; Float_t * GetWmixt () const;  ; Float_t * GetZmixt () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMaterial;  TMaterial ();  Material default constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density);  Material normal constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density, Float_t radl, Float_t inter);  Material normal constructor. ;  ;  ~TMaterial () override;  Material default destructor. ;  ; virtual Float_t GetA () const;  ; virtual Float_t GetDensity () const;  ; virtual Float_t GetInterLength () const;  ; virtual Int_t GetNumber () const;  ; virtual Float_t GetRadLength () const;  ; virtual Float_t GetZ () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clea",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:1792,Modifiability,inherit,inherited,1792,"Float_t w);  Define one mixture element. ;  ; Float_t * GetAmixt () const;  ; Int_t GetNmixt () const;  ; Float_t * GetWmixt () const;  ; Float_t * GetZmixt () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMaterial;  TMaterial ();  Material default constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density);  Material normal constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density, Float_t radl, Float_t inter);  Material normal constructor. ;  ;  ~TMaterial () override;  Material default destructor. ;  ; virtual Float_t GetA () const;  ; virtual Float_t GetDensity () const;  ; virtual Float_t GetInterLength () const;  ; virtual Int_t GetNumber () const;  ; virtual Float_t GetRadLength () const;  ; virtual Float_t GetZ () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TCla",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:3532,Modifiability,inherit,inherited,3532,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:4625,Modifiability,inherit,inheritance,4625,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:6624,Modifiability,inherit,inherits,6624,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:6741,Modifiability,inherit,inherits,6741,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:10300,Modifiability,inherit,inherited,10300,"tDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TAttFill;  TAttFill ();  AttFill default constructor. ;  ;  TAttFill (Color_t fcolor, Style_t fstyle);  AttFill normal constructor. ;  ; virtual ~TAttFill ();  AttFill destructor. ;  ; void Copy (TAttFill &attfill) const;  Copy this fill attributes to a new TAttFill. ;  ; virtual Color_t GetFillColor () const;  Return the fill area color. ;  ; virtual Style_t GetFillStyle () const;  Return the fill area style. ;  ; virtual Bool_t IsTransparent () const;  ; virtual void Modify ();  Change current fill area attributes if necessary. ;  ; virtual void ResetAttFill (Option_t *option="""");  Reset this fill attributes to default values. ;  ; virtual void SaveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:11749,Modifiability,inherit,inherited,11749,"aveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMaterial; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t * fAmixt;  ; Int_t fNmixt;  ; Float_t * fWmixt;  ; Float_t * fZmixt;  ;",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:11962,Modifiability,inherit,inherited,11962,"aveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMaterial; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t * fAmixt;  ; Int_t fNmixt;  ; Float_t * fWmixt;  ; Float_t * fZmixt;  ;",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:12172,Modifiability,inherit,inherited,12172,"aveFillAttributes (std::ostream &out, const char *name, Int_t coldef=1, Int_t stydef=1001);  Save fill attributes as C++ statement(s) on output stream out. ;  ; virtual void SetFillAttributes ();  Invoke the DialogCanvas Fill attributes. ;  ; virtual void SetFillColor (Color_t fcolor);  Set the fill area color. ;  ; virtual void SetFillColorAlpha (Color_t fcolor, Float_t falpha);  Set a transparent fill color. ;  ; virtual void SetFillStyle (Style_t fstyle);  Set the fill area style. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMaterial; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t * fAmixt;  ; Int_t fNmixt;  ; Float_t * fWmixt;  ; Float_t * fZmixt;  ;",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:12690,Modifiability,inherit,inherited,12690,"rom TMaterial; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t * fAmixt;  ; Int_t fNmixt;  ; Float_t * fWmixt;  ; Float_t * fZmixt;  ;  Protected Attributes inherited from TMaterial; Float_t fA;  ; Float_t fDensity;  ; Float_t fInterLength;  ; Int_t fNumber;  ; Float_t fRadLength;  ; Float_t fZ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  ESta",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:12994,Modifiability,inherit,inherited,12994,"ersion ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t * fAmixt;  ; Int_t fNmixt;  ; Float_t * fWmixt;  ; Float_t * fZmixt;  ;  Protected Attributes inherited from TMaterial; Float_t fA;  ; Float_t fDensity;  ; Float_t fInterLength;  ; Int_t fNumber;  ; Float_t fRadLength;  ; Float_t fZ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:13159,Modifiability,inherit,inherited,13159,"ersion ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t * fAmixt;  ; Int_t fNmixt;  ; Float_t * fWmixt;  ; Float_t * fZmixt;  ;  Protected Attributes inherited from TMaterial; Float_t fA;  ; Float_t fDensity;  ; Float_t fInterLength;  ; Int_t fNumber;  ; Float_t fRadLength;  ; Float_t fZ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:13241,Modifiability,inherit,inherited,13241,"ersion ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t * fAmixt;  ; Int_t fNmixt;  ; Float_t * fWmixt;  ; Float_t * fZmixt;  ;  Protected Attributes inherited from TMaterial; Float_t fA;  ; Float_t fDensity;  ; Float_t fInterLength;  ; Int_t fNumber;  ; Float_t fRadLength;  ; Float_t fZ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:13396,Modifiability,inherit,inherited,13396,"atus of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TAttFill; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Protected Attributes; Float_t * fAmixt;  ; Int_t fNmixt;  ; Float_t * fWmixt;  ; Float_t * fZmixt;  ;  Protected Attributes inherited from TMaterial; Float_t fA;  ; Float_t fDensity;  ; Float_t fInterLength;  ; Int_t fNumber;  ; Float_t fRadLength;  ; Float_t fZ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMixture.h>. Inheritance diagram for TMixture:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instea",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:14037,Modifiability,inherit,inherited,14037,"ributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMixture.h>. Inheritance diagram for TMixture:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMixture() [1/2]. TMixture::TMixture ; (; ). Mixture default constructor. ; Definition at line 27 of file TMixture.cxx. ◆ TMixture() [2/2]. TMixture::TMixture ; (; const char * ; name, . const char * ; title, . Int_t ; nmixt . ). Mixture normal constructor. ; Defines mixture OR COMPOUND as composed by the basic nmixt materials defined later by DefineElement.; If nmixt > 0 then Wmixt contains the PROPORTION BY WEIGHTS of each basic material in the mixture.; If nmixt < 0 then Wmixt contains the number of atoms of a given kind into the molecule of the COMPOUND In this case, Wmixt is changed to relative weights.; nb : the radiation l",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:14136,Modifiability,inherit,inherited,14136,"ributes inherited from TNamed; TString fName;  ; TString fTitle;  ;  Protected Attributes inherited from TAttFill; Color_t fFillColor;  Fill area color. ;  ; Style_t fFillStyle;  Fill area style. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMixture.h>. Inheritance diagram for TMixture:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMixture() [1/2]. TMixture::TMixture ; (; ). Mixture default constructor. ; Definition at line 27 of file TMixture.cxx. ◆ TMixture() [2/2]. TMixture::TMixture ; (; const char * ; name, . const char * ; title, . Int_t ; nmixt . ). Mixture normal constructor. ; Defines mixture OR COMPOUND as composed by the basic nmixt materials defined later by DefineElement.; If nmixt > 0 then Wmixt contains the PROPORTION BY WEIGHTS of each basic material in the mixture.; If nmixt < 0 then Wmixt contains the number of atoms of a given kind into the molecule of the COMPOUND In this case, Wmixt is changed to relative weights.; nb : the radiation l",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:325,Safety,detect,detector,325,". ROOT: TMixture Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMixture Class ReferenceGraphics » 3D Graphics » Basic 3D graphics. ; Manages a detector mixture. ; See class TGeometry. ; Definition at line 27 of file TMixture.h. Public Member Functions;  TMixture ();  Mixture default constructor. ;  ;  TMixture (const char *name, const char *title, Int_t nmixt);  Mixture normal constructor. ;  ;  ~TMixture () override;  Mixture default destructor. ;  ; virtual void DefineElement (Int_t n, Float_t a, Float_t z, Float_t w);  Define one mixture element. ;  ; Float_t * GetAmixt () const;  ; Int_t GetNmixt () const;  ; Float_t * GetWmixt () const;  ; Float_t * GetZmixt () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream a class object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMaterial;  TMaterial ();  Material default constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density);  Material normal constructor. ;  ;  TMaterial (const char *name, const char *title, Float_t a, Float_t z, Float_t density, Float_t radl, Float_t inter);  Material normal constructor. ;  ;  ~TMaterial () override;  Material default destructor. ;  ; virtual Float_t GetA () const;  ; virtual Float_t GetDensity () const;  ; virtual Float_t GetInterLength () const;  ; virtual Int_t GetNumber () const;  ; virtual Float_t GetRadLength () const;  ; virtual Float_t GetZ () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~T",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMixture.html:2660,Security,hash,hash,2660,"ngth () const;  ; virtual Float_t GetZ () const;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMixture.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMixture.html
https://root.cern/doc/master/classTMLPAnalyzer.html:4234,Availability,error,error,4234,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:4323,Availability,error,error,4323,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:4478,Availability,error,error,4478,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:4775,Availability,error,error,4775,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:9339,Availability,error,error,9339," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:15607,Deployability,continuous,continuous,15607," sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the network. ; Definition at line 311 of file TMLPAnalyzer.cxx. ◆ DrawNetwork(). void TMLPAnalyzer::DrawNetwork ; (; Int_t ; neuron, . const char * ; signal, . const char * ; bg . ). Draws the distribution of the neural network (using ith neuron). ; Two distributions are drawn, for events passing respectively the ""signal"" and ""background"" cuts. Only the test sample is used. ; Definition at line 337 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviation(). TProfile * TMLPAnalyzer::DrawTruthDeviation ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ; This method is mainly useful when doing regression analysis with the MLP (i.e. not classification, but continuous truth values). The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Options are passed to TProfile::Draw ; Definition at line 398 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviationInOut(). TProfile * TMLPAnalyzer::DrawTruthDeviationInOut ; (; Int_t ; innode, . Int_t ; outnode = 0, . Option_t * ; option = """" . ). Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ; The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Options are passed to TProfile::Draw ; Definition at line 474 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviationInsOut(). THStack * TMLPAnalyzer::DrawTruthDeviationInsOut ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ; The re",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:17145,Deployability,continuous,continuous,17145,"gram is returned. It is not drawn if option ""goff"" is specified. Options are passed to TProfile::Draw ; Definition at line 474 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviationInsOut(). THStack * TMLPAnalyzer::DrawTruthDeviationInsOut ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ; The returned THStack contains all the TProfiles. It is drawn unless the option ""goff"" is specified. Options are passed to TProfile::Draw. ; Definition at line 506 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviations(). THStack * TMLPAnalyzer::DrawTruthDeviations ; (; Option_t * ; option = """"). Creates TProfiles of the difference of the MLP output minus the true value vs the true value, one for each output, filled with the test data events. ; This method is mainly useful when doing regression analysis with the MLP (i.e. not classification, but continuous truth values). The returned THStack contains all the TProfiles. It is drawn unless the option ""goff"" is specified. Options are passed to TProfile::Draw. ; Definition at line 431 of file TMLPAnalyzer.cxx. ◆ GatherInformations(). void TMLPAnalyzer::GatherInformations ; (; ). Collect information about what is useful in the network. ; This method has to be called first when analyzing a network. Fills the two analysis trees. ; Definition at line 170 of file TMLPAnalyzer.cxx. ◆ GetInputNeuronTitle(). const char * TMLPAnalyzer::GetInputNeuronTitle ; (; Int_t ; in). protected . Returns the name of any neuron from the input layer. ; Definition at line 128 of file TMLPAnalyzer.cxx. ◆ GetIOTree(). TTree * TMLPAnalyzer::GetIOTree ; (; ); const. inline . Definition at line 56 of file TMLPAnalyzer.h. ◆ GetLayers(). Int_t TMLPAnalyzer::GetLayers ; (; ). protected . Returns the number of layers. ; Definition at line 54 of file TMLPAnalyzer.cxx. ◆ GetNeuronFormula(). TString TMLPAnalyzer::Ge",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:4240,Integrability,message,message,4240,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:4781,Integrability,message,message,4781,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:5983,Integrability,message,message,5983,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:9345,Integrability,message,message,9345," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:9718,Integrability,message,message,9718," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Prote",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:431,Modifiability,variab,variables,431,". ROOT: TMLPAnalyzer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMLPAnalyzer Class Reference. ; This utility class contains a set of tests useful when developing a neural network. ; It allows you to check for unneeded variables, and to control the network structure. ; Definition at line 25 of file TMLPAnalyzer.h. Public Member Functions;  TMLPAnalyzer (TMultiLayerPerceptron &net);  ;  TMLPAnalyzer (TMultiLayerPerceptron *net);  ;  ~TMLPAnalyzer () override;  Destructor. ;  ; void CheckNetwork ();  Gives some information about the network in the terminal. ;  ; void DrawDInput (Int_t i);  Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Create",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:2473,Modifiability,inherit,inherited,2473,"TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Creates TProfiles of the difference of the MLP output minus the true value vs the true value, one for each output, filled with the test data events. ;  ; void GatherInformations ();  Collect information about what is useful in the network. ;  ; TTree * GetIOTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:3870,Modifiability,inherit,inheritance,3870,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:6081,Modifiability,inherit,inherits,6081,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:6198,Modifiability,inherit,inherits,6198,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:10219,Modifiability,inherit,inherited,10219,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; const char * GetInputNeuronTitle (Int_t in);  Returns the name of any neuron from the input layer. ;  ; Int_t GetLayers ();  Returns the number of layers. ;  ; TString GetNeuronFormula (Int_t idx);  Returns the formula used as input for neuron (idx) in the first layer. ;  ; Int_t GetNeurons (Int_t layer);  Returns the number of neurons in given layer. ;  ; const char * GetOutputNeuronTitle (Int_t out);  Returns the name of any neuron from the output layer. ;  ;  Protected Member Functions inh",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:10880,Modifiability,layers,layers,10880,"  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; const char * GetInputNeuronTitle (Int_t in);  Returns the name of any neuron from the input layer. ;  ; Int_t GetLayers ();  Returns the number of layers. ;  ; TString GetNeuronFormula (Int_t idx);  Returns the formula used as input for neuron (idx) in the first layer. ;  ; Int_t GetNeurons (Int_t layer);  Returns the number of neurons in given layer. ;  ; const char * GetOutputNeuronTitle (Int_t out);  Returns the name of any neuron from the output layer. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; TTree * fAnalysisTree;  ; TTree * fIOTree;  ; TMultiLayerPerceptron * fNetwork;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecat",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:11227,Modifiability,inherit,inherited,11227,"ar * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; const char * GetInputNeuronTitle (Int_t in);  Returns the name of any neuron from the input layer. ;  ; Int_t GetLayers ();  Returns the number of layers. ;  ; TString GetNeuronFormula (Int_t idx);  Returns the formula used as input for neuron (idx) in the first layer. ;  ; Int_t GetNeurons (Int_t layer);  Returns the number of neurons in given layer. ;  ; const char * GetOutputNeuronTitle (Int_t out);  Returns the name of any neuron from the output layer. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; TTree * fAnalysisTree;  ; TTree * fIOTree;  ; TMultiLayerPerceptron * fNetwork;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMLPAnal",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:11557,Modifiability,inherit,inherited,11557,"tObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; const char * GetInputNeuronTitle (Int_t in);  Returns the name of any neuron from the input layer. ;  ; Int_t GetLayers ();  Returns the number of layers. ;  ; TString GetNeuronFormula (Int_t idx);  Returns the formula used as input for neuron (idx) in the first layer. ;  ; Int_t GetNeurons (Int_t layer);  Returns the number of neurons in given layer. ;  ; const char * GetOutputNeuronTitle (Int_t out);  Returns the name of any neuron from the output layer. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; TTree * fAnalysisTree;  ; TTree * fIOTree;  ; TMultiLayerPerceptron * fNetwork;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMLPAnalyzer.h>. Inheritance diagram for TMLPAnalyzer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMLPAnalyzer() [1/2]. TMLPAnalyzer::TMLPAnalyzer ; (; TMultiLayerPerceptron & ; net). inline . Definition at line 40 of file TMLPAnalyzer.h. ◆ TMLP",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:12198,Modifiability,inherit,inherited,12198,"tions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Attributes; TTree * fAnalysisTree;  ; TTree * fIOTree;  ; TMultiLayerPerceptron * fNetwork;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMLPAnalyzer.h>. Inheritance diagram for TMLPAnalyzer:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMLPAnalyzer() [1/2]. TMLPAnalyzer::TMLPAnalyzer ; (; TMultiLayerPerceptron & ; net). inline . Definition at line 40 of file TMLPAnalyzer.h. ◆ TMLPAnalyzer() [2/2]. TMLPAnalyzer::TMLPAnalyzer ; (; TMultiLayerPerceptron * ; net). inline . Definition at line 42 of file TMLPAnalyzer.h. ◆ ~TMLPAnalyzer(). TMLPAnalyzer::~TMLPAnalyzer ; (; ). override . Destructor. ; Definition at line 45 of file TMLPAnalyzer.cxx. Member Function Documentation. ◆ CheckNetwork(). void TMLPAnalyzer::CheckNetwork ; (; ). Gives some information about the network in the terminal. ; Definition at line 146 of file TMLPAnalyzer.cxx. ◆ Class(). static TClass * TMLPAnalyzer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * ",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:14481,Modifiability,variab,variable,14481,"nestatic . ReturnsName of the file containing the class declaration ; Definition at line 58 of file TMLPAnalyzer.h. ◆ DrawDInput(). void TMLPAnalyzer::DrawDInput ; (; Int_t ; i). Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ; Definition at line 284 of file TMLPAnalyzer.cxx. ◆ DrawDInputs(). void TMLPAnalyzer::DrawDInputs ; (; ). Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ; DrawDInputs() draws something that approximates the distribution of the derivative of the NN w.r.t. each input. That quantity is recognized as one of the measures to determine key quantities in the network.; What is done is to vary one input around its nominal value and to see how the NN changes. This is done for each entry in the sample and produces a distribution.; What you can learn from that is:; is variable a really useful, or is my network insensitive to it ?; is there any risk of big systematic ? Is the network extremely sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the network. ; Definition at line 311 of file TMLPAnalyzer.cxx. ◆ DrawNetwork(). void TMLPAnalyzer::DrawNetwork ; (; Int_t ; neuron, . const char * ; signal, . const char * ; bg . ). Draws the distribution of the neural network (using ith neuron). ; Two distributions are drawn, for events passing respectively the ""signal"" and ""background"" cuts. Only the test sample is used. ; Definition at line 337 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviation(). TProfile * TMLPAnalyzer::DrawTruthDeviation ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ; This method is mainly useful when doing regress",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:18041,Modifiability,layers,layers,18041,"vents. ; This method is mainly useful when doing regression analysis with the MLP (i.e. not classification, but continuous truth values). The returned THStack contains all the TProfiles. It is drawn unless the option ""goff"" is specified. Options are passed to TProfile::Draw. ; Definition at line 431 of file TMLPAnalyzer.cxx. ◆ GatherInformations(). void TMLPAnalyzer::GatherInformations ; (; ). Collect information about what is useful in the network. ; This method has to be called first when analyzing a network. Fills the two analysis trees. ; Definition at line 170 of file TMLPAnalyzer.cxx. ◆ GetInputNeuronTitle(). const char * TMLPAnalyzer::GetInputNeuronTitle ; (; Int_t ; in). protected . Returns the name of any neuron from the input layer. ; Definition at line 128 of file TMLPAnalyzer.cxx. ◆ GetIOTree(). TTree * TMLPAnalyzer::GetIOTree ; (; ); const. inline . Definition at line 56 of file TMLPAnalyzer.h. ◆ GetLayers(). Int_t TMLPAnalyzer::GetLayers ; (; ). protected . Returns the number of layers. ; Definition at line 54 of file TMLPAnalyzer.cxx. ◆ GetNeuronFormula(). TString TMLPAnalyzer::GetNeuronFormula ; (; Int_t ; idx). protected . Returns the formula used as input for neuron (idx) in the first layer. ; Definition at line 102 of file TMLPAnalyzer.cxx. ◆ GetNeurons(). Int_t TMLPAnalyzer::GetNeurons ; (; Int_t ; layer). protected . Returns the number of neurons in given layer. ; Definition at line 63 of file TMLPAnalyzer.cxx. ◆ GetOutputNeuronTitle(). const char * TMLPAnalyzer::GetOutputNeuronTitle ; (; Int_t ; out). protected . Returns the name of any neuron from the output layer. ; Definition at line 137 of file TMLPAnalyzer.cxx. ◆ IsA(). TClass * TMLPAnalyzer::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 58 of file TMLPAnalyzer.h. ◆ Streamer(). void TMLPAnalyzer::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TO",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:14773,Performance,optimiz,optimizing,14773,". Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ; Definition at line 284 of file TMLPAnalyzer.cxx. ◆ DrawDInputs(). void TMLPAnalyzer::DrawDInputs ; (; ). Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ; DrawDInputs() draws something that approximates the distribution of the derivative of the NN w.r.t. each input. That quantity is recognized as one of the measures to determine key quantities in the network.; What is done is to vary one input around its nominal value and to see how the NN changes. This is done for each entry in the sample and produces a distribution.; What you can learn from that is:; is variable a really useful, or is my network insensitive to it ?; is there any risk of big systematic ? Is the network extremely sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the network. ; Definition at line 311 of file TMLPAnalyzer.cxx. ◆ DrawNetwork(). void TMLPAnalyzer::DrawNetwork ; (; Int_t ; neuron, . const char * ; signal, . const char * ; bg . ). Draws the distribution of the neural network (using ith neuron). ; Two distributions are drawn, for events passing respectively the ""signal"" and ""background"" cuts. Only the test sample is used. ; Definition at line 337 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviation(). TProfile * TMLPAnalyzer::DrawTruthDeviation ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ; This method is mainly useful when doing regression analysis with the MLP (i.e. not classification, but continuous truth values). The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Op",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:14558,Safety,risk,risk,14558,"nestatic . ReturnsName of the file containing the class declaration ; Definition at line 58 of file TMLPAnalyzer.h. ◆ DrawDInput(). void TMLPAnalyzer::DrawDInput ; (; Int_t ; i). Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ; Definition at line 284 of file TMLPAnalyzer.cxx. ◆ DrawDInputs(). void TMLPAnalyzer::DrawDInputs ; (; ). Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ; DrawDInputs() draws something that approximates the distribution of the derivative of the NN w.r.t. each input. That quantity is recognized as one of the measures to determine key quantities in the network.; What is done is to vary one input around its nominal value and to see how the NN changes. This is done for each entry in the sample and produces a distribution.; What you can learn from that is:; is variable a really useful, or is my network insensitive to it ?; is there any risk of big systematic ? Is the network extremely sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the network. ; Definition at line 311 of file TMLPAnalyzer.cxx. ◆ DrawNetwork(). void TMLPAnalyzer::DrawNetwork ; (; Int_t ; neuron, . const char * ; signal, . const char * ; bg . ). Draws the distribution of the neural network (using ith neuron). ; Two distributions are drawn, for events passing respectively the ""signal"" and ""background"" cuts. Only the test sample is used. ; Definition at line 337 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviation(). TProfile * TMLPAnalyzer::DrawTruthDeviation ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ; This method is mainly useful when doing regress",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:5712,Security,hash,hash,5712," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:346,Testability,test,tests,346,". ROOT: TMLPAnalyzer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMLPAnalyzer Class Reference. ; This utility class contains a set of tests useful when developing a neural network. ; It allows you to check for unneeded variables, and to control the network structure. ; Definition at line 25 of file TMLPAnalyzer.h. Public Member Functions;  TMLPAnalyzer (TMultiLayerPerceptron &net);  ;  TMLPAnalyzer (TMultiLayerPerceptron *net);  ;  ~TMLPAnalyzer () override;  Destructor. ;  ; void CheckNetwork ();  Gives some information about the network in the terminal. ;  ; void DrawDInput (Int_t i);  Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Create",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:838,Testability,test,test,838,". ROOT: TMLPAnalyzer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMLPAnalyzer Class Reference. ; This utility class contains a set of tests useful when developing a neural network. ; It allows you to check for unneeded variables, and to control the network structure. ; Definition at line 25 of file TMLPAnalyzer.h. Public Member Functions;  TMLPAnalyzer (TMultiLayerPerceptron &net);  ;  TMLPAnalyzer (TMultiLayerPerceptron *net);  ;  ~TMLPAnalyzer () override;  Destructor. ;  ; void CheckNetwork ();  Gives some information about the network in the terminal. ;  ; void DrawDInput (Int_t i);  Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Create",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:984,Testability,test,test,984,". ROOT: TMLPAnalyzer Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Attributes |; List of all members ; TMLPAnalyzer Class Reference. ; This utility class contains a set of tests useful when developing a neural network. ; It allows you to check for unneeded variables, and to control the network structure. ; Definition at line 25 of file TMLPAnalyzer.h. Public Member Functions;  TMLPAnalyzer (TMultiLayerPerceptron &net);  ;  TMLPAnalyzer (TMultiLayerPerceptron *net);  ;  ~TMLPAnalyzer () override;  Destructor. ;  ; void CheckNetwork ();  Gives some information about the network in the terminal. ;  ; void DrawDInput (Int_t i);  Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Create",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:1431,Testability,test,test,1431,"contains a set of tests useful when developing a neural network. ; It allows you to check for unneeded variables, and to control the network structure. ; Definition at line 25 of file TMLPAnalyzer.h. Public Member Functions;  TMLPAnalyzer (TMultiLayerPerceptron &net);  ;  TMLPAnalyzer (TMultiLayerPerceptron *net);  ;  ~TMLPAnalyzer () override;  Destructor. ;  ; void CheckNetwork ();  Gives some information about the network in the terminal. ;  ; void DrawDInput (Int_t i);  Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Creates TProfiles of the difference of the MLP output minus the true value vs the true value, one for each output, filled with the test data events. ;  ; void GatherInformations ();  Collect information about what is useful in the network. ;  ; TTree * GetIOTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:1673,Testability,test,test,1673,"MultiLayerPerceptron &net);  ;  TMLPAnalyzer (TMultiLayerPerceptron *net);  ;  ~TMLPAnalyzer () override;  Destructor. ;  ; void CheckNetwork ();  Gives some information about the network in the terminal. ;  ; void DrawDInput (Int_t i);  Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Creates TProfiles of the difference of the MLP output minus the true value vs the true value, one for each output, filled with the test data events. ;  ; void GatherInformations ();  Collect information about what is useful in the network. ;  ; TTree * GetIOTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object)",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:1918,Testability,test,test,1918," the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ;  ; void DrawDInputs ();  Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Creates TProfiles of the difference of the MLP output minus the true value vs the true value, one for each output, filled with the test data events. ;  ; void GatherInformations ();  Collect information about what is useful in the network. ;  ; TTree * GetIOTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendP",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:2126,Testability,test,test,2126,"mall variation of each input. ;  ; void DrawNetwork (Int_t neuron, const char *signal, const char *bg);  Draws the distribution of the neural network (using ith neuron). ;  ; TProfile * DrawTruthDeviation (Int_t outnode=0, Option_t *option="""");  Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ;  ; TProfile * DrawTruthDeviationInOut (Int_t innode, Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ;  ; THStack * DrawTruthDeviationInsOut (Int_t outnode=0, Option_t *option="""");  Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ;  ; THStack * DrawTruthDeviations (Option_t *option="""");  Creates TProfiles of the difference of the MLP output minus the true value vs the true value, one for each output, filled with the test data events. ;  ; void GatherInformations ();  Collect information about what is useful in the network. ;  ; TTree * GetIOTree () const;  ; TClass * IsA () const override;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether thi",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:13761,Testability,test,test,13761,"::~TMLPAnalyzer ; (; ). override . Destructor. ; Definition at line 45 of file TMLPAnalyzer.cxx. Member Function Documentation. ◆ CheckNetwork(). void TMLPAnalyzer::CheckNetwork ; (; ). Gives some information about the network in the terminal. ; Definition at line 146 of file TMLPAnalyzer.cxx. ◆ Class(). static TClass * TMLPAnalyzer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMLPAnalyzer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMLPAnalyzer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 58 of file TMLPAnalyzer.h. ◆ DeclFileName(). static const char * TMLPAnalyzer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 58 of file TMLPAnalyzer.h. ◆ DrawDInput(). void TMLPAnalyzer::DrawDInput ; (; Int_t ; i). Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ; Definition at line 284 of file TMLPAnalyzer.cxx. ◆ DrawDInputs(). void TMLPAnalyzer::DrawDInputs ; (; ). Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ; DrawDInputs() draws something that approximates the distribution of the derivative of the NN w.r.t. each input. That quantity is recognized as one of the measures to determine key quantities in the network.; What is done is to vary one input around its nominal value and to see how the NN changes. This is done for each entry in the sample and produces a distribution.; What you can learn from that is:; is variable a really useful, or is my network insensitive to it ?; is there any risk of big systematic ? Is the network extremely sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the n",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:13987,Testability,test,test,13987,"k in the terminal. ; Definition at line 146 of file TMLPAnalyzer.cxx. ◆ Class(). static TClass * TMLPAnalyzer::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMLPAnalyzer::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMLPAnalyzer::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 58 of file TMLPAnalyzer.h. ◆ DeclFileName(). static const char * TMLPAnalyzer::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 58 of file TMLPAnalyzer.h. ◆ DrawDInput(). void TMLPAnalyzer::DrawDInput ; (; Int_t ; i). Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ; Definition at line 284 of file TMLPAnalyzer.cxx. ◆ DrawDInputs(). void TMLPAnalyzer::DrawDInputs ; (; ). Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ; DrawDInputs() draws something that approximates the distribution of the derivative of the NN w.r.t. each input. That quantity is recognized as one of the measures to determine key quantities in the network.; What is done is to vary one input around its nominal value and to see how the NN changes. This is done for each entry in the sample and produces a distribution.; What you can learn from that is:; is variable a really useful, or is my network insensitive to it ?; is there any risk of big systematic ? Is the network extremely sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the network. ; Definition at line 311 of file TMLPAnalyzer.cxx. ◆ DrawNetwork(). void TMLPAnalyzer::DrawNetwork ; (; Int_t ; neuron, . const char * ; signal, . const char * ; bg . ). Draws the distribution of the neural network (",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:15140,Testability,test,test,15140," derivative of the NN w.r.t. each input. That quantity is recognized as one of the measures to determine key quantities in the network.; What is done is to vary one input around its nominal value and to see how the NN changes. This is done for each entry in the sample and produces a distribution.; What you can learn from that is:; is variable a really useful, or is my network insensitive to it ?; is there any risk of big systematic ? Is the network extremely sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the network. ; Definition at line 311 of file TMLPAnalyzer.cxx. ◆ DrawNetwork(). void TMLPAnalyzer::DrawNetwork ; (; Int_t ; neuron, . const char * ; signal, . const char * ; bg . ). Draws the distribution of the neural network (using ith neuron). ; Two distributions are drawn, for events passing respectively the ""signal"" and ""background"" cuts. Only the test sample is used. ; Definition at line 337 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviation(). TProfile * TMLPAnalyzer::DrawTruthDeviation ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ; This method is mainly useful when doing regression analysis with the MLP (i.e. not classification, but continuous truth values). The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Options are passed to TProfile::Draw ; Definition at line 398 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviationInOut(). TProfile * TMLPAnalyzer::DrawTruthDeviationInOut ; (; Int_t ; innode, . Int_t ; outnode = 0, . Option_t * ; option = """" . ). Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ; The resulting TProfile histo",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:15484,Testability,test,test,15484,"roduces a distribution.; What you can learn from that is:; is variable a really useful, or is my network insensitive to it ?; is there any risk of big systematic ? Is the network extremely sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the network. ; Definition at line 311 of file TMLPAnalyzer.cxx. ◆ DrawNetwork(). void TMLPAnalyzer::DrawNetwork ; (; Int_t ; neuron, . const char * ; signal, . const char * ; bg . ). Draws the distribution of the neural network (using ith neuron). ; Two distributions are drawn, for events passing respectively the ""signal"" and ""background"" cuts. Only the test sample is used. ; Definition at line 337 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviation(). TProfile * TMLPAnalyzer::DrawTruthDeviation ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ; This method is mainly useful when doing regression analysis with the MLP (i.e. not classification, but continuous truth values). The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Options are passed to TProfile::Draw ; Definition at line 398 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviationInOut(). TProfile * TMLPAnalyzer::DrawTruthDeviationInOut ; (; Int_t ; innode, . Int_t ; outnode = 0, . Option_t * ; option = """" . ). Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ; The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Options are passed to TProfile::Draw ; Definition at line 474 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviationInsOut(). THStack * TMLPAnalyzer::DrawTruthDeviationInsOut ; (; Int_t ; outnode = 0, . Option_t * ; o",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:16097,Testability,test,test,16097,"stributions are drawn, for events passing respectively the ""signal"" and ""background"" cuts. Only the test sample is used. ; Definition at line 337 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviation(). TProfile * TMLPAnalyzer::DrawTruthDeviation ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ; This method is mainly useful when doing regression analysis with the MLP (i.e. not classification, but continuous truth values). The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Options are passed to TProfile::Draw ; Definition at line 398 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviationInOut(). TProfile * TMLPAnalyzer::DrawTruthDeviationInOut ; (; Int_t ; innode, . Int_t ; outnode = 0, . Option_t * ; option = """" . ). Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ; The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Options are passed to TProfile::Draw ; Definition at line 474 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviationInsOut(). THStack * TMLPAnalyzer::DrawTruthDeviationInsOut ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ; The returned THStack contains all the TProfiles. It is drawn unless the option ""goff"" is specified. Options are passed to TProfile::Draw. ; Definition at line 506 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviations(). THStack * TMLPAnalyzer::DrawTruthDeviations ; (; Option_t * ; option = """"). Creates TProfiles of the difference of the MLP output minus the true value vs the true value, one for each output, filled with the test data events. ;",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:16581,Testability,test,test,16581,"is mainly useful when doing regression analysis with the MLP (i.e. not classification, but continuous truth values). The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Options are passed to TProfile::Draw ; Definition at line 398 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviationInOut(). TProfile * TMLPAnalyzer::DrawTruthDeviationInOut ; (; Int_t ; innode, . Int_t ; outnode = 0, . Option_t * ; option = """" . ). Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ; The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Options are passed to TProfile::Draw ; Definition at line 474 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviationInsOut(). THStack * TMLPAnalyzer::DrawTruthDeviationInsOut ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ; The returned THStack contains all the TProfiles. It is drawn unless the option ""goff"" is specified. Options are passed to TProfile::Draw. ; Definition at line 506 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviations(). THStack * TMLPAnalyzer::DrawTruthDeviations ; (; Option_t * ; option = """"). Creates TProfiles of the difference of the MLP output minus the true value vs the true value, one for each output, filled with the test data events. ; This method is mainly useful when doing regression analysis with the MLP (i.e. not classification, but continuous truth values). The returned THStack contains all the TProfiles. It is drawn unless the option ""goff"" is specified. Options are passed to TProfile::Draw. ; Definition at line 431 of file TMLPAnalyzer.cxx. ◆ GatherInformations(). void TMLPAnalyzer::GatherInformations ; (; ). Collect information about what is useful in the network. ; This method has to be calle",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:17022,Testability,test,test,17022," ). Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value innode, for all test data events. ; The resulting TProfile histogram is returned. It is not drawn if option ""goff"" is specified. Options are passed to TProfile::Draw ; Definition at line 474 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviationInsOut(). THStack * TMLPAnalyzer::DrawTruthDeviationInsOut ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Creates a profile of the difference of the MLP output outnode minus the true value of outnode vs the input value, stacked for all inputs, for all test data events. ; The returned THStack contains all the TProfiles. It is drawn unless the option ""goff"" is specified. Options are passed to TProfile::Draw. ; Definition at line 506 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviations(). THStack * TMLPAnalyzer::DrawTruthDeviations ; (; Option_t * ; option = """"). Creates TProfiles of the difference of the MLP output minus the true value vs the true value, one for each output, filled with the test data events. ; This method is mainly useful when doing regression analysis with the MLP (i.e. not classification, but continuous truth values). The returned THStack contains all the TProfiles. It is drawn unless the option ""goff"" is specified. Options are passed to TProfile::Draw. ; Definition at line 431 of file TMLPAnalyzer.cxx. ◆ GatherInformations(). void TMLPAnalyzer::GatherInformations ; (; ). Collect information about what is useful in the network. ; This method has to be called first when analyzing a network. Fills the two analysis trees. ; Definition at line 170 of file TMLPAnalyzer.cxx. ◆ GetInputNeuronTitle(). const char * TMLPAnalyzer::GetInputNeuronTitle ; (; Int_t ; in). protected . Returns the name of any neuron from the input layer. ; Definition at line 128 of file TMLPAnalyzer.cxx. ◆ GetIOTree(). TTree * TMLPAnalyzer::GetIOTree ; (; ); const. inline . Definition at line 56 of file TMLPAnalyzer.h. ◆ GetLayers",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTMLPAnalyzer.html:14457,Usability,learn,learn,14457,"nestatic . ReturnsName of the file containing the class declaration ; Definition at line 58 of file TMLPAnalyzer.h. ◆ DrawDInput(). void TMLPAnalyzer::DrawDInput ; (; Int_t ; i). Draws the distribution (on the test sample) of the impact on the network output of a small variation of the ith input. ; Definition at line 284 of file TMLPAnalyzer.cxx. ◆ DrawDInputs(). void TMLPAnalyzer::DrawDInputs ; (; ). Draws the distribution (on the test sample) of the impact on the network output of a small variation of each input. ; DrawDInputs() draws something that approximates the distribution of the derivative of the NN w.r.t. each input. That quantity is recognized as one of the measures to determine key quantities in the network.; What is done is to vary one input around its nominal value and to see how the NN changes. This is done for each entry in the sample and produces a distribution.; What you can learn from that is:; is variable a really useful, or is my network insensitive to it ?; is there any risk of big systematic ? Is the network extremely sensitive to small variations of any of my inputs ?. As you might understand, this is to be considered with care and can serve as input for an ""educated guess"" when optimizing the network. ; Definition at line 311 of file TMLPAnalyzer.cxx. ◆ DrawNetwork(). void TMLPAnalyzer::DrawNetwork ; (; Int_t ; neuron, . const char * ; signal, . const char * ; bg . ). Draws the distribution of the neural network (using ith neuron). ; Two distributions are drawn, for events passing respectively the ""signal"" and ""background"" cuts. Only the test sample is used. ; Definition at line 337 of file TMLPAnalyzer.cxx. ◆ DrawTruthDeviation(). TProfile * TMLPAnalyzer::DrawTruthDeviation ; (; Int_t ; outnode = 0, . Option_t * ; option = """" . ). Create a profile of the difference of the MLP output minus the true value for a given output node outnode, vs the true value for outnode, for all test data events. ; This method is mainly useful when doing regress",MatchSource.WIKI,doc/master/classTMLPAnalyzer.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMLPAnalyzer.html
https://root.cern/doc/master/classTModuleDocInfo.html:4132,Availability,error,error,4132,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:4221,Availability,error,error,4221,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:4376,Availability,error,error,4376,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:4673,Availability,error,error,4673,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:8757,Availability,error,error,8757,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:4138,Integrability,message,message,4138,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:4679,Integrability,message,message,4679,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:5669,Integrability,message,message,5669,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:8763,Integrability,message,message,8763,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:9136,Integrability,message,message,9136," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:935,Modifiability,inherit,inherited,935,". ROOT: TModuleDocInfo Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TModuleDocInfo Class Reference. . Definition at line 107 of file TDocInfo.h. Public Member Functions;  TModuleDocInfo (const char *name, TModuleDocInfo *super, const char *doc="""");  ;  ~TModuleDocInfo () override;  ; void AddClass (TClassDocInfo *cl);  ; TList * GetClasses ();  ; const char * GetDoc () const;  ; THashList & GetSub ();  ; TModuleDocInfo * GetSuper () const;  ; TClass * IsA () const override;  ; Bool_t IsSelected () const;  ; void SetDoc (const char *doc);  ; void SetSelected (Bool_t sel=kTRUE);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & o",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:2675,Modifiability,inherit,inherited,2675,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:3768,Modifiability,inherit,inheritance,3768,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:5767,Modifiability,inherit,inherits,5767,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:5884,Modifiability,inherit,inherits,5884,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:9637,Modifiability,inherit,inherited,9637,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TList fClasses;  ; Bool_t fSelected;  ; THashList fSub;  ; TModuleDocInfo * fSuper;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:9847,Modifiability,inherit,inherited,9847,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TList fClasses;  ; Bool_t fSelected;  ; THashList fSub;  ; TModuleDocInfo * fSuper;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:10484,Modifiability,inherit,inherited,10484,"ass_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TList fClasses;  ; Bool_t fSelected;  ; THashList fSub;  ; TModuleDocInfo * fSuper;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TDocInfo.h>. Inheritance diagram for TModuleDocI",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:11125,Modifiability,inherit,inherited,11125," void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TList fClasses;  ; Bool_t fSelected;  ; THashList fSub;  ; TModuleDocInfo * fSuper;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TDocInfo.h>. Inheritance diagram for TModuleDocInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TModuleDocInfo(). TModuleDocInfo::TModuleDocInfo ; (; const char * ; name, . TModuleDocInfo * ; super, . const char * ; doc = """" . ). inline . Definition at line 109 of file TDocInfo.h. ◆ ~TModuleDocInfo(). TModuleDocInfo::~TModuleDocInfo ; (; ). inlineoverride . Definition at line 113 of file TDocInfo.h. Member Function Documentation. ◆ AddClass(). void TModuleDocInfo::AddClass ; (; TClassDocInfo * ; cl). inline . Definition at line 121 of file TDocInfo.h. ◆ Class(). static TClass * TModuleDocInfo::Class ; (; ). static . ReturnsTClass describ",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:11224,Modifiability,inherit,inherited,11224," void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Private Attributes; TList fClasses;  ; Bool_t fSelected;  ; THashList fSub;  ; TModuleDocInfo * fSuper;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TDocInfo.h>. Inheritance diagram for TModuleDocInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TModuleDocInfo(). TModuleDocInfo::TModuleDocInfo ; (; const char * ; name, . TModuleDocInfo * ; super, . const char * ; doc = """" . ). inline . Definition at line 109 of file TDocInfo.h. ◆ ~TModuleDocInfo(). TModuleDocInfo::~TModuleDocInfo ; (; ). inlineoverride . Definition at line 113 of file TDocInfo.h. Member Function Documentation. ◆ AddClass(). void TModuleDocInfo::AddClass ; (; TClassDocInfo * ; cl). inline . Definition at line 121 of file TDocInfo.h. ◆ Class(). static TClass * TModuleDocInfo::Class ; (; ). static . ReturnsTClass describ",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:11429,Modifiability,inherit,inherited,11429,"er;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . #include <TDocInfo.h>. Inheritance diagram for TModuleDocInfo:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TModuleDocInfo(). TModuleDocInfo::TModuleDocInfo ; (; const char * ; name, . TModuleDocInfo * ; super, . const char * ; doc = """" . ). inline . Definition at line 109 of file TDocInfo.h. ◆ ~TModuleDocInfo(). TModuleDocInfo::~TModuleDocInfo ; (; ). inlineoverride . Definition at line 113 of file TDocInfo.h. Member Function Documentation. ◆ AddClass(). void TModuleDocInfo::AddClass ; (; TClassDocInfo * ; cl). inline . Definition at line 121 of file TDocInfo.h. ◆ Class(). static TClass * TModuleDocInfo::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TModuleDocInfo::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TModuleDocInfo::Class_",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTModuleDocInfo.html:1803,Security,hash,hash,1803," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTModuleDocInfo.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTModuleDocInfo.html
https://root.cern/doc/master/classTMonitor.html:2835,Availability,mask,mask,2835,"ctive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal when some socket is ready. ;  ; virtual void Remove (TSocket *sock);  Remove a socket from the monitor. ;  ; virtual void RemoveAll ();  Remove all sockets from the monitor. ;  ; void ResetInterrupt ();  ; TSocket * Select ();  Return pointer to socket for which an event is waiting. ;  ; TSocket * Select (Long_t timeout);  Return pointer to socket for which an event is waiting. ;  ; Int_t Select (TList *rdready, TList *wrready, Long_t timeout);  Return numbers of sockets that are ready for reading or writing. ;  ; virtual void SetInterest (TSocket *sock, Int_t interest=kRead);  Set interest mask for socket sock to interest. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object be",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:4802,Availability,error,error,4802,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:4891,Availability,error,error,4891,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:5046,Availability,error,error,5046,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:5343,Availability,error,error,5343,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:9907,Availability,error,error,9907," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class s",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:21746,Availability,error,error,21746,"Check if socket 's' is in the active list. ; Avoids the duplication of active list via TMonitor::GetListOfActives(). ; Definition at line 482 of file TMonitor.cxx. ◆ Ready(). void TMonitor::Ready ; (; TSocket * ; sock). virtual . Emit signal when some socket is ready. ; Definition at line 530 of file TMonitor.cxx. ◆ Remove(). void TMonitor::Remove ; (; TSocket * ; sock). virtual . Remove a socket from the monitor. ; Definition at line 214 of file TMonitor.cxx. ◆ RemoveAll(). void TMonitor::RemoveAll ; (; ). virtual . Remove all sockets from the monitor. ; Definition at line 241 of file TMonitor.cxx. ◆ ResetInterrupt(). void TMonitor::ResetInterrupt ; (; ). inline . Definition at line 72 of file TMonitor.h. ◆ Select() [1/3]. TSocket * TMonitor::Select ; (; ). Return pointer to socket for which an event is waiting. ; Select can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of error. ; Definition at line 322 of file TMonitor.cxx. ◆ Select() [2/3]. TSocket * TMonitor::Select ; (; Long_t ; timeout). Return pointer to socket for which an event is waiting. ; Wait a maximum of timeout milliseconds. If return is due to timeout it returns (TSocket *)-1. Select() can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆ Select() [3/3]. Int_t TMonitor::Select ; (; TList * ; rdready, . TList * ; wrready, . Long_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:22214,Availability,error,error,22214,"emoveAll(). void TMonitor::RemoveAll ; (; ). virtual . Remove all sockets from the monitor. ; Definition at line 241 of file TMonitor.cxx. ◆ ResetInterrupt(). void TMonitor::ResetInterrupt ; (; ). inline . Definition at line 72 of file TMonitor.h. ◆ Select() [1/3]. TSocket * TMonitor::Select ; (; ). Return pointer to socket for which an event is waiting. ; Select can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of error. ; Definition at line 322 of file TMonitor.cxx. ◆ Select() [2/3]. TSocket * TMonitor::Select ; (; Long_t ; timeout). Return pointer to socket for which an event is waiting. ; Wait a maximum of timeout milliseconds. If return is due to timeout it returns (TSocket *)-1. Select() can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆ Select() [3/3]. Int_t TMonitor::Select ; (; TList * ; rdready, . TList * ; wrready, . Long_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socket sock to interest. ; If the socket is not in the active list move it or add it there. If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 180 of file TMonitor.cxx. ◆ SetReady(). void",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:22540,Availability,error,error,22540," for which an event is waiting. ; Select can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of error. ; Definition at line 322 of file TMonitor.cxx. ◆ Select() [2/3]. TSocket * TMonitor::Select ; (; Long_t ; timeout). Return pointer to socket for which an event is waiting. ; Wait a maximum of timeout milliseconds. If return is due to timeout it returns (TSocket *)-1. Select() can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆ Select() [3/3]. Int_t TMonitor::Select ; (; TList * ; rdready, . TList * ; wrready, . Long_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socket sock to interest. ; If the socket is not in the active list move it or add it there. If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 180 of file TMonitor.cxx. ◆ SetReady(). void TMonitor::SetReady ; (; TSocket * ; sock). private . Called by TSocketHandler::Notify() to signal which socket is ready to be read or written. ; User should not call this routine. The ready socket will be returned via the Select() user function. The Ready(TSocket *sock) signal is emitted. ; Definition at line 423 of file T",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:22829,Availability,mask,mask,22829,"Select ; (; Long_t ; timeout). Return pointer to socket for which an event is waiting. ; Wait a maximum of timeout milliseconds. If return is due to timeout it returns (TSocket *)-1. Select() can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆ Select() [3/3]. Int_t TMonitor::Select ; (; TList * ; rdready, . TList * ; wrready, . Long_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socket sock to interest. ; If the socket is not in the active list move it or add it there. If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 180 of file TMonitor.cxx. ◆ SetReady(). void TMonitor::SetReady ; (; TSocket * ; sock). private . Called by TSocketHandler::Notify() to signal which socket is ready to be read or written. ; User should not call this routine. The ready socket will be returned via the Select() user function. The Ready(TSocket *sock) signal is emitted. ; Definition at line 423 of file TMonitor.cxx. ◆ Streamer(). void TMonitor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMonitor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 85 of file TMonitor.",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:1139,Energy Efficiency,monitor,monitor,1139,"es. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMonitor Class Reference. . Definition at line 36 of file TMonitor.h. Public Types; enum  EInterest { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMonitor (Bool_t mainloop=kTRUE);  Create a monitor object. ;  ;  TMonitor (const TMonitor &m);  Copy constructor. ;  ; virtual ~TMonitor ();  Cleanup the monitor object. Does not delete sockets being monitored. ;  ; virtual void Activate (TSocket *sock);  Activate a de-activated socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t I",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:1250,Energy Efficiency,monitor,monitor,1250,"ns |; Private Attributes |; Friends |; List of all members ; TMonitor Class Reference. . Definition at line 36 of file TMonitor.h. Public Types; enum  EInterest { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMonitor (Bool_t mainloop=kTRUE);  Create a monitor object. ;  ;  TMonitor (const TMonitor &m);  Copy constructor. ;  ; virtual ~TMonitor ();  Cleanup the monitor object. Does not delete sockets being monitored. ;  ; virtual void Activate (TSocket *sock);  Activate a de-activated socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal ",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:1296,Energy Efficiency,monitor,monitored,1296,"ll members ; TMonitor Class Reference. . Definition at line 36 of file TMonitor.h. Public Types; enum  EInterest { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMonitor (Bool_t mainloop=kTRUE);  Create a monitor object. ;  ;  TMonitor (const TMonitor &m);  Copy constructor. ;  ; virtual ~TMonitor ();  Cleanup the monitor object. Does not delete sockets being monitored. ;  ; virtual void Activate (TSocket *sock);  Activate a de-activated socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal when some socket is ready. ;  ; virtual void Remo",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:1534,Energy Efficiency,monitor,monitor,1534," , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMonitor (Bool_t mainloop=kTRUE);  Create a monitor object. ;  ;  TMonitor (const TMonitor &m);  Copy constructor. ;  ; virtual ~TMonitor ();  Cleanup the monitor object. Does not delete sockets being monitored. ;  ; virtual void Activate (TSocket *sock);  Activate a de-activated socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal when some socket is ready. ;  ; virtual void Remove (TSocket *sock);  Remove a socket from the monitor. ;  ; virtual void RemoveAll ();  Remove all sockets from the monitor. ;  ; void ResetInterrupt ();  ; TSocket * Select ();  Return pointer to socket for which an ev",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:2332,Energy Efficiency,monitor,monitor,2332,"ored. ;  ; virtual void Activate (TSocket *sock);  Activate a de-activated socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal when some socket is ready. ;  ; virtual void Remove (TSocket *sock);  Remove a socket from the monitor. ;  ; virtual void RemoveAll ();  Remove all sockets from the monitor. ;  ; void ResetInterrupt ();  ; TSocket * Select ();  Return pointer to socket for which an event is waiting. ;  ; TSocket * Select (Long_t timeout);  Return pointer to socket for which an event is waiting. ;  ; Int_t Select (TList *rdready, TList *wrready, Long_t timeout);  Return numbers of sockets that are ready for reading or writing. ;  ; virtual void SetInterest (TSocket *sock, Int_t interest=kRead);  Set interest mask for socket sock to interest. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract""",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:2402,Energy Efficiency,monitor,monitor,2402," socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal when some socket is ready. ;  ; virtual void Remove (TSocket *sock);  Remove a socket from the monitor. ;  ; virtual void RemoveAll ();  Remove all sockets from the monitor. ;  ; void ResetInterrupt ();  ; TSocket * Select ();  Return pointer to socket for which an event is waiting. ;  ; TSocket * Select (Long_t timeout);  Return pointer to socket for which an event is waiting. ;  ; Int_t Select (TList *rdready, TList *wrready, Long_t timeout);  Return numbers of sockets that are ready for reading or writing. ;  ; virtual void SetInterest (TSocket *sock, Int_t interest=kRead);  Set interest mask for socket sock to interest. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void A",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:16884,Energy Efficiency,monitor,monitor,16884,"object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMonitor.h>. Inheritance diagram for TMonitor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EInterest. enum TMonitor::EInterest. EnumeratorkRead ; kWrite . Definition at line 54 of file TMonitor.h. Constructor & Destructor Documentation. ◆ TMonitor() [1/2]. TMonitor::TMonitor ; (; Bool_t ; mainloop = kTRUE). Create a monitor object. ; If mainloop is true the monitoring will be done in the main event loop. ; Definition at line 109 of file TMonitor.cxx. ◆ TMonitor() [2/2]. TMonitor::TMonitor ; (; const TMonitor & ; m). Copy constructor. ; Definition at line 123 of file TMonitor.cxx. ◆ ~TMonitor(). TMonitor::~TMonitor ; (; ). virtual . Cleanup the monitor object. Does not delete sockets being monitored. ; Definition at line 153 of file TMonitor.cxx. Member Function Documentation. ◆ Activate(). void TMonitor::Activate ; (; TSocket * ; sock). virtual . Activate a de-activated socket. ; Definition at line 250 of file TMonitor.cxx. ◆ ActivateAll(). void TMonitor::ActivateAll ; (; ). virtual . Activate all de-activated sockets. ; Definition at line 268 of file TMonitor.cxx. ◆ Add(). void TMonitor::Add ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Add socket to the monitor's active list. ; If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we mon",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:16926,Energy Efficiency,monitor,monitoring,16926,"  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMonitor.h>. Inheritance diagram for TMonitor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EInterest. enum TMonitor::EInterest. EnumeratorkRead ; kWrite . Definition at line 54 of file TMonitor.h. Constructor & Destructor Documentation. ◆ TMonitor() [1/2]. TMonitor::TMonitor ; (; Bool_t ; mainloop = kTRUE). Create a monitor object. ; If mainloop is true the monitoring will be done in the main event loop. ; Definition at line 109 of file TMonitor.cxx. ◆ TMonitor() [2/2]. TMonitor::TMonitor ; (; const TMonitor & ; m). Copy constructor. ; Definition at line 123 of file TMonitor.cxx. ◆ ~TMonitor(). TMonitor::~TMonitor ; (; ). virtual . Cleanup the monitor object. Does not delete sockets being monitored. ; Definition at line 153 of file TMonitor.cxx. Member Function Documentation. ◆ Activate(). void TMonitor::Activate ; (; TSocket * ; sock). virtual . Activate a de-activated socket. ; Definition at line 250 of file TMonitor.cxx. ◆ ActivateAll(). void TMonitor::ActivateAll ; (; ). virtual . Activate all de-activated sockets. ; Definition at line 268 of file TMonitor.cxx. ◆ Add(). void TMonitor::Add ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Add socket to the monitor's active list. ; If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:17218,Energy Efficiency,monitor,monitor,17218,"is object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMonitor.h>. Inheritance diagram for TMonitor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EInterest. enum TMonitor::EInterest. EnumeratorkRead ; kWrite . Definition at line 54 of file TMonitor.h. Constructor & Destructor Documentation. ◆ TMonitor() [1/2]. TMonitor::TMonitor ; (; Bool_t ; mainloop = kTRUE). Create a monitor object. ; If mainloop is true the monitoring will be done in the main event loop. ; Definition at line 109 of file TMonitor.cxx. ◆ TMonitor() [2/2]. TMonitor::TMonitor ; (; const TMonitor & ; m). Copy constructor. ; Definition at line 123 of file TMonitor.cxx. ◆ ~TMonitor(). TMonitor::~TMonitor ; (; ). virtual . Cleanup the monitor object. Does not delete sockets being monitored. ; Definition at line 153 of file TMonitor.cxx. Member Function Documentation. ◆ Activate(). void TMonitor::Activate ; (; TSocket * ; sock). virtual . Activate a de-activated socket. ; Definition at line 250 of file TMonitor.cxx. ◆ ActivateAll(). void TMonitor::ActivateAll ; (; ). virtual . Activate all de-activated sockets. ; Definition at line 268 of file TMonitor.cxx. ◆ Add(). void TMonitor::Add ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Add socket to the monitor's active list. ; If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 168 of file TMonitor.cxx. ◆ Class(). static TClass * TMonitor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMonitor::Class_Name ; (; ). static . Retu",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:17264,Energy Efficiency,monitor,monitored,17264,"als;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMonitor.h>. Inheritance diagram for TMonitor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EInterest. enum TMonitor::EInterest. EnumeratorkRead ; kWrite . Definition at line 54 of file TMonitor.h. Constructor & Destructor Documentation. ◆ TMonitor() [1/2]. TMonitor::TMonitor ; (; Bool_t ; mainloop = kTRUE). Create a monitor object. ; If mainloop is true the monitoring will be done in the main event loop. ; Definition at line 109 of file TMonitor.cxx. ◆ TMonitor() [2/2]. TMonitor::TMonitor ; (; const TMonitor & ; m). Copy constructor. ; Definition at line 123 of file TMonitor.cxx. ◆ ~TMonitor(). TMonitor::~TMonitor ; (; ). virtual . Cleanup the monitor object. Does not delete sockets being monitored. ; Definition at line 153 of file TMonitor.cxx. Member Function Documentation. ◆ Activate(). void TMonitor::Activate ; (; TSocket * ; sock). virtual . Activate a de-activated socket. ; Definition at line 250 of file TMonitor.cxx. ◆ ActivateAll(). void TMonitor::ActivateAll ; (; ). virtual . Activate all de-activated sockets. ; Definition at line 268 of file TMonitor.cxx. ◆ Add(). void TMonitor::Add ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Add socket to the monitor's active list. ; If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 168 of file TMonitor.cxx. ◆ Class(). static TClass * TMonitor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMonitor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Ver",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:17759,Energy Efficiency,monitor,monitor,17759,"h. Constructor & Destructor Documentation. ◆ TMonitor() [1/2]. TMonitor::TMonitor ; (; Bool_t ; mainloop = kTRUE). Create a monitor object. ; If mainloop is true the monitoring will be done in the main event loop. ; Definition at line 109 of file TMonitor.cxx. ◆ TMonitor() [2/2]. TMonitor::TMonitor ; (; const TMonitor & ; m). Copy constructor. ; Definition at line 123 of file TMonitor.cxx. ◆ ~TMonitor(). TMonitor::~TMonitor ; (; ). virtual . Cleanup the monitor object. Does not delete sockets being monitored. ; Definition at line 153 of file TMonitor.cxx. Member Function Documentation. ◆ Activate(). void TMonitor::Activate ; (; TSocket * ; sock). virtual . Activate a de-activated socket. ; Definition at line 250 of file TMonitor.cxx. ◆ ActivateAll(). void TMonitor::ActivateAll ; (; ). virtual . Activate all de-activated sockets. ; Definition at line 268 of file TMonitor.cxx. ◆ Add(). void TMonitor::Add ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Add socket to the monitor's active list. ; If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 168 of file TMonitor.cxx. ◆ Class(). static TClass * TMonitor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMonitor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMonitor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 85 of file TMonitor.h. ◆ DeActivate(). void TMonitor::DeActivate ; (; TSocket * ; sock). virtual . De-activate a socket. ; Definition at line 284 of file TMonitor.cxx. ◆ DeActivateAll(). void TMonitor::DeActivateAll ; (; ). virtual . De-activate all activated sockets. ; Definition at line 302 of file TMonitor.cxx. ◆ DeclFileName(). static const char * TMonitor::De",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:17818,Energy Efficiency,monitor,monitor,17818,"tor object. ; If mainloop is true the monitoring will be done in the main event loop. ; Definition at line 109 of file TMonitor.cxx. ◆ TMonitor() [2/2]. TMonitor::TMonitor ; (; const TMonitor & ; m). Copy constructor. ; Definition at line 123 of file TMonitor.cxx. ◆ ~TMonitor(). TMonitor::~TMonitor ; (; ). virtual . Cleanup the monitor object. Does not delete sockets being monitored. ; Definition at line 153 of file TMonitor.cxx. Member Function Documentation. ◆ Activate(). void TMonitor::Activate ; (; TSocket * ; sock). virtual . Activate a de-activated socket. ; Definition at line 250 of file TMonitor.cxx. ◆ ActivateAll(). void TMonitor::ActivateAll ; (; ). virtual . Activate all de-activated sockets. ; Definition at line 268 of file TMonitor.cxx. ◆ Add(). void TMonitor::Add ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Add socket to the monitor's active list. ; If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 168 of file TMonitor.cxx. ◆ Class(). static TClass * TMonitor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMonitor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMonitor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 85 of file TMonitor.h. ◆ DeActivate(). void TMonitor::DeActivate ; (; TSocket * ; sock). virtual . De-activate a socket. ; Definition at line 284 of file TMonitor.cxx. ◆ DeActivateAll(). void TMonitor::DeActivateAll ; (; ). virtual . De-activate all activated sockets. ; Definition at line 302 of file TMonitor.cxx. ◆ DeclFileName(). static const char * TMonitor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 85 of file TMon",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:17884,Energy Efficiency,monitor,monitor,17884,"tor object. ; If mainloop is true the monitoring will be done in the main event loop. ; Definition at line 109 of file TMonitor.cxx. ◆ TMonitor() [2/2]. TMonitor::TMonitor ; (; const TMonitor & ; m). Copy constructor. ; Definition at line 123 of file TMonitor.cxx. ◆ ~TMonitor(). TMonitor::~TMonitor ; (; ). virtual . Cleanup the monitor object. Does not delete sockets being monitored. ; Definition at line 153 of file TMonitor.cxx. Member Function Documentation. ◆ Activate(). void TMonitor::Activate ; (; TSocket * ; sock). virtual . Activate a de-activated socket. ; Definition at line 250 of file TMonitor.cxx. ◆ ActivateAll(). void TMonitor::ActivateAll ; (; ). virtual . Activate all de-activated sockets. ; Definition at line 268 of file TMonitor.cxx. ◆ Add(). void TMonitor::Add ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Add socket to the monitor's active list. ; If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 168 of file TMonitor.cxx. ◆ Class(). static TClass * TMonitor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMonitor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMonitor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 85 of file TMonitor.h. ◆ DeActivate(). void TMonitor::DeActivate ; (; TSocket * ; sock). virtual . De-activate a socket. ; Definition at line 284 of file TMonitor.cxx. ◆ DeActivateAll(). void TMonitor::DeActivateAll ; (; ). virtual . De-activate all activated sockets. ; Definition at line 302 of file TMonitor.cxx. ◆ DeclFileName(). static const char * TMonitor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 85 of file TMon",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:17957,Energy Efficiency,monitor,monitor,17957,"tor object. ; If mainloop is true the monitoring will be done in the main event loop. ; Definition at line 109 of file TMonitor.cxx. ◆ TMonitor() [2/2]. TMonitor::TMonitor ; (; const TMonitor & ; m). Copy constructor. ; Definition at line 123 of file TMonitor.cxx. ◆ ~TMonitor(). TMonitor::~TMonitor ; (; ). virtual . Cleanup the monitor object. Does not delete sockets being monitored. ; Definition at line 153 of file TMonitor.cxx. Member Function Documentation. ◆ Activate(). void TMonitor::Activate ; (; TSocket * ; sock). virtual . Activate a de-activated socket. ; Definition at line 250 of file TMonitor.cxx. ◆ ActivateAll(). void TMonitor::ActivateAll ; (; ). virtual . Activate all de-activated sockets. ; Definition at line 268 of file TMonitor.cxx. ◆ Add(). void TMonitor::Add ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Add socket to the monitor's active list. ; If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 168 of file TMonitor.cxx. ◆ Class(). static TClass * TMonitor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMonitor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMonitor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 85 of file TMonitor.h. ◆ DeActivate(). void TMonitor::DeActivate ; (; TSocket * ; sock). virtual . De-activate a socket. ; Definition at line 284 of file TMonitor.cxx. ◆ DeActivateAll(). void TMonitor::DeActivateAll ; (; ). virtual . De-activate all activated sockets. ; Definition at line 302 of file TMonitor.cxx. ◆ DeclFileName(). static const char * TMonitor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 85 of file TMon",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:19862,Energy Efficiency,monitor,monitor,19862,"e containing the class declaration ; Definition at line 85 of file TMonitor.h. ◆ GetActive(). Int_t TMonitor::GetActive ; (; Long_t ; timeout = -1); const. Return number of sockets in the active list. ; If timeout > 0, remove from the list those sockets which did not have any activity since timeout millisecs. If timeout = 0, then reset activity timestamp on all active sockets. This time out is typically used if GetActive() is used to see how many remotes still need to send something. If they pass the timeout they will be skipped and GetActive() will return 0 and the loop can be exited. ; Definition at line 438 of file TMonitor.cxx. ◆ GetDeActive(). Int_t TMonitor::GetDeActive ; (; ); const. Return number of sockets in the de-active list. ; Definition at line 473 of file TMonitor.cxx. ◆ GetListOfActives(). TList * TMonitor::GetListOfActives ; (; ); const. Returns a list with all active sockets. ; This list must be deleted by the user. DO NOT call Delete() on this list as it will delete the sockets that are still being used by the monitor. ; Definition at line 498 of file TMonitor.cxx. ◆ GetListOfDeActives(). TList * TMonitor::GetListOfDeActives ; (; ); const. Returns a list with all de-active sockets. ; This list must be deleted by the user. DO NOT call Delete() on this list as it will delete the sockets that are still being used by the monitor. ; Definition at line 515 of file TMonitor.cxx. ◆ GetSender(). void * TMonitor::GetSender ; (; ). inlineoverrideprivatevirtual . Reimplemented from TQObject.; Definition at line 51 of file TMonitor.h. ◆ Interrupt(). void TMonitor::Interrupt ; (; ). inline . Definition at line 71 of file TMonitor.h. ◆ IsA(). TClass * TMonitor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 85 of file TMonitor.h. ◆ IsActive(). Bool_t TMonitor::IsActive ; (; TSocket * ; sock); const. Check if socket 's' is in the active list. ; Avoids the duplication of active l",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:20175,Energy Efficiency,monitor,monitor,20175," timeout = 0, then reset activity timestamp on all active sockets. This time out is typically used if GetActive() is used to see how many remotes still need to send something. If they pass the timeout they will be skipped and GetActive() will return 0 and the loop can be exited. ; Definition at line 438 of file TMonitor.cxx. ◆ GetDeActive(). Int_t TMonitor::GetDeActive ; (; ); const. Return number of sockets in the de-active list. ; Definition at line 473 of file TMonitor.cxx. ◆ GetListOfActives(). TList * TMonitor::GetListOfActives ; (; ); const. Returns a list with all active sockets. ; This list must be deleted by the user. DO NOT call Delete() on this list as it will delete the sockets that are still being used by the monitor. ; Definition at line 498 of file TMonitor.cxx. ◆ GetListOfDeActives(). TList * TMonitor::GetListOfDeActives ; (; ); const. Returns a list with all de-active sockets. ; This list must be deleted by the user. DO NOT call Delete() on this list as it will delete the sockets that are still being used by the monitor. ; Definition at line 515 of file TMonitor.cxx. ◆ GetSender(). void * TMonitor::GetSender ; (; ). inlineoverrideprivatevirtual . Reimplemented from TQObject.; Definition at line 51 of file TMonitor.h. ◆ Interrupt(). void TMonitor::Interrupt ; (; ). inline . Definition at line 71 of file TMonitor.h. ◆ IsA(). TClass * TMonitor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 85 of file TMonitor.h. ◆ IsActive(). Bool_t TMonitor::IsActive ; (; TSocket * ; sock); const. Check if socket 's' is in the active list. ; Avoids the duplication of active list via TMonitor::GetListOfActives(). ; Definition at line 482 of file TMonitor.cxx. ◆ Ready(). void TMonitor::Ready ; (; TSocket * ; sock). virtual . Emit signal when some socket is ready. ; Definition at line 530 of file TMonitor.cxx. ◆ Remove(). void TMonitor::Remove ; (; TSocket * ; sock). virtual . Remove a",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:21147,Energy Efficiency,monitor,monitor,21147,ets that are still being used by the monitor. ; Definition at line 515 of file TMonitor.cxx. ◆ GetSender(). void * TMonitor::GetSender ; (; ). inlineoverrideprivatevirtual . Reimplemented from TQObject.; Definition at line 51 of file TMonitor.h. ◆ Interrupt(). void TMonitor::Interrupt ; (; ). inline . Definition at line 71 of file TMonitor.h. ◆ IsA(). TClass * TMonitor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 85 of file TMonitor.h. ◆ IsActive(). Bool_t TMonitor::IsActive ; (; TSocket * ; sock); const. Check if socket 's' is in the active list. ; Avoids the duplication of active list via TMonitor::GetListOfActives(). ; Definition at line 482 of file TMonitor.cxx. ◆ Ready(). void TMonitor::Ready ; (; TSocket * ; sock). virtual . Emit signal when some socket is ready. ; Definition at line 530 of file TMonitor.cxx. ◆ Remove(). void TMonitor::Remove ; (; TSocket * ; sock). virtual . Remove a socket from the monitor. ; Definition at line 214 of file TMonitor.cxx. ◆ RemoveAll(). void TMonitor::RemoveAll ; (; ). virtual . Remove all sockets from the monitor. ; Definition at line 241 of file TMonitor.cxx. ◆ ResetInterrupt(). void TMonitor::ResetInterrupt ; (; ). inline . Definition at line 72 of file TMonitor.h. ◆ Select() [1/3]. TSocket * TMonitor::Select ; (; ). Return pointer to socket for which an event is waiting. ; Select can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of error. ; Definition at line 322 of file TMonitor.cxx. ◆ Select() [2/3]. TSocket * TMonitor::Select ; (; Long_t ; timeout). Return pointer to socket for which an event is waiting. ; Wait a maximum of timeout milliseconds. If return is due to timeout it returns (TSocket *)-1. Select() can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt(),MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:21289,Energy Efficiency,monitor,monitor,21289,). inlineoverrideprivatevirtual . Reimplemented from TQObject.; Definition at line 51 of file TMonitor.h. ◆ Interrupt(). void TMonitor::Interrupt ; (; ). inline . Definition at line 71 of file TMonitor.h. ◆ IsA(). TClass * TMonitor::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 85 of file TMonitor.h. ◆ IsActive(). Bool_t TMonitor::IsActive ; (; TSocket * ; sock); const. Check if socket 's' is in the active list. ; Avoids the duplication of active list via TMonitor::GetListOfActives(). ; Definition at line 482 of file TMonitor.cxx. ◆ Ready(). void TMonitor::Ready ; (; TSocket * ; sock). virtual . Emit signal when some socket is ready. ; Definition at line 530 of file TMonitor.cxx. ◆ Remove(). void TMonitor::Remove ; (; TSocket * ; sock). virtual . Remove a socket from the monitor. ; Definition at line 214 of file TMonitor.cxx. ◆ RemoveAll(). void TMonitor::RemoveAll ; (; ). virtual . Remove all sockets from the monitor. ; Definition at line 241 of file TMonitor.cxx. ◆ ResetInterrupt(). void TMonitor::ResetInterrupt ; (; ). inline . Definition at line 72 of file TMonitor.h. ◆ Select() [1/3]. TSocket * TMonitor::Select ; (; ). Return pointer to socket for which an event is waiting. ; Select can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of error. ; Definition at line 322 of file TMonitor.cxx. ◆ Select() [2/3]. TSocket * TMonitor::Select ; (; Long_t ; timeout). Return pointer to socket for which an event is waiting. ; Wait a maximum of timeout milliseconds. If return is due to timeout it returns (TSocket *)-1. Select() can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆,MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:22964,Energy Efficiency,monitor,monitor,22964,"e interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆ Select() [3/3]. Int_t TMonitor::Select ; (; TList * ; rdready, . TList * ; wrready, . Long_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socket sock to interest. ; If the socket is not in the active list move it or add it there. If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 180 of file TMonitor.cxx. ◆ SetReady(). void TMonitor::SetReady ; (; TSocket * ; sock). private . Called by TSocketHandler::Notify() to signal which socket is ready to be read or written. ; User should not call this routine. The ready socket will be returned via the Select() user function. The Ready(TSocket *sock) signal is emitted. ; Definition at line 423 of file TMonitor.cxx. ◆ Streamer(). void TMonitor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMonitor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 85 of file TMonitor.h. Friends And Related Symbol Documentation. ◆ TSocketHandler. friend class TSocketHandler. friend . Definition at line 38 of file TMonitor.h. ◆ TTimeOutTimer. friend class TTimeOutTimer. friend .",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:23030,Energy Efficiency,monitor,monitor,23030,"e interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆ Select() [3/3]. Int_t TMonitor::Select ; (; TList * ; rdready, . TList * ; wrready, . Long_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socket sock to interest. ; If the socket is not in the active list move it or add it there. If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 180 of file TMonitor.cxx. ◆ SetReady(). void TMonitor::SetReady ; (; TSocket * ; sock). private . Called by TSocketHandler::Notify() to signal which socket is ready to be read or written. ; User should not call this routine. The ready socket will be returned via the Select() user function. The Ready(TSocket *sock) signal is emitted. ; Definition at line 423 of file TMonitor.cxx. ◆ Streamer(). void TMonitor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMonitor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 85 of file TMonitor.h. Friends And Related Symbol Documentation. ◆ TSocketHandler. friend class TSocketHandler. friend . Definition at line 38 of file TMonitor.h. ◆ TTimeOutTimer. friend class TTimeOutTimer. friend .",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:23103,Energy Efficiency,monitor,monitor,23103,"e interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆ Select() [3/3]. Int_t TMonitor::Select ; (; TList * ; rdready, . TList * ; wrready, . Long_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socket sock to interest. ; If the socket is not in the active list move it or add it there. If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 180 of file TMonitor.cxx. ◆ SetReady(). void TMonitor::SetReady ; (; TSocket * ; sock). private . Called by TSocketHandler::Notify() to signal which socket is ready to be read or written. ; User should not call this routine. The ready socket will be returned via the Select() user function. The Ready(TSocket *sock) signal is emitted. ; Definition at line 423 of file TMonitor.cxx. ◆ Streamer(). void TMonitor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMonitor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 85 of file TMonitor.h. Friends And Related Symbol Documentation. ◆ TSocketHandler. friend class TSocketHandler. friend . Definition at line 38 of file TMonitor.h. ◆ TTimeOutTimer. friend class TTimeOutTimer. friend .",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:4808,Integrability,message,message,4808,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:5349,Integrability,message,message,5349,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:6551,Integrability,message,message,6551,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:9913,Integrability,message,message,9913," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class s",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:10286,Integrability,message,message,10286," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, voi",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:23379,Integrability,rout,routine,23379,"ng_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socket sock to interest. ; If the socket is not in the active list move it or add it there. If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 180 of file TMonitor.cxx. ◆ SetReady(). void TMonitor::SetReady ; (; TSocket * ; sock). private . Called by TSocketHandler::Notify() to signal which socket is ready to be read or written. ; User should not call this routine. The ready socket will be returned via the Select() user function. The Ready(TSocket *sock) signal is emitted. ; Definition at line 423 of file TMonitor.cxx. ◆ Streamer(). void TMonitor::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMonitor::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 85 of file TMonitor.h. Friends And Related Symbol Documentation. ◆ TSocketHandler. friend class TSocketHandler. friend . Definition at line 38 of file TMonitor.h. ◆ TTimeOutTimer. friend class TTimeOutTimer. friend . Definition at line 39 of file TMonitor.h. ◆ TXSlave. friend class TXSlave. friend . Definition at line 40 of file TMonitor.h. ◆ TXSocket. friend class TXSocket. friend . Definition at line 41 of file TMonitor.h. Member Data Documentation. ◆ fActive. TList* TMonitor::fActive. private . Definition at line 44 of file TMonitor.h. ◆ fDe",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:445,Modifiability,inherit,inherited,445,". ROOT: TMonitor Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMonitor Class Reference. . Definition at line 36 of file TMonitor.h. Public Types; enum  EInterest { kRead = 1; , kWrite = 2; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMonitor (Bool_t mainloop=kTRUE);  Create a monitor object. ;  ;  TMonitor (const TMonitor &m);  Copy constructor. ;  ; virtual ~TMonitor ();  Cleanup the monitor object. Does not delete sockets being monitored. ;  ; virtual void Activate (TSocket *sock);  Activate a de-activated socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Ret",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:3041,Modifiability,inherit,inherited,3041,"de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal when some socket is ready. ;  ; virtual void Remove (TSocket *sock);  Remove a socket from the monitor. ;  ; virtual void RemoveAll ();  Remove all sockets from the monitor. ;  ; void ResetInterrupt ();  ; TSocket * Select ();  Return pointer to socket for which an event is waiting. ;  ; TSocket * Select (Long_t timeout);  Return pointer to socket for which an event is waiting. ;  ; Int_t Select (TList *rdready, TList *wrready, Long_t timeout);  Return numbers of sockets that are ready for reading or writing. ;  ; virtual void SetInterest (TSocket *sock, Int_t interest=kRead);  Set interest mask for socket sock to interest. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) c",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:4438,Modifiability,inherit,inheritance,4438,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:6649,Modifiability,inherit,inherits,6649,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:6766,Modifiability,inherit,inherits,6766,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:10593,Modifiability,inherit,inherited,10593," SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from TQObject;  TQObject ();  TQObject Constructor. ;  ; virtual ~TQObject ();  TQObject Destructor. ;  ; Bool_t AreSignalsBlocked () const;  ; Bool_t BlockSignals (Bool_t b);  ; virtual void ChangedBy (const char *method);  ; void CollectClassSignalLists (TList &list, TClass *cls);  Collect class signal lists from class cls and all its base-classes. ;  ; Bool_t Connect (const char *signal, const char *receiver_class, void *receiver, const char *slot);  Non-static method is used to connect from the signal of this object to the receiver slot. ;  ; virtual void Connected (const char *);  ; virtual void Destroyed ();  ; Bool_t Disconnect (const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal of this object from slot of receiver. ;  ; virtual void Disconnected (const char *);  ; void Emit (const char *signal);  Activate signal without args. ;  ; template<typename T > ; void Emit (const char *signal, const T &arg);  Activate signal with single paramet",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:12755,Modifiability,inherit,inherited,12755," TList * GetListOfClassSignals () const;  Returns pointer to list of signals of this class. ;  ; TList * GetListOfConnections () const;  ; TList * GetListOfSignals () const;  ; virtual Bool_t HasConnection (const char *signal_name) const;  Return true if there is any object connected to this signal. ;  ; virtual void HighPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void LowPriority (const char *signal_name, const char *slot_name=nullptr);  ; virtual void Message (const char *msg);  ; virtual Int_t NumberOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:13273,Modifiability,inherit,inherited,13273,"rOfConnections () const;  Return number of connections for this object. ;  ; virtual Int_t NumberOfSignals () const;  Return number of signals for this object. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from TQObject; static Bool_t AreAllSignalsBlocked ();  Returns true if all signals are blocked. ;  ; static Bool_t BlockAllSignals (Bool_t b);  Block or unblock all signals. Returns the previous block status. ;  ; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static Bool_t Connect (const char *sender_class, const char *signal, const char *receiver_class, void *receiver, const char *slot);  This method allows to make a connection from any object of the same class to a single slot. ;  ; static Bool_t Connect (TQObject *sender, const char *signal, const char *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullpt",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:14870,Modifiability,inherit,inherited,14870,"e connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Private Member Functions; void * GetSender () override;  ; void SetReady (TSocket *sock);  Called by TSocketHandler::Notify() to signal which socket is ready to be read or written. ;  . Private Attributes; TList * fActive;  ; TList * fDeActive;  ; Bool_t fInterrupt;  ; Bool_t fMainLoop;  ; TSocket * fReady;  . Friends; class TSocketHandler;  ; class TTimeOutTimer;  ; class TXSlave;  ; class TXSocket;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQO",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:14969,Modifiability,inherit,inherited,14969,"e connection between sender and receiver. ;  ; static const char * DeclFileName ();  ; static Bool_t Disconnect (const char *class_name, const char *signal, void *receiver=nullptr, const char *slot=nullptr);  Disconnects ""class signal"". ;  ; static Bool_t Disconnect (TQObject *sender, const char *signal=nullptr, void *receiver=nullptr, const char *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Private Member Functions; void * GetSender () override;  ; void SetReady (TSocket *sock);  Called by TSocketHandler::Notify() to signal which socket is ready to be read or written. ;  . Private Attributes; TList * fActive;  ; TList * fDeActive;  ; Bool_t fInterrupt;  ; Bool_t fMainLoop;  ; TSocket * fReady;  . Friends; class TSocketHandler;  ; class TTimeOutTimer;  ; class TXSlave;  ; class TXSocket;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQO",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:15180,Modifiability,inherit,inherited,15180,"ar *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Private Member Functions; void * GetSender () override;  ; void SetReady (TSocket *sock);  Called by TSocketHandler::Notify() to signal which socket is ready to be read or written. ;  . Private Attributes; TList * fActive;  ; TList * fDeActive;  ; Bool_t fInterrupt;  ; Bool_t fMainLoop;  ; TSocket * fReady;  . Friends; class TSocketHandler;  ; class TTimeOutTimer;  ; class TXSlave;  ; class TXSocket;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this objec",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:15293,Modifiability,inherit,inherited,15293,"ar *slot=nullptr);  Disconnects signal in object sender from slot_method in object receiver. ;  . Private Member Functions; void * GetSender () override;  ; void SetReady (TSocket *sock);  Called by TSocketHandler::Notify() to signal which socket is ready to be read or written. ;  . Private Attributes; TList * fActive;  ; TList * fDeActive;  ; Bool_t fInterrupt;  ; Bool_t fMainLoop;  ; TSocket * fReady;  . Friends; class TSocketHandler;  ; class TTimeOutTimer;  ; class TXSlave;  ; class TXSocket;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Protected Member Functions inherited from TQObject; virtual const char * GetSenderClassName () const;  ;  Static Protected Member Functions inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this objec",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:16142,Modifiability,inherit,inherited,16142,"ns inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMonitor.h>. Inheritance diagram for TMonitor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EInterest. enum TMonitor::EInterest. EnumeratorkRead ; kWrite . Definition at line 54 of file TMonitor.h. Constructor & Destructor Documentation. ◆ TMonitor() [1/2]. TMonitor::TMonitor ; (; Bool_t ; mainloop = kTRUE). Create a monitor object. ; If mainloop is true the monitoring will be done in the main event loop. ; Definition at line 109 of file TMonitor.cxx. ◆ TMonitor() [2/2]. TMonitor::TMonitor ; (; const TMonitor & ; m). Copy constructor. ; Definition at line 123 of file TMonitor.cxx. ◆ ~TMonitor(). TMonitor::~TMonitor ; (; ). virtual . Cleanup the monitor object. Does not delete sockets being monitored. ; Definition at",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:16355,Modifiability,inherit,inherited,16355,"ns inherited from TQObject; static Int_t CheckConnectArgs (TQObject *sender, TClass *sender_class, const char *signal, TClass *receiver_class, const char *slot);  Checking of consistency of sender/receiver methods/arguments. ;  ; static TString CompressName (const char *method_name);  Removes ""const"" words and blanks from full (with prototype) method name and resolve any typedefs in the method signature. ;  ; static Bool_t ConnectToClass (const char *sender_class, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  This method allows to make connection from any object of the same class to the receiver object. ;  ; static Bool_t ConnectToClass (TQObject *sender, const char *signal, TClass *receiver_class, void *receiver, const char *slot);  Create connection between sender and receiver. ;  ;  Protected Attributes inherited from TQObject; TList * fListOfConnections;  list of signals from this object ;  ; TList * fListOfSignals;  ; Bool_t fSignalsBlocked;  list of connections to this object ;  ;  Static Protected Attributes inherited from TQObject; static Bool_t fgAllSignalsBlocked = kFALSE;  flag used for suppression of signals ;  . #include <TMonitor.h>. Inheritance diagram for TMonitor:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EInterest. enum TMonitor::EInterest. EnumeratorkRead ; kWrite . Definition at line 54 of file TMonitor.h. Constructor & Destructor Documentation. ◆ TMonitor() [1/2]. TMonitor::TMonitor ; (; Bool_t ; mainloop = kTRUE). Create a monitor object. ; If mainloop is true the monitoring will be done in the main event loop. ; Definition at line 109 of file TMonitor.cxx. ◆ TMonitor() [2/2]. TMonitor::TMonitor ; (; const TMonitor & ; m). Copy constructor. ; Definition at line 123 of file TMonitor.cxx. ◆ ~TMonitor(). TMonitor::~TMonitor ; (; ). virtual . Cleanup the monitor object. Does not delete sockets being monitored. ; Definition at",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:1727,Safety,timeout,timeout,1727,"catedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMonitor (Bool_t mainloop=kTRUE);  Create a monitor object. ;  ;  TMonitor (const TMonitor &m);  Copy constructor. ;  ; virtual ~TMonitor ();  Cleanup the monitor object. Does not delete sockets being monitored. ;  ; virtual void Activate (TSocket *sock);  Activate a de-activated socket. ;  ; virtual void ActivateAll ();  Activate all de-activated sockets. ;  ; virtual void Add (TSocket *sock, Int_t interest=kRead);  Add socket to the monitor's active list. ;  ; virtual void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal when some socket is ready. ;  ; virtual void Remove (TSocket *sock);  Remove a socket from the monitor. ;  ; virtual void RemoveAll ();  Remove all sockets from the monitor. ;  ; void ResetInterrupt ();  ; TSocket * Select ();  Return pointer to socket for which an event is waiting. ;  ; TSocket * Select (Long_t timeout);  Return pointer to socket for which an event is waiting. ;  ; Int_t Select (TList *rdready, TList *wrready, Long_t timeout);  Return numbers of sockets that are ready for reading or w",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:2551,Safety,timeout,timeout,2551,"l void DeActivate (TSocket *sock);  De-activate a socket. ;  ; virtual void DeActivateAll ();  De-activate all activated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal when some socket is ready. ;  ; virtual void Remove (TSocket *sock);  Remove a socket from the monitor. ;  ; virtual void RemoveAll ();  Remove all sockets from the monitor. ;  ; void ResetInterrupt ();  ; TSocket * Select ();  Return pointer to socket for which an event is waiting. ;  ; TSocket * Select (Long_t timeout);  Return pointer to socket for which an event is waiting. ;  ; Int_t Select (TList *rdready, TList *wrready, Long_t timeout);  Return numbers of sockets that are ready for reading or writing. ;  ; virtual void SetInterest (TSocket *sock, Int_t interest=kRead);  Set interest mask for socket sock to interest. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t Checked",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:2676,Safety,timeout,timeout,2676,"ated sockets. ;  ; Int_t GetActive (Long_t timeout=-1) const;  Return number of sockets in the active list. ;  ; Int_t GetDeActive () const;  Return number of sockets in the de-active list. ;  ; TList * GetListOfActives () const;  Returns a list with all active sockets. ;  ; TList * GetListOfDeActives () const;  Returns a list with all de-active sockets. ;  ; void Interrupt ();  ; TClass * IsA () const override;  ; Bool_t IsActive (TSocket *s) const;  Check if socket 's' is in the active list. ;  ; virtual void Ready (TSocket *sock);  Emit signal when some socket is ready. ;  ; virtual void Remove (TSocket *sock);  Remove a socket from the monitor. ;  ; virtual void RemoveAll ();  Remove all sockets from the monitor. ;  ; void ResetInterrupt ();  ; TSocket * Select ();  Return pointer to socket for which an event is waiting. ;  ; TSocket * Select (Long_t timeout);  Return pointer to socket for which an event is waiting. ;  ; Int_t Select (TList *rdready, TList *wrready, Long_t timeout);  Return numbers of sockets that are ready for reading or writing. ;  ; virtual void SetInterest (TSocket *sock, Int_t interest=kRead);  Set interest mask for socket sock to interest. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the r",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:18951,Safety,timeout,timeout,18951,"|kWrite then we monitor both read and write readiness. ; Definition at line 168 of file TMonitor.cxx. ◆ Class(). static TClass * TMonitor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMonitor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMonitor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 85 of file TMonitor.h. ◆ DeActivate(). void TMonitor::DeActivate ; (; TSocket * ; sock). virtual . De-activate a socket. ; Definition at line 284 of file TMonitor.cxx. ◆ DeActivateAll(). void TMonitor::DeActivateAll ; (; ). virtual . De-activate all activated sockets. ; Definition at line 302 of file TMonitor.cxx. ◆ DeclFileName(). static const char * TMonitor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 85 of file TMonitor.h. ◆ GetActive(). Int_t TMonitor::GetActive ; (; Long_t ; timeout = -1); const. Return number of sockets in the active list. ; If timeout > 0, remove from the list those sockets which did not have any activity since timeout millisecs. If timeout = 0, then reset activity timestamp on all active sockets. This time out is typically used if GetActive() is used to see how many remotes still need to send something. If they pass the timeout they will be skipped and GetActive() will return 0 and the loop can be exited. ; Definition at line 438 of file TMonitor.cxx. ◆ GetDeActive(). Int_t TMonitor::GetDeActive ; (; ); const. Return number of sockets in the de-active list. ; Definition at line 473 of file TMonitor.cxx. ◆ GetListOfActives(). TList * TMonitor::GetListOfActives ; (; ); const. Returns a list with all active sockets. ; This list must be deleted by the user. DO NOT call Delete() on this list as it will delete the sockets that are still being used by the monitor. ; Definition at line 498 of file TMonitor.cxx. ◆ GetListOfDeActives().",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:19023,Safety,timeout,timeout,19023,"onitor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMonitor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMonitor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 85 of file TMonitor.h. ◆ DeActivate(). void TMonitor::DeActivate ; (; TSocket * ; sock). virtual . De-activate a socket. ; Definition at line 284 of file TMonitor.cxx. ◆ DeActivateAll(). void TMonitor::DeActivateAll ; (; ). virtual . De-activate all activated sockets. ; Definition at line 302 of file TMonitor.cxx. ◆ DeclFileName(). static const char * TMonitor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 85 of file TMonitor.h. ◆ GetActive(). Int_t TMonitor::GetActive ; (; Long_t ; timeout = -1); const. Return number of sockets in the active list. ; If timeout > 0, remove from the list those sockets which did not have any activity since timeout millisecs. If timeout = 0, then reset activity timestamp on all active sockets. This time out is typically used if GetActive() is used to see how many remotes still need to send something. If they pass the timeout they will be skipped and GetActive() will return 0 and the loop can be exited. ; Definition at line 438 of file TMonitor.cxx. ◆ GetDeActive(). Int_t TMonitor::GetDeActive ; (; ); const. Return number of sockets in the de-active list. ; Definition at line 473 of file TMonitor.cxx. ◆ GetListOfActives(). TList * TMonitor::GetListOfActives ; (; ); const. Returns a list with all active sockets. ; This list must be deleted by the user. DO NOT call Delete() on this list as it will delete the sockets that are still being used by the monitor. ; Definition at line 498 of file TMonitor.cxx. ◆ GetListOfDeActives(). TList * TMonitor::GetListOfDeActives ; (; ); const. Returns a list with all de-active sockets. ; This list must be deleted by the ",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:19109,Safety,timeout,timeout,19109,"onitor::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMonitor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMonitor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 85 of file TMonitor.h. ◆ DeActivate(). void TMonitor::DeActivate ; (; TSocket * ; sock). virtual . De-activate a socket. ; Definition at line 284 of file TMonitor.cxx. ◆ DeActivateAll(). void TMonitor::DeActivateAll ; (; ). virtual . De-activate all activated sockets. ; Definition at line 302 of file TMonitor.cxx. ◆ DeclFileName(). static const char * TMonitor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 85 of file TMonitor.h. ◆ GetActive(). Int_t TMonitor::GetActive ; (; Long_t ; timeout = -1); const. Return number of sockets in the active list. ; If timeout > 0, remove from the list those sockets which did not have any activity since timeout millisecs. If timeout = 0, then reset activity timestamp on all active sockets. This time out is typically used if GetActive() is used to see how many remotes still need to send something. If they pass the timeout they will be skipped and GetActive() will return 0 and the loop can be exited. ; Definition at line 438 of file TMonitor.cxx. ◆ GetDeActive(). Int_t TMonitor::GetDeActive ; (; ); const. Return number of sockets in the de-active list. ; Definition at line 473 of file TMonitor.cxx. ◆ GetListOfActives(). TList * TMonitor::GetListOfActives ; (; ); const. Returns a list with all active sockets. ; This list must be deleted by the user. DO NOT call Delete() on this list as it will delete the sockets that are still being used by the monitor. ; Definition at line 498 of file TMonitor.cxx. ◆ GetListOfDeActives(). TList * TMonitor::GetListOfDeActives ; (; ); const. Returns a list with all de-active sockets. ; This list must be deleted by the ",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:19131,Safety,timeout,timeout,19131,"ic const char * TMonitor::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMonitor::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 85 of file TMonitor.h. ◆ DeActivate(). void TMonitor::DeActivate ; (; TSocket * ; sock). virtual . De-activate a socket. ; Definition at line 284 of file TMonitor.cxx. ◆ DeActivateAll(). void TMonitor::DeActivateAll ; (; ). virtual . De-activate all activated sockets. ; Definition at line 302 of file TMonitor.cxx. ◆ DeclFileName(). static const char * TMonitor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 85 of file TMonitor.h. ◆ GetActive(). Int_t TMonitor::GetActive ; (; Long_t ; timeout = -1); const. Return number of sockets in the active list. ; If timeout > 0, remove from the list those sockets which did not have any activity since timeout millisecs. If timeout = 0, then reset activity timestamp on all active sockets. This time out is typically used if GetActive() is used to see how many remotes still need to send something. If they pass the timeout they will be skipped and GetActive() will return 0 and the loop can be exited. ; Definition at line 438 of file TMonitor.cxx. ◆ GetDeActive(). Int_t TMonitor::GetDeActive ; (; ); const. Return number of sockets in the de-active list. ; Definition at line 473 of file TMonitor.cxx. ◆ GetListOfActives(). TList * TMonitor::GetListOfActives ; (; ); const. Returns a list with all active sockets. ; This list must be deleted by the user. DO NOT call Delete() on this list as it will delete the sockets that are still being used by the monitor. ; Definition at line 498 of file TMonitor.cxx. ◆ GetListOfDeActives(). TList * TMonitor::GetListOfDeActives ; (; ); const. Returns a list with all de-active sockets. ; This list must be deleted by the user. DO NOT call Delete() on this list as it will delete the sockets that are still being",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:19323,Safety,timeout,timeout,19323,"on of this class ; Definition at line 85 of file TMonitor.h. ◆ DeActivate(). void TMonitor::DeActivate ; (; TSocket * ; sock). virtual . De-activate a socket. ; Definition at line 284 of file TMonitor.cxx. ◆ DeActivateAll(). void TMonitor::DeActivateAll ; (; ). virtual . De-activate all activated sockets. ; Definition at line 302 of file TMonitor.cxx. ◆ DeclFileName(). static const char * TMonitor::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 85 of file TMonitor.h. ◆ GetActive(). Int_t TMonitor::GetActive ; (; Long_t ; timeout = -1); const. Return number of sockets in the active list. ; If timeout > 0, remove from the list those sockets which did not have any activity since timeout millisecs. If timeout = 0, then reset activity timestamp on all active sockets. This time out is typically used if GetActive() is used to see how many remotes still need to send something. If they pass the timeout they will be skipped and GetActive() will return 0 and the loop can be exited. ; Definition at line 438 of file TMonitor.cxx. ◆ GetDeActive(). Int_t TMonitor::GetDeActive ; (; ); const. Return number of sockets in the de-active list. ; Definition at line 473 of file TMonitor.cxx. ◆ GetListOfActives(). TList * TMonitor::GetListOfActives ; (; ); const. Returns a list with all active sockets. ; This list must be deleted by the user. DO NOT call Delete() on this list as it will delete the sockets that are still being used by the monitor. ; Definition at line 498 of file TMonitor.cxx. ◆ GetListOfDeActives(). TList * TMonitor::GetListOfDeActives ; (; ); const. Returns a list with all de-active sockets. ; This list must be deleted by the user. DO NOT call Delete() on this list as it will delete the sockets that are still being used by the monitor. ; Definition at line 515 of file TMonitor.cxx. ◆ GetSender(). void * TMonitor::GetSender ; (; ). inlineoverrideprivatevirtual . Reimplemented from TQObject.; Definition at l",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:21859,Safety,timeout,timeout,21859,"OfActives(). ; Definition at line 482 of file TMonitor.cxx. ◆ Ready(). void TMonitor::Ready ; (; TSocket * ; sock). virtual . Emit signal when some socket is ready. ; Definition at line 530 of file TMonitor.cxx. ◆ Remove(). void TMonitor::Remove ; (; TSocket * ; sock). virtual . Remove a socket from the monitor. ; Definition at line 214 of file TMonitor.cxx. ◆ RemoveAll(). void TMonitor::RemoveAll ; (; ). virtual . Remove all sockets from the monitor. ; Definition at line 241 of file TMonitor.cxx. ◆ ResetInterrupt(). void TMonitor::ResetInterrupt ; (; ). inline . Definition at line 72 of file TMonitor.h. ◆ Select() [1/3]. TSocket * TMonitor::Select ; (; ). Return pointer to socket for which an event is waiting. ; Select can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of error. ; Definition at line 322 of file TMonitor.cxx. ◆ Select() [2/3]. TSocket * TMonitor::Select ; (; Long_t ; timeout). Return pointer to socket for which an event is waiting. ; Wait a maximum of timeout milliseconds. If return is due to timeout it returns (TSocket *)-1. Select() can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆ Select() [3/3]. Int_t TMonitor::Select ; (; TList * ; rdready, . TList * ; wrready, . Long_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socke",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:21945,Safety,timeout,timeout,21945,"t * ; sock). virtual . Emit signal when some socket is ready. ; Definition at line 530 of file TMonitor.cxx. ◆ Remove(). void TMonitor::Remove ; (; TSocket * ; sock). virtual . Remove a socket from the monitor. ; Definition at line 214 of file TMonitor.cxx. ◆ RemoveAll(). void TMonitor::RemoveAll ; (; ). virtual . Remove all sockets from the monitor. ; Definition at line 241 of file TMonitor.cxx. ◆ ResetInterrupt(). void TMonitor::ResetInterrupt ; (; ). inline . Definition at line 72 of file TMonitor.h. ◆ Select() [1/3]. TSocket * TMonitor::Select ; (; ). Return pointer to socket for which an event is waiting. ; Select can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of error. ; Definition at line 322 of file TMonitor.cxx. ◆ Select() [2/3]. TSocket * TMonitor::Select ; (; Long_t ; timeout). Return pointer to socket for which an event is waiting. ; Wait a maximum of timeout milliseconds. If return is due to timeout it returns (TSocket *)-1. Select() can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆ Select() [3/3]. Int_t TMonitor::Select ; (; TList * ; rdready, . TList * ; wrready, . Long_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socket sock to interest. ; If the socket is not in the active list move it or add it there. If interest=kRe",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:21987,Safety,timeout,timeout,21987,"ket is ready. ; Definition at line 530 of file TMonitor.cxx. ◆ Remove(). void TMonitor::Remove ; (; TSocket * ; sock). virtual . Remove a socket from the monitor. ; Definition at line 214 of file TMonitor.cxx. ◆ RemoveAll(). void TMonitor::RemoveAll ; (; ). virtual . Remove all sockets from the monitor. ; Definition at line 241 of file TMonitor.cxx. ◆ ResetInterrupt(). void TMonitor::ResetInterrupt ; (; ). inline . Definition at line 72 of file TMonitor.h. ◆ Select() [1/3]. TSocket * TMonitor::Select ; (; ). Return pointer to socket for which an event is waiting. ; Select can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of error. ; Definition at line 322 of file TMonitor.cxx. ◆ Select() [2/3]. TSocket * TMonitor::Select ; (; Long_t ; timeout). Return pointer to socket for which an event is waiting. ; Wait a maximum of timeout milliseconds. If return is due to timeout it returns (TSocket *)-1. Select() can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆ Select() [3/3]. Int_t TMonitor::Select ; (; TList * ; rdready, . TList * ; wrready, . Long_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socket sock to interest. ; If the socket is not in the active list move it or add it there. If interest=kRead then we want to monitor the socket for read r",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:22375,Safety,timeout,timeout,22375,"itor::ResetInterrupt ; (; ). inline . Definition at line 72 of file TMonitor.h. ◆ Select() [1/3]. TSocket * TMonitor::Select ; (; ). Return pointer to socket for which an event is waiting. ; Select can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of error. ; Definition at line 322 of file TMonitor.cxx. ◆ Select() [2/3]. TSocket * TMonitor::Select ; (; Long_t ; timeout). Return pointer to socket for which an event is waiting. ; Wait a maximum of timeout milliseconds. If return is due to timeout it returns (TSocket *)-1. Select() can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆ Select() [3/3]. Int_t TMonitor::Select ; (; TList * ; rdready, . TList * ; wrready, . Long_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socket sock to interest. ; If the socket is not in the active list move it or add it there. If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 180 of file TMonitor.cxx. ◆ SetReady(). void TMonitor::SetReady ; (; TSocket * ; sock). private . Called by TSocketHandler::Notify() to signal which socket is ready to be read or written. ; User should not call t",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:22473,Safety,timeout,timeout,22473,"Socket * TMonitor::Select ; (; ). Return pointer to socket for which an event is waiting. ; Select can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of error. ; Definition at line 322 of file TMonitor.cxx. ◆ Select() [2/3]. TSocket * TMonitor::Select ; (; Long_t ; timeout). Return pointer to socket for which an event is waiting. ; Wait a maximum of timeout milliseconds. If return is due to timeout it returns (TSocket *)-1. Select() can be interrupt by a call to Interrupt() (e.g. connected with a Ctrl-C handler); a call to ResetInterrupt() before Select() is advisable in such a case. Return 0 in case of any other error situation. ; Definition at line 348 of file TMonitor.cxx. ◆ Select() [3/3]. Int_t TMonitor::Select ; (; TList * ; rdready, . TList * ; wrready, . Long_t ; timeout . ). Return numbers of sockets that are ready for reading or writing. ; Wait a maximum of timeout milliseconds. Return 0 if timed-out. Return < 0 in case of error. If rdready and/or wrready are not 0, the lists of sockets with something to read and/or write are also returned. ; Definition at line 377 of file TMonitor.cxx. ◆ SetInterest(). void TMonitor::SetInterest ; (; TSocket * ; sock, . Int_t ; interest = kRead . ). virtual . Set interest mask for socket sock to interest. ; If the socket is not in the active list move it or add it there. If interest=kRead then we want to monitor the socket for read readiness, if interest=kWrite then we monitor the socket for write readiness, if interest=kRead|kWrite then we monitor both read and write readiness. ; Definition at line 180 of file TMonitor.cxx. ◆ SetReady(). void TMonitor::SetReady ; (; TSocket * ; sock). private . Called by TSocketHandler::Notify() to signal which socket is ready to be read or written. ; User should not call this routine. The ready socket will be returned via the Select() user function. The Ready(TSocket *",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMonitor.html:6280,Security,hash,hash,6280," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMonitor.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMonitor.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:2412,Availability,error,error,2412,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:2501,Availability,error,error,2501,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:2656,Availability,error,error,2656,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:2953,Availability,error,error,2953,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:7517,Availability,error,error,7517," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:2418,Integrability,message,message,2418,"t;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:2959,Integrability,message,message,2959,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:4161,Integrability,message,message,4161,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:7523,Integrability,message,message,7523," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:7896,Integrability,message,message,7896," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Prote",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:690,Modifiability,inherit,inherited,690,". ROOT: TMrbSubevent_Caen Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; List of all members ; TMrbSubevent_Caen Class Reference. . Definition at line 46 of file clonesA_Event.h. Public Member Functions;  TMrbSubevent_Caen ();  ; virtual ~TMrbSubevent_Caen ();  ; void Clear (Option_t *="""");  ; TUsrHitBuffer * GetHitBuffer ();  ; virtual TClass * IsA () const;  ; virtual void Streamer (TBuffer &);  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:2048,Modifiability,inherit,inheritance,2048,""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:4259,Modifiability,inherit,inherits,4259,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:4376,Modifiability,inherit,inherits,4376,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:8397,Modifiability,inherit,inherited,8397,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TUsrHitBuffer fHitBuffer;  ; Int_t fTimeStamp;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); ",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:8999,Modifiability,inherit,inherited,8999,"(const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TUsrHitBuffer fHitBuffer;  ; Int_t fTimeStamp;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tutorials/tree/clonesA_Event.h>. Inheritance diagram fo",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:9640,Modifiability,inherit,inherited,9640,"t destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TUsrHitBuffer fHitBuffer;  ; Int_t fTimeStamp;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tutorials/tree/clonesA_Event.h>. Inheritance diagram for TMrbSubevent_Caen:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMrbSubevent_Caen(). TMrbSubevent_Caen::TMrbSubevent_Caen ; (; ). inline . Definition at line 49 of file clonesA_Event.h. ◆ ~TMrbSubevent_Caen(). virtual TMrbSubevent_Caen::~TMrbSubevent_Caen ; (; ). inlinevirtual . Definition at line 50 of file clonesA_Event.h. Member Function Documentation. ◆ Class(). static TClass * TMrbSubevent_Caen::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMrbSubevent_Caen::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). st",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:9739,Modifiability,inherit,inherited,9739,"t destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Attributes; TUsrHitBuffer fHitBuffer;  ; Int_t fTimeStamp;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include </home/sftnight/build/workspace/root-makedoc-master/rootspi/rdoc/src/master/tutorials/tree/clonesA_Event.h>. Inheritance diagram for TMrbSubevent_Caen:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMrbSubevent_Caen(). TMrbSubevent_Caen::TMrbSubevent_Caen ; (; ). inline . Definition at line 49 of file clonesA_Event.h. ◆ ~TMrbSubevent_Caen(). virtual TMrbSubevent_Caen::~TMrbSubevent_Caen ; (; ). inlinevirtual . Definition at line 50 of file clonesA_Event.h. Member Function Documentation. ◆ Class(). static TClass * TMrbSubevent_Caen::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMrbSubevent_Caen::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). st",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMrbSubevent__Caen.html:3890,Security,hash,hash,3890," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMrbSubevent__Caen.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMrbSubevent__Caen.html
https://root.cern/doc/master/classTMultiDimFit.html:1151,Availability,reliab,reliably,1151,"l members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Attributes |; List of all members ; TMultiDimFit Class ReferenceHistogram Library. ; Multidimensional Fits in ROOT. . Overview; A common problem encountered in different fields of applied science is to find an expression for one physical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:1863,Availability,error,errors,1863,"e observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoothly on the observable quantities \( x_1, \ldots, x_N \) which we'll denote by \(\mathbf{x}\). Given a training sample of \( M\) tuples of the form, (TMultiDimFit::AddRow). \[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \]. where \(\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\) are \( N\) independent variables, \( D_j\) is the known, quantity dependent at \(\mathbf{x}_j\) and \( E_j\) is the square error in \( D_j\), the class will try to find the parameterization ; \[; D_p(\mathbf{x}) = \s",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:2712,Availability,error,error,2712,"s are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoothly on the observable quantities \( x_1, \ldots, x_N \) which we'll denote by \(\mathbf{x}\). Given a training sample of \( M\) tuples of the form, (TMultiDimFit::AddRow). \[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \]. where \(\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\) are \( N\) independent variables, \( D_j\) is the known, quantity dependent at \(\mathbf{x}_j\) and \( E_j\) is the square error in \( D_j\), the class will try to find the parameterization ; \[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \]. such that. \[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \]. is minimal. Here \(p_{li}(x_i)\) are monomials, or Chebyshev or Legendre polynomials, labelled \(l = 1, \ldots, L\), in each variable \( x_i\), \( i=1, \ldots, N\).; So what TMultiDimFit does, is to determine the number of terms \( L\), and then \( L\) terms (or functions) \( F_l\), and the \( L\) coefficients \( c_l\), so that \( S\) is minimal (TMultiDimFit::FindParameterization).; Of course it's more than a little unlikely that \( S\) will ever become exact zero as a result of the procedure outlined below. Therefore, the user is asked to provide a minimum relative error \( \epsilon\) (TMultiDimFit::SetMinRelativeError), and \( S\) will be considered minimized when. \[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilo",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:3572,Availability,error,error,3572,"\( N\) independent variables, \( D_j\) is the known, quantity dependent at \(\mathbf{x}_j\) and \( E_j\) is the square error in \( D_j\), the class will try to find the parameterization ; \[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \]. such that. \[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \]. is minimal. Here \(p_{li}(x_i)\) are monomials, or Chebyshev or Legendre polynomials, labelled \(l = 1, \ldots, L\), in each variable \( x_i\), \( i=1, \ldots, N\).; So what TMultiDimFit does, is to determine the number of terms \( L\), and then \( L\) terms (or functions) \( F_l\), and the \( L\) coefficients \( c_l\), so that \( S\) is minimal (TMultiDimFit::FindParameterization).; Of course it's more than a little unlikely that \( S\) will ever become exact zero as a result of the procedure outlined below. Therefore, the user is asked to provide a minimum relative error \( \epsilon\) (TMultiDimFit::SetMinRelativeError), and \( S\) will be considered minimized when. \[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilon; \]. Optionally, the user may impose a functional expression by specifying the powers of each variable in \( L\) specified functions \( F_1, \ldots,F_L\) (TMultiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimizatio",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:13166,Availability,error,errors,13166,"begin{eqnarray*}; b_{ij} = \frac{\mathbf{f}_j \bullet \mathbf{w}_i}{\mathbf{w}_i^2}; & \mbox{if} & i < j\\; 1 & \mbox{if} & i = j\\; 0 & \mbox{if} & i > j; \end{eqnarray*}. Consequently, \(\mathsf{B}\) is an upper triangle matrix, which can be readily inverted. So we now evaluate ; \[; \mathsf{F}\mathsf{B}^{-1} = \mathsf{W}; \]. The model \(\mathsf{W}\mathbf{a}\) can therefore be written as \((\mathsf{F}\mathsf{B}^{-1})\mathbf{a} = \mathsf{F}(\mathsf{B}^{-1}\mathbf{a})\,.\); The original model \(\mathsf{F}\mathbf{c}\) is therefore identical with this if ; \[; \mathbf{c} = \left(\mathsf{B}^{-1}\mathbf{a}\right) =; \left[\mathbf{a}^T\left(\mathsf{B}^{-1}\right)^T\right]^T\,.; \]. The reason we use \(\left(\mathsf{B}^{-1}\right)^T\) rather then \(\mathsf{B}^{-1}\) is to save storage, since \(\left(\mathsf{B}^{-1}\right)^T\) can be stored in the same matrix as \(\mathsf{B}\) (TMultiDimFit::MakeCoefficients). The errors in the coefficients is calculated by inverting the curvature matrix of the non-orthogonal functions \( f_{lj}\) [1] (TMultiDimFit::MakeCoefficientErrors). Considerations; It's important to realize that the training sample should be representative of the problem at hand, in particular along the borders of the region of interest. This is because the algorithm presented here, is a interpolation, rather then a extrapolation 5.; Also, the independent variables \( x_{i}\) need to be linear independent, since the procedure will perform poorly if they are not 5. One can find an linear transformation from ones original variables \( \xi_{i}\) to a set of linear independent variables \( x_{i}\), using a Principal Components Analysis (see TPrincipal), and then use the transformed variable as input to this class [5] 6.; H. Wind also outlines a method for parameterising a multidimensional dependence over a multidimensional set of variables. An example of the method from 5, is a follows (please refer to 5 for a full discussion):. Define \(\mathbf{P} = (P_1, \ldots, P_5)",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:16225,Availability,error,error,16225,"ot independent of \(\mathbf{x}\)) quantities \(\mathbf{Q}^\prime\); For each component \(Q^\prime_i\) make a multidimensional fit, using \(\mathbf{x}^\prime\) as the variables, thus determining a set of coefficients \(\mathbf{c}_i\). To process data, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the Principal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:16490,Availability,error,error,16490,"pal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction and Error Analysis for the Physical Sciences. McGraw-Hill, 2 edition, 1992.; R. Brun et al. Long writeup DD/75-23, CERN, 1980.; Gene H. Golub and Charles F. van Loan. Matrix Computations. John Hopkins University Press, Baltimore, 3 edition, 1996.; F. James. Minuit. Long writeup D506, CERN, 1998.; H. Wind. Function parameterization. Proceedings of the 1972 CERN Computing and Data Processing School, ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19062,Availability,error,error,19062,"000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiDimFit ();  Empty CTOR. Do not use. ;  ;  TMultiDimFit (Int_t dimension, EMDFPolyType type=kMonomials, Option_t *option="""");  Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Opti",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19349,Availability,error,error,19349," = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiDimFit ();  Empty CTOR. Do not use. ;  ;  TMultiDimFit (Int_t dimension, EMDFPolyType type=kMonomials, Option_t *option="""");  Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMa",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19951,Availability,error,error,19951,"nst Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMatrixD * GetCorrelationMatrix () const;  ; Double_t GetError () const;  ; Int_t * GetFunctionCodes () const;  ; const TMatrixD * GetFunctions () const;  ; virtual TList * GetHistograms () const;  ; Double_t GetMaxAngle () const;  ; Int_t GetMaxFunctions () const;  ; Int_t * GetMaxPowers () const;  ; Double_t GetMaxQuantity () const;  ; Int_t GetMaxStudy () const;  ; Int_t GetMaxTerms () const;  ; const TVectorD * GetMaxVariables () const;  ; Double_t GetMeanQuantity () const;  ; const TVectorD * GetMeanVariables () const;  ; Double_t GetMinAngle () const;  ; Double_t GetMinQuantity () const;  ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:23429,Availability,error,error,23429,"istograms of the result of the analysis. ;  ; virtual void MakeMethod (const Char_t *className=""MDF"", Option_t *option="""");  Generate the file <classname>MDF.cxx which contains the implementation of the method: ;  ; void Print (Option_t *option=""ps"") const override;  Print statistics etc. ;  ; void SetBinVarX (Int_t nbbinvarx);  ; void SetBinVarY (Int_t nbbinvary);  ; void SetMaxAngle (Double_t angle=0);  Set the max angle (in degrees) between the initial data vector to be fitted, and the new candidate function to be included in the fit. ;  ; void SetMaxFunctions (Int_t n);  ; void SetMaxPowers (const Int_t *powers);  Set the maximum power to be considered in the fit for each variable. ;  ; void SetMaxStudy (Int_t n);  ; void SetMaxTerms (Int_t terms);  ; void SetMinAngle (Double_t angle=1);  Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ;  ; void SetMinRelativeError (Double_t error);  Set the acceptable relative error for when sum of square residuals is considered minimized. ;  ; void SetPowerLimit (Double_t limit=1e-3);  Set the user parameter for the function selection. ;  ; virtual void SetPowers (const Int_t *powers, Int_t terms);  Define a user function. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) cons",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:23466,Availability,error,error,23466,"istograms of the result of the analysis. ;  ; virtual void MakeMethod (const Char_t *className=""MDF"", Option_t *option="""");  Generate the file <classname>MDF.cxx which contains the implementation of the method: ;  ; void Print (Option_t *option=""ps"") const override;  Print statistics etc. ;  ; void SetBinVarX (Int_t nbbinvarx);  ; void SetBinVarY (Int_t nbbinvary);  ; void SetMaxAngle (Double_t angle=0);  Set the max angle (in degrees) between the initial data vector to be fitted, and the new candidate function to be included in the fit. ;  ; void SetMaxFunctions (Int_t n);  ; void SetMaxPowers (const Int_t *powers);  Set the maximum power to be considered in the fit for each variable. ;  ; void SetMaxStudy (Int_t n);  ; void SetMaxTerms (Int_t terms);  ; void SetMinAngle (Double_t angle=1);  Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ;  ; void SetMinRelativeError (Double_t error);  Set the acceptable relative error for when sum of square residuals is considered minimized. ;  ; void SetPowerLimit (Double_t limit=1e-3);  Set the user parameter for the function selection. ;  ; virtual void SetPowers (const Int_t *powers, Int_t terms);  Define a user function. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) cons",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:26901,Availability,error,error,26901,"hat you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:26990,Availability,error,error,26990,");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:27145,Availability,error,error,27145," then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:27442,Availability,error,error,27442,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:31385,Availability,error,error,31385,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TMultiDimFit * Instance ();  Return the static instance. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ()",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:33508,Availability,error,errors,33508," char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual Double_t EvalControl (const Int_t *powers) const;  PRIVATE METHOD: Calculate the control parameter from the passed powers. ;  ; virtual Double_t EvalFactor (Int_t p, Double_t x) const;  PRIVATE METHOD: Evaluate function with power p at variable value x. ;  ; virtual void MakeCandidates ();  PRIVATE METHOD: Create list of candidate functions for the parameterisation. ;  ; virtual void MakeCoefficientErrors ();  PRIVATE METHOD: Compute the errors on the coefficients. ;  ; virtual void MakeCoefficients ();  PRIVATE METHOD: Invert the model matrix B, and compute final coefficients. ;  ; virtual void MakeCorrelation ();  PRIVATE METHOD: Compute the correlation matrix. ;  ; virtual Double_t MakeGramSchmidt (Int_t function);  PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ;  ; virtual void MakeNormalized ();  PRIVATE METHOD: Normalize data to the interval [-1;1]. ;  ; virtual void MakeParameterization ();  PRIVATE METHOD: Find the parameterization over the training sample. ;  ; virtual void MakeRealCode (const char *filename, const char *classname, Option_t *option="""");  PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameterization on some point. ;  ; virtual Bool_t Select (const Int_t *iv);  Selection method. ;  ; virtual Bool_t TestFunction (Double_t squareResidual, Double_t dResidur);  PRIVATE METHOD: Test whether the currently considered function c",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:36467,Availability,error,error,36467,"histograms. ;  ; Bool_t fIsUserFunction;  Flag for user defined function. ;  ; Bool_t fIsVerbose;  ; Double_t fMaxAngle;  Max angle for accepting new function. ;  ; Int_t fMaxFuncNV;  fMaxFunctions*fNVariables ;  ; Int_t fMaxFunctions;  max number of functions ;  ; Int_t * fMaxPowers;  [fNVariables] maximum powers ;  ; Int_t * fMaxPowersFinal;  [fNVariables] maximum powers from fit; ;  ; Double_t fMaxQuantity;  Max value of dependent quantity. ;  ; Double_t fMaxResidual;  Max residual value. ;  ; Int_t fMaxResidualRow;  Row giving max residual. ;  ; Int_t fMaxStudy;  max functions to study ;  ; Int_t fMaxTerms;  Max terms expected in final expr. ;  ; TVectorD fMaxVariables;  max value of independent variables ;  ; Double_t fMeanQuantity;  Mean of dependent quantity. ;  ; TVectorD fMeanVariables;  mean value of independent variables ;  ; Double_t fMinAngle;  Min angle for accepting new function. ;  ; Double_t fMinQuantity;  Min value of dependent quantity. ;  ; Double_t fMinRelativeError;  Min relative error accepted. ;  ; Double_t fMinResidual;  Min residual value. ;  ; Int_t fMinResidualRow;  Row giving min residual. ;  ; TVectorD fMinVariables;  min value of independent variables ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of independent variables. ;  ; TVectorD fOrthCoefficients;  The model coefficients. ;  ; TMatrixD fOrthCurvatureMatrix;  Model matrix. ;  ; TVectorD fOrthFunctionNorms;  Norm of the evaluated functions. ;  ; TMatrixD fOrthFunctions;  As above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fR",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:37687,Availability,error,error,37687,"bles ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of independent variables. ;  ; TVectorD fOrthCoefficients;  The model coefficients. ;  ; TMatrixD fOrthCurvatureMatrix;  Model matrix. ;  ; TVectorD fOrthFunctionNorms;  Norm of the evaluated functions. ;  ; TMatrixD fOrthFunctions;  As above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize;  Size of test sample. ;  ; TVectorD fTestSqError;  Test sample, Error in quantity. ;  ; TVectorD fTestVariables;  Test sample, independent variables. ;  ; TVectorD fVariables;  Training sample, independent variables. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Private Attributes; static TMultiDimFit * fgInstance = nullptr;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); }; ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:39995,Availability,error,error,39995,"Fit.h. Constructor & Destructor Documentation. ◆ TMultiDimFit() [1/2]. TMultiDimFit::TMultiDimFit ; (; ). Empty CTOR. Do not use. ; Definition at line 433 of file TMultiDimFit.cxx. ◆ TMultiDimFit() [2/2]. TMultiDimFit::TMultiDimFit ; (; Int_t ; dimension, . EMDFPolyType ; type = kMonomials, . Option_t * ; option = """" . ). Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ; Options: K Compute (k)correlation matrix V Be verbose; Default is no options. ; Definition at line 508 of file TMultiDimFit.cxx. ◆ ~TMultiDimFit(). TMultiDimFit::~TMultiDimFit ; (; ). override . Destructor. ; Definition at line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value o",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40275,Availability,error,error,40275,"r Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ; Options: K Compute (k)correlation matrix V Be verbose; Default is no options. ; Definition at line 508 of file TMultiDimFit.cxx. ◆ ~TMultiDimFit(). TMultiDimFit::~TMultiDimFit ; (; ). override . Destructor. ; Definition at line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40335,Availability,error,error,40335,"r Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ; Options: K Compute (k)correlation matrix V Be verbose; Default is no options. ; Definition at line 508 of file TMultiDimFit.cxx. ◆ ~TMultiDimFit(). TMultiDimFit::~TMultiDimFit ; (; ). override . Destructor. ; Definition at line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40706,Availability,error,error,40706,"line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass * TMultiDimFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiDimFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiDimFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TMultiDimFit.h. ◆ Clear(). vo",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40895,Availability,error,error,40895," the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass * TMultiDimFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiDimFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiDimFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TMultiDimFit.h. ◆ Clear(). void TMultiDimFit::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear internal structures and variables. ; Reimplemented from TObject.; Definition at line 789 of file TMultiDimFit.cxx. ◆ DeclFileName(). static const char * TMultiDi",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40955,Availability,error,error,40955," the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass * TMultiDimFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiDimFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiDimFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TMultiDimFit.h. ◆ Clear(). void TMultiDimFit::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear internal structures and variables. ; Reimplemented from TObject.; Definition at line 789 of file TMultiDimFit.cxx. ◆ DeclFileName(). static const char * TMultiDi",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:43005,Availability,error,error,43005,"le containing the class declaration ; Definition at line 207 of file TMultiDimFit.h. ◆ Draw(). void TMultiDimFit::Draw ; (; Option_t * ; option = ""d""). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Definition at line 134 of file TMultiDimFit.h. ◆ Eval(). Double_t TMultiDimFit::Eval ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 876 of file TMultiDimFit.cxx. ◆ EvalControl(). Double_t TMultiDimFit::EvalControl ; (; const Int_t * ; powers); const. protectedvirtual . PRIVATE METHOD: Calculate the control parameter from the passed powers. ; Definition at line 937 of file TMultiDimFit.cxx. ◆ EvalError(). Double_t TMultiDimFit::EvalError ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization error at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 904 of file TMultiDimFit.cxx. ◆ EvalFactor(). Double_t TMultiDimFit::EvalFactor ; (; Int_t ; p, . Double_t ; x . ); const. protectedvirtual . PRIVATE METHOD: Evaluate function with power p at variable value x. ; Definition at line 952 of file TMultiDimFit.cxx. ◆ FindParameterization(). void TMultiDimFit::FindParameterization ; (; Option_t * ; option = """"). virtual . Find the parameterization. ; Options: None so far; For detailed description of what this entails, please refer to the class description ; Definition at line 994 of file TMultiDimFit.cxx. ◆ Fit(). void TMultiDimFit::Fit ; (; Option_t * ; option = """"). virtual . Try to fit the found parameterisation to the test sample. ; Options M use Minuit to improve coefficients; Also, refer to class description ; Definition at line 1013 of file TMultiDimFit.cxx. ◆ GetChi2(). Double_t TMu",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:52062,Availability,error,errors,52062,"isation. If coeff == 0, then the found coefficients is used. Used my MINUIT for fit (see TMultDimFit::Fit) ; Definition at line 1240 of file TMultiDimFit.cxx. ◆ MakeCode(). void TMultiDimFit::MakeCode ; (; const char * ; filename = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <filename> with .C appended if argument doesn't end in .cxx or .C. ; The contains the implementation of the function:; Double_t <funcname>(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the static variables: Int_t gNVariables; Int_t gNCoefficients; Double_t gDMean; Double_t gXMean[]; Double_t gXMin[]; Double_t gXMax[]; Double_t gCoefficient[]; Int_t gPower[]; are initialized. The only ROOT header file needed is Rtypes.h; See TMultiDimFit::MakeRealCode for a list of options ; Definition at line 1290 of file TMultiDimFit.cxx. ◆ MakeCoefficientErrors(). void TMultiDimFit::MakeCoefficientErrors ; (; ). protectedvirtual . PRIVATE METHOD: Compute the errors on the coefficients. ; For this to be done, the curvature matrix of the non-orthogonal functions, is computed. ; Definition at line 1307 of file TMultiDimFit.cxx. ◆ MakeCoefficients(). void TMultiDimFit::MakeCoefficients ; (; ). protectedvirtual . PRIVATE METHOD: Invert the model matrix B, and compute final coefficients. ; For a more thorough discussion of what this means, please refer to the class description; First we invert the lower triangle matrix fOrthCurvatureMatrix and store the inverted matrix in the upper triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:59163,Availability,error,error,59163,"ption ; Definition at line 2377 of file TMultiDimFit.cxx. ◆ SetMaxFunctions(). void TMultiDimFit::SetMaxFunctions ; (; Int_t ; n). inline . Definition at line 198 of file TMultiDimFit.h. ◆ SetMaxPowers(). void TMultiDimFit::SetMaxPowers ; (; const Int_t * ; powers). Set the maximum power to be considered in the fit for each variable. ; See also class description ; Definition at line 2443 of file TMultiDimFit.cxx. ◆ SetMaxStudy(). void TMultiDimFit::SetMaxStudy ; (; Int_t ; n). inline . Definition at line 200 of file TMultiDimFit.h. ◆ SetMaxTerms(). void TMultiDimFit::SetMaxTerms ; (; Int_t ; terms). inline . Definition at line 201 of file TMultiDimFit.h. ◆ SetMinAngle(). void TMultiDimFit::SetMinAngle ; (; Double_t ; ang = 1). Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ; See also class description ; Definition at line 2393 of file TMultiDimFit.cxx. ◆ SetMinRelativeError(). void TMultiDimFit::SetMinRelativeError ; (; Double_t ; error). Set the acceptable relative error for when sum of square residuals is considered minimized. ; For a full account, refer to the class description ; Definition at line 2458 of file TMultiDimFit.cxx. ◆ SetPowerLimit(). void TMultiDimFit::SetPowerLimit ; (; Double_t ; limit = 1e-3). Set the user parameter for the function selection. ; The bigger the limit, the more functions are used. The meaning of this variable is defined in the class description ; Definition at line 2433 of file TMultiDimFit.cxx. ◆ SetPowers(). void TMultiDimFit::SetPowers ; (; const Int_t * ; powers, . Int_t ; terms . ). virtual . Define a user function. ; The input array must be of the form (p11, ..., p1N, ... ,pL1, ..., pLN) Where N is the dimension of the data sample, L is the number of terms (given in terms) and the first number, labels the term, the second the variable. More information is given in the class description ; Definition at line 2413 of file TMultiDimFit.cxx. ◆ Streamer(",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:59199,Availability,error,error,59199," void TMultiDimFit::SetMaxFunctions ; (; Int_t ; n). inline . Definition at line 198 of file TMultiDimFit.h. ◆ SetMaxPowers(). void TMultiDimFit::SetMaxPowers ; (; const Int_t * ; powers). Set the maximum power to be considered in the fit for each variable. ; See also class description ; Definition at line 2443 of file TMultiDimFit.cxx. ◆ SetMaxStudy(). void TMultiDimFit::SetMaxStudy ; (; Int_t ; n). inline . Definition at line 200 of file TMultiDimFit.h. ◆ SetMaxTerms(). void TMultiDimFit::SetMaxTerms ; (; Int_t ; terms). inline . Definition at line 201 of file TMultiDimFit.h. ◆ SetMinAngle(). void TMultiDimFit::SetMinAngle ; (; Double_t ; ang = 1). Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ; See also class description ; Definition at line 2393 of file TMultiDimFit.cxx. ◆ SetMinRelativeError(). void TMultiDimFit::SetMinRelativeError ; (; Double_t ; error). Set the acceptable relative error for when sum of square residuals is considered minimized. ; For a full account, refer to the class description ; Definition at line 2458 of file TMultiDimFit.cxx. ◆ SetPowerLimit(). void TMultiDimFit::SetPowerLimit ; (; Double_t ; limit = 1e-3). Set the user parameter for the function selection. ; The bigger the limit, the more functions are used. The meaning of this variable is defined in the class description ; Definition at line 2433 of file TMultiDimFit.cxx. ◆ SetPowers(). void TMultiDimFit::SetPowers ; (; const Int_t * ; powers, . Int_t ; terms . ). virtual . Define a user function. ; The input array must be of the form (p11, ..., p1N, ... ,pL1, ..., pLN) Where N is the dimension of the data sample, L is the number of terms (given in terms) and the first number, labels the term, the second the variable. More information is given in the class description ; Definition at line 2413 of file TMultiDimFit.cxx. ◆ Streamer(). void TMultiDimFit::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stre",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:65164,Availability,error,error,65164,n at line 61 of file TMultiDimFit.h. ◆ fMaxTerms. Int_t TMultiDimFit::fMaxTerms. protected . Max terms expected in final expr. ; Definition at line 52 of file TMultiDimFit.h. ◆ fMaxVariables. TVectorD TMultiDimFit::fMaxVariables. protected . max value of independent variables ; Definition at line 39 of file TMultiDimFit.h. ◆ fMeanQuantity. Double_t TMultiDimFit::fMeanQuantity. protected . Mean of dependent quantity. ; Definition at line 30 of file TMultiDimFit.h. ◆ fMeanVariables. TVectorD TMultiDimFit::fMeanVariables. protected . mean value of independent variables ; Definition at line 38 of file TMultiDimFit.h. ◆ fMinAngle. Double_t TMultiDimFit::fMinAngle. protected . Min angle for accepting new function. ; Definition at line 50 of file TMultiDimFit.h. ◆ fMinQuantity. Double_t TMultiDimFit::fMinQuantity. protected . Min value of dependent quantity. ; Definition at line 32 of file TMultiDimFit.h. ◆ fMinRelativeError. Double_t TMultiDimFit::fMinRelativeError. protected . Min relative error accepted. ; Definition at line 53 of file TMultiDimFit.h. ◆ fMinResidual. Double_t TMultiDimFit::fMinResidual. protected . Min residual value. ; Definition at line 74 of file TMultiDimFit.h. ◆ fMinResidualRow. Int_t TMultiDimFit::fMinResidualRow. protected . Row giving min residual. ; Definition at line 76 of file TMultiDimFit.h. ◆ fMinVariables. TVectorD TMultiDimFit::fMinVariables. protected . min value of independent variables ; Definition at line 40 of file TMultiDimFit.h. ◆ fNCoefficients. Int_t TMultiDimFit::fNCoefficients. protected . Dimension of model coefficients. ; Definition at line 79 of file TMultiDimFit.h. ◆ fNVariables. Int_t TMultiDimFit::fNVariables. protected . Number of independent variables. ; Definition at line 37 of file TMultiDimFit.h. ◆ fOrthCoefficients. TVectorD TMultiDimFit::fOrthCoefficients. protected . The model coefficients. ; Definition at line 80 of file TMultiDimFit.h. ◆ fOrthCurvatureMatrix. TMatrixD TMultiDimFit::fOrthCurvatureMatrix. protected,MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:68186,Availability,error,error,68186,"MaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ; Definition at line 69 of file TMultiDimFit.h. ◆ fPrecision. Double_t TMultiDimFit::fPrecision. protected . Relative precision of param. ; Definition at line 90 of file TMultiDimFit.h. ◆ fQuantity. TVectorD TMultiDimFit::fQuantity. protected . Training sample, dependent quantity. ; Definition at line 28 of file TMultiDimFit.h. ◆ fResiduals. TVectorD TMultiDimFit::fResiduals. protected . Vector of the final residuals. ; Definition at line 72 of file TMultiDimFit.h. ◆ fRMS. Double_t TMultiDimFit::fRMS. protected . Root mean square of fit. ; Definition at line 84 of file TMultiDimFit.h. ◆ fSampleSize. Int_t TMultiDimFit::fSampleSize. protected . Size of training sample. ; Definition at line 42 of file TMultiDimFit.h. ◆ fShowCorrelation. Bool_t TMultiDimFit::fShowCorrelation. protected . print correlation matrix ; Definition at line 104 of file TMultiDimFit.h. ◆ fSqError. TVectorD TMultiDimFit::fSqError. protected . Training sample, error in quantity. ; Definition at line 29 of file TMultiDimFit.h. ◆ fSumSqAvgQuantity. Double_t TMultiDimFit::fSumSqAvgQuantity. protected . Sum of squares away from mean. ; Definition at line 34 of file TMultiDimFit.h. ◆ fSumSqQuantity. Double_t TMultiDimFit::fSumSqQuantity. protected . SumSquare of dependent quantity. ; Definition at line 33 of file TMultiDimFit.h. ◆ fSumSqResidual. Double_t TMultiDimFit::fSumSqResidual. protected . Sum of Square residuals. ; Definition at line 77 of file TMultiDimFit.h. ◆ fTestCorrelationCoeff. Double_t TMultiDimFit::fTestCorrelationCoeff. protected . Multi Correlation coefficient. ; Definition at line 94 of file TMultiDimFit.h. ◆ fTestError. Double_t TMultiDimFit::fTestError. protected . Error from test. ; Definition at line 89 of file TMultiDimFit.h. ◆ fTestPrecision. Double_t TMultiDimFit::fTestPrecision. protected . Relative precision of test. ; Definition at line 91 of file TMultiDimFit.h. ◆ fTestQuantity. TVectorD TMultiDimFit::fTestQuantity.",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:614,Energy Efficiency,energy,energy,614,". ROOT: TMultiDimFit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Attributes |; List of all members ; TMultiDimFit Class ReferenceHistogram Library. ; Multidimensional Fits in ROOT. . Overview; A common problem encountered in different fields of applied science is to find an expression for one physical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of track",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:668,Energy Efficiency,charge,charged,668,". ROOT: TMultiDimFit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Attributes |; List of all members ; TMultiDimFit Class ReferenceHistogram Library. ; Multidimensional Fits in ROOT. . Overview; A common problem encountered in different fields of applied science is to find an expression for one physical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of track",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:3802,Energy Efficiency,power,powers,3802,"L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \]. such that. \[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \]. is minimal. Here \(p_{li}(x_i)\) are monomials, or Chebyshev or Legendre polynomials, labelled \(l = 1, \ldots, L\), in each variable \( x_i\), \( i=1, \ldots, N\).; So what TMultiDimFit does, is to determine the number of terms \( L\), and then \( L\) terms (or functions) \( F_l\), and the \( L\) coefficients \( c_l\), so that \( S\) is minimal (TMultiDimFit::FindParameterization).; Of course it's more than a little unlikely that \( S\) will ever become exact zero as a result of the procedure outlined below. Therefore, the user is asked to provide a minimum relative error \( \epsilon\) (TMultiDimFit::SetMinRelativeError), and \( S\) will be considered minimized when. \[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilon; \]. Optionally, the user may impose a functional expression by specifying the powers of each variable in \( L\) specified functions \( F_1, \ldots,F_L\) (TMultiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximu",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:4509,Energy Efficiency,power,power,4509,"exact zero as a result of the procedure outlined below. Therefore, the user is asked to provide a minimum relative error \( \epsilon\) (TMultiDimFit::SetMinRelativeError), and \( S\) will be considered minimized when. \[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilon; \]. Optionally, the user may impose a functional expression by specifying the powers of each variable in \( L\) specified functions \( F_1, \ldots,F_L\) (TMultiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the numb",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:4680,Energy Efficiency,power,power,4680,"lon; \]. Optionally, the user may impose a functional expression by specifying the powers of each variable in \( L\) specified functions \( F_1, \ldots,F_L\) (TMultiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is ch",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:4817,Energy Efficiency,power,power,4817,"ltiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is chosen by the user, and will be discussed below (see 2.3).; The functions \( F_l\) are generally not orthogonal, which means one will have to evaluate all possible ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:4853,Energy Efficiency,power,power,4853,"ltiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is chosen by the user, and will be discussed below (see 2.3).; The functions \( F_l\) are generally not orthogonal, which means one will have to evaluate all possible ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:5169,Energy Efficiency,power,power,5169,"not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is chosen by the user, and will be discussed below (see 2.3).; The functions \( F_l\) are generally not orthogonal, which means one will have to evaluate all possible \( F_l\)'s over all data-points before finding the most significant 1. We can, however, do better then that. By applying the modified Gram-Schmidt orthogonalisation algorithm [5] [3] to the functions \( F_l\), we can evaluate the contribution to the reduction of \( S\) from each function in turn, and we may delay the actual inversion of the curvat",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:5366,Energy Efficiency,power,power,5366,"tMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is chosen by the user, and will be discussed below (see 2.3).; The functions \( F_l\) are generally not orthogonal, which means one will have to evaluate all possible \( F_l\)'s over all data-points before finding the most significant 1. We can, however, do better then that. By applying the modified Gram-Schmidt orthogonalisation algorithm [5] [3] to the functions \( F_l\), we can evaluate the contribution to the reduction of \( S\) from each function in turn, and we may delay the actual inversion of the curvature-matrix (TMultiDimFit::MakeGramSchmidt).; So we are let to consider an \( M\times L\) matrix \(\mathsf{F}\), an element of which is given by ; \[; f_{jl} = ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:5567,Energy Efficiency,reduce,reduce,5567,"(TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is chosen by the user, and will be discussed below (see 2.3).; The functions \( F_l\) are generally not orthogonal, which means one will have to evaluate all possible \( F_l\)'s over all data-points before finding the most significant 1. We can, however, do better then that. By applying the modified Gram-Schmidt orthogonalisation algorithm [5] [3] to the functions \( F_l\), we can evaluate the contribution to the reduction of \( S\) from each function in turn, and we may delay the actual inversion of the curvature-matrix (TMultiDimFit::MakeGramSchmidt).; So we are let to consider an \( M\times L\) matrix \(\mathsf{F}\), an element of which is given by ; \[; f_{jl} = F_j\left(x_{1j} , x_{2j}, \ldots, x_{Nj}\right); = F_l(\mathbf{x}_j)\, \quad\mbox{with}~j=1,2,\ldots,M,; \]. where \( j\) labels the \( M\) rows in the training sample and \( l\) labels \( L\) functions of \( N\) var",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:5663,Energy Efficiency,reduce,reduce,5663,"(TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is chosen by the user, and will be discussed below (see 2.3).; The functions \( F_l\) are generally not orthogonal, which means one will have to evaluate all possible \( F_l\)'s over all data-points before finding the most significant 1. We can, however, do better then that. By applying the modified Gram-Schmidt orthogonalisation algorithm [5] [3] to the functions \( F_l\), we can evaluate the contribution to the reduction of \( S\) from each function in turn, and we may delay the actual inversion of the curvature-matrix (TMultiDimFit::MakeGramSchmidt).; So we are let to consider an \( M\times L\) matrix \(\mathsf{F}\), an element of which is given by ; \[; f_{jl} = F_j\left(x_{1j} , x_{2j}, \ldots, x_{Nj}\right); = F_l(\mathbf{x}_j)\, \quad\mbox{with}~j=1,2,\ldots,M,; \]. where \( j\) labels the \( M\) rows in the training sample and \( l\) labels \( L\) functions of \( N\) var",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:11727,Energy Efficiency,reduce,reduced,11727,"wever, the method automatically readjusts the value of this angle while fitting is in progress, in order to make the selection criteria less and less difficult to be fulfilled. The result is that the functions contributing most to the reduction of \( S\) are chosen first (TMultiDimFit::TestFunction).; In case \( \phi \) isn't defined, an alternative method of performing this second test is used: The \(L^{\mbox{th}}\) function \(\textbf{f}_L\) is accepted if (refer also to equation (13)) ; \[; \Delta S_L > \frac{S_{L-1}}{L_{max}-L}; \]. where \( S_{L-1}\) is the sum of the \( L-1\) first residuals from the \( L-1\) functions previously accepted; and \( L_{max}\) is the total number of functions allowed in the final expression of the fit (defined by user).; From this we see, that by restricting \( L_{max}\) – the number of terms in the final model – the fit is more difficult to perform, since the above selection criteria is more limiting.; The more coefficients we evaluate, the more the sum of squares of residuals \( S\) will be reduced. We can evaluate \( S\) before inverting \(\mathsf{B}\) as shown below. Coefficients and Coefficient Errors; Having found a parameterization, that is the \( F_l\)'s and \( L\), that minimizes \( S\), we still need to determine the coefficients \( c_l\). However, it's a feature of how we choose the significant functions, that the evaluation of the \( c_l\)'s becomes trivial 5. To derive \(\mathbf{c}\), we first note that equation (4) can be written as ; \[; \mathsf{F} = \mathsf{W}\mathsf{B}; \]. where ; \begin{eqnarray*}; b_{ij} = \frac{\mathbf{f}_j \bullet \mathbf{w}_i}{\mathbf{w}_i^2}; & \mbox{if} & i < j\\; 1 & \mbox{if} & i = j\\; 0 & \mbox{if} & i > j; \end{eqnarray*}. Consequently, \(\mathsf{B}\) is an upper triangle matrix, which can be readily inverted. So we now evaluate ; \[; \mathsf{F}\mathsf{B}^{-1} = \mathsf{W}; \]. The model \(\mathsf{W}\mathbf{a}\) can therefore be written as \((\mathsf{F}\mathsf{B}^{-1})\mathbf{a} = \math",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:16821,Energy Efficiency,reduce,reduced,16821,"ionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction and Error Analysis for the Physical Sciences. McGraw-Hill, 2 edition, 1992.; R. Brun et al. Long writeup DD/75-23, CERN, 1980.; Gene H. Golub and Charles F. van Loan. Matrix Computations. John Hopkins University Press, Baltimore, 3 edition, 1996.; F. James. Minuit. Long writeup D506, CERN, 1998.; H. Wind. Function parameterization. Proceedings of the 1972 CERN Computing and Data Processing School, volume 72-21 of Yellow report. CERN, 1972.; H. Wind. 1. principal component analysis, 2. pattern recognition for track finding, 3. interpolation and functional representation. Yellow report EP/81-12, CERN, 1981. . Definition at line 15 of file TMultiDimFit.h. Public Types; enum  EMDFPolyType { kMonomials; , kChebyshev; , kLegendre; };  ;  Public Type",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:16950,Energy Efficiency,reduce,reduced,16950,"ionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction and Error Analysis for the Physical Sciences. McGraw-Hill, 2 edition, 1992.; R. Brun et al. Long writeup DD/75-23, CERN, 1980.; Gene H. Golub and Charles F. van Loan. Matrix Computations. John Hopkins University Press, Baltimore, 3 edition, 1996.; F. James. Minuit. Long writeup D506, CERN, 1998.; H. Wind. Function parameterization. Proceedings of the 1972 CERN Computing and Data Processing School, volume 72-21 of Yellow report. CERN, 1972.; H. Wind. 1. principal component analysis, 2. pattern recognition for track finding, 3. interpolation and functional representation. Yellow report EP/81-12, CERN, 1981. . Definition at line 15 of file TMultiDimFit.h. Public Types; enum  EMDFPolyType { kMonomials; , kChebyshev; , kLegendre; };  ;  Public Type",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:23074,Energy Efficiency,power,powers,23074,"ainers or lists of other objects). ;  ; virtual Double_t MakeChi2 (const Double_t *coeff=nullptr);  Calculate Chi square over either the test sample. ;  ; virtual void MakeCode (const char *functionName=""MDF"", Option_t *option="""");  Generate the file <filename> with .C appended if argument doesn't end in .cxx or .C. ;  ; virtual void MakeHistograms (Option_t *option=""A"");  Make histograms of the result of the analysis. ;  ; virtual void MakeMethod (const Char_t *className=""MDF"", Option_t *option="""");  Generate the file <classname>MDF.cxx which contains the implementation of the method: ;  ; void Print (Option_t *option=""ps"") const override;  Print statistics etc. ;  ; void SetBinVarX (Int_t nbbinvarx);  ; void SetBinVarY (Int_t nbbinvary);  ; void SetMaxAngle (Double_t angle=0);  Set the max angle (in degrees) between the initial data vector to be fitted, and the new candidate function to be included in the fit. ;  ; void SetMaxFunctions (Int_t n);  ; void SetMaxPowers (const Int_t *powers);  Set the maximum power to be considered in the fit for each variable. ;  ; void SetMaxStudy (Int_t n);  ; void SetMaxTerms (Int_t terms);  ; void SetMinAngle (Double_t angle=1);  Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ;  ; void SetMinRelativeError (Double_t error);  Set the acceptable relative error for when sum of square residuals is considered minimized. ;  ; void SetPowerLimit (Double_t limit=1e-3);  Set the user parameter for the function selection. ;  ; virtual void SetPowers (const Int_t *powers, Int_t terms);  Define a user function. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:23100,Energy Efficiency,power,power,23100,"ainers or lists of other objects). ;  ; virtual Double_t MakeChi2 (const Double_t *coeff=nullptr);  Calculate Chi square over either the test sample. ;  ; virtual void MakeCode (const char *functionName=""MDF"", Option_t *option="""");  Generate the file <filename> with .C appended if argument doesn't end in .cxx or .C. ;  ; virtual void MakeHistograms (Option_t *option=""A"");  Make histograms of the result of the analysis. ;  ; virtual void MakeMethod (const Char_t *className=""MDF"", Option_t *option="""");  Generate the file <classname>MDF.cxx which contains the implementation of the method: ;  ; void Print (Option_t *option=""ps"") const override;  Print statistics etc. ;  ; void SetBinVarX (Int_t nbbinvarx);  ; void SetBinVarY (Int_t nbbinvary);  ; void SetMaxAngle (Double_t angle=0);  Set the max angle (in degrees) between the initial data vector to be fitted, and the new candidate function to be included in the fit. ;  ; void SetMaxFunctions (Int_t n);  ; void SetMaxPowers (const Int_t *powers);  Set the maximum power to be considered in the fit for each variable. ;  ; void SetMaxStudy (Int_t n);  ; void SetMaxTerms (Int_t terms);  ; void SetMinAngle (Double_t angle=1);  Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ;  ; void SetMinRelativeError (Double_t error);  Set the acceptable relative error for when sum of square residuals is considered minimized. ;  ; void SetPowerLimit (Double_t limit=1e-3);  Set the user parameter for the function selection. ;  ; virtual void SetPowers (const Int_t *powers, Int_t terms);  Define a user function. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:23671,Energy Efficiency,power,powers,23671,"; void Print (Option_t *option=""ps"") const override;  Print statistics etc. ;  ; void SetBinVarX (Int_t nbbinvarx);  ; void SetBinVarY (Int_t nbbinvary);  ; void SetMaxAngle (Double_t angle=0);  Set the max angle (in degrees) between the initial data vector to be fitted, and the new candidate function to be included in the fit. ;  ; void SetMaxFunctions (Int_t n);  ; void SetMaxPowers (const Int_t *powers);  Set the maximum power to be considered in the fit for each variable. ;  ; void SetMaxStudy (Int_t n);  ; void SetMaxTerms (Int_t terms);  ; void SetMinAngle (Double_t angle=1);  Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ;  ; void SetMinRelativeError (Double_t error);  Set the acceptable relative error for when sum of square residuals is considered minimized. ;  ; void SetPowerLimit (Double_t limit=1e-3);  Set the user parameter for the function selection. ;  ; virtual void SetPowers (const Int_t *powers, Int_t terms);  Define a user function. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () co",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:33101,Energy Efficiency,power,powers,33101,"tatic const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TMultiDimFit * Instance ();  Return the static instance. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual Double_t EvalControl (const Int_t *powers) const;  PRIVATE METHOD: Calculate the control parameter from the passed powers. ;  ; virtual Double_t EvalFactor (Int_t p, Double_t x) const;  PRIVATE METHOD: Evaluate function with power p at variable value x. ;  ; virtual void MakeCandidates ();  PRIVATE METHOD: Create list of candidate functions for the parameterisation. ;  ; virtual void MakeCoefficientErrors ();  PRIVATE METHOD: Compute the errors on the coefficients. ;  ; virtual void MakeCoefficients ();  PRIVATE METHOD: Invert the model matrix B, and compute final coefficients. ;  ; virtual void MakeCorrelation ();  PRIVATE METHOD: Compute the correlation matrix. ;  ; virtual Double_t MakeGramSchmidt (Int_t function);  PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ;  ; virtual void MakeNormalized ();  PRIVATE METHOD: Normalize data to the interval [-1;1]. ;  ; virtual void MakeParameterization ();  PRIVATE METHOD: Find the parameterization over the training sample. ;  ; virtual void MakeRealCode (const char *filename, co",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:33181,Energy Efficiency,power,powers,33181,"tatic const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TMultiDimFit * Instance ();  Return the static instance. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual Double_t EvalControl (const Int_t *powers) const;  PRIVATE METHOD: Calculate the control parameter from the passed powers. ;  ; virtual Double_t EvalFactor (Int_t p, Double_t x) const;  PRIVATE METHOD: Evaluate function with power p at variable value x. ;  ; virtual void MakeCandidates ();  PRIVATE METHOD: Create list of candidate functions for the parameterisation. ;  ; virtual void MakeCoefficientErrors ();  PRIVATE METHOD: Compute the errors on the coefficients. ;  ; virtual void MakeCoefficients ();  PRIVATE METHOD: Invert the model matrix B, and compute final coefficients. ;  ; virtual void MakeCorrelation ();  PRIVATE METHOD: Compute the correlation matrix. ;  ; virtual Double_t MakeGramSchmidt (Int_t function);  PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ;  ; virtual void MakeNormalized ();  PRIVATE METHOD: Normalize data to the interval [-1;1]. ;  ; virtual void MakeParameterization ();  PRIVATE METHOD: Find the parameterization over the training sample. ;  ; virtual void MakeRealCode (const char *filename, co",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:33291,Energy Efficiency,power,power,33291,"* Instance ();  Return the static instance. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual Double_t EvalControl (const Int_t *powers) const;  PRIVATE METHOD: Calculate the control parameter from the passed powers. ;  ; virtual Double_t EvalFactor (Int_t p, Double_t x) const;  PRIVATE METHOD: Evaluate function with power p at variable value x. ;  ; virtual void MakeCandidates ();  PRIVATE METHOD: Create list of candidate functions for the parameterisation. ;  ; virtual void MakeCoefficientErrors ();  PRIVATE METHOD: Compute the errors on the coefficients. ;  ; virtual void MakeCoefficients ();  PRIVATE METHOD: Invert the model matrix B, and compute final coefficients. ;  ; virtual void MakeCorrelation ();  PRIVATE METHOD: Compute the correlation matrix. ;  ; virtual Double_t MakeGramSchmidt (Int_t function);  PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ;  ; virtual void MakeNormalized ();  PRIVATE METHOD: Normalize data to the interval [-1;1]. ;  ; virtual void MakeParameterization ();  PRIVATE METHOD: Find the parameterization over the training sample. ;  ; virtual void MakeRealCode (const char *filename, const char *classname, Option_t *option="""");  PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameteri",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:35759,Energy Efficiency,power,powers,35759,BinVarX;  Number of bin in independent variables. ;  ; Int_t fBinVarY;  Number of bin in dependent variables. ;  ; Double_t fChi2;  Chi square of fit. ;  ; TVectorD fCoefficients;  Vector of the final coefficients. ;  ; TVectorD fCoefficientsRMS;  Vector of RMS of coefficients. ;  ; Double_t fCorrelationCoeff;  Multi Correlation coefficient. ;  ; TMatrixD fCorrelationMatrix;  Correlation matrix. ;  ; Double_t fError;  Error from parametrization. ;  ; TVirtualFitter * fFitter;  ; Int_t * fFunctionCodes;  [fMaxFunctions] acceptance code ;  ; TMatrixD fFunctions;  Functions evaluated over sample. ;  ; Byte_t fHistogramMask;  Bit pattern of histograms used. ;  ; TList * fHistograms;  List of histograms. ;  ; Bool_t fIsUserFunction;  Flag for user defined function. ;  ; Bool_t fIsVerbose;  ; Double_t fMaxAngle;  Max angle for accepting new function. ;  ; Int_t fMaxFuncNV;  fMaxFunctions*fNVariables ;  ; Int_t fMaxFunctions;  max number of functions ;  ; Int_t * fMaxPowers;  [fNVariables] maximum powers ;  ; Int_t * fMaxPowersFinal;  [fNVariables] maximum powers from fit; ;  ; Double_t fMaxQuantity;  Max value of dependent quantity. ;  ; Double_t fMaxResidual;  Max residual value. ;  ; Int_t fMaxResidualRow;  Row giving max residual. ;  ; Int_t fMaxStudy;  max functions to study ;  ; Int_t fMaxTerms;  Max terms expected in final expr. ;  ; TVectorD fMaxVariables;  max value of independent variables ;  ; Double_t fMeanQuantity;  Mean of dependent quantity. ;  ; TVectorD fMeanVariables;  mean value of independent variables ;  ; Double_t fMinAngle;  Min angle for accepting new function. ;  ; Double_t fMinQuantity;  Min value of dependent quantity. ;  ; Double_t fMinRelativeError;  Min relative error accepted. ;  ; Double_t fMinResidual;  Min residual value. ;  ; Int_t fMinResidualRow;  Row giving min residual. ;  ; TVectorD fMinVariables;  min value of independent variables ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of indepe,MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:35819,Energy Efficiency,power,powers,35819,BinVarX;  Number of bin in independent variables. ;  ; Int_t fBinVarY;  Number of bin in dependent variables. ;  ; Double_t fChi2;  Chi square of fit. ;  ; TVectorD fCoefficients;  Vector of the final coefficients. ;  ; TVectorD fCoefficientsRMS;  Vector of RMS of coefficients. ;  ; Double_t fCorrelationCoeff;  Multi Correlation coefficient. ;  ; TMatrixD fCorrelationMatrix;  Correlation matrix. ;  ; Double_t fError;  Error from parametrization. ;  ; TVirtualFitter * fFitter;  ; Int_t * fFunctionCodes;  [fMaxFunctions] acceptance code ;  ; TMatrixD fFunctions;  Functions evaluated over sample. ;  ; Byte_t fHistogramMask;  Bit pattern of histograms used. ;  ; TList * fHistograms;  List of histograms. ;  ; Bool_t fIsUserFunction;  Flag for user defined function. ;  ; Bool_t fIsVerbose;  ; Double_t fMaxAngle;  Max angle for accepting new function. ;  ; Int_t fMaxFuncNV;  fMaxFunctions*fNVariables ;  ; Int_t fMaxFunctions;  max number of functions ;  ; Int_t * fMaxPowers;  [fNVariables] maximum powers ;  ; Int_t * fMaxPowersFinal;  [fNVariables] maximum powers from fit; ;  ; Double_t fMaxQuantity;  Max value of dependent quantity. ;  ; Double_t fMaxResidual;  Max residual value. ;  ; Int_t fMaxResidualRow;  Row giving max residual. ;  ; Int_t fMaxStudy;  max functions to study ;  ; Int_t fMaxTerms;  Max terms expected in final expr. ;  ; TVectorD fMaxVariables;  max value of independent variables ;  ; Double_t fMeanQuantity;  Mean of dependent quantity. ;  ; TVectorD fMeanVariables;  mean value of independent variables ;  ; Double_t fMinAngle;  Min angle for accepting new function. ;  ; Double_t fMinQuantity;  Min value of dependent quantity. ;  ; Double_t fMinRelativeError;  Min relative error accepted. ;  ; Double_t fMinResidual;  Min residual value. ;  ; Int_t fMinResidualRow;  Row giving min residual. ;  ; TVectorD fMinVariables;  min value of independent variables ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of indepe,MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:37181,Energy Efficiency,power,powers,37181,"ndent variables ;  ; Double_t fMeanQuantity;  Mean of dependent quantity. ;  ; TVectorD fMeanVariables;  mean value of independent variables ;  ; Double_t fMinAngle;  Min angle for accepting new function. ;  ; Double_t fMinQuantity;  Min value of dependent quantity. ;  ; Double_t fMinRelativeError;  Min relative error accepted. ;  ; Double_t fMinResidual;  Min residual value. ;  ; Int_t fMinResidualRow;  Row giving min residual. ;  ; TVectorD fMinVariables;  min value of independent variables ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of independent variables. ;  ; TVectorD fOrthCoefficients;  The model coefficients. ;  ; TMatrixD fOrthCurvatureMatrix;  Model matrix. ;  ; TVectorD fOrthFunctionNorms;  Norm of the evaluated functions. ;  ; TMatrixD fOrthFunctions;  As above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize; ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:42687,Energy Efficiency,power,powers,42687,"e TMultiDimFit.h. ◆ Clear(). void TMultiDimFit::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear internal structures and variables. ; Reimplemented from TObject.; Definition at line 789 of file TMultiDimFit.cxx. ◆ DeclFileName(). static const char * TMultiDimFit::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 207 of file TMultiDimFit.h. ◆ Draw(). void TMultiDimFit::Draw ; (; Option_t * ; option = ""d""). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Definition at line 134 of file TMultiDimFit.h. ◆ Eval(). Double_t TMultiDimFit::Eval ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 876 of file TMultiDimFit.cxx. ◆ EvalControl(). Double_t TMultiDimFit::EvalControl ; (; const Int_t * ; powers); const. protectedvirtual . PRIVATE METHOD: Calculate the control parameter from the passed powers. ; Definition at line 937 of file TMultiDimFit.cxx. ◆ EvalError(). Double_t TMultiDimFit::EvalError ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization error at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 904 of file TMultiDimFit.cxx. ◆ EvalFactor(). Double_t TMultiDimFit::EvalFactor ; (; Int_t ; p, . Double_t ; x . ); const. protectedvirtual . PRIVATE METHOD: Evaluate function with power p at variable value x. ; Definition at line 952 of file TMultiDimFit.cxx. ◆ FindParameterization(). void TMultiDimFit::FindParameterization ; (; Option_t * ; option = """"). virtual . Find the parameterization. ; Options: None so far; For detailed description of what this entails, please refer to the class description ; Defin",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:42786,Energy Efficiency,power,powers,42786,"idevirtual . Clear internal structures and variables. ; Reimplemented from TObject.; Definition at line 789 of file TMultiDimFit.cxx. ◆ DeclFileName(). static const char * TMultiDimFit::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 207 of file TMultiDimFit.h. ◆ Draw(). void TMultiDimFit::Draw ; (; Option_t * ; option = ""d""). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Definition at line 134 of file TMultiDimFit.h. ◆ Eval(). Double_t TMultiDimFit::Eval ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 876 of file TMultiDimFit.cxx. ◆ EvalControl(). Double_t TMultiDimFit::EvalControl ; (; const Int_t * ; powers); const. protectedvirtual . PRIVATE METHOD: Calculate the control parameter from the passed powers. ; Definition at line 937 of file TMultiDimFit.cxx. ◆ EvalError(). Double_t TMultiDimFit::EvalError ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization error at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 904 of file TMultiDimFit.cxx. ◆ EvalFactor(). Double_t TMultiDimFit::EvalFactor ; (; Int_t ; p, . Double_t ; x . ); const. protectedvirtual . PRIVATE METHOD: Evaluate function with power p at variable value x. ; Definition at line 952 of file TMultiDimFit.cxx. ◆ FindParameterization(). void TMultiDimFit::FindParameterization ; (; Option_t * ; option = """"). virtual . Find the parameterization. ; Options: None so far; For detailed description of what this entails, please refer to the class description ; Definition at line 994 of file TMultiDimFit.cxx. ◆ Fit(). void TMultiDimFit::Fit ; (; Option_t *",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:43335,Energy Efficiency,power,power,43335,"; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 876 of file TMultiDimFit.cxx. ◆ EvalControl(). Double_t TMultiDimFit::EvalControl ; (; const Int_t * ; powers); const. protectedvirtual . PRIVATE METHOD: Calculate the control parameter from the passed powers. ; Definition at line 937 of file TMultiDimFit.cxx. ◆ EvalError(). Double_t TMultiDimFit::EvalError ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization error at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 904 of file TMultiDimFit.cxx. ◆ EvalFactor(). Double_t TMultiDimFit::EvalFactor ; (; Int_t ; p, . Double_t ; x . ); const. protectedvirtual . PRIVATE METHOD: Evaluate function with power p at variable value x. ; Definition at line 952 of file TMultiDimFit.cxx. ◆ FindParameterization(). void TMultiDimFit::FindParameterization ; (; Option_t * ; option = """"). virtual . Find the parameterization. ; Options: None so far; For detailed description of what this entails, please refer to the class description ; Definition at line 994 of file TMultiDimFit.cxx. ◆ Fit(). void TMultiDimFit::Fit ; (; Option_t * ; option = """"). virtual . Try to fit the found parameterisation to the test sample. ; Options M use Minuit to improve coefficients; Also, refer to class description ; Definition at line 1013 of file TMultiDimFit.cxx. ◆ GetChi2(). Double_t TMultiDimFit::GetChi2 ; (; ); const. inline . Definition at line 140 of file TMultiDimFit.h. ◆ GetCoefficients(). const TVectorD * TMultiDimFit::GetCoefficients ; (; ); const. inline . Definition at line 142 of file TMultiDimFit.h. ◆ GetCoefficientsRMS(). const TVectorD * TMultiDimFit::GetCoefficientsRMS ; (; ); const. inline . De",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:55315,Energy Efficiency,power,powers,55315,"le_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fgNVariables]; are initialized, and assumed to exist. The class declaration is assumed to be in <classname>.h and assumed to be provided by the user.; See alsoTMultiDimFit::MakeRealCode for a list of options; The minimal class definition is: class <classname> {; public:; Int_t <classname>::fgNVariables; // Number of variables; Int_t <classname>::fgNCoefficients; // Number of terms; Double_t <classname>::fgDMean; // Mean from training sample; Double_t <classname>::fgXMean[]; // Mean from training sample; Double_t <classname>::fgXMin[]; // Min from training sample; Double_t <classname>::fgXMax[]; // Max from training sample; Double_t <classname>::fgCoefficient[]; // Coefficients; Int_t <classname>::fgPower[]; // Function powers; ; Double_t Eval(Double_t *x);; };; TMultiDimFit::Evalvirtual Double_t Eval(const Double_t *x, const Double_t *coeff=nullptr) constEvaluate parameterization at point x.Definition TMultiDimFit.cxx:876; double; xDouble_t x[n]Definition legend1.C:17; Whether the method <classname>::Eval should be static or not, is up to the user. ; Definition at line 1744 of file TMultiDimFit.cxx. ◆ MakeNormalized(). void TMultiDimFit::MakeNormalized ; (; ). protectedvirtual . PRIVATE METHOD: Normalize data to the interval [-1;1]. ; This is needed for the classes method to work. ; Definition at line 1756 of file TMultiDimFit.cxx. ◆ MakeParameterization(). void TMultiDimFit::MakeParameterization ; (; ). protectedvirtual . PRIVATE METHOD: Find the parameterization over the training sample. ; A full acc",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:57311,Energy Efficiency,power,powers,57311,"(; const char * ; filename, . const char * ; classname, . Option_t * ; option = """" . ). protectedvirtual . PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameterization on some point. ; It's called by TMultiDimFit::MakeCode and TMultiDimFit::MakeMethod.; The options are: NONE so far ; Definition at line 1963 of file TMultiDimFit.cxx. ◆ Print(). void TMultiDimFit::Print ; (; Option_t * ; option = ""ps""); const. overridevirtual . Print statistics etc. ; Options are P Parameters S Statistics C Coefficients R Result of parameterisation F Result of fit K Correlation Matrix M Pretty print formula ; Reimplemented from TObject.; Definition at line 2158 of file TMultiDimFit.cxx. ◆ Select(). Bool_t TMultiDimFit::Select ; (; const Int_t * ; iv). protectedvirtual . Selection method. ; User can override this method for specialized selection of acceptable functions in fit. Default is to select all. This message is sent during the build-up of the function candidates table once for each set of powers in variables. Notice, that the argument array contains the powers PLUS ONE. For example, to De select the function f = x1^2 * x2^4 * x3^5, this method should return kFALSE if given the argument { 3, 4, 6 } ; Definition at line 2365 of file TMultiDimFit.cxx. ◆ SetBinVarX(). void TMultiDimFit::SetBinVarX ; (; Int_t ; nbbinvarx). inline . Definition at line 195 of file TMultiDimFit.h. ◆ SetBinVarY(). void TMultiDimFit::SetBinVarY ; (; Int_t ; nbbinvary). inline . Definition at line 196 of file TMultiDimFit.h. ◆ SetMaxAngle(). void TMultiDimFit::SetMaxAngle ; (; Double_t ; ang = 0). Set the max angle (in degrees) between the initial data vector to be fitted, and the new candidate function to be included in the fit. ; By default it is 0, which automatically chooses another selection criteria. See also class description ; Definition at line 2377 of file TMultiDimFit.cxx. ◆ SetMaxFunctions(). void TMultiDimFit::SetMaxFunctions ; (; Int_t ; n). inli",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:57377,Energy Efficiency,power,powers,57377,"rotectedvirtual . PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameterization on some point. ; It's called by TMultiDimFit::MakeCode and TMultiDimFit::MakeMethod.; The options are: NONE so far ; Definition at line 1963 of file TMultiDimFit.cxx. ◆ Print(). void TMultiDimFit::Print ; (; Option_t * ; option = ""ps""); const. overridevirtual . Print statistics etc. ; Options are P Parameters S Statistics C Coefficients R Result of parameterisation F Result of fit K Correlation Matrix M Pretty print formula ; Reimplemented from TObject.; Definition at line 2158 of file TMultiDimFit.cxx. ◆ Select(). Bool_t TMultiDimFit::Select ; (; const Int_t * ; iv). protectedvirtual . Selection method. ; User can override this method for specialized selection of acceptable functions in fit. Default is to select all. This message is sent during the build-up of the function candidates table once for each set of powers in variables. Notice, that the argument array contains the powers PLUS ONE. For example, to De select the function f = x1^2 * x2^4 * x3^5, this method should return kFALSE if given the argument { 3, 4, 6 } ; Definition at line 2365 of file TMultiDimFit.cxx. ◆ SetBinVarX(). void TMultiDimFit::SetBinVarX ; (; Int_t ; nbbinvarx). inline . Definition at line 195 of file TMultiDimFit.h. ◆ SetBinVarY(). void TMultiDimFit::SetBinVarY ; (; Int_t ; nbbinvary). inline . Definition at line 196 of file TMultiDimFit.h. ◆ SetMaxAngle(). void TMultiDimFit::SetMaxAngle ; (; Double_t ; ang = 0). Set the max angle (in degrees) between the initial data vector to be fitted, and the new candidate function to be included in the fit. ; By default it is 0, which automatically chooses another selection criteria. See also class description ; Definition at line 2377 of file TMultiDimFit.cxx. ◆ SetMaxFunctions(). void TMultiDimFit::SetMaxFunctions ; (; Int_t ; n). inline . Definition at line 198 of file TMultiDimFit.h. ◆ SetMaxPowers(). void TMultiDimFit::",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:58396,Energy Efficiency,power,powers,58396,"the powers PLUS ONE. For example, to De select the function f = x1^2 * x2^4 * x3^5, this method should return kFALSE if given the argument { 3, 4, 6 } ; Definition at line 2365 of file TMultiDimFit.cxx. ◆ SetBinVarX(). void TMultiDimFit::SetBinVarX ; (; Int_t ; nbbinvarx). inline . Definition at line 195 of file TMultiDimFit.h. ◆ SetBinVarY(). void TMultiDimFit::SetBinVarY ; (; Int_t ; nbbinvary). inline . Definition at line 196 of file TMultiDimFit.h. ◆ SetMaxAngle(). void TMultiDimFit::SetMaxAngle ; (; Double_t ; ang = 0). Set the max angle (in degrees) between the initial data vector to be fitted, and the new candidate function to be included in the fit. ; By default it is 0, which automatically chooses another selection criteria. See also class description ; Definition at line 2377 of file TMultiDimFit.cxx. ◆ SetMaxFunctions(). void TMultiDimFit::SetMaxFunctions ; (; Int_t ; n). inline . Definition at line 198 of file TMultiDimFit.h. ◆ SetMaxPowers(). void TMultiDimFit::SetMaxPowers ; (; const Int_t * ; powers). Set the maximum power to be considered in the fit for each variable. ; See also class description ; Definition at line 2443 of file TMultiDimFit.cxx. ◆ SetMaxStudy(). void TMultiDimFit::SetMaxStudy ; (; Int_t ; n). inline . Definition at line 200 of file TMultiDimFit.h. ◆ SetMaxTerms(). void TMultiDimFit::SetMaxTerms ; (; Int_t ; terms). inline . Definition at line 201 of file TMultiDimFit.h. ◆ SetMinAngle(). void TMultiDimFit::SetMinAngle ; (; Double_t ; ang = 1). Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ; See also class description ; Definition at line 2393 of file TMultiDimFit.cxx. ◆ SetMinRelativeError(). void TMultiDimFit::SetMinRelativeError ; (; Double_t ; error). Set the acceptable relative error for when sum of square residuals is considered minimized. ; For a full account, refer to the class description ; Definition at line 2458 of file TMultiDimFit.cxx. ◆ Set",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:58421,Energy Efficiency,power,power,58421,"1^2 * x2^4 * x3^5, this method should return kFALSE if given the argument { 3, 4, 6 } ; Definition at line 2365 of file TMultiDimFit.cxx. ◆ SetBinVarX(). void TMultiDimFit::SetBinVarX ; (; Int_t ; nbbinvarx). inline . Definition at line 195 of file TMultiDimFit.h. ◆ SetBinVarY(). void TMultiDimFit::SetBinVarY ; (; Int_t ; nbbinvary). inline . Definition at line 196 of file TMultiDimFit.h. ◆ SetMaxAngle(). void TMultiDimFit::SetMaxAngle ; (; Double_t ; ang = 0). Set the max angle (in degrees) between the initial data vector to be fitted, and the new candidate function to be included in the fit. ; By default it is 0, which automatically chooses another selection criteria. See also class description ; Definition at line 2377 of file TMultiDimFit.cxx. ◆ SetMaxFunctions(). void TMultiDimFit::SetMaxFunctions ; (; Int_t ; n). inline . Definition at line 198 of file TMultiDimFit.h. ◆ SetMaxPowers(). void TMultiDimFit::SetMaxPowers ; (; const Int_t * ; powers). Set the maximum power to be considered in the fit for each variable. ; See also class description ; Definition at line 2443 of file TMultiDimFit.cxx. ◆ SetMaxStudy(). void TMultiDimFit::SetMaxStudy ; (; Int_t ; n). inline . Definition at line 200 of file TMultiDimFit.h. ◆ SetMaxTerms(). void TMultiDimFit::SetMaxTerms ; (; Int_t ; terms). inline . Definition at line 201 of file TMultiDimFit.h. ◆ SetMinAngle(). void TMultiDimFit::SetMinAngle ; (; Double_t ; ang = 1). Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ; See also class description ; Definition at line 2393 of file TMultiDimFit.cxx. ◆ SetMinRelativeError(). void TMultiDimFit::SetMinRelativeError ; (; Double_t ; error). Set the acceptable relative error for when sum of square residuals is considered minimized. ; For a full account, refer to the class description ; Definition at line 2458 of file TMultiDimFit.cxx. ◆ SetPowerLimit(). void TMultiDimFit::SetPowerLimit ; (; Double_t ; lim",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:59737,Energy Efficiency,power,powers,59737,"axTerms ; (; Int_t ; terms). inline . Definition at line 201 of file TMultiDimFit.h. ◆ SetMinAngle(). void TMultiDimFit::SetMinAngle ; (; Double_t ; ang = 1). Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ; See also class description ; Definition at line 2393 of file TMultiDimFit.cxx. ◆ SetMinRelativeError(). void TMultiDimFit::SetMinRelativeError ; (; Double_t ; error). Set the acceptable relative error for when sum of square residuals is considered minimized. ; For a full account, refer to the class description ; Definition at line 2458 of file TMultiDimFit.cxx. ◆ SetPowerLimit(). void TMultiDimFit::SetPowerLimit ; (; Double_t ; limit = 1e-3). Set the user parameter for the function selection. ; The bigger the limit, the more functions are used. The meaning of this variable is defined in the class description ; Definition at line 2433 of file TMultiDimFit.cxx. ◆ SetPowers(). void TMultiDimFit::SetPowers ; (; const Int_t * ; powers, . Int_t ; terms . ). virtual . Define a user function. ; The input array must be of the form (p11, ..., p1N, ... ,pL1, ..., pLN) Where N is the dimension of the data sample, L is the number of terms (given in terms) and the first number, labels the term, the second the variable. More information is given in the class description ; Definition at line 2413 of file TMultiDimFit.cxx. ◆ Streamer(). void TMultiDimFit::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiDimFit::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 207 of file TMultiDimFit.h. ◆ TestFunction(). Bool_t TMultiDimFit::TestFunction ; (; Double_t ; squareResidual, . Double_t ; dResidur . ). protectedvirtual . PRIVATE METHOD: Test whether the currently considered function contributes to the fit. ; See also class description ; Definition at line 2470 of fil",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:63443,Energy Efficiency,power,powers,63443,HistogramMask. protected . Bit pattern of histograms used. ; Definition at line 97 of file TMultiDimFit.h. ◆ fHistograms. TList* TMultiDimFit::fHistograms. protected . List of histograms. ; Definition at line 96 of file TMultiDimFit.h. ◆ fIsUserFunction. Bool_t TMultiDimFit::fIsUserFunction. protected . Flag for user defined function. ; Definition at line 105 of file TMultiDimFit.h. ◆ fIsVerbose. Bool_t TMultiDimFit::fIsVerbose. protected . Definition at line 106 of file TMultiDimFit.h. ◆ fMaxAngle. Double_t TMultiDimFit::fMaxAngle. protected . Max angle for accepting new function. ; Definition at line 51 of file TMultiDimFit.h. ◆ fMaxFuncNV. Int_t TMultiDimFit::fMaxFuncNV. protected . fMaxFunctions*fNVariables ; Definition at line 62 of file TMultiDimFit.h. ◆ fMaxFunctions. Int_t TMultiDimFit::fMaxFunctions. protected . max number of functions ; Definition at line 59 of file TMultiDimFit.h. ◆ fMaxPowers. Int_t* TMultiDimFit::fMaxPowers. protected . [fNVariables] maximum powers ; Definition at line 54 of file TMultiDimFit.h. ◆ fMaxPowersFinal. Int_t* TMultiDimFit::fMaxPowersFinal. protected . [fNVariables] maximum powers from fit; ; Definition at line 68 of file TMultiDimFit.h. ◆ fMaxQuantity. Double_t TMultiDimFit::fMaxQuantity. protected . Max value of dependent quantity. ; Definition at line 31 of file TMultiDimFit.h. ◆ fMaxResidual. Double_t TMultiDimFit::fMaxResidual. protected . Max residual value. ; Definition at line 73 of file TMultiDimFit.h. ◆ fMaxResidualRow. Int_t TMultiDimFit::fMaxResidualRow. protected . Row giving max residual. ; Definition at line 75 of file TMultiDimFit.h. ◆ fMaxStudy. Int_t TMultiDimFit::fMaxStudy. protected . max functions to study ; Definition at line 61 of file TMultiDimFit.h. ◆ fMaxTerms. Int_t TMultiDimFit::fMaxTerms. protected . Max terms expected in final expr. ; Definition at line 52 of file TMultiDimFit.h. ◆ fMaxVariables. TVectorD TMultiDimFit::fMaxVariables. protected . max value of independent variables ; Definition at l,MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:63589,Energy Efficiency,power,powers,63589,ams. protected . List of histograms. ; Definition at line 96 of file TMultiDimFit.h. ◆ fIsUserFunction. Bool_t TMultiDimFit::fIsUserFunction. protected . Flag for user defined function. ; Definition at line 105 of file TMultiDimFit.h. ◆ fIsVerbose. Bool_t TMultiDimFit::fIsVerbose. protected . Definition at line 106 of file TMultiDimFit.h. ◆ fMaxAngle. Double_t TMultiDimFit::fMaxAngle. protected . Max angle for accepting new function. ; Definition at line 51 of file TMultiDimFit.h. ◆ fMaxFuncNV. Int_t TMultiDimFit::fMaxFuncNV. protected . fMaxFunctions*fNVariables ; Definition at line 62 of file TMultiDimFit.h. ◆ fMaxFunctions. Int_t TMultiDimFit::fMaxFunctions. protected . max number of functions ; Definition at line 59 of file TMultiDimFit.h. ◆ fMaxPowers. Int_t* TMultiDimFit::fMaxPowers. protected . [fNVariables] maximum powers ; Definition at line 54 of file TMultiDimFit.h. ◆ fMaxPowersFinal. Int_t* TMultiDimFit::fMaxPowersFinal. protected . [fNVariables] maximum powers from fit; ; Definition at line 68 of file TMultiDimFit.h. ◆ fMaxQuantity. Double_t TMultiDimFit::fMaxQuantity. protected . Max value of dependent quantity. ; Definition at line 31 of file TMultiDimFit.h. ◆ fMaxResidual. Double_t TMultiDimFit::fMaxResidual. protected . Max residual value. ; Definition at line 73 of file TMultiDimFit.h. ◆ fMaxResidualRow. Int_t TMultiDimFit::fMaxResidualRow. protected . Row giving max residual. ; Definition at line 75 of file TMultiDimFit.h. ◆ fMaxStudy. Int_t TMultiDimFit::fMaxStudy. protected . max functions to study ; Definition at line 61 of file TMultiDimFit.h. ◆ fMaxTerms. Int_t TMultiDimFit::fMaxTerms. protected . Max terms expected in final expr. ; Definition at line 52 of file TMultiDimFit.h. ◆ fMaxVariables. TVectorD TMultiDimFit::fMaxVariables. protected . max value of independent variables ; Definition at line 39 of file TMultiDimFit.h. ◆ fMeanQuantity. Double_t TMultiDimFit::fMeanQuantity. protected . Mean of dependent quantity. ; Definition at line 30 o,MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:66946,Energy Efficiency,power,powers,66946,"nts. TVectorD TMultiDimFit::fOrthCoefficients. protected . The model coefficients. ; Definition at line 80 of file TMultiDimFit.h. ◆ fOrthCurvatureMatrix. TMatrixD TMultiDimFit::fOrthCurvatureMatrix. protected . Model matrix. ; Definition at line 81 of file TMultiDimFit.h. ◆ fOrthFunctionNorms. TVectorD TMultiDimFit::fOrthFunctionNorms. protected . Norm of the evaluated functions. ; Definition at line 65 of file TMultiDimFit.h. ◆ fOrthFunctions. TMatrixD TMultiDimFit::fOrthFunctions. protected . As above, but orthogonalised. ; Definition at line 64 of file TMultiDimFit.h. ◆ fParameterisationCode. Int_t TMultiDimFit::fParameterisationCode. protected . Exit code of parameterisation. ; Definition at line 86 of file TMultiDimFit.h. ◆ fPolyType. EMDFPolyType TMultiDimFit::fPolyType. protected . Fit object (MINUIT) ; Type of polynomials to use ; Definition at line 103 of file TMultiDimFit.h. ◆ fPowerIndex. Int_t* TMultiDimFit::fPowerIndex. protected . [fMaxTerms] Index of accepted powers ; Definition at line 70 of file TMultiDimFit.h. ◆ fPowerLimit. Double_t TMultiDimFit::fPowerLimit. protected . Control parameter. ; Definition at line 55 of file TMultiDimFit.h. ◆ fPowers. Int_t* TMultiDimFit::fPowers. protected . [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ; Definition at line 69 of file TMultiDimFit.h. ◆ fPrecision. Double_t TMultiDimFit::fPrecision. protected . Relative precision of param. ; Definition at line 90 of file TMultiDimFit.h. ◆ fQuantity. TVectorD TMultiDimFit::fQuantity. protected . Training sample, dependent quantity. ; Definition at line 28 of file TMultiDimFit.h. ◆ fResiduals. TVectorD TMultiDimFit::fResiduals. protected . Vector of the final residuals. ; Definition at line 72 of file TMultiDimFit.h. ◆ fRMS. Double_t TMultiDimFit::fRMS. protected . Root mean square of fit. ; Definition at line 84 of file TMultiDimFit.h. ◆ fSampleSize. Int_t TMultiDimFit::fSampleSize. protected . Size of training sample. ; Definition at line 42 of file TMulti",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:1010,Integrability,depend,dependent,1010," TMultiDimFit Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Attributes |; List of all members ; TMultiDimFit Class ReferenceHistogram Library. ; Multidimensional Fits in ROOT. . Overview; A common problem encountered in different fields of applied science is to find an expression for one physical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, m",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:1177,Integrability,depend,dependence,1177,"l members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Static Private Attributes |; List of all members ; TMultiDimFit Class ReferenceHistogram Library. ; Multidimensional Fits in ROOT. . Overview; A common problem encountered in different fields of applied science is to find an expression for one physical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:1384,Integrability,depend,dependent,1384,"embers ; TMultiDimFit Class ReferenceHistogram Library. ; Multidimensional Fits in ROOT. . Overview; A common problem encountered in different fields of applied science is to find an expression for one physical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoo",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:2265,Integrability,depend,dependent,2265," applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoothly on the observable quantities \( x_1, \ldots, x_N \) which we'll denote by \(\mathbf{x}\). Given a training sample of \( M\) tuples of the form, (TMultiDimFit::AddRow). \[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \]. where \(\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\) are \( N\) independent variables, \( D_j\) is the known, quantity dependent at \(\mathbf{x}_j\) and \( E_j\) is the square error in \( D_j\), the class will try to find the parameterization ; \[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \]. such that. \[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \]. is minimal. Here \(p_{li}(x_i)\) are monomials, or Chebyshev or Legendre polynomials, labelled \(l = 1, \ldots, L\), in each variable \( x_i\), \( i=1, \ldots, N\).; So what TMultiDimFit does, is to determine the number of terms \( L\), and then \( L\) terms (or functions) \( F_l\), and the \( L\) coefficients \( c_l\), s",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:2303,Integrability,depend,depends,2303," applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoothly on the observable quantities \( x_1, \ldots, x_N \) which we'll denote by \(\mathbf{x}\). Given a training sample of \( M\) tuples of the form, (TMultiDimFit::AddRow). \[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \]. where \(\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\) are \( N\) independent variables, \( D_j\) is the known, quantity dependent at \(\mathbf{x}_j\) and \( E_j\) is the square error in \( D_j\), the class will try to find the parameterization ; \[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \]. such that. \[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \]. is minimal. Here \(p_{li}(x_i)\) are monomials, or Chebyshev or Legendre polynomials, labelled \(l = 1, \ldots, L\), in each variable \( x_i\), \( i=1, \ldots, N\).; So what TMultiDimFit does, is to determine the number of terms \( L\), and then \( L\) terms (or functions) \( F_l\), and the \( L\) coefficients \( c_l\), s",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:2655,Integrability,depend,dependent,2655,"s are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoothly on the observable quantities \( x_1, \ldots, x_N \) which we'll denote by \(\mathbf{x}\). Given a training sample of \( M\) tuples of the form, (TMultiDimFit::AddRow). \[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \]. where \(\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\) are \( N\) independent variables, \( D_j\) is the known, quantity dependent at \(\mathbf{x}_j\) and \( E_j\) is the square error in \( D_j\), the class will try to find the parameterization ; \[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \]. such that. \[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \]. is minimal. Here \(p_{li}(x_i)\) are monomials, or Chebyshev or Legendre polynomials, labelled \(l = 1, \ldots, L\), in each variable \( x_i\), \( i=1, \ldots, N\).; So what TMultiDimFit does, is to determine the number of terms \( L\), and then \( L\) terms (or functions) \( F_l\), and the \( L\) coefficients \( c_l\), so that \( S\) is minimal (TMultiDimFit::FindParameterization).; Of course it's more than a little unlikely that \( S\) will ever become exact zero as a result of the procedure outlined below. Therefore, the user is asked to provide a minimum relative error \( \epsilon\) (TMultiDimFit::SetMinRelativeError), and \( S\) will be considered minimized when. \[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilo",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:4741,Integrability,depend,dependent,4741,"lon; \]. Optionally, the user may impose a functional expression by specifying the powers of each variable in \( L\) specified functions \( F_1, \ldots,F_L\) (TMultiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is ch",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:7596,Integrability,depend,dependent,7596," L\) functions of \( N\) variables, and \( L \leq M\). That is, \( f_{jl}\) is the term (or function) numbered \( l\) evaluated at the data point \( j\). We have to normalise \(\mathbf{x}_j\) to \( [-1,1]\) for this to succeed [5] (TMultiDimFit::MakeNormalized). We then define a matrix \(\mathsf{W}\) of which the columns \(\mathbf{w}_j\) are given by ; \begin{eqnarray*}; \mathbf{w}_1 &=& \mathbf{f}_1 = F_1\left(\mathbf x_1\right)\\; \mathbf{w}_l &=& \mathbf{f}_l - \sum^{l-1}_{k=1} \frac{\mathbf{f}_l \bullet; \mathbf{w}_k}{\mathbf{w}_k^2}\mathbf{w}_k\,.; \end{eqnarray*}. and \(\mathbf{w}_{l}\) is the component of \(\mathbf{f}_{l} \) orthogonal to \(\mathbf{w}_{1}, \ldots, \mathbf{w}_{l-1}\). Hence we obtain [3], ; \[; \mathbf{w}_k\bullet\mathbf{w}_l = 0\quad\mbox{if}~k \neq l\quad.; \]. We now take as a new model \(\mathsf{W}\mathbf{a}\). We thus want to minimize ; \[; S\equiv \left(\mathbf{D} - \mathsf{W}\mathbf{a}\right)^2\quad,; \]. where \(\mathbf{D} = \left(D_1,\ldots,D_M\right)\) is a vector of the dependent quantity in the sample. Differentiation with respect to \( a_j\) gives, using 6, ; \[; \mathbf{D}\bullet\mathbf{w}_l - a_l\mathbf{w}_l^2 = 0; \]. or ; \[; a_l = \frac{\mathbf{D}_l\bullet\mathbf{w}_l}{\mathbf{w}_l^2}; \]. Let \( S_j\) be the sum of squares of residuals when taking \( j\) functions into account. Then ; \[; S_l = \left[\mathbf{D} - \sum^l_{k=1} a_k\mathbf{w}_k\right]^2; = \mathbf{D}^2 - 2\mathbf{D} \sum^l_{k=1} a_k\mathbf{w}_k; + \sum^l_{k=1} a_k^2\mathbf{w}_k^2; \]. Using 9, we see that ; \begin{eqnarray*}; S_l &=& \mathbf{D}^2 - 2 \sum^l_{k=1} a_k^2\mathbf{w}_k^2 +; \sum^j_{k=1} a_k^2\mathbf{w}_k^2\nonumber\\; &=& \mathbf{D}^2 - \sum^l_{k=1} a_k^2\mathbf{w}_k^2\nonumber\\; &=& \mathbf{D}^2 - \sum^l_{k=1} \frac{\left(\mathbf D\bullet \mathbf; w_k\right)}{\mathbf w_k^2}; \end{eqnarray*}. So for each new function \( F_l\) included in the model, we get a reduction of the sum of squares of residuals of \(a_l^2\mathbf{w}_l^2\), where \(\mathbf{w}_",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:14061,Integrability,depend,dependence,14061,"thsf{B}^{-1}\right)^T\) can be stored in the same matrix as \(\mathsf{B}\) (TMultiDimFit::MakeCoefficients). The errors in the coefficients is calculated by inverting the curvature matrix of the non-orthogonal functions \( f_{lj}\) [1] (TMultiDimFit::MakeCoefficientErrors). Considerations; It's important to realize that the training sample should be representative of the problem at hand, in particular along the borders of the region of interest. This is because the algorithm presented here, is a interpolation, rather then a extrapolation 5.; Also, the independent variables \( x_{i}\) need to be linear independent, since the procedure will perform poorly if they are not 5. One can find an linear transformation from ones original variables \( \xi_{i}\) to a set of linear independent variables \( x_{i}\), using a Principal Components Analysis (see TPrincipal), and then use the transformed variable as input to this class [5] 6.; H. Wind also outlines a method for parameterising a multidimensional dependence over a multidimensional set of variables. An example of the method from 5, is a follows (please refer to 5 for a full discussion):. Define \(\mathbf{P} = (P_1, \ldots, P_5)\) are the 5 dependent quantities that define a track.; Compute, for \( M\) different values of \(\mathbf{P}\), the tracks through the magnetic field, and determine the corresponding \(\mathbf{x} = (x_1, \ldots, x_N)\).; Use the simulated observations to determine, with a simple approximation, the values of \(\mathbf{P}_j\). We call these values \(\mathbf{P}^\prime_j, j = 1, \ldots, M\).; Determine from \(\mathbf{x}\) a set of at least five relevant coordinates \(\mathbf{x}^\prime\), using contrains, or alternative:; Perform a Principal Component Analysis (using TPrincipal), and use to get a linear transformation \(\mathbf{x} \rightarrow \mathbf{x}^\prime\), so that \(\mathbf{x}^\prime\) are constrained and linear independent.; Perform a Principal Component Analysis on \(Q_i = P_i / P^\prime_i\, i =",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:14257,Integrability,depend,dependent,14257,"n-orthogonal functions \( f_{lj}\) [1] (TMultiDimFit::MakeCoefficientErrors). Considerations; It's important to realize that the training sample should be representative of the problem at hand, in particular along the borders of the region of interest. This is because the algorithm presented here, is a interpolation, rather then a extrapolation 5.; Also, the independent variables \( x_{i}\) need to be linear independent, since the procedure will perform poorly if they are not 5. One can find an linear transformation from ones original variables \( \xi_{i}\) to a set of linear independent variables \( x_{i}\), using a Principal Components Analysis (see TPrincipal), and then use the transformed variable as input to this class [5] 6.; H. Wind also outlines a method for parameterising a multidimensional dependence over a multidimensional set of variables. An example of the method from 5, is a follows (please refer to 5 for a full discussion):. Define \(\mathbf{P} = (P_1, \ldots, P_5)\) are the 5 dependent quantities that define a track.; Compute, for \( M\) different values of \(\mathbf{P}\), the tracks through the magnetic field, and determine the corresponding \(\mathbf{x} = (x_1, \ldots, x_N)\).; Use the simulated observations to determine, with a simple approximation, the values of \(\mathbf{P}_j\). We call these values \(\mathbf{P}^\prime_j, j = 1, \ldots, M\).; Determine from \(\mathbf{x}\) a set of at least five relevant coordinates \(\mathbf{x}^\prime\), using contrains, or alternative:; Perform a Principal Component Analysis (using TPrincipal), and use to get a linear transformation \(\mathbf{x} \rightarrow \mathbf{x}^\prime\), so that \(\mathbf{x}^\prime\) are constrained and linear independent.; Perform a Principal Component Analysis on \(Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\), to get linear indenpendent (among themselves, but not independent of \(\mathbf{x}\)) quantities \(\mathbf{Q}^\prime\); For each component \(Q^\prime_i\) make a multidimensional fit",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:16174,Integrability,depend,dependent,16174,"ot independent of \(\mathbf{x}\)) quantities \(\mathbf{Q}^\prime\); For each component \(Q^\prime_i\) make a multidimensional fit, using \(\mathbf{x}^\prime\) as the variables, thus determining a set of coefficients \(\mathbf{c}_i\). To process data, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the Principal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19015,Integrability,depend,dependent,19015,"000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiDimFit ();  Empty CTOR. Do not use. ;  ;  TMultiDimFit (Int_t dimension, EMDFPolyType type=kMonomials, Option_t *option="""");  Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Opti",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19075,Integrability,depend,dependent,19075,"000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiDimFit ();  Empty CTOR. Do not use. ;  ;  TMultiDimFit (Int_t dimension, EMDFPolyType type=kMonomials, Option_t *option="""");  Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Opti",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19302,Integrability,depend,dependent,19302," = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiDimFit ();  Empty CTOR. Do not use. ;  ;  TMultiDimFit (Int_t dimension, EMDFPolyType type=kMonomials, Option_t *option="""");  Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMa",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19362,Integrability,depend,dependent,19362," = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiDimFit ();  Empty CTOR. Do not use. ;  ;  TMultiDimFit (Int_t dimension, EMDFPolyType type=kMonomials, Option_t *option="""");  Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMa",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:26907,Integrability,message,message,26907,"hat you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:27448,Integrability,message,message,27448,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:28438,Integrability,message,message,28438,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be o",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:31391,Integrability,message,message,31391,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TMultiDimFit * Instance ();  Return the static instance. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ()",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:31764,Integrability,message,message,31764," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TMultiDimFit * Instance ();  Return the static instance. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly (); ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:34842,Integrability,depend,dependent,34842,"hogonalisation. ;  ; virtual void MakeNormalized ();  PRIVATE METHOD: Normalize data to the interval [-1;1]. ;  ; virtual void MakeParameterization ();  PRIVATE METHOD: Find the parameterization over the training sample. ;  ; virtual void MakeRealCode (const char *filename, const char *classname, Option_t *option="""");  PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameterization on some point. ;  ; virtual Bool_t Select (const Int_t *iv);  Selection method. ;  ; virtual Bool_t TestFunction (Double_t squareResidual, Double_t dResidur);  PRIVATE METHOD: Test whether the currently considered function contributes to the fit. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fBinVarX;  Number of bin in independent variables. ;  ; Int_t fBinVarY;  Number of bin in dependent variables. ;  ; Double_t fChi2;  Chi square of fit. ;  ; TVectorD fCoefficients;  Vector of the final coefficients. ;  ; TVectorD fCoefficientsRMS;  Vector of RMS of coefficients. ;  ; Double_t fCorrelationCoeff;  Multi Correlation coefficient. ;  ; TMatrixD fCorrelationMatrix;  Correlation matrix. ;  ; Double_t fError;  Error from parametrization. ;  ; TVirtualFitter * fFitter;  ; Int_t * fFunctionCodes;  [fMaxFunctions] acceptance code ;  ; TMatrixD fFunctions;  Functions evaluated over sample. ;  ; Byte_t fHistogramMask;  Bit pattern of histograms used. ;  ; TList * fHistograms;  List of histograms. ;  ; Bool_t fIsUserFunction;  Flag for user defined function. ;  ; Bool_t fIsVerbose;  ; Double_t fMaxAngle;  Max angle for accepting new function. ;  ; Int_t fMaxFuncNV;  fMaxFunctions*fNVariables ;  ; Int_t fMaxFunctions;  max number of functions ;  ; Int_t * fMaxPowers;  [fNVariables] maximum powers ;  ; Int_t * fMaxPowersFinal;  [fNVariables] maximum powers from f",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:35878,Integrability,depend,dependent,35878,BinVarX;  Number of bin in independent variables. ;  ; Int_t fBinVarY;  Number of bin in dependent variables. ;  ; Double_t fChi2;  Chi square of fit. ;  ; TVectorD fCoefficients;  Vector of the final coefficients. ;  ; TVectorD fCoefficientsRMS;  Vector of RMS of coefficients. ;  ; Double_t fCorrelationCoeff;  Multi Correlation coefficient. ;  ; TMatrixD fCorrelationMatrix;  Correlation matrix. ;  ; Double_t fError;  Error from parametrization. ;  ; TVirtualFitter * fFitter;  ; Int_t * fFunctionCodes;  [fMaxFunctions] acceptance code ;  ; TMatrixD fFunctions;  Functions evaluated over sample. ;  ; Byte_t fHistogramMask;  Bit pattern of histograms used. ;  ; TList * fHistograms;  List of histograms. ;  ; Bool_t fIsUserFunction;  Flag for user defined function. ;  ; Bool_t fIsVerbose;  ; Double_t fMaxAngle;  Max angle for accepting new function. ;  ; Int_t fMaxFuncNV;  fMaxFunctions*fNVariables ;  ; Int_t fMaxFunctions;  max number of functions ;  ; Int_t * fMaxPowers;  [fNVariables] maximum powers ;  ; Int_t * fMaxPowersFinal;  [fNVariables] maximum powers from fit; ;  ; Double_t fMaxQuantity;  Max value of dependent quantity. ;  ; Double_t fMaxResidual;  Max residual value. ;  ; Int_t fMaxResidualRow;  Row giving max residual. ;  ; Int_t fMaxStudy;  max functions to study ;  ; Int_t fMaxTerms;  Max terms expected in final expr. ;  ; TVectorD fMaxVariables;  max value of independent variables ;  ; Double_t fMeanQuantity;  Mean of dependent quantity. ;  ; TVectorD fMeanVariables;  mean value of independent variables ;  ; Double_t fMinAngle;  Min angle for accepting new function. ;  ; Double_t fMinQuantity;  Min value of dependent quantity. ;  ; Double_t fMinRelativeError;  Min relative error accepted. ;  ; Double_t fMinResidual;  Min residual value. ;  ; Int_t fMinResidualRow;  Row giving min residual. ;  ; TVectorD fMinVariables;  min value of independent variables ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of indepe,MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:36207,Integrability,depend,dependent,36207,"t fError;  Error from parametrization. ;  ; TVirtualFitter * fFitter;  ; Int_t * fFunctionCodes;  [fMaxFunctions] acceptance code ;  ; TMatrixD fFunctions;  Functions evaluated over sample. ;  ; Byte_t fHistogramMask;  Bit pattern of histograms used. ;  ; TList * fHistograms;  List of histograms. ;  ; Bool_t fIsUserFunction;  Flag for user defined function. ;  ; Bool_t fIsVerbose;  ; Double_t fMaxAngle;  Max angle for accepting new function. ;  ; Int_t fMaxFuncNV;  fMaxFunctions*fNVariables ;  ; Int_t fMaxFunctions;  max number of functions ;  ; Int_t * fMaxPowers;  [fNVariables] maximum powers ;  ; Int_t * fMaxPowersFinal;  [fNVariables] maximum powers from fit; ;  ; Double_t fMaxQuantity;  Max value of dependent quantity. ;  ; Double_t fMaxResidual;  Max residual value. ;  ; Int_t fMaxResidualRow;  Row giving max residual. ;  ; Int_t fMaxStudy;  max functions to study ;  ; Int_t fMaxTerms;  Max terms expected in final expr. ;  ; TVectorD fMaxVariables;  max value of independent variables ;  ; Double_t fMeanQuantity;  Mean of dependent quantity. ;  ; TVectorD fMeanVariables;  mean value of independent variables ;  ; Double_t fMinAngle;  Min angle for accepting new function. ;  ; Double_t fMinQuantity;  Min value of dependent quantity. ;  ; Double_t fMinRelativeError;  Min relative error accepted. ;  ; Double_t fMinResidual;  Min residual value. ;  ; Int_t fMinResidualRow;  Row giving min residual. ;  ; TVectorD fMinVariables;  min value of independent variables ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of independent variables. ;  ; TVectorD fOrthCoefficients;  The model coefficients. ;  ; TMatrixD fOrthCurvatureMatrix;  Model matrix. ;  ; TVectorD fOrthFunctionNorms;  Norm of the evaluated functions. ;  ; TMatrixD fOrthFunctions;  As above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] In",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:36400,Integrability,depend,dependent,36400,"attern of histograms used. ;  ; TList * fHistograms;  List of histograms. ;  ; Bool_t fIsUserFunction;  Flag for user defined function. ;  ; Bool_t fIsVerbose;  ; Double_t fMaxAngle;  Max angle for accepting new function. ;  ; Int_t fMaxFuncNV;  fMaxFunctions*fNVariables ;  ; Int_t fMaxFunctions;  max number of functions ;  ; Int_t * fMaxPowers;  [fNVariables] maximum powers ;  ; Int_t * fMaxPowersFinal;  [fNVariables] maximum powers from fit; ;  ; Double_t fMaxQuantity;  Max value of dependent quantity. ;  ; Double_t fMaxResidual;  Max residual value. ;  ; Int_t fMaxResidualRow;  Row giving max residual. ;  ; Int_t fMaxStudy;  max functions to study ;  ; Int_t fMaxTerms;  Max terms expected in final expr. ;  ; TVectorD fMaxVariables;  max value of independent variables ;  ; Double_t fMeanQuantity;  Mean of dependent quantity. ;  ; TVectorD fMeanVariables;  mean value of independent variables ;  ; Double_t fMinAngle;  Min angle for accepting new function. ;  ; Double_t fMinQuantity;  Min value of dependent quantity. ;  ; Double_t fMinRelativeError;  Min relative error accepted. ;  ; Double_t fMinResidual;  Min residual value. ;  ; Int_t fMinResidualRow;  Row giving min residual. ;  ; TVectorD fMinVariables;  min value of independent variables ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of independent variables. ;  ; TVectorD fOrthCoefficients;  The model coefficients. ;  ; TMatrixD fOrthCurvatureMatrix;  Model matrix. ;  ; TVectorD fOrthFunctionNorms;  Norm of the evaluated functions. ;  ; TMatrixD fOrthFunctions;  As above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:37415,Integrability,depend,dependent,37415,"pendent quantity. ;  ; Double_t fMinRelativeError;  Min relative error accepted. ;  ; Double_t fMinResidual;  Min residual value. ;  ; Int_t fMinResidualRow;  Row giving min residual. ;  ; TVectorD fMinVariables;  min value of independent variables ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of independent variables. ;  ; TVectorD fOrthCoefficients;  The model coefficients. ;  ; TMatrixD fOrthCurvatureMatrix;  Model matrix. ;  ; TVectorD fOrthFunctionNorms;  Norm of the evaluated functions. ;  ; TMatrixD fOrthFunctions;  As above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize;  Size of test sample. ;  ; TVectorD fTestSqError;  Test sample, Error in quantity. ;  ; TVectorD fTestVariables;  Test sample, independent variables. ;  ; TVectorD fVariables;  Training sample, independent variables. ;  ;  Protected Attributes inher",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:37815,Integrability,depend,dependent,37815,"  The model coefficients. ;  ; TMatrixD fOrthCurvatureMatrix;  Model matrix. ;  ; TVectorD fOrthFunctionNorms;  Norm of the evaluated functions. ;  ; TMatrixD fOrthFunctions;  As above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize;  Size of test sample. ;  ; TVectorD fTestSqError;  Test sample, Error in quantity. ;  ; TVectorD fTestVariables;  Test sample, independent variables. ;  ; TVectorD fVariables;  Training sample, independent variables. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Private Attributes; static TMultiDimFit * fgInstance = nullptr;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiDimFit.h>. Inheritance diagram for TMultiDimFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:38106,Integrability,depend,dependent,38106,"PolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize;  Size of test sample. ;  ; TVectorD fTestSqError;  Test sample, Error in quantity. ;  ; TVectorD fTestVariables;  Test sample, independent variables. ;  ; TVectorD fVariables;  Training sample, independent variables. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Private Attributes; static TMultiDimFit * fgInstance = nullptr;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiDimFit.h>. Inheritance diagram for TMultiDimFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EMDFPolyType. enum TMultiDimFit::EMDFPolyType. EnumeratorkMonomials ; kChebyshev ; kLegendre . Definition at line 18 of file TMultiDimFit.h. Constructor & Destructor Documentation. ◆ TMultiDimFit() [1/2]. TMultiDimFit::TMultiDimFit ; (; ). Empty ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:39948,Integrability,depend,dependent,39948,"Fit.h. Constructor & Destructor Documentation. ◆ TMultiDimFit() [1/2]. TMultiDimFit::TMultiDimFit ; (; ). Empty CTOR. Do not use. ; Definition at line 433 of file TMultiDimFit.cxx. ◆ TMultiDimFit() [2/2]. TMultiDimFit::TMultiDimFit ; (; Int_t ; dimension, . EMDFPolyType ; type = kMonomials, . Option_t * ; option = """" . ). Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ; Options: K Compute (k)correlation matrix V Be verbose; Default is no options. ; Definition at line 508 of file TMultiDimFit.cxx. ◆ ~TMultiDimFit(). TMultiDimFit::~TMultiDimFit ; (; ). override . Destructor. ; Definition at line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value o",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40008,Integrability,depend,dependent,40008,"Fit.h. Constructor & Destructor Documentation. ◆ TMultiDimFit() [1/2]. TMultiDimFit::TMultiDimFit ; (; ). Empty CTOR. Do not use. ; Definition at line 433 of file TMultiDimFit.cxx. ◆ TMultiDimFit() [2/2]. TMultiDimFit::TMultiDimFit ; (; Int_t ; dimension, . EMDFPolyType ; type = kMonomials, . Option_t * ; option = """" . ). Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ; Options: K Compute (k)correlation matrix V Be verbose; Default is no options. ; Definition at line 508 of file TMultiDimFit.cxx. ◆ ~TMultiDimFit(). TMultiDimFit::~TMultiDimFit ; (; ). override . Destructor. ; Definition at line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value o",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40364,Integrability,depend,dependent,40364,"r Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ; Options: K Compute (k)correlation matrix V Be verbose; Default is no options. ; Definition at line 508 of file TMultiDimFit.cxx. ◆ ~TMultiDimFit(). TMultiDimFit::~TMultiDimFit ; (; ). override . Destructor. ; Definition at line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40659,Integrability,depend,dependent,40659,"line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass * TMultiDimFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiDimFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiDimFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TMultiDimFit.h. ◆ Clear(). vo",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40719,Integrability,depend,dependent,40719,"line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass * TMultiDimFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiDimFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiDimFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TMultiDimFit.h. ◆ Clear(). vo",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40984,Integrability,depend,dependent,40984," the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass * TMultiDimFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiDimFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiDimFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TMultiDimFit.h. ◆ Clear(). void TMultiDimFit::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear internal structures and variables. ; Reimplemented from TObject.; Definition at line 789 of file TMultiDimFit.cxx. ◆ DeclFileName(). static const char * TMultiDi",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:53323,Integrability,message,message,53323,"er triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as well as references. Please refer to the class description ; Definition at line 1504 of file TMultiDimFit.cxx. ◆ MakeHistograms(). void TMultiDimFit::MakeHistograms ; (; Option_t * ; option = ""A""). virtual . Make histograms of the result of the analysis. ; This message should be sent after having read all data points, but before finding the parameterization; Options: A All the below X Original independent variables D Original dependent variables N Normalised independent variables S Shifted dependent variables R1 Residuals versus normalised independent variables R2 Residuals versus dependent variable R3 Residuals computed on training sample R4 Residuals computed on test sample; For a description of these quantities, refer to class description ; Definition at line 1597 of file TMultiDimFit.cxx. ◆ MakeMethod(). void TMultiDimFit::MakeMethod ; (; const Char_t * ; classname = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <classname>MDF.cxx which contains the implementation of the method: ; Double_t <classname>::MDF(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fg",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:53491,Integrability,depend,dependent,53491,"er triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as well as references. Please refer to the class description ; Definition at line 1504 of file TMultiDimFit.cxx. ◆ MakeHistograms(). void TMultiDimFit::MakeHistograms ; (; Option_t * ; option = ""A""). virtual . Make histograms of the result of the analysis. ; This message should be sent after having read all data points, but before finding the parameterization; Options: A All the below X Original independent variables D Original dependent variables N Normalised independent variables S Shifted dependent variables R1 Residuals versus normalised independent variables R2 Residuals versus dependent variable R3 Residuals computed on training sample R4 Residuals computed on test sample; For a description of these quantities, refer to class description ; Definition at line 1597 of file TMultiDimFit.cxx. ◆ MakeMethod(). void TMultiDimFit::MakeMethod ; (; const Char_t * ; classname = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <classname>MDF.cxx which contains the implementation of the method: ; Double_t <classname>::MDF(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fg",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:53556,Integrability,depend,dependent,53556,"er triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as well as references. Please refer to the class description ; Definition at line 1504 of file TMultiDimFit.cxx. ◆ MakeHistograms(). void TMultiDimFit::MakeHistograms ; (; Option_t * ; option = ""A""). virtual . Make histograms of the result of the analysis. ; This message should be sent after having read all data points, but before finding the parameterization; Options: A All the below X Original independent variables D Original dependent variables N Normalised independent variables S Shifted dependent variables R1 Residuals versus normalised independent variables R2 Residuals versus dependent variable R3 Residuals computed on training sample R4 Residuals computed on test sample; For a description of these quantities, refer to class description ; Definition at line 1597 of file TMultiDimFit.cxx. ◆ MakeMethod(). void TMultiDimFit::MakeMethod ; (; const Char_t * ; classname = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <classname>MDF.cxx which contains the implementation of the method: ; Double_t <classname>::MDF(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fg",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:53649,Integrability,depend,dependent,53649,"er triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as well as references. Please refer to the class description ; Definition at line 1504 of file TMultiDimFit.cxx. ◆ MakeHistograms(). void TMultiDimFit::MakeHistograms ; (; Option_t * ; option = ""A""). virtual . Make histograms of the result of the analysis. ; This message should be sent after having read all data points, but before finding the parameterization; Options: A All the below X Original independent variables D Original dependent variables N Normalised independent variables S Shifted dependent variables R1 Residuals versus normalised independent variables R2 Residuals versus dependent variable R3 Residuals computed on training sample R4 Residuals computed on test sample; For a description of these quantities, refer to class description ; Definition at line 1597 of file TMultiDimFit.cxx. ◆ MakeMethod(). void TMultiDimFit::MakeMethod ; (; const Char_t * ; classname = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <classname>MDF.cxx which contains the implementation of the method: ; Double_t <classname>::MDF(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fg",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:57221,Integrability,message,message,57221,"(; const char * ; filename, . const char * ; classname, . Option_t * ; option = """" . ). protectedvirtual . PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameterization on some point. ; It's called by TMultiDimFit::MakeCode and TMultiDimFit::MakeMethod.; The options are: NONE so far ; Definition at line 1963 of file TMultiDimFit.cxx. ◆ Print(). void TMultiDimFit::Print ; (; Option_t * ; option = ""ps""); const. overridevirtual . Print statistics etc. ; Options are P Parameters S Statistics C Coefficients R Result of parameterisation F Result of fit K Correlation Matrix M Pretty print formula ; Reimplemented from TObject.; Definition at line 2158 of file TMultiDimFit.cxx. ◆ Select(). Bool_t TMultiDimFit::Select ; (; const Int_t * ; iv). protectedvirtual . Selection method. ; User can override this method for specialized selection of acceptable functions in fit. Default is to select all. This message is sent during the build-up of the function candidates table once for each set of powers in variables. Notice, that the argument array contains the powers PLUS ONE. For example, to De select the function f = x1^2 * x2^4 * x3^5, this method should return kFALSE if given the argument { 3, 4, 6 } ; Definition at line 2365 of file TMultiDimFit.cxx. ◆ SetBinVarX(). void TMultiDimFit::SetBinVarX ; (; Int_t ; nbbinvarx). inline . Definition at line 195 of file TMultiDimFit.h. ◆ SetBinVarY(). void TMultiDimFit::SetBinVarY ; (; Int_t ; nbbinvary). inline . Definition at line 196 of file TMultiDimFit.h. ◆ SetMaxAngle(). void TMultiDimFit::SetMaxAngle ; (; Double_t ; ang = 0). Set the max angle (in degrees) between the initial data vector to be fitted, and the new candidate function to be included in the fit. ; By default it is 0, which automatically chooses another selection criteria. See also class description ; Definition at line 2377 of file TMultiDimFit.cxx. ◆ SetMaxFunctions(). void TMultiDimFit::SetMaxFunctions ; (; Int_t ; n). inli",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:60976,Integrability,depend,dependent,60976,"mber, labels the term, the second the variable. More information is given in the class description ; Definition at line 2413 of file TMultiDimFit.cxx. ◆ Streamer(). void TMultiDimFit::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiDimFit::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 207 of file TMultiDimFit.h. ◆ TestFunction(). Bool_t TMultiDimFit::TestFunction ; (; Double_t ; squareResidual, . Double_t ; dResidur . ). protectedvirtual . PRIVATE METHOD: Test whether the currently considered function contributes to the fit. ; See also class description ; Definition at line 2470 of file TMultiDimFit.cxx. Member Data Documentation. ◆ fBinVarX. Int_t TMultiDimFit::fBinVarX. protected . Number of bin in independent variables. ; Definition at line 98 of file TMultiDimFit.h. ◆ fBinVarY. Int_t TMultiDimFit::fBinVarY. protected . Number of bin in dependent variables. ; Definition at line 99 of file TMultiDimFit.h. ◆ fChi2. Double_t TMultiDimFit::fChi2. protected . Chi square of fit. ; Definition at line 85 of file TMultiDimFit.h. ◆ fCoefficients. TVectorD TMultiDimFit::fCoefficients. protected . Vector of the final coefficients. ; Definition at line 82 of file TMultiDimFit.h. ◆ fCoefficientsRMS. TVectorD TMultiDimFit::fCoefficientsRMS. protected . Vector of RMS of coefficients. ; Definition at line 83 of file TMultiDimFit.h. ◆ fCorrelationCoeff. Double_t TMultiDimFit::fCorrelationCoeff. protected . Multi Correlation coefficient. ; Definition at line 92 of file TMultiDimFit.h. ◆ fCorrelationMatrix. TMatrixD TMultiDimFit::fCorrelationMatrix. protected . Correlation matrix. ; Definition at line 93 of file TMultiDimFit.h. ◆ fError. Double_t TMultiDimFit::fError. protected . Error from parametrization. ; Definition at line 88 of file TMultiDimFit.h. ◆ fFitter. TVirtualFitter* TMultiDimFit::fFitter. protected . Definition at line 101 ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:63732,Integrability,depend,dependent,63732,IsUserFunction. protected . Flag for user defined function. ; Definition at line 105 of file TMultiDimFit.h. ◆ fIsVerbose. Bool_t TMultiDimFit::fIsVerbose. protected . Definition at line 106 of file TMultiDimFit.h. ◆ fMaxAngle. Double_t TMultiDimFit::fMaxAngle. protected . Max angle for accepting new function. ; Definition at line 51 of file TMultiDimFit.h. ◆ fMaxFuncNV. Int_t TMultiDimFit::fMaxFuncNV. protected . fMaxFunctions*fNVariables ; Definition at line 62 of file TMultiDimFit.h. ◆ fMaxFunctions. Int_t TMultiDimFit::fMaxFunctions. protected . max number of functions ; Definition at line 59 of file TMultiDimFit.h. ◆ fMaxPowers. Int_t* TMultiDimFit::fMaxPowers. protected . [fNVariables] maximum powers ; Definition at line 54 of file TMultiDimFit.h. ◆ fMaxPowersFinal. Int_t* TMultiDimFit::fMaxPowersFinal. protected . [fNVariables] maximum powers from fit; ; Definition at line 68 of file TMultiDimFit.h. ◆ fMaxQuantity. Double_t TMultiDimFit::fMaxQuantity. protected . Max value of dependent quantity. ; Definition at line 31 of file TMultiDimFit.h. ◆ fMaxResidual. Double_t TMultiDimFit::fMaxResidual. protected . Max residual value. ; Definition at line 73 of file TMultiDimFit.h. ◆ fMaxResidualRow. Int_t TMultiDimFit::fMaxResidualRow. protected . Row giving max residual. ; Definition at line 75 of file TMultiDimFit.h. ◆ fMaxStudy. Int_t TMultiDimFit::fMaxStudy. protected . max functions to study ; Definition at line 61 of file TMultiDimFit.h. ◆ fMaxTerms. Int_t TMultiDimFit::fMaxTerms. protected . Max terms expected in final expr. ; Definition at line 52 of file TMultiDimFit.h. ◆ fMaxVariables. TVectorD TMultiDimFit::fMaxVariables. protected . max value of independent variables ; Definition at line 39 of file TMultiDimFit.h. ◆ fMeanQuantity. Double_t TMultiDimFit::fMeanQuantity. protected . Mean of dependent quantity. ; Definition at line 30 of file TMultiDimFit.h. ◆ fMeanVariables. TVectorD TMultiDimFit::fMeanVariables. protected . mean value of independent variable,MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:64564,Integrability,depend,dependent,64564,NVariables] maximum powers from fit; ; Definition at line 68 of file TMultiDimFit.h. ◆ fMaxQuantity. Double_t TMultiDimFit::fMaxQuantity. protected . Max value of dependent quantity. ; Definition at line 31 of file TMultiDimFit.h. ◆ fMaxResidual. Double_t TMultiDimFit::fMaxResidual. protected . Max residual value. ; Definition at line 73 of file TMultiDimFit.h. ◆ fMaxResidualRow. Int_t TMultiDimFit::fMaxResidualRow. protected . Row giving max residual. ; Definition at line 75 of file TMultiDimFit.h. ◆ fMaxStudy. Int_t TMultiDimFit::fMaxStudy. protected . max functions to study ; Definition at line 61 of file TMultiDimFit.h. ◆ fMaxTerms. Int_t TMultiDimFit::fMaxTerms. protected . Max terms expected in final expr. ; Definition at line 52 of file TMultiDimFit.h. ◆ fMaxVariables. TVectorD TMultiDimFit::fMaxVariables. protected . max value of independent variables ; Definition at line 39 of file TMultiDimFit.h. ◆ fMeanQuantity. Double_t TMultiDimFit::fMeanQuantity. protected . Mean of dependent quantity. ; Definition at line 30 of file TMultiDimFit.h. ◆ fMeanVariables. TVectorD TMultiDimFit::fMeanVariables. protected . mean value of independent variables ; Definition at line 38 of file TMultiDimFit.h. ◆ fMinAngle. Double_t TMultiDimFit::fMinAngle. protected . Min angle for accepting new function. ; Definition at line 50 of file TMultiDimFit.h. ◆ fMinQuantity. Double_t TMultiDimFit::fMinQuantity. protected . Min value of dependent quantity. ; Definition at line 32 of file TMultiDimFit.h. ◆ fMinRelativeError. Double_t TMultiDimFit::fMinRelativeError. protected . Min relative error accepted. ; Definition at line 53 of file TMultiDimFit.h. ◆ fMinResidual. Double_t TMultiDimFit::fMinResidual. protected . Min residual value. ; Definition at line 74 of file TMultiDimFit.h. ◆ fMinResidualRow. Int_t TMultiDimFit::fMinResidualRow. protected . Row giving min residual. ; Definition at line 76 of file TMultiDimFit.h. ◆ fMinVariables. TVectorD TMultiDimFit::fMinVariables. protected . ,MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:65008,Integrability,depend,dependent,65008,g max residual. ; Definition at line 75 of file TMultiDimFit.h. ◆ fMaxStudy. Int_t TMultiDimFit::fMaxStudy. protected . max functions to study ; Definition at line 61 of file TMultiDimFit.h. ◆ fMaxTerms. Int_t TMultiDimFit::fMaxTerms. protected . Max terms expected in final expr. ; Definition at line 52 of file TMultiDimFit.h. ◆ fMaxVariables. TVectorD TMultiDimFit::fMaxVariables. protected . max value of independent variables ; Definition at line 39 of file TMultiDimFit.h. ◆ fMeanQuantity. Double_t TMultiDimFit::fMeanQuantity. protected . Mean of dependent quantity. ; Definition at line 30 of file TMultiDimFit.h. ◆ fMeanVariables. TVectorD TMultiDimFit::fMeanVariables. protected . mean value of independent variables ; Definition at line 38 of file TMultiDimFit.h. ◆ fMinAngle. Double_t TMultiDimFit::fMinAngle. protected . Min angle for accepting new function. ; Definition at line 50 of file TMultiDimFit.h. ◆ fMinQuantity. Double_t TMultiDimFit::fMinQuantity. protected . Min value of dependent quantity. ; Definition at line 32 of file TMultiDimFit.h. ◆ fMinRelativeError. Double_t TMultiDimFit::fMinRelativeError. protected . Min relative error accepted. ; Definition at line 53 of file TMultiDimFit.h. ◆ fMinResidual. Double_t TMultiDimFit::fMinResidual. protected . Min residual value. ; Definition at line 74 of file TMultiDimFit.h. ◆ fMinResidualRow. Int_t TMultiDimFit::fMinResidualRow. protected . Row giving min residual. ; Definition at line 76 of file TMultiDimFit.h. ◆ fMinVariables. TVectorD TMultiDimFit::fMinVariables. protected . min value of independent variables ; Definition at line 40 of file TMultiDimFit.h. ◆ fNCoefficients. Int_t TMultiDimFit::fNCoefficients. protected . Dimension of model coefficients. ; Definition at line 79 of file TMultiDimFit.h. ◆ fNVariables. Int_t TMultiDimFit::fNVariables. protected . Number of independent variables. ; Definition at line 37 of file TMultiDimFit.h. ◆ fOrthCoefficients. TVectorD TMultiDimFit::fOrthCoefficients. protecte,MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:67504,Integrability,depend,dependent,67504,"ine 64 of file TMultiDimFit.h. ◆ fParameterisationCode. Int_t TMultiDimFit::fParameterisationCode. protected . Exit code of parameterisation. ; Definition at line 86 of file TMultiDimFit.h. ◆ fPolyType. EMDFPolyType TMultiDimFit::fPolyType. protected . Fit object (MINUIT) ; Type of polynomials to use ; Definition at line 103 of file TMultiDimFit.h. ◆ fPowerIndex. Int_t* TMultiDimFit::fPowerIndex. protected . [fMaxTerms] Index of accepted powers ; Definition at line 70 of file TMultiDimFit.h. ◆ fPowerLimit. Double_t TMultiDimFit::fPowerLimit. protected . Control parameter. ; Definition at line 55 of file TMultiDimFit.h. ◆ fPowers. Int_t* TMultiDimFit::fPowers. protected . [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ; Definition at line 69 of file TMultiDimFit.h. ◆ fPrecision. Double_t TMultiDimFit::fPrecision. protected . Relative precision of param. ; Definition at line 90 of file TMultiDimFit.h. ◆ fQuantity. TVectorD TMultiDimFit::fQuantity. protected . Training sample, dependent quantity. ; Definition at line 28 of file TMultiDimFit.h. ◆ fResiduals. TVectorD TMultiDimFit::fResiduals. protected . Vector of the final residuals. ; Definition at line 72 of file TMultiDimFit.h. ◆ fRMS. Double_t TMultiDimFit::fRMS. protected . Root mean square of fit. ; Definition at line 84 of file TMultiDimFit.h. ◆ fSampleSize. Int_t TMultiDimFit::fSampleSize. protected . Size of training sample. ; Definition at line 42 of file TMultiDimFit.h. ◆ fShowCorrelation. Bool_t TMultiDimFit::fShowCorrelation. protected . print correlation matrix ; Definition at line 104 of file TMultiDimFit.h. ◆ fSqError. TVectorD TMultiDimFit::fSqError. protected . Training sample, error in quantity. ; Definition at line 29 of file TMultiDimFit.h. ◆ fSumSqAvgQuantity. Double_t TMultiDimFit::fSumSqAvgQuantity. protected . Sum of squares away from mean. ; Definition at line 34 of file TMultiDimFit.h. ◆ fSumSqQuantity. Double_t TMultiDimFit::fSumSqQuantity. protected . SumSquare of dependent quanti",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:68489,Integrability,depend,dependent,68489,"ning sample, dependent quantity. ; Definition at line 28 of file TMultiDimFit.h. ◆ fResiduals. TVectorD TMultiDimFit::fResiduals. protected . Vector of the final residuals. ; Definition at line 72 of file TMultiDimFit.h. ◆ fRMS. Double_t TMultiDimFit::fRMS. protected . Root mean square of fit. ; Definition at line 84 of file TMultiDimFit.h. ◆ fSampleSize. Int_t TMultiDimFit::fSampleSize. protected . Size of training sample. ; Definition at line 42 of file TMultiDimFit.h. ◆ fShowCorrelation. Bool_t TMultiDimFit::fShowCorrelation. protected . print correlation matrix ; Definition at line 104 of file TMultiDimFit.h. ◆ fSqError. TVectorD TMultiDimFit::fSqError. protected . Training sample, error in quantity. ; Definition at line 29 of file TMultiDimFit.h. ◆ fSumSqAvgQuantity. Double_t TMultiDimFit::fSumSqAvgQuantity. protected . Sum of squares away from mean. ; Definition at line 34 of file TMultiDimFit.h. ◆ fSumSqQuantity. Double_t TMultiDimFit::fSumSqQuantity. protected . SumSquare of dependent quantity. ; Definition at line 33 of file TMultiDimFit.h. ◆ fSumSqResidual. Double_t TMultiDimFit::fSumSqResidual. protected . Sum of Square residuals. ; Definition at line 77 of file TMultiDimFit.h. ◆ fTestCorrelationCoeff. Double_t TMultiDimFit::fTestCorrelationCoeff. protected . Multi Correlation coefficient. ; Definition at line 94 of file TMultiDimFit.h. ◆ fTestError. Double_t TMultiDimFit::fTestError. protected . Error from test. ; Definition at line 89 of file TMultiDimFit.h. ◆ fTestPrecision. Double_t TMultiDimFit::fTestPrecision. protected . Relative precision of test. ; Definition at line 91 of file TMultiDimFit.h. ◆ fTestQuantity. TVectorD TMultiDimFit::fTestQuantity. protected . Test sample, dependent quantity. ; Definition at line 44 of file TMultiDimFit.h. ◆ fTestSampleSize. Int_t TMultiDimFit::fTestSampleSize. protected . Size of test sample. ; Definition at line 48 of file TMultiDimFit.h. ◆ fTestSqError. TVectorD TMultiDimFit::fTestSqError. protected . Test sampl",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:69212,Integrability,depend,dependent,69212,"protected . Training sample, error in quantity. ; Definition at line 29 of file TMultiDimFit.h. ◆ fSumSqAvgQuantity. Double_t TMultiDimFit::fSumSqAvgQuantity. protected . Sum of squares away from mean. ; Definition at line 34 of file TMultiDimFit.h. ◆ fSumSqQuantity. Double_t TMultiDimFit::fSumSqQuantity. protected . SumSquare of dependent quantity. ; Definition at line 33 of file TMultiDimFit.h. ◆ fSumSqResidual. Double_t TMultiDimFit::fSumSqResidual. protected . Sum of Square residuals. ; Definition at line 77 of file TMultiDimFit.h. ◆ fTestCorrelationCoeff. Double_t TMultiDimFit::fTestCorrelationCoeff. protected . Multi Correlation coefficient. ; Definition at line 94 of file TMultiDimFit.h. ◆ fTestError. Double_t TMultiDimFit::fTestError. protected . Error from test. ; Definition at line 89 of file TMultiDimFit.h. ◆ fTestPrecision. Double_t TMultiDimFit::fTestPrecision. protected . Relative precision of test. ; Definition at line 91 of file TMultiDimFit.h. ◆ fTestQuantity. TVectorD TMultiDimFit::fTestQuantity. protected . Test sample, dependent quantity. ; Definition at line 44 of file TMultiDimFit.h. ◆ fTestSampleSize. Int_t TMultiDimFit::fTestSampleSize. protected . Size of test sample. ; Definition at line 48 of file TMultiDimFit.h. ◆ fTestSqError. TVectorD TMultiDimFit::fTestSqError. protected . Test sample, Error in quantity. ; Definition at line 45 of file TMultiDimFit.h. ◆ fTestVariables. TVectorD TMultiDimFit::fTestVariables. protected . Test sample, independent variables. ; Definition at line 46 of file TMultiDimFit.h. ◆ fVariables. TVectorD TMultiDimFit::fVariables. protected . Training sample, independent variables. ; Definition at line 36 of file TMultiDimFit.h. Libraries for TMultiDimFit:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TMultiDimFit.h; hist/hist/src/TMultiDimFit.cxx. TMultiDimFit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:1570,Modifiability,variab,variables,1570,"ical quantity in terms of several others, which are directly measurable.; An example in high energy physics is the evaluation of the momentum of a charged particle from the observation of its trajectory in a magnetic field. The problem is to relate the momentum of the particle to the observations, which may consists of positional measurements at intervals along the particle trajectory.; The exact functional relationship between the measured quantities (e.g., the space-points) and the dependent quantity (e.g., the momentum) is in general not known, but one possible way of solving the problem, is to find an expression which reliably approximates the dependence of the momentum on the observations.; This explicit function of the observations can be obtained by a least squares fitting procedure applied to a representative sample of the data, for which the dependent quantity (e.g., momentum) and the independent observations are known. The function can then be used to compute the quantity of interest for new observations of the independent variables.; This class TMultiDimFit implements such a procedure in ROOT. It is largely based on the CERNLIB MUDIFI package 2. Though the basic concepts are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoothly on the observable quantities \( x_1, \ldots, x_N \) which we'll denote by \(\mathbf{x}\). Given a training sample of \( M\) tuples of the form, (TMultiDimFit::AddRow). \[; \left(\mathbf{x}_j, D_j, E_j\r",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:2612,Modifiability,variab,variables,2612,"s are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoothly on the observable quantities \( x_1, \ldots, x_N \) which we'll denote by \(\mathbf{x}\). Given a training sample of \( M\) tuples of the form, (TMultiDimFit::AddRow). \[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \]. where \(\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\) are \( N\) independent variables, \( D_j\) is the known, quantity dependent at \(\mathbf{x}_j\) and \( E_j\) is the square error in \( D_j\), the class will try to find the parameterization ; \[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \]. such that. \[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \]. is minimal. Here \(p_{li}(x_i)\) are monomials, or Chebyshev or Legendre polynomials, labelled \(l = 1, \ldots, L\), in each variable \( x_i\), \( i=1, \ldots, N\).; So what TMultiDimFit does, is to determine the number of terms \( L\), and then \( L\) terms (or functions) \( F_l\), and the \( L\) coefficients \( c_l\), so that \( S\) is minimal (TMultiDimFit::FindParameterization).; Of course it's more than a little unlikely that \( S\) will ever become exact zero as a result of the procedure outlined below. Therefore, the user is asked to provide a minimum relative error \( \epsilon\) (TMultiDimFit::SetMinRelativeError), and \( S\) will be considered minimized when. \[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilo",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:2762,Modifiability,parameteriz,parameterization,2762,"s are still sound, and therefore kept, a few implementation details have changed, and this class can take advantage of MINUIT 4 to improve the errors of the fitting, thanks to the class TMinuit.; In 5 and 6 H. Wind demonstrates the utility of this procedure in the context of tracking, magnetic field parameterisation, and so on. The outline of the method used in this class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoothly on the observable quantities \( x_1, \ldots, x_N \) which we'll denote by \(\mathbf{x}\). Given a training sample of \( M\) tuples of the form, (TMultiDimFit::AddRow). \[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \]. where \(\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\) are \( N\) independent variables, \( D_j\) is the known, quantity dependent at \(\mathbf{x}_j\) and \( E_j\) is the square error in \( D_j\), the class will try to find the parameterization ; \[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \]. such that. \[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \]. is minimal. Here \(p_{li}(x_i)\) are monomials, or Chebyshev or Legendre polynomials, labelled \(l = 1, \ldots, L\), in each variable \( x_i\), \( i=1, \ldots, N\).; So what TMultiDimFit does, is to determine the number of terms \( L\), and then \( L\) terms (or functions) \( F_l\), and the \( L\) coefficients \( c_l\), so that \( S\) is minimal (TMultiDimFit::FindParameterization).; Of course it's more than a little unlikely that \( S\) will ever become exact zero as a result of the procedure outlined below. Therefore, the user is asked to provide a minimum relative error \( \epsilon\) (TMultiDimFit::SetMinRelativeError), and \( S\) will be considered minimized when. \[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilo",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:3123,Modifiability,variab,variable,3123,"his class is based on Winds discussion, and I refer these two excellents text for more information.; And example of usage is given in multidimfit.C. The Method; Let \( D \) by the dependent quantity of interest, which depends smoothly on the observable quantities \( x_1, \ldots, x_N \) which we'll denote by \(\mathbf{x}\). Given a training sample of \( M\) tuples of the form, (TMultiDimFit::AddRow). \[; \left(\mathbf{x}_j, D_j, E_j\right)\quad,; \]. where \(\mathbf{x}_j = (x_{1,j},\ldots,x_{N,j})\) are \( N\) independent variables, \( D_j\) is the known, quantity dependent at \(\mathbf{x}_j\) and \( E_j\) is the square error in \( D_j\), the class will try to find the parameterization ; \[; D_p(\mathbf{x}) = \sum_{l=1}^{L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \]. such that. \[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \]. is minimal. Here \(p_{li}(x_i)\) are monomials, or Chebyshev or Legendre polynomials, labelled \(l = 1, \ldots, L\), in each variable \( x_i\), \( i=1, \ldots, N\).; So what TMultiDimFit does, is to determine the number of terms \( L\), and then \( L\) terms (or functions) \( F_l\), and the \( L\) coefficients \( c_l\), so that \( S\) is minimal (TMultiDimFit::FindParameterization).; Of course it's more than a little unlikely that \( S\) will ever become exact zero as a result of the procedure outlined below. Therefore, the user is asked to provide a minimum relative error \( \epsilon\) (TMultiDimFit::SetMinRelativeError), and \( S\) will be considered minimized when. \[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilon; \]. Optionally, the user may impose a functional expression by specifying the powers of each variable in \( L\) specified functions \( F_1, \ldots,F_L\) (TMultiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:3817,Modifiability,variab,variable,3817,"L} c_l \prod_{i=1}^{N} p_{li}\left(x_i\right); = \sum_{l=1}^{L} c_l F_l(\mathbf{x}); \]. such that. \[; S \equiv \sum_{j=1}^{M} \left(D_j - D_p\left(\mathbf{x}_j\right)\right)^2; \]. is minimal. Here \(p_{li}(x_i)\) are monomials, or Chebyshev or Legendre polynomials, labelled \(l = 1, \ldots, L\), in each variable \( x_i\), \( i=1, \ldots, N\).; So what TMultiDimFit does, is to determine the number of terms \( L\), and then \( L\) terms (or functions) \( F_l\), and the \( L\) coefficients \( c_l\), so that \( S\) is minimal (TMultiDimFit::FindParameterization).; Of course it's more than a little unlikely that \( S\) will ever become exact zero as a result of the procedure outlined below. Therefore, the user is asked to provide a minimum relative error \( \epsilon\) (TMultiDimFit::SetMinRelativeError), and \( S\) will be considered minimized when. \[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilon; \]. Optionally, the user may impose a functional expression by specifying the powers of each variable in \( L\) specified functions \( F_1, \ldots,F_L\) (TMultiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximu",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:4540,Modifiability,variab,variable,4540,"ror \( \epsilon\) (TMultiDimFit::SetMinRelativeError), and \( S\) will be considered minimized when. \[; R = \frac{S}{\sum_{j=1}^M D_j^2} < \epsilon; \]. Optionally, the user may impose a functional expression by specifying the powers of each variable in \( L\) specified functions \( F_1, \ldots,F_L\) (TMultiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce t",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:4689,Modifiability,variab,variable,4689,"lon; \]. Optionally, the user may impose a functional expression by specifying the powers of each variable in \( L\) specified functions \( F_1, \ldots,F_L\) (TMultiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is ch",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:5375,Modifiability,variab,variable,5375,"tMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is chosen by the user, and will be discussed below (see 2.3).; The functions \( F_l\) are generally not orthogonal, which means one will have to evaluate all possible \( F_l\)'s over all data-points before finding the most significant 1. We can, however, do better then that. By applying the modified Gram-Schmidt orthogonalisation algorithm [5] [3] to the functions \( F_l\), we can evaluate the contribution to the reduction of \( S\) from each function in turn, and we may delay the actual inversion of the curvature-matrix (TMultiDimFit::MakeGramSchmidt).; So we are let to consider an \( M\times L\) matrix \(\mathsf{F}\), an element of which is given by ; \[; f_{jl} = ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:6602,Modifiability,variab,variables,6602,"er reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is chosen by the user, and will be discussed below (see 2.3).; The functions \( F_l\) are generally not orthogonal, which means one will have to evaluate all possible \( F_l\)'s over all data-points before finding the most significant 1. We can, however, do better then that. By applying the modified Gram-Schmidt orthogonalisation algorithm [5] [3] to the functions \( F_l\), we can evaluate the contribution to the reduction of \( S\) from each function in turn, and we may delay the actual inversion of the curvature-matrix (TMultiDimFit::MakeGramSchmidt).; So we are let to consider an \( M\times L\) matrix \(\mathsf{F}\), an element of which is given by ; \[; f_{jl} = F_j\left(x_{1j} , x_{2j}, \ldots, x_{Nj}\right); = F_l(\mathbf{x}_j)\, \quad\mbox{with}~j=1,2,\ldots,M,; \]. where \( j\) labels the \( M\) rows in the training sample and \( l\) labels \( L\) functions of \( N\) variables, and \( L \leq M\). That is, \( f_{jl}\) is the term (or function) numbered \( l\) evaluated at the data point \( j\). We have to normalise \(\mathbf{x}_j\) to \( [-1,1]\) for this to succeed [5] (TMultiDimFit::MakeNormalized). We then define a matrix \(\mathsf{W}\) of which the columns \(\mathbf{w}_j\) are given by ; \begin{eqnarray*}; \mathbf{w}_1 &=& \mathbf{f}_1 = F_1\left(\mathbf x_1\right)\\; \mathbf{w}_l &=& \mathbf{f}_l - \sum^{l-1}_{k=1} \frac{\mathbf{f}_l \bullet; \mathbf{w}_k}{\mathbf{w}_k^2}\mathbf{w}_k\,.; \end{eqnarray*}. and \(\mathbf{w}_{l}\) is the component of \(\mathbf{f}_{l} \) orthogonal to \(\mathbf{w}_{1}, \ldots, \mathbf{w}_{l-1}\). Hence we obtain [3], ; \[; \mathbf{w}_k\bullet\mathbf{w}_l = 0\quad\mbox{if}~k \neq l\quad.; \]. We now take as a new model \(\mathsf{W}\mathbf{a}\). We thus want to minimize ; \[; S\equiv \left(\mathbf{D} - \mathsf{W}\mathbf{a}\right)^2\quad,; \]. where \(\mathbf{D} = \left(D_1,\ldots,",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:11859,Modifiability,parameteriz,parameterization,11859,"tributing most to the reduction of \( S\) are chosen first (TMultiDimFit::TestFunction).; In case \( \phi \) isn't defined, an alternative method of performing this second test is used: The \(L^{\mbox{th}}\) function \(\textbf{f}_L\) is accepted if (refer also to equation (13)) ; \[; \Delta S_L > \frac{S_{L-1}}{L_{max}-L}; \]. where \( S_{L-1}\) is the sum of the \( L-1\) first residuals from the \( L-1\) functions previously accepted; and \( L_{max}\) is the total number of functions allowed in the final expression of the fit (defined by user).; From this we see, that by restricting \( L_{max}\) – the number of terms in the final model – the fit is more difficult to perform, since the above selection criteria is more limiting.; The more coefficients we evaluate, the more the sum of squares of residuals \( S\) will be reduced. We can evaluate \( S\) before inverting \(\mathsf{B}\) as shown below. Coefficients and Coefficient Errors; Having found a parameterization, that is the \( F_l\)'s and \( L\), that minimizes \( S\), we still need to determine the coefficients \( c_l\). However, it's a feature of how we choose the significant functions, that the evaluation of the \( c_l\)'s becomes trivial 5. To derive \(\mathbf{c}\), we first note that equation (4) can be written as ; \[; \mathsf{F} = \mathsf{W}\mathsf{B}; \]. where ; \begin{eqnarray*}; b_{ij} = \frac{\mathbf{f}_j \bullet \mathbf{w}_i}{\mathbf{w}_i^2}; & \mbox{if} & i < j\\; 1 & \mbox{if} & i = j\\; 0 & \mbox{if} & i > j; \end{eqnarray*}. Consequently, \(\mathsf{B}\) is an upper triangle matrix, which can be readily inverted. So we now evaluate ; \[; \mathsf{F}\mathsf{B}^{-1} = \mathsf{W}; \]. The model \(\mathsf{W}\mathbf{a}\) can therefore be written as \((\mathsf{F}\mathsf{B}^{-1})\mathbf{a} = \mathsf{F}(\mathsf{B}^{-1}\mathbf{a})\,.\); The original model \(\mathsf{F}\mathbf{c}\) is therefore identical with this if ; \[; \mathbf{c} = \left(\mathsf{B}^{-1}\mathbf{a}\right) =; \left[\mathbf{a}^T\left(\mathsf{",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:13623,Modifiability,variab,variables,13623,")\mathbf{a} = \mathsf{F}(\mathsf{B}^{-1}\mathbf{a})\,.\); The original model \(\mathsf{F}\mathbf{c}\) is therefore identical with this if ; \[; \mathbf{c} = \left(\mathsf{B}^{-1}\mathbf{a}\right) =; \left[\mathbf{a}^T\left(\mathsf{B}^{-1}\right)^T\right]^T\,.; \]. The reason we use \(\left(\mathsf{B}^{-1}\right)^T\) rather then \(\mathsf{B}^{-1}\) is to save storage, since \(\left(\mathsf{B}^{-1}\right)^T\) can be stored in the same matrix as \(\mathsf{B}\) (TMultiDimFit::MakeCoefficients). The errors in the coefficients is calculated by inverting the curvature matrix of the non-orthogonal functions \( f_{lj}\) [1] (TMultiDimFit::MakeCoefficientErrors). Considerations; It's important to realize that the training sample should be representative of the problem at hand, in particular along the borders of the region of interest. This is because the algorithm presented here, is a interpolation, rather then a extrapolation 5.; Also, the independent variables \( x_{i}\) need to be linear independent, since the procedure will perform poorly if they are not 5. One can find an linear transformation from ones original variables \( \xi_{i}\) to a set of linear independent variables \( x_{i}\), using a Principal Components Analysis (see TPrincipal), and then use the transformed variable as input to this class [5] 6.; H. Wind also outlines a method for parameterising a multidimensional dependence over a multidimensional set of variables. An example of the method from 5, is a follows (please refer to 5 for a full discussion):. Define \(\mathbf{P} = (P_1, \ldots, P_5)\) are the 5 dependent quantities that define a track.; Compute, for \( M\) different values of \(\mathbf{P}\), the tracks through the magnetic field, and determine the corresponding \(\mathbf{x} = (x_1, \ldots, x_N)\).; Use the simulated observations to determine, with a simple approximation, the values of \(\mathbf{P}_j\). We call these values \(\mathbf{P}^\prime_j, j = 1, \ldots, M\).; Determine from \(\mathbf{x}\) ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:13791,Modifiability,variab,variables,13791," =; \left[\mathbf{a}^T\left(\mathsf{B}^{-1}\right)^T\right]^T\,.; \]. The reason we use \(\left(\mathsf{B}^{-1}\right)^T\) rather then \(\mathsf{B}^{-1}\) is to save storage, since \(\left(\mathsf{B}^{-1}\right)^T\) can be stored in the same matrix as \(\mathsf{B}\) (TMultiDimFit::MakeCoefficients). The errors in the coefficients is calculated by inverting the curvature matrix of the non-orthogonal functions \( f_{lj}\) [1] (TMultiDimFit::MakeCoefficientErrors). Considerations; It's important to realize that the training sample should be representative of the problem at hand, in particular along the borders of the region of interest. This is because the algorithm presented here, is a interpolation, rather then a extrapolation 5.; Also, the independent variables \( x_{i}\) need to be linear independent, since the procedure will perform poorly if they are not 5. One can find an linear transformation from ones original variables \( \xi_{i}\) to a set of linear independent variables \( x_{i}\), using a Principal Components Analysis (see TPrincipal), and then use the transformed variable as input to this class [5] 6.; H. Wind also outlines a method for parameterising a multidimensional dependence over a multidimensional set of variables. An example of the method from 5, is a follows (please refer to 5 for a full discussion):. Define \(\mathbf{P} = (P_1, \ldots, P_5)\) are the 5 dependent quantities that define a track.; Compute, for \( M\) different values of \(\mathbf{P}\), the tracks through the magnetic field, and determine the corresponding \(\mathbf{x} = (x_1, \ldots, x_N)\).; Use the simulated observations to determine, with a simple approximation, the values of \(\mathbf{P}_j\). We call these values \(\mathbf{P}^\prime_j, j = 1, \ldots, M\).; Determine from \(\mathbf{x}\) a set of at least five relevant coordinates \(\mathbf{x}^\prime\), using contrains, or alternative:; Perform a Principal Component Analysis (using TPrincipal), and use to get a linear transformati",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:13845,Modifiability,variab,variables,13845," =; \left[\mathbf{a}^T\left(\mathsf{B}^{-1}\right)^T\right]^T\,.; \]. The reason we use \(\left(\mathsf{B}^{-1}\right)^T\) rather then \(\mathsf{B}^{-1}\) is to save storage, since \(\left(\mathsf{B}^{-1}\right)^T\) can be stored in the same matrix as \(\mathsf{B}\) (TMultiDimFit::MakeCoefficients). The errors in the coefficients is calculated by inverting the curvature matrix of the non-orthogonal functions \( f_{lj}\) [1] (TMultiDimFit::MakeCoefficientErrors). Considerations; It's important to realize that the training sample should be representative of the problem at hand, in particular along the borders of the region of interest. This is because the algorithm presented here, is a interpolation, rather then a extrapolation 5.; Also, the independent variables \( x_{i}\) need to be linear independent, since the procedure will perform poorly if they are not 5. One can find an linear transformation from ones original variables \( \xi_{i}\) to a set of linear independent variables \( x_{i}\), using a Principal Components Analysis (see TPrincipal), and then use the transformed variable as input to this class [5] 6.; H. Wind also outlines a method for parameterising a multidimensional dependence over a multidimensional set of variables. An example of the method from 5, is a follows (please refer to 5 for a full discussion):. Define \(\mathbf{P} = (P_1, \ldots, P_5)\) are the 5 dependent quantities that define a track.; Compute, for \( M\) different values of \(\mathbf{P}\), the tracks through the magnetic field, and determine the corresponding \(\mathbf{x} = (x_1, \ldots, x_N)\).; Use the simulated observations to determine, with a simple approximation, the values of \(\mathbf{P}_j\). We call these values \(\mathbf{P}^\prime_j, j = 1, \ldots, M\).; Determine from \(\mathbf{x}\) a set of at least five relevant coordinates \(\mathbf{x}^\prime\), using contrains, or alternative:; Perform a Principal Component Analysis (using TPrincipal), and use to get a linear transformati",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:13952,Modifiability,variab,variable,13952," =; \left[\mathbf{a}^T\left(\mathsf{B}^{-1}\right)^T\right]^T\,.; \]. The reason we use \(\left(\mathsf{B}^{-1}\right)^T\) rather then \(\mathsf{B}^{-1}\) is to save storage, since \(\left(\mathsf{B}^{-1}\right)^T\) can be stored in the same matrix as \(\mathsf{B}\) (TMultiDimFit::MakeCoefficients). The errors in the coefficients is calculated by inverting the curvature matrix of the non-orthogonal functions \( f_{lj}\) [1] (TMultiDimFit::MakeCoefficientErrors). Considerations; It's important to realize that the training sample should be representative of the problem at hand, in particular along the borders of the region of interest. This is because the algorithm presented here, is a interpolation, rather then a extrapolation 5.; Also, the independent variables \( x_{i}\) need to be linear independent, since the procedure will perform poorly if they are not 5. One can find an linear transformation from ones original variables \( \xi_{i}\) to a set of linear independent variables \( x_{i}\), using a Principal Components Analysis (see TPrincipal), and then use the transformed variable as input to this class [5] 6.; H. Wind also outlines a method for parameterising a multidimensional dependence over a multidimensional set of variables. An example of the method from 5, is a follows (please refer to 5 for a full discussion):. Define \(\mathbf{P} = (P_1, \ldots, P_5)\) are the 5 dependent quantities that define a track.; Compute, for \( M\) different values of \(\mathbf{P}\), the tracks through the magnetic field, and determine the corresponding \(\mathbf{x} = (x_1, \ldots, x_N)\).; Use the simulated observations to determine, with a simple approximation, the values of \(\mathbf{P}_j\). We call these values \(\mathbf{P}^\prime_j, j = 1, \ldots, M\).; Determine from \(\mathbf{x}\) a set of at least five relevant coordinates \(\mathbf{x}^\prime\), using contrains, or alternative:; Perform a Principal Component Analysis (using TPrincipal), and use to get a linear transformati",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:14103,Modifiability,variab,variables,14103,"thsf{B}^{-1}\right)^T\) can be stored in the same matrix as \(\mathsf{B}\) (TMultiDimFit::MakeCoefficients). The errors in the coefficients is calculated by inverting the curvature matrix of the non-orthogonal functions \( f_{lj}\) [1] (TMultiDimFit::MakeCoefficientErrors). Considerations; It's important to realize that the training sample should be representative of the problem at hand, in particular along the borders of the region of interest. This is because the algorithm presented here, is a interpolation, rather then a extrapolation 5.; Also, the independent variables \( x_{i}\) need to be linear independent, since the procedure will perform poorly if they are not 5. One can find an linear transformation from ones original variables \( \xi_{i}\) to a set of linear independent variables \( x_{i}\), using a Principal Components Analysis (see TPrincipal), and then use the transformed variable as input to this class [5] 6.; H. Wind also outlines a method for parameterising a multidimensional dependence over a multidimensional set of variables. An example of the method from 5, is a follows (please refer to 5 for a full discussion):. Define \(\mathbf{P} = (P_1, \ldots, P_5)\) are the 5 dependent quantities that define a track.; Compute, for \( M\) different values of \(\mathbf{P}\), the tracks through the magnetic field, and determine the corresponding \(\mathbf{x} = (x_1, \ldots, x_N)\).; Use the simulated observations to determine, with a simple approximation, the values of \(\mathbf{P}_j\). We call these values \(\mathbf{P}^\prime_j, j = 1, \ldots, M\).; Determine from \(\mathbf{x}\) a set of at least five relevant coordinates \(\mathbf{x}^\prime\), using contrains, or alternative:; Perform a Principal Component Analysis (using TPrincipal), and use to get a linear transformation \(\mathbf{x} \rightarrow \mathbf{x}^\prime\), so that \(\mathbf{x}^\prime\) are constrained and linear independent.; Perform a Principal Component Analysis on \(Q_i = P_i / P^\prime_i\, i =",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:15288,Modifiability,variab,variables,15288," refer to 5 for a full discussion):. Define \(\mathbf{P} = (P_1, \ldots, P_5)\) are the 5 dependent quantities that define a track.; Compute, for \( M\) different values of \(\mathbf{P}\), the tracks through the magnetic field, and determine the corresponding \(\mathbf{x} = (x_1, \ldots, x_N)\).; Use the simulated observations to determine, with a simple approximation, the values of \(\mathbf{P}_j\). We call these values \(\mathbf{P}^\prime_j, j = 1, \ldots, M\).; Determine from \(\mathbf{x}\) a set of at least five relevant coordinates \(\mathbf{x}^\prime\), using contrains, or alternative:; Perform a Principal Component Analysis (using TPrincipal), and use to get a linear transformation \(\mathbf{x} \rightarrow \mathbf{x}^\prime\), so that \(\mathbf{x}^\prime\) are constrained and linear independent.; Perform a Principal Component Analysis on \(Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\), to get linear indenpendent (among themselves, but not independent of \(\mathbf{x}\)) quantities \(\mathbf{Q}^\prime\); For each component \(Q^\prime_i\) make a multidimensional fit, using \(\mathbf{x}^\prime\) as the variables, thus determining a set of coefficients \(\mathbf{c}_i\). To process data, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the Principal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the k",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:15474,Modifiability,parameteriz,parameterization,15474,"ots, x_N)\).; Use the simulated observations to determine, with a simple approximation, the values of \(\mathbf{P}_j\). We call these values \(\mathbf{P}^\prime_j, j = 1, \ldots, M\).; Determine from \(\mathbf{x}\) a set of at least five relevant coordinates \(\mathbf{x}^\prime\), using contrains, or alternative:; Perform a Principal Component Analysis (using TPrincipal), and use to get a linear transformation \(\mathbf{x} \rightarrow \mathbf{x}^\prime\), so that \(\mathbf{x}^\prime\) are constrained and linear independent.; Perform a Principal Component Analysis on \(Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\), to get linear indenpendent (among themselves, but not independent of \(\mathbf{x}\)) quantities \(\mathbf{Q}^\prime\); For each component \(Q^\prime_i\) make a multidimensional fit, using \(\mathbf{x}^\prime\) as the variables, thus determining a set of coefficients \(\mathbf{c}_i\). To process data, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the Principal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\ri",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:15829,Modifiability,parameteriz,parameterization,15829,"thbf{x}^\prime\), so that \(\mathbf{x}^\prime\) are constrained and linear independent.; Perform a Principal Component Analysis on \(Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\), to get linear indenpendent (among themselves, but not independent of \(\mathbf{x}\)) quantities \(\mathbf{Q}^\prime\); For each component \(Q^\prime_i\) make a multidimensional fit, using \(\mathbf{x}^\prime\) as the variables, thus determining a set of coefficients \(\mathbf{c}_i\). To process data, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the Principal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the ma",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:15934,Modifiability,parameteriz,parameterization,15934,"thbf{x}^\prime\), so that \(\mathbf{x}^\prime\) are constrained and linear independent.; Perform a Principal Component Analysis on \(Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\), to get linear indenpendent (among themselves, but not independent of \(\mathbf{x}\)) quantities \(\mathbf{Q}^\prime\); For each component \(Q^\prime_i\) make a multidimensional fit, using \(\mathbf{x}^\prime\) as the variables, thus determining a set of coefficients \(\mathbf{c}_i\). To process data, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the Principal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the ma",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:16139,Modifiability,variab,variables,16139,"ot independent of \(\mathbf{x}\)) quantities \(\mathbf{Q}^\prime\); For each component \(Q^\prime_i\) make a multidimensional fit, using \(\mathbf{x}^\prime\) as the variables, thus determining a set of coefficients \(\mathbf{c}_i\). To process data, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the Principal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:16280,Modifiability,parameteriz,parameterization,16280,"ata, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the Principal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction and Error Analysis for the Physical Sciences. McGraw-Hill, 2 edition, 1992.; R. Brun et al. Long writeup DD/75-23, CERN, 1980.; Gene H. Golub and Charles F. van Loan. Matrix Computations. John Hopkins University Press, Baltimore, 3 edition, 1996",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:17439,Modifiability,parameteriz,parameterization,17439,"right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction and Error Analysis for the Physical Sciences. McGraw-Hill, 2 edition, 1992.; R. Brun et al. Long writeup DD/75-23, CERN, 1980.; Gene H. Golub and Charles F. van Loan. Matrix Computations. John Hopkins University Press, Baltimore, 3 edition, 1996.; F. James. Minuit. Long writeup D506, CERN, 1998.; H. Wind. Function parameterization. Proceedings of the 1972 CERN Computing and Data Processing School, volume 72-21 of Yellow report. CERN, 1972.; H. Wind. 1. principal component analysis, 2. pattern recognition for track finding, 3. interpolation and functional representation. Yellow report EP/81-12, CERN, 1981. . Definition at line 15 of file TMultiDimFit.h. Public Types; enum  EMDFPolyType { kMonomials; , kChebyshev; , kLegendre; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:17878,Modifiability,inherit,inherited,17878," in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction and Error Analysis for the Physical Sciences. McGraw-Hill, 2 edition, 1992.; R. Brun et al. Long writeup DD/75-23, CERN, 1980.; Gene H. Golub and Charles F. van Loan. Matrix Computations. John Hopkins University Press, Baltimore, 3 edition, 1996.; F. James. Minuit. Long writeup D506, CERN, 1998.; H. Wind. Function parameterization. Proceedings of the 1972 CERN Computing and Data Processing School, volume 72-21 of Yellow report. CERN, 1972.; H. Wind. 1. principal component analysis, 2. pattern recognition for track finding, 3. interpolation and functional representation. Yellow report EP/81-12, CERN, 1981. . Definition at line 15 of file TMultiDimFit.h. Public Types; enum  EMDFPolyType { kMonomials; , kChebyshev; , kLegendre; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiDimFit ();  Empty CTOR. Do not use. ;  ;  TMultiDimFit (Int_t dimension, EMDFPolyType type=kMonomials, Option_t *option="""");  Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x,",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:18993,Modifiability,variab,variables,18993,"000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiDimFit ();  Empty CTOR. Do not use. ;  ;  TMultiDimFit (Int_t dimension, EMDFPolyType type=kMonomials, Option_t *option="""");  Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Opti",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19137,Modifiability,parameteriz,parameterization,19137,"000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiDimFit ();  Empty CTOR. Do not use. ;  ;  TMultiDimFit (Int_t dimension, EMDFPolyType type=kMonomials, Option_t *option="""");  Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Opti",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19280,Modifiability,variab,variables,19280," = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiDimFit ();  Empty CTOR. Do not use. ;  ;  TMultiDimFit (Int_t dimension, EMDFPolyType type=kMonomials, Option_t *option="""");  Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMa",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19432,Modifiability,parameteriz,parameterization,19432," = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiDimFit ();  Empty CTOR. Do not use. ;  ;  TMultiDimFit (Int_t dimension, EMDFPolyType type=kMonomials, Option_t *option="""");  Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMa",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19619,Modifiability,variab,variables,19619,"mFit (Int_t dimension, EMDFPolyType type=kMonomials, Option_t *option="""");  Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMatrixD * GetCorrelationMatrix () const;  ; Double_t GetError () const;  ; Int_t * GetFunctionCodes () const;  ; const TMatrixD * GetFunctions () const;  ; virtual TList * GetHistograms () const;  ; Double_t GetMaxAngle () const;  ; Int_t GetMaxFunctions () const;  ; Int_t * GetMaxPo",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19805,Modifiability,parameteriz,parameterization,19805,"ials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMatrixD * GetCorrelationMatrix () const;  ; Double_t GetError () const;  ; Int_t * GetFunctionCodes () const;  ; const TMatrixD * GetFunctions () const;  ; virtual TList * GetHistograms () const;  ; Double_t GetMaxAngle () const;  ; Int_t GetMaxFunctions () const;  ; Int_t * GetMaxPowers () const;  ; Double_t GetMaxQuantity () const;  ; Int_t GetMaxStudy () const;  ; Int_t GetMaxTerms () const;  ; const TVectorD * GetMaxVariables () const;  ; Double_t GetMeanQuantity",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19934,Modifiability,parameteriz,parameterization,19934,"nst Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMatrixD * GetCorrelationMatrix () const;  ; Double_t GetError () const;  ; Int_t * GetFunctionCodes () const;  ; const TMatrixD * GetFunctions () const;  ; virtual TList * GetHistograms () const;  ; Double_t GetMaxAngle () const;  ; Int_t GetMaxFunctions () const;  ; Int_t * GetMaxPowers () const;  ; Double_t GetMaxQuantity () const;  ; Int_t GetMaxStudy () const;  ; Int_t GetMaxTerms () const;  ; const TVectorD * GetMaxVariables () const;  ; Double_t GetMeanQuantity () const;  ; const TVectorD * GetMeanVariables () const;  ; Double_t GetMinAngle () const;  ; Double_t GetMinQuantity () const;  ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:20041,Modifiability,parameteriz,parameterization,20041,", dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMatrixD * GetCorrelationMatrix () const;  ; Double_t GetError () const;  ; Int_t * GetFunctionCodes () const;  ; const TMatrixD * GetFunctions () const;  ; virtual TList * GetHistograms () const;  ; Double_t GetMaxAngle () const;  ; Int_t GetMaxFunctions () const;  ; Int_t * GetMaxPowers () const;  ; Double_t GetMaxQuantity () const;  ; Int_t GetMaxStudy () const;  ; Int_t GetMaxTerms () const;  ; const TVectorD * GetMaxVariables () const;  ; Double_t GetMeanQuantity () const;  ; const TVectorD * GetMeanVariables () const;  ; Double_t GetMinAngle () const;  ; Double_t GetMinQuantity () const;  ; Double_t GetMinRelativeError () const;  ; const TVectorD * GetMinVariables () const;  ; Int_t GetNCoefficients",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:23143,Modifiability,variab,variable,23143,"ainers or lists of other objects). ;  ; virtual Double_t MakeChi2 (const Double_t *coeff=nullptr);  Calculate Chi square over either the test sample. ;  ; virtual void MakeCode (const char *functionName=""MDF"", Option_t *option="""");  Generate the file <filename> with .C appended if argument doesn't end in .cxx or .C. ;  ; virtual void MakeHistograms (Option_t *option=""A"");  Make histograms of the result of the analysis. ;  ; virtual void MakeMethod (const Char_t *className=""MDF"", Option_t *option="""");  Generate the file <classname>MDF.cxx which contains the implementation of the method: ;  ; void Print (Option_t *option=""ps"") const override;  Print statistics etc. ;  ; void SetBinVarX (Int_t nbbinvarx);  ; void SetBinVarY (Int_t nbbinvary);  ; void SetMaxAngle (Double_t angle=0);  Set the max angle (in degrees) between the initial data vector to be fitted, and the new candidate function to be included in the fit. ;  ; void SetMaxFunctions (Int_t n);  ; void SetMaxPowers (const Int_t *powers);  Set the maximum power to be considered in the fit for each variable. ;  ; void SetMaxStudy (Int_t n);  ; void SetMaxTerms (Int_t terms);  ; void SetMinAngle (Double_t angle=1);  Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ;  ; void SetMinRelativeError (Double_t error);  Set the acceptable relative error for when sum of square residuals is considered minimized. ;  ; void SetPowerLimit (Double_t limit=1e-3);  Set the user parameter for the function selection. ;  ; virtual void SetPowers (const Int_t *powers, Int_t terms);  Define a user function. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:23890,Modifiability,inherit,inherited,23890,"initial data vector to be fitted, and the new candidate function to be included in the fit. ;  ; void SetMaxFunctions (Int_t n);  ; void SetMaxPowers (const Int_t *powers);  Set the maximum power to be considered in the fit for each variable. ;  ; void SetMaxStudy (Int_t n);  ; void SetMaxTerms (Int_t terms);  ; void SetMinAngle (Double_t angle=1);  Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ;  ; void SetMinRelativeError (Double_t error);  Set the acceptable relative error for when sum of square residuals is considered minimized. ;  ; void SetPowerLimit (Double_t limit=1e-3);  Set the user parameter for the function selection. ;  ; virtual void SetPowers (const Int_t *powers, Int_t terms);  Define a user function. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:25630,Modifiability,inherit,inherited,25630,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual T",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:26537,Modifiability,inherit,inheritance,26537,"oid StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:28536,Modifiability,inherit,inherits,28536,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op).",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:28653,Modifiability,inherit,inherits,28653,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base implementation is no-op). ;  ; void Obsolete (const char *method, const char *asOfVers, const char *removedFromVers) const;  Use this method ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:32334,Modifiability,inherit,inherited,32334,"style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TMultiDimFit * Instance ();  Return the static instance. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual Double_t EvalControl (const Int_t *powers) const;  PRIVATE METHOD: Calculate the control parameter from the passed powers. ;  ; virtual Double_t EvalFactor (Int_t p, Double_t x) const;  PRIVATE METHOD: Evaluate function with power p at variable value x. ;  ; virtual void MakeCandidates ();  PRIVATE METHOD: Create list of candidate functions for the parameterisation. ;  ; virtual void MakeCoefficientErrors ();  PRIVATE METHOD: Compute the errors on the coefficients. ;  ; ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:32544,Modifiability,inherit,inherited,32544,"style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static TMultiDimFit * Instance ();  Return the static instance. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual Double_t EvalControl (const Int_t *powers) const;  PRIVATE METHOD: Calculate the control parameter from the passed powers. ;  ; virtual Double_t EvalFactor (Int_t p, Double_t x) const;  PRIVATE METHOD: Evaluate function with power p at variable value x. ;  ; virtual void MakeCandidates ();  PRIVATE METHOD: Create list of candidate functions for the parameterisation. ;  ; virtual void MakeCoefficientErrors ();  PRIVATE METHOD: Compute the errors on the coefficients. ;  ; ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:33302,Modifiability,variab,variable,33302,"* Instance ();  Return the static instance. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; virtual Double_t EvalControl (const Int_t *powers) const;  PRIVATE METHOD: Calculate the control parameter from the passed powers. ;  ; virtual Double_t EvalFactor (Int_t p, Double_t x) const;  PRIVATE METHOD: Evaluate function with power p at variable value x. ;  ; virtual void MakeCandidates ();  PRIVATE METHOD: Create list of candidate functions for the parameterisation. ;  ; virtual void MakeCoefficientErrors ();  PRIVATE METHOD: Compute the errors on the coefficients. ;  ; virtual void MakeCoefficients ();  PRIVATE METHOD: Invert the model matrix B, and compute final coefficients. ;  ; virtual void MakeCorrelation ();  PRIVATE METHOD: Compute the correlation matrix. ;  ; virtual Double_t MakeGramSchmidt (Int_t function);  PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ;  ; virtual void MakeNormalized ();  PRIVATE METHOD: Normalize data to the interval [-1;1]. ;  ; virtual void MakeParameterization ();  PRIVATE METHOD: Find the parameterization over the training sample. ;  ; virtual void MakeRealCode (const char *filename, const char *classname, Option_t *option="""");  PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameteri",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:34010,Modifiability,parameteriz,parameterization,34010,"objects in the TObjectTable. ;  . Protected Member Functions; virtual Double_t EvalControl (const Int_t *powers) const;  PRIVATE METHOD: Calculate the control parameter from the passed powers. ;  ; virtual Double_t EvalFactor (Int_t p, Double_t x) const;  PRIVATE METHOD: Evaluate function with power p at variable value x. ;  ; virtual void MakeCandidates ();  PRIVATE METHOD: Create list of candidate functions for the parameterisation. ;  ; virtual void MakeCoefficientErrors ();  PRIVATE METHOD: Compute the errors on the coefficients. ;  ; virtual void MakeCoefficients ();  PRIVATE METHOD: Invert the model matrix B, and compute final coefficients. ;  ; virtual void MakeCorrelation ();  PRIVATE METHOD: Compute the correlation matrix. ;  ; virtual Double_t MakeGramSchmidt (Int_t function);  PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ;  ; virtual void MakeNormalized ();  PRIVATE METHOD: Normalize data to the interval [-1;1]. ;  ; virtual void MakeParameterization ();  PRIVATE METHOD: Find the parameterization over the training sample. ;  ; virtual void MakeRealCode (const char *filename, const char *classname, Option_t *option="""");  PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameterization on some point. ;  ; virtual Bool_t Select (const Int_t *iv);  Selection method. ;  ; virtual Bool_t TestFunction (Double_t squareResidual, Double_t dResidur);  PRIVATE METHOD: Test whether the currently considered function contributes to the fit. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fBinVarX;  Number of bin in independent variables. ;  ; Int_t fBinVarY;  Number of bin in dependent variables. ;  ; Double_t fChi2;  Chi square of fit. ;  ; TVectorD fCoefficients;  Vector of the final coefficients. ;  ; TVectorD fCoefficientsR",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:34244,Modifiability,parameteriz,parameterization,34244,"r from the passed powers. ;  ; virtual Double_t EvalFactor (Int_t p, Double_t x) const;  PRIVATE METHOD: Evaluate function with power p at variable value x. ;  ; virtual void MakeCandidates ();  PRIVATE METHOD: Create list of candidate functions for the parameterisation. ;  ; virtual void MakeCoefficientErrors ();  PRIVATE METHOD: Compute the errors on the coefficients. ;  ; virtual void MakeCoefficients ();  PRIVATE METHOD: Invert the model matrix B, and compute final coefficients. ;  ; virtual void MakeCorrelation ();  PRIVATE METHOD: Compute the correlation matrix. ;  ; virtual Double_t MakeGramSchmidt (Int_t function);  PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ;  ; virtual void MakeNormalized ();  PRIVATE METHOD: Normalize data to the interval [-1;1]. ;  ; virtual void MakeParameterization ();  PRIVATE METHOD: Find the parameterization over the training sample. ;  ; virtual void MakeRealCode (const char *filename, const char *classname, Option_t *option="""");  PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameterization on some point. ;  ; virtual Bool_t Select (const Int_t *iv);  Selection method. ;  ; virtual Bool_t TestFunction (Double_t squareResidual, Double_t dResidur);  PRIVATE METHOD: Test whether the currently considered function contributes to the fit. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fBinVarX;  Number of bin in independent variables. ;  ; Int_t fBinVarY;  Number of bin in dependent variables. ;  ; Double_t fChi2;  Chi square of fit. ;  ; TVectorD fCoefficients;  Vector of the final coefficients. ;  ; TVectorD fCoefficientsRMS;  Vector of RMS of coefficients. ;  ; Double_t fCorrelationCoeff;  Multi Correlation coefficient. ;  ; TMatrixD fCorrelationMatrix;  Correlation matrix. ;  ; Double_",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:34541,Modifiability,inherit,inherited,34541,"e model matrix B, and compute final coefficients. ;  ; virtual void MakeCorrelation ();  PRIVATE METHOD: Compute the correlation matrix. ;  ; virtual Double_t MakeGramSchmidt (Int_t function);  PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ;  ; virtual void MakeNormalized ();  PRIVATE METHOD: Normalize data to the interval [-1;1]. ;  ; virtual void MakeParameterization ();  PRIVATE METHOD: Find the parameterization over the training sample. ;  ; virtual void MakeRealCode (const char *filename, const char *classname, Option_t *option="""");  PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameterization on some point. ;  ; virtual Bool_t Select (const Int_t *iv);  Selection method. ;  ; virtual Bool_t TestFunction (Double_t squareResidual, Double_t dResidur);  PRIVATE METHOD: Test whether the currently considered function contributes to the fit. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fBinVarX;  Number of bin in independent variables. ;  ; Int_t fBinVarY;  Number of bin in dependent variables. ;  ; Double_t fChi2;  Chi square of fit. ;  ; TVectorD fCoefficients;  Vector of the final coefficients. ;  ; TVectorD fCoefficientsRMS;  Vector of RMS of coefficients. ;  ; Double_t fCorrelationCoeff;  Multi Correlation coefficient. ;  ; TMatrixD fCorrelationMatrix;  Correlation matrix. ;  ; Double_t fError;  Error from parametrization. ;  ; TVirtualFitter * fFitter;  ; Int_t * fFunctionCodes;  [fMaxFunctions] acceptance code ;  ; TMatrixD fFunctions;  Functions evaluated over sample. ;  ; Byte_t fHistogramMask;  Bit pattern of histograms used. ;  ; TList * fHistograms;  List of histograms. ;  ; Bool_t fIsUserFunction;  Flag for user defined function. ;  ; Bool_t fIsVerbose;  ; Double_t fMaxAngle;  Max angle for accepting new f",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:34792,Modifiability,variab,variables,34792,"keGramSchmidt (Int_t function);  PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ;  ; virtual void MakeNormalized ();  PRIVATE METHOD: Normalize data to the interval [-1;1]. ;  ; virtual void MakeParameterization ();  PRIVATE METHOD: Find the parameterization over the training sample. ;  ; virtual void MakeRealCode (const char *filename, const char *classname, Option_t *option="""");  PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameterization on some point. ;  ; virtual Bool_t Select (const Int_t *iv);  Selection method. ;  ; virtual Bool_t TestFunction (Double_t squareResidual, Double_t dResidur);  PRIVATE METHOD: Test whether the currently considered function contributes to the fit. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fBinVarX;  Number of bin in independent variables. ;  ; Int_t fBinVarY;  Number of bin in dependent variables. ;  ; Double_t fChi2;  Chi square of fit. ;  ; TVectorD fCoefficients;  Vector of the final coefficients. ;  ; TVectorD fCoefficientsRMS;  Vector of RMS of coefficients. ;  ; Double_t fCorrelationCoeff;  Multi Correlation coefficient. ;  ; TMatrixD fCorrelationMatrix;  Correlation matrix. ;  ; Double_t fError;  Error from parametrization. ;  ; TVirtualFitter * fFitter;  ; Int_t * fFunctionCodes;  [fMaxFunctions] acceptance code ;  ; TMatrixD fFunctions;  Functions evaluated over sample. ;  ; Byte_t fHistogramMask;  Bit pattern of histograms used. ;  ; TList * fHistograms;  List of histograms. ;  ; Bool_t fIsUserFunction;  Flag for user defined function. ;  ; Bool_t fIsVerbose;  ; Double_t fMaxAngle;  Max angle for accepting new function. ;  ; Int_t fMaxFuncNV;  fMaxFunctions*fNVariables ;  ; Int_t fMaxFunctions;  max number of functions ;  ; Int_t * fMaxPowers;  [fNVariables] maximum powe",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:34852,Modifiability,variab,variables,34852,"hogonalisation. ;  ; virtual void MakeNormalized ();  PRIVATE METHOD: Normalize data to the interval [-1;1]. ;  ; virtual void MakeParameterization ();  PRIVATE METHOD: Find the parameterization over the training sample. ;  ; virtual void MakeRealCode (const char *filename, const char *classname, Option_t *option="""");  PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameterization on some point. ;  ; virtual Bool_t Select (const Int_t *iv);  Selection method. ;  ; virtual Bool_t TestFunction (Double_t squareResidual, Double_t dResidur);  PRIVATE METHOD: Test whether the currently considered function contributes to the fit. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; Int_t fBinVarX;  Number of bin in independent variables. ;  ; Int_t fBinVarY;  Number of bin in dependent variables. ;  ; Double_t fChi2;  Chi square of fit. ;  ; TVectorD fCoefficients;  Vector of the final coefficients. ;  ; TVectorD fCoefficientsRMS;  Vector of RMS of coefficients. ;  ; Double_t fCorrelationCoeff;  Multi Correlation coefficient. ;  ; TMatrixD fCorrelationMatrix;  Correlation matrix. ;  ; Double_t fError;  Error from parametrization. ;  ; TVirtualFitter * fFitter;  ; Int_t * fFunctionCodes;  [fMaxFunctions] acceptance code ;  ; TMatrixD fFunctions;  Functions evaluated over sample. ;  ; Byte_t fHistogramMask;  Bit pattern of histograms used. ;  ; TList * fHistograms;  List of histograms. ;  ; Bool_t fIsUserFunction;  Flag for user defined function. ;  ; Bool_t fIsVerbose;  ; Double_t fMaxAngle;  Max angle for accepting new function. ;  ; Int_t fMaxFuncNV;  fMaxFunctions*fNVariables ;  ; Int_t fMaxFunctions;  max number of functions ;  ; Int_t * fMaxPowers;  [fNVariables] maximum powers ;  ; Int_t * fMaxPowersFinal;  [fNVariables] maximum powers from f",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:36159,Modifiability,variab,variables,36159,"t fError;  Error from parametrization. ;  ; TVirtualFitter * fFitter;  ; Int_t * fFunctionCodes;  [fMaxFunctions] acceptance code ;  ; TMatrixD fFunctions;  Functions evaluated over sample. ;  ; Byte_t fHistogramMask;  Bit pattern of histograms used. ;  ; TList * fHistograms;  List of histograms. ;  ; Bool_t fIsUserFunction;  Flag for user defined function. ;  ; Bool_t fIsVerbose;  ; Double_t fMaxAngle;  Max angle for accepting new function. ;  ; Int_t fMaxFuncNV;  fMaxFunctions*fNVariables ;  ; Int_t fMaxFunctions;  max number of functions ;  ; Int_t * fMaxPowers;  [fNVariables] maximum powers ;  ; Int_t * fMaxPowersFinal;  [fNVariables] maximum powers from fit; ;  ; Double_t fMaxQuantity;  Max value of dependent quantity. ;  ; Double_t fMaxResidual;  Max residual value. ;  ; Int_t fMaxResidualRow;  Row giving max residual. ;  ; Int_t fMaxStudy;  max functions to study ;  ; Int_t fMaxTerms;  Max terms expected in final expr. ;  ; TVectorD fMaxVariables;  max value of independent variables ;  ; Double_t fMeanQuantity;  Mean of dependent quantity. ;  ; TVectorD fMeanVariables;  mean value of independent variables ;  ; Double_t fMinAngle;  Min angle for accepting new function. ;  ; Double_t fMinQuantity;  Min value of dependent quantity. ;  ; Double_t fMinRelativeError;  Min relative error accepted. ;  ; Double_t fMinResidual;  Min residual value. ;  ; Int_t fMinResidualRow;  Row giving min residual. ;  ; TVectorD fMinVariables;  min value of independent variables ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of independent variables. ;  ; TVectorD fOrthCoefficients;  The model coefficients. ;  ; TMatrixD fOrthCurvatureMatrix;  Model matrix. ;  ; TVectorD fOrthFunctionNorms;  Norm of the evaluated functions. ;  ; TMatrixD fOrthFunctions;  As above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] In",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:36284,Modifiability,variab,variables,36284,"de ;  ; TMatrixD fFunctions;  Functions evaluated over sample. ;  ; Byte_t fHistogramMask;  Bit pattern of histograms used. ;  ; TList * fHistograms;  List of histograms. ;  ; Bool_t fIsUserFunction;  Flag for user defined function. ;  ; Bool_t fIsVerbose;  ; Double_t fMaxAngle;  Max angle for accepting new function. ;  ; Int_t fMaxFuncNV;  fMaxFunctions*fNVariables ;  ; Int_t fMaxFunctions;  max number of functions ;  ; Int_t * fMaxPowers;  [fNVariables] maximum powers ;  ; Int_t * fMaxPowersFinal;  [fNVariables] maximum powers from fit; ;  ; Double_t fMaxQuantity;  Max value of dependent quantity. ;  ; Double_t fMaxResidual;  Max residual value. ;  ; Int_t fMaxResidualRow;  Row giving max residual. ;  ; Int_t fMaxStudy;  max functions to study ;  ; Int_t fMaxTerms;  Max terms expected in final expr. ;  ; TVectorD fMaxVariables;  max value of independent variables ;  ; Double_t fMeanQuantity;  Mean of dependent quantity. ;  ; TVectorD fMeanVariables;  mean value of independent variables ;  ; Double_t fMinAngle;  Min angle for accepting new function. ;  ; Double_t fMinQuantity;  Min value of dependent quantity. ;  ; Double_t fMinRelativeError;  Min relative error accepted. ;  ; Double_t fMinResidual;  Min residual value. ;  ; Int_t fMinResidualRow;  Row giving min residual. ;  ; TVectorD fMinVariables;  min value of independent variables ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of independent variables. ;  ; TVectorD fOrthCoefficients;  The model coefficients. ;  ; TMatrixD fOrthCurvatureMatrix;  Model matrix. ;  ; TVectorD fOrthFunctionNorms;  Norm of the evaluated functions. ;  ; TMatrixD fOrthFunctions;  As above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fM",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:36641,Modifiability,variab,variables,36641,"fNVariables ;  ; Int_t fMaxFunctions;  max number of functions ;  ; Int_t * fMaxPowers;  [fNVariables] maximum powers ;  ; Int_t * fMaxPowersFinal;  [fNVariables] maximum powers from fit; ;  ; Double_t fMaxQuantity;  Max value of dependent quantity. ;  ; Double_t fMaxResidual;  Max residual value. ;  ; Int_t fMaxResidualRow;  Row giving max residual. ;  ; Int_t fMaxStudy;  max functions to study ;  ; Int_t fMaxTerms;  Max terms expected in final expr. ;  ; TVectorD fMaxVariables;  max value of independent variables ;  ; Double_t fMeanQuantity;  Mean of dependent quantity. ;  ; TVectorD fMeanVariables;  mean value of independent variables ;  ; Double_t fMinAngle;  Min angle for accepting new function. ;  ; Double_t fMinQuantity;  Min value of dependent quantity. ;  ; Double_t fMinRelativeError;  Min relative error accepted. ;  ; Double_t fMinResidual;  Min residual value. ;  ; Int_t fMinResidualRow;  Row giving min residual. ;  ; TVectorD fMinVariables;  min value of independent variables ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of independent variables. ;  ; TVectorD fOrthCoefficients;  The model coefficients. ;  ; TMatrixD fOrthCurvatureMatrix;  Model matrix. ;  ; TVectorD fOrthFunctionNorms;  Norm of the evaluated functions. ;  ; TMatrixD fOrthFunctions;  As above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:36759,Modifiability,variab,variables,36759,"Variables] maximum powers ;  ; Int_t * fMaxPowersFinal;  [fNVariables] maximum powers from fit; ;  ; Double_t fMaxQuantity;  Max value of dependent quantity. ;  ; Double_t fMaxResidual;  Max residual value. ;  ; Int_t fMaxResidualRow;  Row giving max residual. ;  ; Int_t fMaxStudy;  max functions to study ;  ; Int_t fMaxTerms;  Max terms expected in final expr. ;  ; TVectorD fMaxVariables;  max value of independent variables ;  ; Double_t fMeanQuantity;  Mean of dependent quantity. ;  ; TVectorD fMeanVariables;  mean value of independent variables ;  ; Double_t fMinAngle;  Min angle for accepting new function. ;  ; Double_t fMinQuantity;  Min value of dependent quantity. ;  ; Double_t fMinRelativeError;  Min relative error accepted. ;  ; Double_t fMinResidual;  Min residual value. ;  ; Int_t fMinResidualRow;  Row giving min residual. ;  ; TVectorD fMinVariables;  min value of independent variables ;  ; Int_t fNCoefficients;  Dimension of model coefficients. ;  ; Int_t fNVariables;  Number of independent variables. ;  ; TVectorD fOrthCoefficients;  The model coefficients. ;  ; TMatrixD fOrthCurvatureMatrix;  Model matrix. ;  ; TVectorD fOrthFunctionNorms;  Norm of the evaluated functions. ;  ; TMatrixD fOrthFunctions;  As above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:38293,Modifiability,variab,variables,38293,"] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize;  Size of test sample. ;  ; TVectorD fTestSqError;  Test sample, Error in quantity. ;  ; TVectorD fTestVariables;  Test sample, independent variables. ;  ; TVectorD fVariables;  Training sample, independent variables. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Private Attributes; static TMultiDimFit * fgInstance = nullptr;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiDimFit.h>. Inheritance diagram for TMultiDimFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EMDFPolyType. enum TMultiDimFit::EMDFPolyType. EnumeratorkMonomials ; kChebyshev ; kLegendre . Definition at line 18 of file TMultiDimFit.h. Constructor & Destructor Documentation. ◆ TMultiDimFit() [1/2]. TMultiDimFit::TMultiDimFit ; (; ). Empty CTOR. Do not use. ; Definition at line 433 of file TMultiDimFit.cxx. ◆ TMultiDimFit() [2/2]. TMultiDimFit::TMultiDimFit ; (; Int_t ; dimension, . EMDFPolyType ; type = kMonomia",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:38360,Modifiability,variab,variables,38360,"sion;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize;  Size of test sample. ;  ; TVectorD fTestSqError;  Test sample, Error in quantity. ;  ; TVectorD fTestVariables;  Test sample, independent variables. ;  ; TVectorD fVariables;  Training sample, independent variables. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Private Attributes; static TMultiDimFit * fgInstance = nullptr;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiDimFit.h>. Inheritance diagram for TMultiDimFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EMDFPolyType. enum TMultiDimFit::EMDFPolyType. EnumeratorkMonomials ; kChebyshev ; kLegendre . Definition at line 18 of file TMultiDimFit.h. Constructor & Destructor Documentation. ◆ TMultiDimFit() [1/2]. TMultiDimFit::TMultiDimFit ; (; ). Empty CTOR. Do not use. ; Definition at line 433 of file TMultiDimFit.cxx. ◆ TMultiDimFit() [2/2]. TMultiDimFit::TMultiDimFit ; (; Int_t ; dimension, . EMDFPolyType ; type = kMonomials, . Option_t * ; option = """" . ). Constructor Second argument is ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:38398,Modifiability,inherit,inherited,38398,", dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize;  Size of test sample. ;  ; TVectorD fTestSqError;  Test sample, Error in quantity. ;  ; TVectorD fTestVariables;  Test sample, independent variables. ;  ; TVectorD fVariables;  Training sample, independent variables. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Private Attributes; static TMultiDimFit * fgInstance = nullptr;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiDimFit.h>. Inheritance diagram for TMultiDimFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EMDFPolyType. enum TMultiDimFit::EMDFPolyType. EnumeratorkMonomials ; kChebyshev ; kLegendre . Definition at line 18 of file TMultiDimFit.h. Constructor & Destructor Documentation. ◆ TMultiDimFit() [1/2]. TMultiDimFit::TMultiDimFit ; (; ). Empty CTOR. Do not use. ; Definition at line 433 of file TMultiDimFit.cxx. ◆ TMultiDimFit() [2/2]. TMultiDimFit::TMultiDimFit ; (; Int_t ; dimension, . EMDFPolyType ; type = kMonomials, . Option_t * ; option = """" . ). Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMo",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:38579,Modifiability,inherit,inherited,38579,"  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize;  Size of test sample. ;  ; TVectorD fTestSqError;  Test sample, Error in quantity. ;  ; TVectorD fTestVariables;  Test sample, independent variables. ;  ; TVectorD fVariables;  Training sample, independent variables. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Private Attributes; static TMultiDimFit * fgInstance = nullptr;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiDimFit.h>. Inheritance diagram for TMultiDimFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EMDFPolyType. enum TMultiDimFit::EMDFPolyType. EnumeratorkMonomials ; kChebyshev ; kLegendre . Definition at line 18 of file TMultiDimFit.h. Constructor & Destructor Documentation. ◆ TMultiDimFit() [1/2]. TMultiDimFit::TMultiDimFit ; (; ). Empty CTOR. Do not use. ; Definition at line 433 of file TMultiDimFit.cxx. ◆ TMultiDimFit() [2/2]. TMultiDimFit::TMultiDimFit ; (; Int_t ; dimension, . EMDFPolyType ; type = kMonomials, . Option_t * ; option = """" . ). Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ; Options: K Compute (k)correlation matrix V Be verbose; Default is no options. ; Definition at line 508 of file TMult",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:39926,Modifiability,variab,variables,39926,"Fit.h. Constructor & Destructor Documentation. ◆ TMultiDimFit() [1/2]. TMultiDimFit::TMultiDimFit ; (; ). Empty CTOR. Do not use. ; Definition at line 433 of file TMultiDimFit.cxx. ◆ TMultiDimFit() [2/2]. TMultiDimFit::TMultiDimFit ; (; Int_t ; dimension, . EMDFPolyType ; type = kMonomials, . Option_t * ; option = """" . ). Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ; Options: K Compute (k)correlation matrix V Be verbose; Default is no options. ; Definition at line 508 of file TMultiDimFit.cxx. ◆ ~TMultiDimFit(). TMultiDimFit::~TMultiDimFit ; (; ). override . Destructor. ; Definition at line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value o",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40070,Modifiability,parameteriz,parameterization,40070,"Fit.h. Constructor & Destructor Documentation. ◆ TMultiDimFit() [1/2]. TMultiDimFit::TMultiDimFit ; (; ). Empty CTOR. Do not use. ; Definition at line 433 of file TMultiDimFit.cxx. ◆ TMultiDimFit() [2/2]. TMultiDimFit::TMultiDimFit ; (; Int_t ; dimension, . EMDFPolyType ; type = kMonomials, . Option_t * ; option = """" . ). Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ; Options: K Compute (k)correlation matrix V Be verbose; Default is no options. ; Definition at line 508 of file TMultiDimFit.cxx. ◆ ~TMultiDimFit(). TMultiDimFit::~TMultiDimFit ; (; ). override . Destructor. ; Definition at line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value o",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40106,Modifiability,variab,variables,40106,"f file TMultiDimFit.cxx. ◆ TMultiDimFit() [2/2]. TMultiDimFit::TMultiDimFit ; (; Int_t ; dimension, . EMDFPolyType ; type = kMonomials, . Option_t * ; option = """" . ). Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ; Options: K Compute (k)correlation matrix V Be verbose; Default is no options. ; Definition at line 508 of file TMultiDimFit.cxx. ◆ ~TMultiDimFit(). TMultiDimFit::~TMultiDimFit ; (; ). override . Destructor. ; Definition at line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40637,Modifiability,variab,variables,40637,"line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass * TMultiDimFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiDimFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiDimFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TMultiDimFit.h. ◆ Clear(). vo",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40789,Modifiability,parameteriz,parameterization,40789,"line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass * TMultiDimFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiDimFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiDimFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TMultiDimFit.h. ◆ Clear(). vo",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:41800,Modifiability,variab,variables,41800,"parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass * TMultiDimFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiDimFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiDimFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TMultiDimFit.h. ◆ Clear(). void TMultiDimFit::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear internal structures and variables. ; Reimplemented from TObject.; Definition at line 789 of file TMultiDimFit.cxx. ◆ DeclFileName(). static const char * TMultiDimFit::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 207 of file TMultiDimFit.h. ◆ Draw(). void TMultiDimFit::Draw ; (; Option_t * ; option = ""d""). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Definition at line 134 of file TMultiDimFit.h. ◆ Eval(). Double_t TMultiDimFit::Eval ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 876 of file TMultiDimFit.cxx. ◆ EvalControl(). Double_t TMultiDimFit::EvalControl ; (; const Int_t * ; powers); const. protectedvirtual . PRIVATE METHOD: Calculate the control parameter from the passed powe",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:42424,Modifiability,parameteriz,parameterization,42424,"ltiDimFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiDimFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TMultiDimFit.h. ◆ Clear(). void TMultiDimFit::Clear ; (; Option_t * ; option = """"). overridevirtual . Clear internal structures and variables. ; Reimplemented from TObject.; Definition at line 789 of file TMultiDimFit.cxx. ◆ DeclFileName(). static const char * TMultiDimFit::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 207 of file TMultiDimFit.h. ◆ Draw(). void TMultiDimFit::Draw ; (; Option_t * ; option = ""d""). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Definition at line 134 of file TMultiDimFit.h. ◆ Eval(). Double_t TMultiDimFit::Eval ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 876 of file TMultiDimFit.cxx. ◆ EvalControl(). Double_t TMultiDimFit::EvalControl ; (; const Int_t * ; powers); const. protectedvirtual . PRIVATE METHOD: Calculate the control parameter from the passed powers. ; Definition at line 937 of file TMultiDimFit.cxx. ◆ EvalError(). Double_t TMultiDimFit::EvalError ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization error at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 904 of file TMultiDimFit.cxx. ◆ EvalFactor(). Double_t TMultiDimFit::EvalFactor ; (; Int_t ; p, . Double_t ; x . ); const. protectedvirtual . PRIVATE METHOD: Evaluate function with power p at variable value x. ; Definition at line 952 of file TMultiDimFit.cxx. ◆ FindParameteriza",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:42988,Modifiability,parameteriz,parameterization,42988,"le containing the class declaration ; Definition at line 207 of file TMultiDimFit.h. ◆ Draw(). void TMultiDimFit::Draw ; (; Option_t * ; option = ""d""). inlineoverridevirtual . Default Draw method for all objects. ; Reimplemented from TObject.; Definition at line 134 of file TMultiDimFit.h. ◆ Eval(). Double_t TMultiDimFit::Eval ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 876 of file TMultiDimFit.cxx. ◆ EvalControl(). Double_t TMultiDimFit::EvalControl ; (; const Int_t * ; powers); const. protectedvirtual . PRIVATE METHOD: Calculate the control parameter from the passed powers. ; Definition at line 937 of file TMultiDimFit.cxx. ◆ EvalError(). Double_t TMultiDimFit::EvalError ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization error at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 904 of file TMultiDimFit.cxx. ◆ EvalFactor(). Double_t TMultiDimFit::EvalFactor ; (; Int_t ; p, . Double_t ; x . ); const. protectedvirtual . PRIVATE METHOD: Evaluate function with power p at variable value x. ; Definition at line 952 of file TMultiDimFit.cxx. ◆ FindParameterization(). void TMultiDimFit::FindParameterization ; (; Option_t * ; option = """"). virtual . Find the parameterization. ; Options: None so far; For detailed description of what this entails, please refer to the class description ; Definition at line 994 of file TMultiDimFit.cxx. ◆ Fit(). void TMultiDimFit::Fit ; (; Option_t * ; option = """"). virtual . Try to fit the found parameterisation to the test sample. ; Options M use Minuit to improve coefficients; Also, refer to class description ; Definition at line 1013 of file TMultiDimFit.cxx. ◆ GetChi2(). Double_t TMu",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:43346,Modifiability,variab,variable,43346,"; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 876 of file TMultiDimFit.cxx. ◆ EvalControl(). Double_t TMultiDimFit::EvalControl ; (; const Int_t * ; powers); const. protectedvirtual . PRIVATE METHOD: Calculate the control parameter from the passed powers. ; Definition at line 937 of file TMultiDimFit.cxx. ◆ EvalError(). Double_t TMultiDimFit::EvalError ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization error at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 904 of file TMultiDimFit.cxx. ◆ EvalFactor(). Double_t TMultiDimFit::EvalFactor ; (; Int_t ; p, . Double_t ; x . ); const. protectedvirtual . PRIVATE METHOD: Evaluate function with power p at variable value x. ; Definition at line 952 of file TMultiDimFit.cxx. ◆ FindParameterization(). void TMultiDimFit::FindParameterization ; (; Option_t * ; option = """"). virtual . Find the parameterization. ; Options: None so far; For detailed description of what this entails, please refer to the class description ; Definition at line 994 of file TMultiDimFit.cxx. ◆ Fit(). void TMultiDimFit::Fit ; (; Option_t * ; option = """"). virtual . Try to fit the found parameterisation to the test sample. ; Options M use Minuit to improve coefficients; Also, refer to class description ; Definition at line 1013 of file TMultiDimFit.cxx. ◆ GetChi2(). Double_t TMultiDimFit::GetChi2 ; (; ); const. inline . Definition at line 140 of file TMultiDimFit.h. ◆ GetCoefficients(). const TVectorD * TMultiDimFit::GetCoefficients ; (; ); const. inline . Definition at line 142 of file TMultiDimFit.h. ◆ GetCoefficientsRMS(). const TVectorD * TMultiDimFit::GetCoefficientsRMS ; (; ); const. inline . De",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:43532,Modifiability,parameteriz,parameterization,43532,"Coefficients elements long. ; Definition at line 876 of file TMultiDimFit.cxx. ◆ EvalControl(). Double_t TMultiDimFit::EvalControl ; (; const Int_t * ; powers); const. protectedvirtual . PRIVATE METHOD: Calculate the control parameter from the passed powers. ; Definition at line 937 of file TMultiDimFit.cxx. ◆ EvalError(). Double_t TMultiDimFit::EvalError ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization error at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 904 of file TMultiDimFit.cxx. ◆ EvalFactor(). Double_t TMultiDimFit::EvalFactor ; (; Int_t ; p, . Double_t ; x . ); const. protectedvirtual . PRIVATE METHOD: Evaluate function with power p at variable value x. ; Definition at line 952 of file TMultiDimFit.cxx. ◆ FindParameterization(). void TMultiDimFit::FindParameterization ; (; Option_t * ; option = """"). virtual . Find the parameterization. ; Options: None so far; For detailed description of what this entails, please refer to the class description ; Definition at line 994 of file TMultiDimFit.cxx. ◆ Fit(). void TMultiDimFit::Fit ; (; Option_t * ; option = """"). virtual . Try to fit the found parameterisation to the test sample. ; Options M use Minuit to improve coefficients; Also, refer to class description ; Definition at line 1013 of file TMultiDimFit.cxx. ◆ GetChi2(). Double_t TMultiDimFit::GetChi2 ; (; ); const. inline . Definition at line 140 of file TMultiDimFit.h. ◆ GetCoefficients(). const TVectorD * TMultiDimFit::GetCoefficients ; (; ); const. inline . Definition at line 142 of file TMultiDimFit.h. ◆ GetCoefficientsRMS(). const TVectorD * TMultiDimFit::GetCoefficientsRMS ; (; ); const. inline . Definition at line 143 of file TMultiDimFit.h. ◆ GetCorrelationMatrix(). const TMatrixD * TMultiDimFit::GetCorrelationMatrix ; (; ); const. inline . Definition at line 141 of file TMultiDimFit.h. ◆ GetError().",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:51606,Modifiability,variab,variables,51606,"f candidate functions for the parameterisation. ; See also class description ; Definition at line 1110 of file TMultiDimFit.cxx. ◆ MakeChi2(). Double_t TMultiDimFit::MakeChi2 ; (; const Double_t * ; coeff = nullptr). virtual . Calculate Chi square over either the test sample. ; The optional argument coeff is a vector of coefficients to use in the evaluation of the parameterisation. If coeff == 0, then the found coefficients is used. Used my MINUIT for fit (see TMultDimFit::Fit) ; Definition at line 1240 of file TMultiDimFit.cxx. ◆ MakeCode(). void TMultiDimFit::MakeCode ; (; const char * ; filename = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <filename> with .C appended if argument doesn't end in .cxx or .C. ; The contains the implementation of the function:; Double_t <funcname>(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the static variables: Int_t gNVariables; Int_t gNCoefficients; Double_t gDMean; Double_t gXMean[]; Double_t gXMin[]; Double_t gXMax[]; Double_t gCoefficient[]; Int_t gPower[]; are initialized. The only ROOT header file needed is Rtypes.h; See TMultiDimFit::MakeRealCode for a list of options ; Definition at line 1290 of file TMultiDimFit.cxx. ◆ MakeCoefficientErrors(). void TMultiDimFit::MakeCoefficientErrors ; (; ). protectedvirtual . PRIVATE METHOD: Compute the errors on the coefficients. ; For this to be done, the curvature matrix of the non-orthogonal functions, is computed. ; Definition at line 1307 of file TMultiDimFit.cxx. ◆ MakeCoefficients(). void TMultiDimFit::MakeCoefficients ; (; ). protectedvirtual . PRIVATE METHOD: Invert the model matrix B, and compute final coefficients. ; For a more thorough discussion of what this means, please refer to the class description; First we invert the lower triangle matrix fOrthCurvatureMatrix and store the inverted matrix in the upper triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDi",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:53404,Modifiability,parameteriz,parameterization,53404,"er triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as well as references. Please refer to the class description ; Definition at line 1504 of file TMultiDimFit.cxx. ◆ MakeHistograms(). void TMultiDimFit::MakeHistograms ; (; Option_t * ; option = ""A""). virtual . Make histograms of the result of the analysis. ; This message should be sent after having read all data points, but before finding the parameterization; Options: A All the below X Original independent variables D Original dependent variables N Normalised independent variables S Shifted dependent variables R1 Residuals versus normalised independent variables R2 Residuals versus dependent variable R3 Residuals computed on training sample R4 Residuals computed on test sample; For a description of these quantities, refer to class description ; Definition at line 1597 of file TMultiDimFit.cxx. ◆ MakeMethod(). void TMultiDimFit::MakeMethod ; (; const Char_t * ; classname = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <classname>MDF.cxx which contains the implementation of the method: ; Double_t <classname>::MDF(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fg",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:53470,Modifiability,variab,variables,53470,"er triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as well as references. Please refer to the class description ; Definition at line 1504 of file TMultiDimFit.cxx. ◆ MakeHistograms(). void TMultiDimFit::MakeHistograms ; (; Option_t * ; option = ""A""). virtual . Make histograms of the result of the analysis. ; This message should be sent after having read all data points, but before finding the parameterization; Options: A All the below X Original independent variables D Original dependent variables N Normalised independent variables S Shifted dependent variables R1 Residuals versus normalised independent variables R2 Residuals versus dependent variable R3 Residuals computed on training sample R4 Residuals computed on test sample; For a description of these quantities, refer to class description ; Definition at line 1597 of file TMultiDimFit.cxx. ◆ MakeMethod(). void TMultiDimFit::MakeMethod ; (; const Char_t * ; classname = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <classname>MDF.cxx which contains the implementation of the method: ; Double_t <classname>::MDF(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fg",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:53501,Modifiability,variab,variables,53501,"er triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as well as references. Please refer to the class description ; Definition at line 1504 of file TMultiDimFit.cxx. ◆ MakeHistograms(). void TMultiDimFit::MakeHistograms ; (; Option_t * ; option = ""A""). virtual . Make histograms of the result of the analysis. ; This message should be sent after having read all data points, but before finding the parameterization; Options: A All the below X Original independent variables D Original dependent variables N Normalised independent variables S Shifted dependent variables R1 Residuals versus normalised independent variables R2 Residuals versus dependent variable R3 Residuals computed on training sample R4 Residuals computed on test sample; For a description of these quantities, refer to class description ; Definition at line 1597 of file TMultiDimFit.cxx. ◆ MakeMethod(). void TMultiDimFit::MakeMethod ; (; const Char_t * ; classname = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <classname>MDF.cxx which contains the implementation of the method: ; Double_t <classname>::MDF(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fg",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:53536,Modifiability,variab,variables,53536,"er triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as well as references. Please refer to the class description ; Definition at line 1504 of file TMultiDimFit.cxx. ◆ MakeHistograms(). void TMultiDimFit::MakeHistograms ; (; Option_t * ; option = ""A""). virtual . Make histograms of the result of the analysis. ; This message should be sent after having read all data points, but before finding the parameterization; Options: A All the below X Original independent variables D Original dependent variables N Normalised independent variables S Shifted dependent variables R1 Residuals versus normalised independent variables R2 Residuals versus dependent variable R3 Residuals computed on training sample R4 Residuals computed on test sample; For a description of these quantities, refer to class description ; Definition at line 1597 of file TMultiDimFit.cxx. ◆ MakeMethod(). void TMultiDimFit::MakeMethod ; (; const Char_t * ; classname = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <classname>MDF.cxx which contains the implementation of the method: ; Double_t <classname>::MDF(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fg",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:53566,Modifiability,variab,variables,53566,"er triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as well as references. Please refer to the class description ; Definition at line 1504 of file TMultiDimFit.cxx. ◆ MakeHistograms(). void TMultiDimFit::MakeHistograms ; (; Option_t * ; option = ""A""). virtual . Make histograms of the result of the analysis. ; This message should be sent after having read all data points, but before finding the parameterization; Options: A All the below X Original independent variables D Original dependent variables N Normalised independent variables S Shifted dependent variables R1 Residuals versus normalised independent variables R2 Residuals versus dependent variable R3 Residuals computed on training sample R4 Residuals computed on test sample; For a description of these quantities, refer to class description ; Definition at line 1597 of file TMultiDimFit.cxx. ◆ MakeMethod(). void TMultiDimFit::MakeMethod ; (; const Char_t * ; classname = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <classname>MDF.cxx which contains the implementation of the method: ; Double_t <classname>::MDF(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fg",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:53619,Modifiability,variab,variables,53619,"er triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as well as references. Please refer to the class description ; Definition at line 1504 of file TMultiDimFit.cxx. ◆ MakeHistograms(). void TMultiDimFit::MakeHistograms ; (; Option_t * ; option = ""A""). virtual . Make histograms of the result of the analysis. ; This message should be sent after having read all data points, but before finding the parameterization; Options: A All the below X Original independent variables D Original dependent variables N Normalised independent variables S Shifted dependent variables R1 Residuals versus normalised independent variables R2 Residuals versus dependent variable R3 Residuals computed on training sample R4 Residuals computed on test sample; For a description of these quantities, refer to class description ; Definition at line 1597 of file TMultiDimFit.cxx. ◆ MakeMethod(). void TMultiDimFit::MakeMethod ; (; const Char_t * ; classname = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <classname>MDF.cxx which contains the implementation of the method: ; Double_t <classname>::MDF(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fg",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:53659,Modifiability,variab,variable,53659,"er triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as well as references. Please refer to the class description ; Definition at line 1504 of file TMultiDimFit.cxx. ◆ MakeHistograms(). void TMultiDimFit::MakeHistograms ; (; Option_t * ; option = ""A""). virtual . Make histograms of the result of the analysis. ; This message should be sent after having read all data points, but before finding the parameterization; Options: A All the below X Original independent variables D Original dependent variables N Normalised independent variables S Shifted dependent variables R1 Residuals versus normalised independent variables R2 Residuals versus dependent variable R3 Residuals computed on training sample R4 Residuals computed on test sample; For a description of these quantities, refer to class description ; Definition at line 1597 of file TMultiDimFit.cxx. ◆ MakeMethod(). void TMultiDimFit::MakeMethod ; (; const Char_t * ; classname = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <classname>MDF.cxx which contains the implementation of the method: ; Double_t <classname>::MDF(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fg",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:54904,Modifiability,variab,variables,54904,"le_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fgNVariables]; are initialized, and assumed to exist. The class declaration is assumed to be in <classname>.h and assumed to be provided by the user.; See alsoTMultiDimFit::MakeRealCode for a list of options; The minimal class definition is: class <classname> {; public:; Int_t <classname>::fgNVariables; // Number of variables; Int_t <classname>::fgNCoefficients; // Number of terms; Double_t <classname>::fgDMean; // Mean from training sample; Double_t <classname>::fgXMean[]; // Mean from training sample; Double_t <classname>::fgXMin[]; // Min from training sample; Double_t <classname>::fgXMax[]; // Max from training sample; Double_t <classname>::fgCoefficient[]; // Coefficients; Int_t <classname>::fgPower[]; // Function powers; ; Double_t Eval(Double_t *x);; };; TMultiDimFit::Evalvirtual Double_t Eval(const Double_t *x, const Double_t *coeff=nullptr) constEvaluate parameterization at point x.Definition TMultiDimFit.cxx:876; double; xDouble_t x[n]Definition legend1.C:17; Whether the method <classname>::Eval should be static or not, is up to the user. ; Definition at line 1744 of file TMultiDimFit.cxx. ◆ MakeNormalized(). void TMultiDimFit::MakeNormalized ; (; ). protectedvirtual . PRIVATE METHOD: Normalize data to the interval [-1;1]. ; This is needed for the classes method to work. ; Definition at line 1756 of file TMultiDimFit.cxx. ◆ MakeParameterization(). void TMultiDimFit::MakeParameterization ; (; ). protectedvirtual . PRIVATE METHOD: Find the parameterization over the training sample. ; A full acc",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:55462,Modifiability,parameteriz,parameterization,55462,"le_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fgNVariables]; are initialized, and assumed to exist. The class declaration is assumed to be in <classname>.h and assumed to be provided by the user.; See alsoTMultiDimFit::MakeRealCode for a list of options; The minimal class definition is: class <classname> {; public:; Int_t <classname>::fgNVariables; // Number of variables; Int_t <classname>::fgNCoefficients; // Number of terms; Double_t <classname>::fgDMean; // Mean from training sample; Double_t <classname>::fgXMean[]; // Mean from training sample; Double_t <classname>::fgXMin[]; // Min from training sample; Double_t <classname>::fgXMax[]; // Max from training sample; Double_t <classname>::fgCoefficient[]; // Coefficients; Int_t <classname>::fgPower[]; // Function powers; ; Double_t Eval(Double_t *x);; };; TMultiDimFit::Evalvirtual Double_t Eval(const Double_t *x, const Double_t *coeff=nullptr) constEvaluate parameterization at point x.Definition TMultiDimFit.cxx:876; double; xDouble_t x[n]Definition legend1.C:17; Whether the method <classname>::Eval should be static or not, is up to the user. ; Definition at line 1744 of file TMultiDimFit.cxx. ◆ MakeNormalized(). void TMultiDimFit::MakeNormalized ; (; ). protectedvirtual . PRIVATE METHOD: Normalize data to the interval [-1;1]. ; This is needed for the classes method to work. ; Definition at line 1756 of file TMultiDimFit.cxx. ◆ MakeParameterization(). void TMultiDimFit::MakeParameterization ; (; ). protectedvirtual . PRIVATE METHOD: Find the parameterization over the training sample. ; A full acc",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:56058,Modifiability,parameteriz,parameterization,56058,"/ Mean from training sample; Double_t <classname>::fgXMin[]; // Min from training sample; Double_t <classname>::fgXMax[]; // Max from training sample; Double_t <classname>::fgCoefficient[]; // Coefficients; Int_t <classname>::fgPower[]; // Function powers; ; Double_t Eval(Double_t *x);; };; TMultiDimFit::Evalvirtual Double_t Eval(const Double_t *x, const Double_t *coeff=nullptr) constEvaluate parameterization at point x.Definition TMultiDimFit.cxx:876; double; xDouble_t x[n]Definition legend1.C:17; Whether the method <classname>::Eval should be static or not, is up to the user. ; Definition at line 1744 of file TMultiDimFit.cxx. ◆ MakeNormalized(). void TMultiDimFit::MakeNormalized ; (; ). protectedvirtual . PRIVATE METHOD: Normalize data to the interval [-1;1]. ; This is needed for the classes method to work. ; Definition at line 1756 of file TMultiDimFit.cxx. ◆ MakeParameterization(). void TMultiDimFit::MakeParameterization ; (; ). protectedvirtual . PRIVATE METHOD: Find the parameterization over the training sample. ; A full account of the algorithm is given in the class description ; Definition at line 1810 of file TMultiDimFit.cxx. ◆ MakeRealCode(). void TMultiDimFit::MakeRealCode ; (; const char * ; filename, . const char * ; classname, . Option_t * ; option = """" . ). protectedvirtual . PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameterization on some point. ; It's called by TMultiDimFit::MakeCode and TMultiDimFit::MakeMethod.; The options are: NONE so far ; Definition at line 1963 of file TMultiDimFit.cxx. ◆ Print(). void TMultiDimFit::Print ; (; Option_t * ; option = ""ps""); const. overridevirtual . Print statistics etc. ; Options are P Parameters S Statistics C Coefficients R Result of parameterisation F Result of fit K Correlation Matrix M Pretty print formula ; Reimplemented from TObject.; Definition at line 2158 of file TMultiDimFit.cxx. ◆ Select(). Bool_t TMultiDimFit::Select ; (; const Int_t * ; iv). pro",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:56471,Modifiability,parameteriz,parameterization,56471,"ullptr) constEvaluate parameterization at point x.Definition TMultiDimFit.cxx:876; double; xDouble_t x[n]Definition legend1.C:17; Whether the method <classname>::Eval should be static or not, is up to the user. ; Definition at line 1744 of file TMultiDimFit.cxx. ◆ MakeNormalized(). void TMultiDimFit::MakeNormalized ; (; ). protectedvirtual . PRIVATE METHOD: Normalize data to the interval [-1;1]. ; This is needed for the classes method to work. ; Definition at line 1756 of file TMultiDimFit.cxx. ◆ MakeParameterization(). void TMultiDimFit::MakeParameterization ; (; ). protectedvirtual . PRIVATE METHOD: Find the parameterization over the training sample. ; A full account of the algorithm is given in the class description ; Definition at line 1810 of file TMultiDimFit.cxx. ◆ MakeRealCode(). void TMultiDimFit::MakeRealCode ; (; const char * ; filename, . const char * ; classname, . Option_t * ; option = """" . ). protectedvirtual . PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameterization on some point. ; It's called by TMultiDimFit::MakeCode and TMultiDimFit::MakeMethod.; The options are: NONE so far ; Definition at line 1963 of file TMultiDimFit.cxx. ◆ Print(). void TMultiDimFit::Print ; (; Option_t * ; option = ""ps""); const. overridevirtual . Print statistics etc. ; Options are P Parameters S Statistics C Coefficients R Result of parameterisation F Result of fit K Correlation Matrix M Pretty print formula ; Reimplemented from TObject.; Definition at line 2158 of file TMultiDimFit.cxx. ◆ Select(). Bool_t TMultiDimFit::Select ; (; const Int_t * ; iv). protectedvirtual . Selection method. ; User can override this method for specialized selection of acceptable functions in fit. Default is to select all. This message is sent during the build-up of the function candidates table once for each set of powers in variables. Notice, that the argument array contains the powers PLUS ONE. For example, to De select the function f = x1^2",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:57321,Modifiability,variab,variables,57321,"(; const char * ; filename, . const char * ; classname, . Option_t * ; option = """" . ). protectedvirtual . PRIVATE METHOD: This is the method that actually generates the code for the evaluation the parameterization on some point. ; It's called by TMultiDimFit::MakeCode and TMultiDimFit::MakeMethod.; The options are: NONE so far ; Definition at line 1963 of file TMultiDimFit.cxx. ◆ Print(). void TMultiDimFit::Print ; (; Option_t * ; option = ""ps""); const. overridevirtual . Print statistics etc. ; Options are P Parameters S Statistics C Coefficients R Result of parameterisation F Result of fit K Correlation Matrix M Pretty print formula ; Reimplemented from TObject.; Definition at line 2158 of file TMultiDimFit.cxx. ◆ Select(). Bool_t TMultiDimFit::Select ; (; const Int_t * ; iv). protectedvirtual . Selection method. ; User can override this method for specialized selection of acceptable functions in fit. Default is to select all. This message is sent during the build-up of the function candidates table once for each set of powers in variables. Notice, that the argument array contains the powers PLUS ONE. For example, to De select the function f = x1^2 * x2^4 * x3^5, this method should return kFALSE if given the argument { 3, 4, 6 } ; Definition at line 2365 of file TMultiDimFit.cxx. ◆ SetBinVarX(). void TMultiDimFit::SetBinVarX ; (; Int_t ; nbbinvarx). inline . Definition at line 195 of file TMultiDimFit.h. ◆ SetBinVarY(). void TMultiDimFit::SetBinVarY ; (; Int_t ; nbbinvary). inline . Definition at line 196 of file TMultiDimFit.h. ◆ SetMaxAngle(). void TMultiDimFit::SetMaxAngle ; (; Double_t ; ang = 0). Set the max angle (in degrees) between the initial data vector to be fitted, and the new candidate function to be included in the fit. ; By default it is 0, which automatically chooses another selection criteria. See also class description ; Definition at line 2377 of file TMultiDimFit.cxx. ◆ SetMaxFunctions(). void TMultiDimFit::SetMaxFunctions ; (; Int_t ; n). inli",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:58464,Modifiability,variab,variable,58464,"1^2 * x2^4 * x3^5, this method should return kFALSE if given the argument { 3, 4, 6 } ; Definition at line 2365 of file TMultiDimFit.cxx. ◆ SetBinVarX(). void TMultiDimFit::SetBinVarX ; (; Int_t ; nbbinvarx). inline . Definition at line 195 of file TMultiDimFit.h. ◆ SetBinVarY(). void TMultiDimFit::SetBinVarY ; (; Int_t ; nbbinvary). inline . Definition at line 196 of file TMultiDimFit.h. ◆ SetMaxAngle(). void TMultiDimFit::SetMaxAngle ; (; Double_t ; ang = 0). Set the max angle (in degrees) between the initial data vector to be fitted, and the new candidate function to be included in the fit. ; By default it is 0, which automatically chooses another selection criteria. See also class description ; Definition at line 2377 of file TMultiDimFit.cxx. ◆ SetMaxFunctions(). void TMultiDimFit::SetMaxFunctions ; (; Int_t ; n). inline . Definition at line 198 of file TMultiDimFit.h. ◆ SetMaxPowers(). void TMultiDimFit::SetMaxPowers ; (; const Int_t * ; powers). Set the maximum power to be considered in the fit for each variable. ; See also class description ; Definition at line 2443 of file TMultiDimFit.cxx. ◆ SetMaxStudy(). void TMultiDimFit::SetMaxStudy ; (; Int_t ; n). inline . Definition at line 200 of file TMultiDimFit.h. ◆ SetMaxTerms(). void TMultiDimFit::SetMaxTerms ; (; Int_t ; terms). inline . Definition at line 201 of file TMultiDimFit.h. ◆ SetMinAngle(). void TMultiDimFit::SetMinAngle ; (; Double_t ; ang = 1). Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ; See also class description ; Definition at line 2393 of file TMultiDimFit.cxx. ◆ SetMinRelativeError(). void TMultiDimFit::SetMinRelativeError ; (; Double_t ; error). Set the acceptable relative error for when sum of square residuals is considered minimized. ; For a full account, refer to the class description ; Definition at line 2458 of file TMultiDimFit.cxx. ◆ SetPowerLimit(). void TMultiDimFit::SetPowerLimit ; (; Double_t ; lim",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:59575,Modifiability,variab,variable,59575,"t_t ; n). inline . Definition at line 200 of file TMultiDimFit.h. ◆ SetMaxTerms(). void TMultiDimFit::SetMaxTerms ; (; Int_t ; terms). inline . Definition at line 201 of file TMultiDimFit.h. ◆ SetMinAngle(). void TMultiDimFit::SetMinAngle ; (; Double_t ; ang = 1). Set the min angle (in degrees) between a new candidate function and the subspace spanned by the previously accepted functions. ; See also class description ; Definition at line 2393 of file TMultiDimFit.cxx. ◆ SetMinRelativeError(). void TMultiDimFit::SetMinRelativeError ; (; Double_t ; error). Set the acceptable relative error for when sum of square residuals is considered minimized. ; For a full account, refer to the class description ; Definition at line 2458 of file TMultiDimFit.cxx. ◆ SetPowerLimit(). void TMultiDimFit::SetPowerLimit ; (; Double_t ; limit = 1e-3). Set the user parameter for the function selection. ; The bigger the limit, the more functions are used. The meaning of this variable is defined in the class description ; Definition at line 2433 of file TMultiDimFit.cxx. ◆ SetPowers(). void TMultiDimFit::SetPowers ; (; const Int_t * ; powers, . Int_t ; terms . ). virtual . Define a user function. ; The input array must be of the form (p11, ..., p1N, ... ,pL1, ..., pLN) Where N is the dimension of the data sample, L is the number of terms (given in terms) and the first number, labels the term, the second the variable. More information is given in the class description ; Definition at line 2413 of file TMultiDimFit.cxx. ◆ Streamer(). void TMultiDimFit::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiDimFit::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 207 of file TMultiDimFit.h. ◆ TestFunction(). Bool_t TMultiDimFit::TestFunction ; (; Double_t ; squareResidual, . Double_t ; dResidur . ). protectedvirtual . PRIVATE METHOD: Test whether the currently ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:60015,Modifiability,variab,variable,60015,"e subspace spanned by the previously accepted functions. ; See also class description ; Definition at line 2393 of file TMultiDimFit.cxx. ◆ SetMinRelativeError(). void TMultiDimFit::SetMinRelativeError ; (; Double_t ; error). Set the acceptable relative error for when sum of square residuals is considered minimized. ; For a full account, refer to the class description ; Definition at line 2458 of file TMultiDimFit.cxx. ◆ SetPowerLimit(). void TMultiDimFit::SetPowerLimit ; (; Double_t ; limit = 1e-3). Set the user parameter for the function selection. ; The bigger the limit, the more functions are used. The meaning of this variable is defined in the class description ; Definition at line 2433 of file TMultiDimFit.cxx. ◆ SetPowers(). void TMultiDimFit::SetPowers ; (; const Int_t * ; powers, . Int_t ; terms . ). virtual . Define a user function. ; The input array must be of the form (p11, ..., p1N, ... ,pL1, ..., pLN) Where N is the dimension of the data sample, L is the number of terms (given in terms) and the first number, labels the term, the second the variable. More information is given in the class description ; Definition at line 2413 of file TMultiDimFit.cxx. ◆ Streamer(). void TMultiDimFit::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiDimFit::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 207 of file TMultiDimFit.h. ◆ TestFunction(). Bool_t TMultiDimFit::TestFunction ; (; Double_t ; squareResidual, . Double_t ; dResidur . ). protectedvirtual . PRIVATE METHOD: Test whether the currently considered function contributes to the fit. ; See also class description ; Definition at line 2470 of file TMultiDimFit.cxx. Member Data Documentation. ◆ fBinVarX. Int_t TMultiDimFit::fBinVarX. protected . Number of bin in independent variables. ; Definition at line 98 of file TMultiDimFit.h. ◆ fBinVarY. Int_t TMultiDimFit::fBinVarY.",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:60846,Modifiability,variab,variables,60846,"m (p11, ..., p1N, ... ,pL1, ..., pLN) Where N is the dimension of the data sample, L is the number of terms (given in terms) and the first number, labels the term, the second the variable. More information is given in the class description ; Definition at line 2413 of file TMultiDimFit.cxx. ◆ Streamer(). void TMultiDimFit::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiDimFit::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 207 of file TMultiDimFit.h. ◆ TestFunction(). Bool_t TMultiDimFit::TestFunction ; (; Double_t ; squareResidual, . Double_t ; dResidur . ). protectedvirtual . PRIVATE METHOD: Test whether the currently considered function contributes to the fit. ; See also class description ; Definition at line 2470 of file TMultiDimFit.cxx. Member Data Documentation. ◆ fBinVarX. Int_t TMultiDimFit::fBinVarX. protected . Number of bin in independent variables. ; Definition at line 98 of file TMultiDimFit.h. ◆ fBinVarY. Int_t TMultiDimFit::fBinVarY. protected . Number of bin in dependent variables. ; Definition at line 99 of file TMultiDimFit.h. ◆ fChi2. Double_t TMultiDimFit::fChi2. protected . Chi square of fit. ; Definition at line 85 of file TMultiDimFit.h. ◆ fCoefficients. TVectorD TMultiDimFit::fCoefficients. protected . Vector of the final coefficients. ; Definition at line 82 of file TMultiDimFit.h. ◆ fCoefficientsRMS. TVectorD TMultiDimFit::fCoefficientsRMS. protected . Vector of RMS of coefficients. ; Definition at line 83 of file TMultiDimFit.h. ◆ fCorrelationCoeff. Double_t TMultiDimFit::fCorrelationCoeff. protected . Multi Correlation coefficient. ; Definition at line 92 of file TMultiDimFit.h. ◆ fCorrelationMatrix. TMatrixD TMultiDimFit::fCorrelationMatrix. protected . Correlation matrix. ; Definition at line 93 of file TMultiDimFit.h. ◆ fError. Double_t TMultiDimFit::fError. protected . Error from parametri",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:60986,Modifiability,variab,variables,60986,"mber, labels the term, the second the variable. More information is given in the class description ; Definition at line 2413 of file TMultiDimFit.cxx. ◆ Streamer(). void TMultiDimFit::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiDimFit::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 207 of file TMultiDimFit.h. ◆ TestFunction(). Bool_t TMultiDimFit::TestFunction ; (; Double_t ; squareResidual, . Double_t ; dResidur . ). protectedvirtual . PRIVATE METHOD: Test whether the currently considered function contributes to the fit. ; See also class description ; Definition at line 2470 of file TMultiDimFit.cxx. Member Data Documentation. ◆ fBinVarX. Int_t TMultiDimFit::fBinVarX. protected . Number of bin in independent variables. ; Definition at line 98 of file TMultiDimFit.h. ◆ fBinVarY. Int_t TMultiDimFit::fBinVarY. protected . Number of bin in dependent variables. ; Definition at line 99 of file TMultiDimFit.h. ◆ fChi2. Double_t TMultiDimFit::fChi2. protected . Chi square of fit. ; Definition at line 85 of file TMultiDimFit.h. ◆ fCoefficients. TVectorD TMultiDimFit::fCoefficients. protected . Vector of the final coefficients. ; Definition at line 82 of file TMultiDimFit.h. ◆ fCoefficientsRMS. TVectorD TMultiDimFit::fCoefficientsRMS. protected . Vector of RMS of coefficients. ; Definition at line 83 of file TMultiDimFit.h. ◆ fCorrelationCoeff. Double_t TMultiDimFit::fCorrelationCoeff. protected . Multi Correlation coefficient. ; Definition at line 92 of file TMultiDimFit.h. ◆ fCorrelationMatrix. TMatrixD TMultiDimFit::fCorrelationMatrix. protected . Correlation matrix. ; Definition at line 93 of file TMultiDimFit.h. ◆ fError. Double_t TMultiDimFit::fError. protected . Error from parametrization. ; Definition at line 88 of file TMultiDimFit.h. ◆ fFitter. TVirtualFitter* TMultiDimFit::fFitter. protected . Definition at line 101 ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:64431,Modifiability,variab,variables,64431,wers ; Definition at line 54 of file TMultiDimFit.h. ◆ fMaxPowersFinal. Int_t* TMultiDimFit::fMaxPowersFinal. protected . [fNVariables] maximum powers from fit; ; Definition at line 68 of file TMultiDimFit.h. ◆ fMaxQuantity. Double_t TMultiDimFit::fMaxQuantity. protected . Max value of dependent quantity. ; Definition at line 31 of file TMultiDimFit.h. ◆ fMaxResidual. Double_t TMultiDimFit::fMaxResidual. protected . Max residual value. ; Definition at line 73 of file TMultiDimFit.h. ◆ fMaxResidualRow. Int_t TMultiDimFit::fMaxResidualRow. protected . Row giving max residual. ; Definition at line 75 of file TMultiDimFit.h. ◆ fMaxStudy. Int_t TMultiDimFit::fMaxStudy. protected . max functions to study ; Definition at line 61 of file TMultiDimFit.h. ◆ fMaxTerms. Int_t TMultiDimFit::fMaxTerms. protected . Max terms expected in final expr. ; Definition at line 52 of file TMultiDimFit.h. ◆ fMaxVariables. TVectorD TMultiDimFit::fMaxVariables. protected . max value of independent variables ; Definition at line 39 of file TMultiDimFit.h. ◆ fMeanQuantity. Double_t TMultiDimFit::fMeanQuantity. protected . Mean of dependent quantity. ; Definition at line 30 of file TMultiDimFit.h. ◆ fMeanVariables. TVectorD TMultiDimFit::fMeanVariables. protected . mean value of independent variables ; Definition at line 38 of file TMultiDimFit.h. ◆ fMinAngle. Double_t TMultiDimFit::fMinAngle. protected . Min angle for accepting new function. ; Definition at line 50 of file TMultiDimFit.h. ◆ fMinQuantity. Double_t TMultiDimFit::fMinQuantity. protected . Min value of dependent quantity. ; Definition at line 32 of file TMultiDimFit.h. ◆ fMinRelativeError. Double_t TMultiDimFit::fMinRelativeError. protected . Min relative error accepted. ; Definition at line 53 of file TMultiDimFit.h. ◆ fMinResidual. Double_t TMultiDimFit::fMinResidual. protected . Min residual value. ; Definition at line 74 of file TMultiDimFit.h. ◆ fMinResidualRow. Int_t TMultiDimFit::fMinResidualRow. protected . Row giving min re,MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:64727,Modifiability,variab,variables,64727, quantity. ; Definition at line 31 of file TMultiDimFit.h. ◆ fMaxResidual. Double_t TMultiDimFit::fMaxResidual. protected . Max residual value. ; Definition at line 73 of file TMultiDimFit.h. ◆ fMaxResidualRow. Int_t TMultiDimFit::fMaxResidualRow. protected . Row giving max residual. ; Definition at line 75 of file TMultiDimFit.h. ◆ fMaxStudy. Int_t TMultiDimFit::fMaxStudy. protected . max functions to study ; Definition at line 61 of file TMultiDimFit.h. ◆ fMaxTerms. Int_t TMultiDimFit::fMaxTerms. protected . Max terms expected in final expr. ; Definition at line 52 of file TMultiDimFit.h. ◆ fMaxVariables. TVectorD TMultiDimFit::fMaxVariables. protected . max value of independent variables ; Definition at line 39 of file TMultiDimFit.h. ◆ fMeanQuantity. Double_t TMultiDimFit::fMeanQuantity. protected . Mean of dependent quantity. ; Definition at line 30 of file TMultiDimFit.h. ◆ fMeanVariables. TVectorD TMultiDimFit::fMeanVariables. protected . mean value of independent variables ; Definition at line 38 of file TMultiDimFit.h. ◆ fMinAngle. Double_t TMultiDimFit::fMinAngle. protected . Min angle for accepting new function. ; Definition at line 50 of file TMultiDimFit.h. ◆ fMinQuantity. Double_t TMultiDimFit::fMinQuantity. protected . Min value of dependent quantity. ; Definition at line 32 of file TMultiDimFit.h. ◆ fMinRelativeError. Double_t TMultiDimFit::fMinRelativeError. protected . Min relative error accepted. ; Definition at line 53 of file TMultiDimFit.h. ◆ fMinResidual. Double_t TMultiDimFit::fMinResidual. protected . Min residual value. ; Definition at line 74 of file TMultiDimFit.h. ◆ fMinResidualRow. Int_t TMultiDimFit::fMinResidualRow. protected . Row giving min residual. ; Definition at line 76 of file TMultiDimFit.h. ◆ fMinVariables. TVectorD TMultiDimFit::fMinVariables. protected . min value of independent variables ; Definition at line 40 of file TMultiDimFit.h. ◆ fNCoefficients. Int_t TMultiDimFit::fNCoefficients. protected . Dimension of model coef,MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:65594,Modifiability,variab,variables,65594,"of file TMultiDimFit.h. ◆ fMeanVariables. TVectorD TMultiDimFit::fMeanVariables. protected . mean value of independent variables ; Definition at line 38 of file TMultiDimFit.h. ◆ fMinAngle. Double_t TMultiDimFit::fMinAngle. protected . Min angle for accepting new function. ; Definition at line 50 of file TMultiDimFit.h. ◆ fMinQuantity. Double_t TMultiDimFit::fMinQuantity. protected . Min value of dependent quantity. ; Definition at line 32 of file TMultiDimFit.h. ◆ fMinRelativeError. Double_t TMultiDimFit::fMinRelativeError. protected . Min relative error accepted. ; Definition at line 53 of file TMultiDimFit.h. ◆ fMinResidual. Double_t TMultiDimFit::fMinResidual. protected . Min residual value. ; Definition at line 74 of file TMultiDimFit.h. ◆ fMinResidualRow. Int_t TMultiDimFit::fMinResidualRow. protected . Row giving min residual. ; Definition at line 76 of file TMultiDimFit.h. ◆ fMinVariables. TVectorD TMultiDimFit::fMinVariables. protected . min value of independent variables ; Definition at line 40 of file TMultiDimFit.h. ◆ fNCoefficients. Int_t TMultiDimFit::fNCoefficients. protected . Dimension of model coefficients. ; Definition at line 79 of file TMultiDimFit.h. ◆ fNVariables. Int_t TMultiDimFit::fNVariables. protected . Number of independent variables. ; Definition at line 37 of file TMultiDimFit.h. ◆ fOrthCoefficients. TVectorD TMultiDimFit::fOrthCoefficients. protected . The model coefficients. ; Definition at line 80 of file TMultiDimFit.h. ◆ fOrthCurvatureMatrix. TMatrixD TMultiDimFit::fOrthCurvatureMatrix. protected . Model matrix. ; Definition at line 81 of file TMultiDimFit.h. ◆ fOrthFunctionNorms. TVectorD TMultiDimFit::fOrthFunctionNorms. protected . Norm of the evaluated functions. ; Definition at line 65 of file TMultiDimFit.h. ◆ fOrthFunctions. TMatrixD TMultiDimFit::fOrthFunctions. protected . As above, but orthogonalised. ; Definition at line 64 of file TMultiDimFit.h. ◆ fParameterisationCode. Int_t TMultiDimFit::fParameterisationCode. protec",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:65881,Modifiability,variab,variables,65881,"nction. ; Definition at line 50 of file TMultiDimFit.h. ◆ fMinQuantity. Double_t TMultiDimFit::fMinQuantity. protected . Min value of dependent quantity. ; Definition at line 32 of file TMultiDimFit.h. ◆ fMinRelativeError. Double_t TMultiDimFit::fMinRelativeError. protected . Min relative error accepted. ; Definition at line 53 of file TMultiDimFit.h. ◆ fMinResidual. Double_t TMultiDimFit::fMinResidual. protected . Min residual value. ; Definition at line 74 of file TMultiDimFit.h. ◆ fMinResidualRow. Int_t TMultiDimFit::fMinResidualRow. protected . Row giving min residual. ; Definition at line 76 of file TMultiDimFit.h. ◆ fMinVariables. TVectorD TMultiDimFit::fMinVariables. protected . min value of independent variables ; Definition at line 40 of file TMultiDimFit.h. ◆ fNCoefficients. Int_t TMultiDimFit::fNCoefficients. protected . Dimension of model coefficients. ; Definition at line 79 of file TMultiDimFit.h. ◆ fNVariables. Int_t TMultiDimFit::fNVariables. protected . Number of independent variables. ; Definition at line 37 of file TMultiDimFit.h. ◆ fOrthCoefficients. TVectorD TMultiDimFit::fOrthCoefficients. protected . The model coefficients. ; Definition at line 80 of file TMultiDimFit.h. ◆ fOrthCurvatureMatrix. TMatrixD TMultiDimFit::fOrthCurvatureMatrix. protected . Model matrix. ; Definition at line 81 of file TMultiDimFit.h. ◆ fOrthFunctionNorms. TVectorD TMultiDimFit::fOrthFunctionNorms. protected . Norm of the evaluated functions. ; Definition at line 65 of file TMultiDimFit.h. ◆ fOrthFunctions. TMatrixD TMultiDimFit::fOrthFunctions. protected . As above, but orthogonalised. ; Definition at line 64 of file TMultiDimFit.h. ◆ fParameterisationCode. Int_t TMultiDimFit::fParameterisationCode. protected . Exit code of parameterisation. ; Definition at line 86 of file TMultiDimFit.h. ◆ fPolyType. EMDFPolyType TMultiDimFit::fPolyType. protected . Fit object (MINUIT) ; Type of polynomials to use ; Definition at line 103 of file TMultiDimFit.h. ◆ fPowerIndex. Int_t",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:69656,Modifiability,variab,variables,69656,"protected . Training sample, error in quantity. ; Definition at line 29 of file TMultiDimFit.h. ◆ fSumSqAvgQuantity. Double_t TMultiDimFit::fSumSqAvgQuantity. protected . Sum of squares away from mean. ; Definition at line 34 of file TMultiDimFit.h. ◆ fSumSqQuantity. Double_t TMultiDimFit::fSumSqQuantity. protected . SumSquare of dependent quantity. ; Definition at line 33 of file TMultiDimFit.h. ◆ fSumSqResidual. Double_t TMultiDimFit::fSumSqResidual. protected . Sum of Square residuals. ; Definition at line 77 of file TMultiDimFit.h. ◆ fTestCorrelationCoeff. Double_t TMultiDimFit::fTestCorrelationCoeff. protected . Multi Correlation coefficient. ; Definition at line 94 of file TMultiDimFit.h. ◆ fTestError. Double_t TMultiDimFit::fTestError. protected . Error from test. ; Definition at line 89 of file TMultiDimFit.h. ◆ fTestPrecision. Double_t TMultiDimFit::fTestPrecision. protected . Relative precision of test. ; Definition at line 91 of file TMultiDimFit.h. ◆ fTestQuantity. TVectorD TMultiDimFit::fTestQuantity. protected . Test sample, dependent quantity. ; Definition at line 44 of file TMultiDimFit.h. ◆ fTestSampleSize. Int_t TMultiDimFit::fTestSampleSize. protected . Size of test sample. ; Definition at line 48 of file TMultiDimFit.h. ◆ fTestSqError. TVectorD TMultiDimFit::fTestSqError. protected . Test sample, Error in quantity. ; Definition at line 45 of file TMultiDimFit.h. ◆ fTestVariables. TVectorD TMultiDimFit::fTestVariables. protected . Test sample, independent variables. ; Definition at line 46 of file TMultiDimFit.h. ◆ fVariables. TVectorD TMultiDimFit::fVariables. protected . Training sample, independent variables. ; Definition at line 36 of file TMultiDimFit.h. Libraries for TMultiDimFit:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TMultiDimFit.h; hist/hist/src/TMultiDimFit.cxx. TMultiDimFit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:69805,Modifiability,variab,variables,69805,"protected . Training sample, error in quantity. ; Definition at line 29 of file TMultiDimFit.h. ◆ fSumSqAvgQuantity. Double_t TMultiDimFit::fSumSqAvgQuantity. protected . Sum of squares away from mean. ; Definition at line 34 of file TMultiDimFit.h. ◆ fSumSqQuantity. Double_t TMultiDimFit::fSumSqQuantity. protected . SumSquare of dependent quantity. ; Definition at line 33 of file TMultiDimFit.h. ◆ fSumSqResidual. Double_t TMultiDimFit::fSumSqResidual. protected . Sum of Square residuals. ; Definition at line 77 of file TMultiDimFit.h. ◆ fTestCorrelationCoeff. Double_t TMultiDimFit::fTestCorrelationCoeff. protected . Multi Correlation coefficient. ; Definition at line 94 of file TMultiDimFit.h. ◆ fTestError. Double_t TMultiDimFit::fTestError. protected . Error from test. ; Definition at line 89 of file TMultiDimFit.h. ◆ fTestPrecision. Double_t TMultiDimFit::fTestPrecision. protected . Relative precision of test. ; Definition at line 91 of file TMultiDimFit.h. ◆ fTestQuantity. TVectorD TMultiDimFit::fTestQuantity. protected . Test sample, dependent quantity. ; Definition at line 44 of file TMultiDimFit.h. ◆ fTestSampleSize. Int_t TMultiDimFit::fTestSampleSize. protected . Size of test sample. ; Definition at line 48 of file TMultiDimFit.h. ◆ fTestSqError. TVectorD TMultiDimFit::fTestSqError. protected . Test sample, Error in quantity. ; Definition at line 45 of file TMultiDimFit.h. ◆ fTestVariables. TVectorD TMultiDimFit::fTestVariables. protected . Test sample, independent variables. ; Definition at line 46 of file TMultiDimFit.h. ◆ fVariables. TVectorD TMultiDimFit::fVariables. protected . Training sample, independent variables. ; Definition at line 36 of file TMultiDimFit.h. Libraries for TMultiDimFit:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TMultiDimFit.h; hist/hist/src/TMultiDimFit.cxx. TMultiDimFit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:4712,Performance,perform,perform,4712,"lon; \]. Optionally, the user may impose a functional expression by specifying the powers of each variable in \( L\) specified functions \( F_1, \ldots,F_L\) (TMultiDimFit::SetPowers). In that case, only the coefficients \( c_l\) is calculated by the class. Limiting the Number of Terms; As always when dealing with fits, there's a real chance of over fitting. As is well-known, it's always possible to fit an \( N-1\) polynomial in \( x\) to \( N\) points \( (x,y)\) with \(\chi^2 = 0\), but the polynomial is not likely to fit new data at all 1. Therefore, the user is asked to provide an upper limit, \( L_{max}\) to the number of terms in \( D_p\) (TMultiDimFit::SetMaxTerms).; However, since there's an infinite number of \( F_l\) to choose from, the user is asked to give the maximum power. \( P_{max,i}\), of each variable \( x_i\) to be considered in the minimization of \( S\) (TMultiDimFit::SetMaxPowers).; One way of obtaining values for the maximum power in variable \( i\), is to perform a regular fit to the dependent quantity \( D\), using a polynomial only in \( x_i\). The maximum power is \( P_{max,i}\) is then the power that does not significantly improve the one-dimensional least-square fit over \( x_i\) to \( D\) 5.; There are still a huge amount of possible choices for \( F_l\); in fact there are \(\prod_{i=1}^{N} (P_{max,i} + 1)\) possible choices. Obviously we need to limit this. To this end, the user is asked to set a power control limit, \( Q\) (TMultiDimFit::SetPowerLimit), and a function \( F_l\) is only accepted if ; \[; Q_l = \sum_{i=1}^{N} \frac{P_{li}}{P_{max,i}} < Q; \]. where \( P_{li}\) is the leading power of variable \( x_i\) in function \( F_l\) (TMultiDimFit::MakeCandidates). So the number of functions increase with \( Q\) (1, 2 is fine, 5 is way out). Gram-Schmidt Orthogonalisation; To further reduce the number of functions in the final expression, only those functions that significantly reduce \( S\) is chosen. What ‘significant’ means, is ch",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:8857,Performance,perform,performed,8857,"e sum of squares of residuals when taking \( j\) functions into account. Then ; \[; S_l = \left[\mathbf{D} - \sum^l_{k=1} a_k\mathbf{w}_k\right]^2; = \mathbf{D}^2 - 2\mathbf{D} \sum^l_{k=1} a_k\mathbf{w}_k; + \sum^l_{k=1} a_k^2\mathbf{w}_k^2; \]. Using 9, we see that ; \begin{eqnarray*}; S_l &=& \mathbf{D}^2 - 2 \sum^l_{k=1} a_k^2\mathbf{w}_k^2 +; \sum^j_{k=1} a_k^2\mathbf{w}_k^2\nonumber\\; &=& \mathbf{D}^2 - \sum^l_{k=1} a_k^2\mathbf{w}_k^2\nonumber\\; &=& \mathbf{D}^2 - \sum^l_{k=1} \frac{\left(\mathbf D\bullet \mathbf; w_k\right)}{\mathbf w_k^2}; \end{eqnarray*}. So for each new function \( F_l\) included in the model, we get a reduction of the sum of squares of residuals of \(a_l^2\mathbf{w}_l^2\), where \(\mathbf{w}_l\) is given by 4 and \( a_l\) by 9. Thus, using the Gram-Schmidt orthogonalisation, we can decide if we want to include this function in the final model, before* the matrix inversion. Function Selection Based on Residual; Supposing that \( L-1\) steps of the procedure have been performed, the problem now is to consider the \(L^{\mbox{th}}\) function.; The sum of squares of residuals can be written as ; \[; S_L = \textbf{D}^T\bullet\textbf{D} -; \sum^L_{l=1}a^2_l\left(\textbf{w}_l^T\bullet\textbf{w}_l\right); \]. where the relation 9 have been taken into account. The contribution of the \(L^{\mbox{th}}\) function to the reduction of S, is given by ; \[; \Delta S_L = a^2_L\left(\textbf{w}_L^T\bullet\textbf{w}_L\right); \]. Two test are now applied to decide whether this \(L^{\mbox{th}}\) function is to be included in the final expression, or not. Test 1; Denoting by \( H_{L-1}\) the subspace spanned by \(\textbf{w}_1,\ldots,\textbf{w}_{L-1}\) the function \(\textbf{w}_L\) is by construction (see 4) the projection of the function \( F_L\) onto the direction perpendicular to \( H_{L-1}\). Now, if the length of \(\textbf{w}_L\) (given by \(\textbf{w}_L\bullet\textbf{w}_L\)) is very small compared to the length of \(\textbf{f}_L\) this new function can n",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:11046,Performance,perform,performing,11046,"old value which the user must set (TMultiDimFit::SetMinAngle). Figure 1: (a) angle \f$\theta\f$ between \f$\textbf{w}_l\f$ and \f$\textbf{f}_L\f$, (b) angle \f$ \phi \f$ between \f$\textbf{w}_L\f$ and \f$\textbf{D}\f$. Test 2; Let \(\textbf{D}\) be the data vector to be fitted. As illustrated in figure 1, the \(L^{\mbox{th}}\) function \(\textbf{w}_L\) will contribute significantly to the reduction of \( S\), if the angle \(\phi^\prime\) between \(\textbf{w}_L\) and \(\textbf{D}\) is smaller than an upper limit \( \phi \), defined by the user (MultiDimFit::SetMaxAngle); However, the method automatically readjusts the value of this angle while fitting is in progress, in order to make the selection criteria less and less difficult to be fulfilled. The result is that the functions contributing most to the reduction of \( S\) are chosen first (TMultiDimFit::TestFunction).; In case \( \phi \) isn't defined, an alternative method of performing this second test is used: The \(L^{\mbox{th}}\) function \(\textbf{f}_L\) is accepted if (refer also to equation (13)) ; \[; \Delta S_L > \frac{S_{L-1}}{L_{max}-L}; \]. where \( S_{L-1}\) is the sum of the \( L-1\) first residuals from the \( L-1\) functions previously accepted; and \( L_{max}\) is the total number of functions allowed in the final expression of the fit (defined by user).; From this we see, that by restricting \( L_{max}\) – the number of terms in the final model – the fit is more difficult to perform, since the above selection criteria is more limiting.; The more coefficients we evaluate, the more the sum of squares of residuals \( S\) will be reduced. We can evaluate \( S\) before inverting \(\mathsf{B}\) as shown below. Coefficients and Coefficient Errors; Having found a parameterization, that is the \( F_l\)'s and \( L\), that minimizes \( S\), we still need to determine the coefficients \( c_l\). However, it's a feature of how we choose the significant functions, that the evaluation of the \( c_l\)'s becomes tr",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:11573,Performance,perform,perform,11573,"ime\) between \(\textbf{w}_L\) and \(\textbf{D}\) is smaller than an upper limit \( \phi \), defined by the user (MultiDimFit::SetMaxAngle); However, the method automatically readjusts the value of this angle while fitting is in progress, in order to make the selection criteria less and less difficult to be fulfilled. The result is that the functions contributing most to the reduction of \( S\) are chosen first (TMultiDimFit::TestFunction).; In case \( \phi \) isn't defined, an alternative method of performing this second test is used: The \(L^{\mbox{th}}\) function \(\textbf{f}_L\) is accepted if (refer also to equation (13)) ; \[; \Delta S_L > \frac{S_{L-1}}{L_{max}-L}; \]. where \( S_{L-1}\) is the sum of the \( L-1\) first residuals from the \( L-1\) functions previously accepted; and \( L_{max}\) is the total number of functions allowed in the final expression of the fit (defined by user).; From this we see, that by restricting \( L_{max}\) – the number of terms in the final model – the fit is more difficult to perform, since the above selection criteria is more limiting.; The more coefficients we evaluate, the more the sum of squares of residuals \( S\) will be reduced. We can evaluate \( S\) before inverting \(\mathsf{B}\) as shown below. Coefficients and Coefficient Errors; Having found a parameterization, that is the \( F_l\)'s and \( L\), that minimizes \( S\), we still need to determine the coefficients \( c_l\). However, it's a feature of how we choose the significant functions, that the evaluation of the \( c_l\)'s becomes trivial 5. To derive \(\mathbf{c}\), we first note that equation (4) can be written as ; \[; \mathsf{F} = \mathsf{W}\mathsf{B}; \]. where ; \begin{eqnarray*}; b_{ij} = \frac{\mathbf{f}_j \bullet \mathbf{w}_i}{\mathbf{w}_i^2}; & \mbox{if} & i < j\\; 1 & \mbox{if} & i = j\\; 0 & \mbox{if} & i > j; \end{eqnarray*}. Consequently, \(\mathsf{B}\) is an upper triangle matrix, which can be readily inverted. So we now evaluate ; \[; \mathsf{F}",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:13700,Performance,perform,perform,13700,")\mathbf{a} = \mathsf{F}(\mathsf{B}^{-1}\mathbf{a})\,.\); The original model \(\mathsf{F}\mathbf{c}\) is therefore identical with this if ; \[; \mathbf{c} = \left(\mathsf{B}^{-1}\mathbf{a}\right) =; \left[\mathbf{a}^T\left(\mathsf{B}^{-1}\right)^T\right]^T\,.; \]. The reason we use \(\left(\mathsf{B}^{-1}\right)^T\) rather then \(\mathsf{B}^{-1}\) is to save storage, since \(\left(\mathsf{B}^{-1}\right)^T\) can be stored in the same matrix as \(\mathsf{B}\) (TMultiDimFit::MakeCoefficients). The errors in the coefficients is calculated by inverting the curvature matrix of the non-orthogonal functions \( f_{lj}\) [1] (TMultiDimFit::MakeCoefficientErrors). Considerations; It's important to realize that the training sample should be representative of the problem at hand, in particular along the borders of the region of interest. This is because the algorithm presented here, is a interpolation, rather then a extrapolation 5.; Also, the independent variables \( x_{i}\) need to be linear independent, since the procedure will perform poorly if they are not 5. One can find an linear transformation from ones original variables \( \xi_{i}\) to a set of linear independent variables \( x_{i}\), using a Principal Components Analysis (see TPrincipal), and then use the transformed variable as input to this class [5] 6.; H. Wind also outlines a method for parameterising a multidimensional dependence over a multidimensional set of variables. An example of the method from 5, is a follows (please refer to 5 for a full discussion):. Define \(\mathbf{P} = (P_1, \ldots, P_5)\) are the 5 dependent quantities that define a track.; Compute, for \( M\) different values of \(\mathbf{P}\), the tracks through the magnetic field, and determine the corresponding \(\mathbf{x} = (x_1, \ldots, x_N)\).; Use the simulated observations to determine, with a simple approximation, the values of \(\mathbf{P}_j\). We call these values \(\mathbf{P}^\prime_j, j = 1, \ldots, M\).; Determine from \(\mathbf{x}\) ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:24758,Security,hash,hash,24758," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:9313,Testability,test,test,9313,"f; w_k\right)}{\mathbf w_k^2}; \end{eqnarray*}. So for each new function \( F_l\) included in the model, we get a reduction of the sum of squares of residuals of \(a_l^2\mathbf{w}_l^2\), where \(\mathbf{w}_l\) is given by 4 and \( a_l\) by 9. Thus, using the Gram-Schmidt orthogonalisation, we can decide if we want to include this function in the final model, before* the matrix inversion. Function Selection Based on Residual; Supposing that \( L-1\) steps of the procedure have been performed, the problem now is to consider the \(L^{\mbox{th}}\) function.; The sum of squares of residuals can be written as ; \[; S_L = \textbf{D}^T\bullet\textbf{D} -; \sum^L_{l=1}a^2_l\left(\textbf{w}_l^T\bullet\textbf{w}_l\right); \]. where the relation 9 have been taken into account. The contribution of the \(L^{\mbox{th}}\) function to the reduction of S, is given by ; \[; \Delta S_L = a^2_L\left(\textbf{w}_L^T\bullet\textbf{w}_L\right); \]. Two test are now applied to decide whether this \(L^{\mbox{th}}\) function is to be included in the final expression, or not. Test 1; Denoting by \( H_{L-1}\) the subspace spanned by \(\textbf{w}_1,\ldots,\textbf{w}_{L-1}\) the function \(\textbf{w}_L\) is by construction (see 4) the projection of the function \( F_L\) onto the direction perpendicular to \( H_{L-1}\). Now, if the length of \(\textbf{w}_L\) (given by \(\textbf{w}_L\bullet\textbf{w}_L\)) is very small compared to the length of \(\textbf{f}_L\) this new function can not contribute much to the reduction of the sum of squares of residuals. The test consists then in calculating the angle \( \theta \) between the two vectors \(\textbf{w}_L\) \( \textbf {f}_L\) (see also figure 1) and requiring that it's greater* then a threshold value which the user must set (TMultiDimFit::SetMinAngle). Figure 1: (a) angle \f$\theta\f$ between \f$\textbf{w}_l\f$ and \f$\textbf{f}_L\f$, (b) angle \f$ \phi \f$ between \f$\textbf{w}_L\f$ and \f$\textbf{D}\f$. Test 2; Let \(\textbf{D}\) be the data vector t",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:9922,Testability,test,test,9922,"_l\left(\textbf{w}_l^T\bullet\textbf{w}_l\right); \]. where the relation 9 have been taken into account. The contribution of the \(L^{\mbox{th}}\) function to the reduction of S, is given by ; \[; \Delta S_L = a^2_L\left(\textbf{w}_L^T\bullet\textbf{w}_L\right); \]. Two test are now applied to decide whether this \(L^{\mbox{th}}\) function is to be included in the final expression, or not. Test 1; Denoting by \( H_{L-1}\) the subspace spanned by \(\textbf{w}_1,\ldots,\textbf{w}_{L-1}\) the function \(\textbf{w}_L\) is by construction (see 4) the projection of the function \( F_L\) onto the direction perpendicular to \( H_{L-1}\). Now, if the length of \(\textbf{w}_L\) (given by \(\textbf{w}_L\bullet\textbf{w}_L\)) is very small compared to the length of \(\textbf{f}_L\) this new function can not contribute much to the reduction of the sum of squares of residuals. The test consists then in calculating the angle \( \theta \) between the two vectors \(\textbf{w}_L\) \( \textbf {f}_L\) (see also figure 1) and requiring that it's greater* then a threshold value which the user must set (TMultiDimFit::SetMinAngle). Figure 1: (a) angle \f$\theta\f$ between \f$\textbf{w}_l\f$ and \f$\textbf{f}_L\f$, (b) angle \f$ \phi \f$ between \f$\textbf{w}_L\f$ and \f$\textbf{D}\f$. Test 2; Let \(\textbf{D}\) be the data vector to be fitted. As illustrated in figure 1, the \(L^{\mbox{th}}\) function \(\textbf{w}_L\) will contribute significantly to the reduction of \( S\), if the angle \(\phi^\prime\) between \(\textbf{w}_L\) and \(\textbf{D}\) is smaller than an upper limit \( \phi \), defined by the user (MultiDimFit::SetMaxAngle); However, the method automatically readjusts the value of this angle while fitting is in progress, in order to make the selection criteria less and less difficult to be fulfilled. The result is that the functions contributing most to the reduction of \( S\) are chosen first (TMultiDimFit::TestFunction).; In case \( \phi \) isn't defined, an alternative method",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:11069,Testability,test,test,11069,"old value which the user must set (TMultiDimFit::SetMinAngle). Figure 1: (a) angle \f$\theta\f$ between \f$\textbf{w}_l\f$ and \f$\textbf{f}_L\f$, (b) angle \f$ \phi \f$ between \f$\textbf{w}_L\f$ and \f$\textbf{D}\f$. Test 2; Let \(\textbf{D}\) be the data vector to be fitted. As illustrated in figure 1, the \(L^{\mbox{th}}\) function \(\textbf{w}_L\) will contribute significantly to the reduction of \( S\), if the angle \(\phi^\prime\) between \(\textbf{w}_L\) and \(\textbf{D}\) is smaller than an upper limit \( \phi \), defined by the user (MultiDimFit::SetMaxAngle); However, the method automatically readjusts the value of this angle while fitting is in progress, in order to make the selection criteria less and less difficult to be fulfilled. The result is that the functions contributing most to the reduction of \( S\) are chosen first (TMultiDimFit::TestFunction).; In case \( \phi \) isn't defined, an alternative method of performing this second test is used: The \(L^{\mbox{th}}\) function \(\textbf{f}_L\) is accepted if (refer also to equation (13)) ; \[; \Delta S_L > \frac{S_{L-1}}{L_{max}-L}; \]. where \( S_{L-1}\) is the sum of the \( L-1\) first residuals from the \( L-1\) functions previously accepted; and \( L_{max}\) is the total number of functions allowed in the final expression of the fit (defined by user).; From this we see, that by restricting \( L_{max}\) – the number of terms in the final model – the fit is more difficult to perform, since the above selection criteria is more limiting.; The more coefficients we evaluate, the more the sum of squares of residuals \( S\) will be reduced. We can evaluate \( S\) before inverting \(\mathsf{B}\) as shown below. Coefficients and Coefficient Errors; Having found a parameterization, that is the \( F_l\)'s and \( L\), that minimizes \( S\), we still need to determine the coefficients \( c_l\). However, it's a feature of how we choose the significant functions, that the evaluation of the \( c_l\)'s becomes tr",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:15889,Testability,test,testing,15889,"thbf{x}^\prime\), so that \(\mathbf{x}^\prime\) are constrained and linear independent.; Perform a Principal Component Analysis on \(Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\), to get linear indenpendent (among themselves, but not independent of \(\mathbf{x}\)) quantities \(\mathbf{Q}^\prime\); For each component \(Q^\prime_i\) make a multidimensional fit, using \(\mathbf{x}^\prime\) as the variables, thus determining a set of coefficients \(\mathbf{c}_i\). To process data, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the Principal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the ma",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:16008,Testability,test,test,16008,"ot independent of \(\mathbf{x}\)) quantities \(\mathbf{Q}^\prime\); For each component \(Q^\prime_i\) make a multidimensional fit, using \(\mathbf{x}^\prime\) as the variables, thus determining a set of coefficients \(\mathbf{c}_i\). To process data, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the Principal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:16348,Testability,test,test,16348,"ata, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the Principal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction and Error Analysis for the Physical Sciences. McGraw-Hill, 2 edition, 1992.; R. Brun et al. Long writeup DD/75-23, CERN, 1980.; Gene H. Golub and Charles F. van Loan. Matrix Computations. John Hopkins University Press, Baltimore, 3 edition, 1996",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:16505,Testability,test,test,16505,"pal Component Analysis.; Determine \(\mathbf{P}^\prime\) as before.; Determine \(\mathbf{x}^\prime\) as before.; Use the result of the fit to determine \(\mathbf{Q}^\prime\).; Transform back to \(\mathbf{P}\) from \(\mathbf{Q}^\prime\), using the result from the Principal Component Analysis. Testing the parameterization; The class also provides functionality for testing the, over the training sample, found parameterization (TMultiDimFit::Fit). This is done by passing the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction and Error Analysis for the Physical Sciences. McGraw-Hill, 2 edition, 1992.; R. Brun et al. Long writeup DD/75-23, CERN, 1980.; Gene H. Golub and Charles F. van Loan. Matrix Computations. John Hopkins University Press, Baltimore, 3 edition, 1996.; F. James. Minuit. Long writeup D506, CERN, 1998.; H. Wind. Function parameterization. Proceedings of the 1972 CERN Computing and Data Processing School, ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:17021,Testability,test,test,17021," the class a test sample of \( M_t\) tuples of the form \((\mathbf{x}_{t,j},D_{t,j}, E_{t,j})\), where \(\mathbf{x}_{t,j}\) are the independent variables, \( D_{t,j}\) the known, dependent quantity, and \( E_{t,j}\) is the square error in \( D_{t,j}\) (TMultiDimFit::AddTestRow).; The parameterization is then evaluated at every \(\mathbf{x}_t\) in the test sample, and ; \[; S_t \equiv \sum_{j=1}^{M_t} \left(D_{t,j} -; D_p\left(\mathbf{x}_{t,j}\right)\right)^2; \]. is evaluated. The relative error over the test sample ; \[; R_t = \frac{S_t}{\sum_{j=1}^{M_t} D_{t,j}^2}; \]. should not be to low or high compared to \( R\) from the training sample. Also, multiple correlation coefficient from both samples should be fairly close, otherwise one of the samples is not representative of the problem. A large difference in the reduced \( \chi^2\) over the two samples indicate an over fit, and the maximum number of terms in the parameterisation should be reduced.; It's possible to use 4 to further improve the fit, using the test sample.; Christian Holm. Bibliography. Philip R. Bevington and D. Keith Robinson. Data Reduction and Error Analysis for the Physical Sciences. McGraw-Hill, 2 edition, 1992.; R. Brun et al. Long writeup DD/75-23, CERN, 1980.; Gene H. Golub and Charles F. van Loan. Matrix Computations. John Hopkins University Press, Baltimore, 3 edition, 1996.; F. James. Minuit. Long writeup D506, CERN, 1998.; H. Wind. Function parameterization. Proceedings of the 1972 CERN Computing and Data Processing School, volume 72-21 of Yellow report. CERN, 1972.; H. Wind. 1. principal component analysis, 2. pattern recognition for track finding, 3. interpolation and functional representation. Yellow report EP/81-12, CERN, 1981. . Definition at line 15 of file TMultiDimFit.h. Public Types; enum  EMDFPolyType { kMonomials; , kChebyshev; , kLegendre; };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInc",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19389,Testability,test,test,19389," = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiDimFit ();  Empty CTOR. Do not use. ;  ;  TMultiDimFit (Int_t dimension, EMDFPolyType type=kMonomials, Option_t *option="""");  Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMa",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:19420,Testability,test,test,19420," = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiDimFit ();  Empty CTOR. Do not use. ;  ;  TMultiDimFit (Int_t dimension, EMDFPolyType type=kMonomials, Option_t *option="""");  Constructor Second argument is the type of polynomials to use in parameterisation, one of: TMultiDimFit::kMonomials TMultiDimFit::kChebyshev TMultiDimFit::kLegendre. ;  ;  ~TMultiDimFit () override;  Destructor. ;  ; virtual void AddRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMa",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:20150,Testability,test,test,20150," sample to be used for the parameterization. ;  ; virtual void AddTestRow (const Double_t *x, Double_t D, Double_t E=0);  Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ;  ; void Browse (TBrowser *b) override;  Browse the TMultiDimFit object in the TBrowser. ;  ; void Clear (Option_t *option="""") override;  Clear internal structures and variables. ;  ; void Draw (Option_t *=""d"") override;  Default Draw method for all objects. ;  ; virtual Double_t Eval (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization at point x. ;  ; virtual Double_t EvalError (const Double_t *x, const Double_t *coeff=nullptr) const;  Evaluate parameterization error at point x. ;  ; virtual void FindParameterization (Option_t *option="""");  Find the parameterization. ;  ; virtual void Fit (Option_t *option="""");  Try to fit the found parameterisation to the test sample. ;  ; Double_t GetChi2 () const;  ; const TVectorD * GetCoefficients () const;  ; const TVectorD * GetCoefficientsRMS () const;  ; const TMatrixD * GetCorrelationMatrix () const;  ; Double_t GetError () const;  ; Int_t * GetFunctionCodes () const;  ; const TMatrixD * GetFunctions () const;  ; virtual TList * GetHistograms () const;  ; Double_t GetMaxAngle () const;  ; Int_t GetMaxFunctions () const;  ; Int_t * GetMaxPowers () const;  ; Double_t GetMaxQuantity () const;  ; Int_t GetMaxStudy () const;  ; Int_t GetMaxTerms () const;  ; const TVectorD * GetMaxVariables () const;  ; Double_t GetMeanQuantity () const;  ; const TVectorD * GetMeanVariables () const;  ; Double_t GetMinAngle () const;  ; Double_t GetMinQuantity () const;  ; Double_t GetMinRelativeError () const;  ; const TVectorD * GetMinVariables () const;  ; Int_t GetNCoefficients () const;  ; Int_t GetNVariables () const;  ; Int_t GetPolyType () const;  ; Int_t * GetPowerInd",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:22213,Testability,test,test,22213," Int_t * GetPowers () const;  ; Double_t GetPrecision () const;  ; const TVectorD * GetQuantity () const;  ; Double_t GetResidualMax () const;  ; Int_t GetResidualMaxRow () const;  ; Double_t GetResidualMin () const;  ; Int_t GetResidualMinRow () const;  ; Double_t GetResidualSumSq () const;  ; Double_t GetRMS () const;  ; Int_t GetSampleSize () const;  ; const TVectorD * GetSqError () const;  ; Double_t GetSumSqAvgQuantity () const;  ; Double_t GetSumSqQuantity () const;  ; Double_t GetTestError () const;  ; Double_t GetTestPrecision () const;  ; const TVectorD * GetTestQuantity () const;  ; Int_t GetTestSampleSize () const;  ; const TVectorD * GetTestSqError () const;  ; const TVectorD * GetTestVariables () const;  ; const TVectorD * GetVariables () const;  ; TClass * IsA () const override;  ; Bool_t IsFolder () const override;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; virtual Double_t MakeChi2 (const Double_t *coeff=nullptr);  Calculate Chi square over either the test sample. ;  ; virtual void MakeCode (const char *functionName=""MDF"", Option_t *option="""");  Generate the file <filename> with .C appended if argument doesn't end in .cxx or .C. ;  ; virtual void MakeHistograms (Option_t *option=""A"");  Make histograms of the result of the analysis. ;  ; virtual void MakeMethod (const Char_t *className=""MDF"", Option_t *option="""");  Generate the file <classname>MDF.cxx which contains the implementation of the method: ;  ; void Print (Option_t *option=""ps"") const override;  Print statistics etc. ;  ; void SetBinVarX (Int_t nbbinvarx);  ; void SetBinVarY (Int_t nbbinvary);  ; void SetMaxAngle (Double_t angle=0);  Set the max angle (in degrees) between the initial data vector to be fitted, and the new candidate function to be included in the fit. ;  ; void SetMaxFunctions (Int_t n);  ; void SetMaxPowers (const Int_t *powers);  Set the maximum power to be considered in the fit for each variable. ;  ; void SetMa",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:37998,Testability,test,test,37998,"above, but orthogonalised. ;  ; Int_t fParameterisationCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize;  Size of test sample. ;  ; TVectorD fTestSqError;  Test sample, Error in quantity. ;  ; TVectorD fTestVariables;  Test sample, independent variables. ;  ; TVectorD fVariables;  Training sample, independent variables. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Private Attributes; static TMultiDimFit * fgInstance = nullptr;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiDimFit.h>. Inheritance diagram for TMultiDimFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EMDFPolyType. enum TMultiDimFit::EMDFPolyType. EnumeratorkMonomials ; kChebyshev ; kLegendre . Definition at line 18 of file TMultiDi",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:38057,Testability,test,test,38057,"tionCode;  Exit code of parameterisation. ;  ; EMDFPolyType fPolyType;  Fit object (MINUIT) ;  ; Int_t * fPowerIndex;  [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize;  Size of test sample. ;  ; TVectorD fTestSqError;  Test sample, Error in quantity. ;  ; TVectorD fTestVariables;  Test sample, independent variables. ;  ; TVectorD fVariables;  Training sample, independent variables. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Private Attributes; static TMultiDimFit * fgInstance = nullptr;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiDimFit.h>. Inheritance diagram for TMultiDimFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EMDFPolyType. enum TMultiDimFit::EMDFPolyType. EnumeratorkMonomials ; kChebyshev ; kLegendre . Definition at line 18 of file TMultiDimFit.h. Constructor & Destructor Documentation. ◆ TM",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:38163,Testability,test,test,38163," [fMaxTerms] Index of accepted powers ;  ; Double_t fPowerLimit;  Control parameter. ;  ; Int_t * fPowers;  [fMaxFuncNV] where fMaxFuncNV = fMaxFunctions*fNVariables ;  ; Double_t fPrecision;  Relative precision of param. ;  ; TVectorD fQuantity;  Training sample, dependent quantity. ;  ; TVectorD fResiduals;  Vector of the final residuals. ;  ; Double_t fRMS;  Root mean square of fit. ;  ; Int_t fSampleSize;  Size of training sample. ;  ; Bool_t fShowCorrelation;  print correlation matrix ;  ; TVectorD fSqError;  Training sample, error in quantity. ;  ; Double_t fSumSqAvgQuantity;  Sum of squares away from mean. ;  ; Double_t fSumSqQuantity;  SumSquare of dependent quantity. ;  ; Double_t fSumSqResidual;  Sum of Square residuals. ;  ; Double_t fTestCorrelationCoeff;  Multi Correlation coefficient. ;  ; Double_t fTestError;  Error from test. ;  ; Double_t fTestPrecision;  Relative precision of test. ;  ; TVectorD fTestQuantity;  Test sample, dependent quantity. ;  ; Int_t fTestSampleSize;  Size of test sample. ;  ; TVectorD fTestSqError;  Test sample, Error in quantity. ;  ; TVectorD fTestVariables;  Test sample, independent variables. ;  ; TVectorD fVariables;  Training sample, independent variables. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Private Attributes; static TMultiDimFit * fgInstance = nullptr;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiDimFit.h>. Inheritance diagram for TMultiDimFit:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EMDFPolyType. enum TMultiDimFit::EMDFPolyType. EnumeratorkMonomials ; kChebyshev ; kLegendre . Definition at line 18 of file TMultiDimFit.h. Constructor & Destructor Documentation. ◆ TMultiDimFit() [1/2]. TMultiDimFit::TMultiDimFit ; (; ). Empty CTOR. Do not use. ; Definition at line 433 of file TMult",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40746,Testability,test,test,40746,"line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass * TMultiDimFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiDimFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiDimFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TMultiDimFit.h. ◆ Clear(). vo",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:40777,Testability,test,test,40777,"line 586 of file TMultiDimFit.cxx. Member Function Documentation. ◆ AddRow(). void TMultiDimFit::AddRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the training sample to be used for the parameterization. ; The mean of the variables and quantity is calculated on the fly, as outlined in TPrincipal::AddRow. This sample should be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 611 of file TMultiDimFit.cxx. ◆ AddTestRow(). void TMultiDimFit::AddTestRow ; (; const Double_t * ; x, . Double_t ; D, . Double_t ; E = 0 . ). virtual . Add a row consisting of fNVariables independent variables, the known, dependent quantity, and optionally, the square error in the dependent quantity, to the test sample to be used for the test of the parameterization. ; This sample needn't be representative of the problem at hand. Please note, that if no error is given Poisson statistics is assumed and the square error is set to the value of dependent quantity. See also the class description ; Definition at line 690 of file TMultiDimFit.cxx. ◆ Browse(). void TMultiDimFit::Browse ; (; TBrowser * ; b). overridevirtual . Browse the TMultiDimFit object in the TBrowser. ; Reimplemented from TObject.; Definition at line 737 of file TMultiDimFit.cxx. ◆ Class(). static TClass * TMultiDimFit::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiDimFit::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiDimFit::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 207 of file TMultiDimFit.h. ◆ Clear(). vo",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:43829,Testability,test,test,43829,"ne 937 of file TMultiDimFit.cxx. ◆ EvalError(). Double_t TMultiDimFit::EvalError ; (; const Double_t * ; x, . const Double_t * ; coeff = nullptr . ); const. virtual . Evaluate parameterization error at point x. ; Optional argument coeff is a vector of coefficients for the parameterisation, fNCoefficients elements long. ; Definition at line 904 of file TMultiDimFit.cxx. ◆ EvalFactor(). Double_t TMultiDimFit::EvalFactor ; (; Int_t ; p, . Double_t ; x . ); const. protectedvirtual . PRIVATE METHOD: Evaluate function with power p at variable value x. ; Definition at line 952 of file TMultiDimFit.cxx. ◆ FindParameterization(). void TMultiDimFit::FindParameterization ; (; Option_t * ; option = """"). virtual . Find the parameterization. ; Options: None so far; For detailed description of what this entails, please refer to the class description ; Definition at line 994 of file TMultiDimFit.cxx. ◆ Fit(). void TMultiDimFit::Fit ; (; Option_t * ; option = """"). virtual . Try to fit the found parameterisation to the test sample. ; Options M use Minuit to improve coefficients; Also, refer to class description ; Definition at line 1013 of file TMultiDimFit.cxx. ◆ GetChi2(). Double_t TMultiDimFit::GetChi2 ; (; ); const. inline . Definition at line 140 of file TMultiDimFit.h. ◆ GetCoefficients(). const TVectorD * TMultiDimFit::GetCoefficients ; (; ); const. inline . Definition at line 142 of file TMultiDimFit.h. ◆ GetCoefficientsRMS(). const TVectorD * TMultiDimFit::GetCoefficientsRMS ; (; ); const. inline . Definition at line 143 of file TMultiDimFit.h. ◆ GetCorrelationMatrix(). const TMatrixD * TMultiDimFit::GetCorrelationMatrix ; (; ); const. inline . Definition at line 141 of file TMultiDimFit.h. ◆ GetError(). Double_t TMultiDimFit::GetError ; (; ); const. inline . Definition at line 144 of file TMultiDimFit.h. ◆ GetFunctionCodes(). Int_t * TMultiDimFit::GetFunctionCodes ; (; ); const. inline . Definition at line 145 of file TMultiDimFit.h. ◆ GetFunctions(). const TMatrixD * TMult",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:50949,Testability,test,test,50949,"t line 185 of file TMultiDimFit.h. ◆ Instance(). TMultiDimFit * TMultiDimFit::Instance ; (; ). static . Return the static instance. ; Definition at line 1099 of file TMultiDimFit.cxx. ◆ IsA(). TClass * TMultiDimFit::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 207 of file TMultiDimFit.h. ◆ IsFolder(). Bool_t TMultiDimFit::IsFolder ; (; ); const. inlineoverridevirtual . Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ; Reimplemented from TObject.; Definition at line 188 of file TMultiDimFit.h. ◆ MakeCandidates(). void TMultiDimFit::MakeCandidates ; (; ). protectedvirtual . PRIVATE METHOD: Create list of candidate functions for the parameterisation. ; See also class description ; Definition at line 1110 of file TMultiDimFit.cxx. ◆ MakeChi2(). Double_t TMultiDimFit::MakeChi2 ; (; const Double_t * ; coeff = nullptr). virtual . Calculate Chi square over either the test sample. ; The optional argument coeff is a vector of coefficients to use in the evaluation of the parameterisation. If coeff == 0, then the found coefficients is used. Used my MINUIT for fit (see TMultDimFit::Fit) ; Definition at line 1240 of file TMultiDimFit.cxx. ◆ MakeCode(). void TMultiDimFit::MakeCode ; (; const char * ; filename = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <filename> with .C appended if argument doesn't end in .cxx or .C. ; The contains the implementation of the function:; Double_t <funcname>(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the static variables: Int_t gNVariables; Int_t gNCoefficients; Double_t gDMean; Double_t gXMean[]; Double_t gXMin[]; Double_t gXMax[]; Double_t gCoefficient[]; Int_t gPower[]; are initialized. The only ROOT header file needed is Rtypes.h; See TMultiDimFit::MakeRealCode for a list of options ; Definition at line 1290 of file TMultiDimFit.cx",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:53734,Testability,test,test,53734,"er triangle. ; Definition at line 1365 of file TMultiDimFit.cxx. ◆ MakeCorrelation(). void TMultiDimFit::MakeCorrelation ; (; ). protectedvirtual . PRIVATE METHOD: Compute the correlation matrix. ; Definition at line 1445 of file TMultiDimFit.cxx. ◆ MakeGramSchmidt(). Double_t TMultiDimFit::MakeGramSchmidt ; (; Int_t ; function). protectedvirtual . PRIVATE METHOD: Make Gram-Schmidt orthogonalisation. ; The class description gives a thorough account of this algorithm, as well as references. Please refer to the class description ; Definition at line 1504 of file TMultiDimFit.cxx. ◆ MakeHistograms(). void TMultiDimFit::MakeHistograms ; (; Option_t * ; option = ""A""). virtual . Make histograms of the result of the analysis. ; This message should be sent after having read all data points, but before finding the parameterization; Options: A All the below X Original independent variables D Original dependent variables N Normalised independent variables S Shifted dependent variables R1 Residuals versus normalised independent variables R2 Residuals versus dependent variable R3 Residuals computed on training sample R4 Residuals computed on test sample; For a description of these quantities, refer to class description ; Definition at line 1597 of file TMultiDimFit.cxx. ◆ MakeMethod(). void TMultiDimFit::MakeMethod ; (; const Char_t * ; classname = ""MDF"", . Option_t * ; option = """" . ). virtual . Generate the file <classname>MDF.cxx which contains the implementation of the method: ; Double_t <classname>::MDF(Double_t *x); which does the same as TMultiDimFit::Eval. Please refer to this method.; Further, the public static members: Int_t <classname>::fgNVariables; Int_t <classname>::fgNCoefficients; Double_t <classname>::fgDMean; Double_t <classname>::fgXMean[] //[fgNVariables]; Double_t <classname>::fgXMin[] //[fgNVariables]; Double_t <classname>::fgXMax[] //[fgNVariables]; Double_t <classname>::fgCoefficient[] //[fgNCoeffficents]; Int_t <classname>::fgPower[] //[fgNCoeffficents*fg",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:68933,Testability,test,test,68933,"on at line 42 of file TMultiDimFit.h. ◆ fShowCorrelation. Bool_t TMultiDimFit::fShowCorrelation. protected . print correlation matrix ; Definition at line 104 of file TMultiDimFit.h. ◆ fSqError. TVectorD TMultiDimFit::fSqError. protected . Training sample, error in quantity. ; Definition at line 29 of file TMultiDimFit.h. ◆ fSumSqAvgQuantity. Double_t TMultiDimFit::fSumSqAvgQuantity. protected . Sum of squares away from mean. ; Definition at line 34 of file TMultiDimFit.h. ◆ fSumSqQuantity. Double_t TMultiDimFit::fSumSqQuantity. protected . SumSquare of dependent quantity. ; Definition at line 33 of file TMultiDimFit.h. ◆ fSumSqResidual. Double_t TMultiDimFit::fSumSqResidual. protected . Sum of Square residuals. ; Definition at line 77 of file TMultiDimFit.h. ◆ fTestCorrelationCoeff. Double_t TMultiDimFit::fTestCorrelationCoeff. protected . Multi Correlation coefficient. ; Definition at line 94 of file TMultiDimFit.h. ◆ fTestError. Double_t TMultiDimFit::fTestError. protected . Error from test. ; Definition at line 89 of file TMultiDimFit.h. ◆ fTestPrecision. Double_t TMultiDimFit::fTestPrecision. protected . Relative precision of test. ; Definition at line 91 of file TMultiDimFit.h. ◆ fTestQuantity. TVectorD TMultiDimFit::fTestQuantity. protected . Test sample, dependent quantity. ; Definition at line 44 of file TMultiDimFit.h. ◆ fTestSampleSize. Int_t TMultiDimFit::fTestSampleSize. protected . Size of test sample. ; Definition at line 48 of file TMultiDimFit.h. ◆ fTestSqError. TVectorD TMultiDimFit::fTestSqError. protected . Test sample, Error in quantity. ; Definition at line 45 of file TMultiDimFit.h. ◆ fTestVariables. TVectorD TMultiDimFit::fTestVariables. protected . Test sample, independent variables. ; Definition at line 46 of file TMultiDimFit.h. ◆ fVariables. TVectorD TMultiDimFit::fVariables. protected . Training sample, independent variables. ; Definition at line 36 of file TMultiDimFit.h. Libraries for TMultiDimFit:. [legend]; The documentation for this ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:69078,Testability,test,test,69078,"nition at line 104 of file TMultiDimFit.h. ◆ fSqError. TVectorD TMultiDimFit::fSqError. protected . Training sample, error in quantity. ; Definition at line 29 of file TMultiDimFit.h. ◆ fSumSqAvgQuantity. Double_t TMultiDimFit::fSumSqAvgQuantity. protected . Sum of squares away from mean. ; Definition at line 34 of file TMultiDimFit.h. ◆ fSumSqQuantity. Double_t TMultiDimFit::fSumSqQuantity. protected . SumSquare of dependent quantity. ; Definition at line 33 of file TMultiDimFit.h. ◆ fSumSqResidual. Double_t TMultiDimFit::fSumSqResidual. protected . Sum of Square residuals. ; Definition at line 77 of file TMultiDimFit.h. ◆ fTestCorrelationCoeff. Double_t TMultiDimFit::fTestCorrelationCoeff. protected . Multi Correlation coefficient. ; Definition at line 94 of file TMultiDimFit.h. ◆ fTestError. Double_t TMultiDimFit::fTestError. protected . Error from test. ; Definition at line 89 of file TMultiDimFit.h. ◆ fTestPrecision. Double_t TMultiDimFit::fTestPrecision. protected . Relative precision of test. ; Definition at line 91 of file TMultiDimFit.h. ◆ fTestQuantity. TVectorD TMultiDimFit::fTestQuantity. protected . Test sample, dependent quantity. ; Definition at line 44 of file TMultiDimFit.h. ◆ fTestSampleSize. Int_t TMultiDimFit::fTestSampleSize. protected . Size of test sample. ; Definition at line 48 of file TMultiDimFit.h. ◆ fTestSqError. TVectorD TMultiDimFit::fTestSqError. protected . Test sample, Error in quantity. ; Definition at line 45 of file TMultiDimFit.h. ◆ fTestVariables. TVectorD TMultiDimFit::fTestVariables. protected . Test sample, independent variables. ; Definition at line 46 of file TMultiDimFit.h. ◆ fVariables. TVectorD TMultiDimFit::fVariables. protected . Training sample, independent variables. ; Definition at line 36 of file TMultiDimFit.h. Libraries for TMultiDimFit:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TMultiDimFit.h; hist/hist/src/TMultiDimFit.cxx. TMultiDimFit. ROOT master - Re",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:69356,Testability,test,test,69356,"protected . Training sample, error in quantity. ; Definition at line 29 of file TMultiDimFit.h. ◆ fSumSqAvgQuantity. Double_t TMultiDimFit::fSumSqAvgQuantity. protected . Sum of squares away from mean. ; Definition at line 34 of file TMultiDimFit.h. ◆ fSumSqQuantity. Double_t TMultiDimFit::fSumSqQuantity. protected . SumSquare of dependent quantity. ; Definition at line 33 of file TMultiDimFit.h. ◆ fSumSqResidual. Double_t TMultiDimFit::fSumSqResidual. protected . Sum of Square residuals. ; Definition at line 77 of file TMultiDimFit.h. ◆ fTestCorrelationCoeff. Double_t TMultiDimFit::fTestCorrelationCoeff. protected . Multi Correlation coefficient. ; Definition at line 94 of file TMultiDimFit.h. ◆ fTestError. Double_t TMultiDimFit::fTestError. protected . Error from test. ; Definition at line 89 of file TMultiDimFit.h. ◆ fTestPrecision. Double_t TMultiDimFit::fTestPrecision. protected . Relative precision of test. ; Definition at line 91 of file TMultiDimFit.h. ◆ fTestQuantity. TVectorD TMultiDimFit::fTestQuantity. protected . Test sample, dependent quantity. ; Definition at line 44 of file TMultiDimFit.h. ◆ fTestSampleSize. Int_t TMultiDimFit::fTestSampleSize. protected . Size of test sample. ; Definition at line 48 of file TMultiDimFit.h. ◆ fTestSqError. TVectorD TMultiDimFit::fTestSqError. protected . Test sample, Error in quantity. ; Definition at line 45 of file TMultiDimFit.h. ◆ fTestVariables. TVectorD TMultiDimFit::fTestVariables. protected . Test sample, independent variables. ; Definition at line 46 of file TMultiDimFit.h. ◆ fVariables. TVectorD TMultiDimFit::fVariables. protected . Training sample, independent variables. ; Definition at line 36 of file TMultiDimFit.h. Libraries for TMultiDimFit:. [legend]; The documentation for this class was generated from the following files:; hist/hist/inc/TMultiDimFit.h; hist/hist/src/TMultiDimFit.cxx. TMultiDimFit. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:44:00 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiDimFit.html:14517,Usability,simpl,simple,14517,"se the algorithm presented here, is a interpolation, rather then a extrapolation 5.; Also, the independent variables \( x_{i}\) need to be linear independent, since the procedure will perform poorly if they are not 5. One can find an linear transformation from ones original variables \( \xi_{i}\) to a set of linear independent variables \( x_{i}\), using a Principal Components Analysis (see TPrincipal), and then use the transformed variable as input to this class [5] 6.; H. Wind also outlines a method for parameterising a multidimensional dependence over a multidimensional set of variables. An example of the method from 5, is a follows (please refer to 5 for a full discussion):. Define \(\mathbf{P} = (P_1, \ldots, P_5)\) are the 5 dependent quantities that define a track.; Compute, for \( M\) different values of \(\mathbf{P}\), the tracks through the magnetic field, and determine the corresponding \(\mathbf{x} = (x_1, \ldots, x_N)\).; Use the simulated observations to determine, with a simple approximation, the values of \(\mathbf{P}_j\). We call these values \(\mathbf{P}^\prime_j, j = 1, \ldots, M\).; Determine from \(\mathbf{x}\) a set of at least five relevant coordinates \(\mathbf{x}^\prime\), using contrains, or alternative:; Perform a Principal Component Analysis (using TPrincipal), and use to get a linear transformation \(\mathbf{x} \rightarrow \mathbf{x}^\prime\), so that \(\mathbf{x}^\prime\) are constrained and linear independent.; Perform a Principal Component Analysis on \(Q_i = P_i / P^\prime_i\, i = 1, \ldots, 5\), to get linear indenpendent (among themselves, but not independent of \(\mathbf{x}\)) quantities \(\mathbf{Q}^\prime\); For each component \(Q^\prime_i\) make a multidimensional fit, using \(\mathbf{x}^\prime\) as the variables, thus determining a set of coefficients \(\mathbf{c}_i\). To process data, using this parameterisation, do; Test wether the observation \(\mathbf{x}\) within the domain of the parameterization, using the result from the",MatchSource.WIKI,doc/master/classTMultiDimFit.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiDimFit.html
https://root.cern/doc/master/classTMultiGraph-members.html:1575,Availability,error,error,1575,"iGraphstatic; Class_Version()TMultiGraphinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TMultiGraphinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTMultiGraphvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *chopt="""") overrideTMultiGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; end() constTMultiGraphinline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFunctionsTMultiGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fGraphsTMultiGraphprotected; fHistogramTMultiGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TMultiGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t rxmin=0, Axis_t rxmax=0)TMultiGraphvirtual; FitPanel()TMultiGraphvirtual; fMaximumTMultiGraphprotected; fMinimumTMultiGraphprotected; fNameTNamedprotected; fTitleTNamedprotected; fUniqueIDTObjectprivate; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetFunction(const char *name) constTMulti",MatchSource.WIKI,doc/master/classTMultiGraph-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph-members.html
https://root.cern/doc/master/classTMultiGraph-members.html:1656,Availability,error,error,1656,"iGraphstatic; Class_Version()TMultiGraphinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TMultiGraphinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTMultiGraphvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *chopt="""") overrideTMultiGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; end() constTMultiGraphinline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFunctionsTMultiGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fGraphsTMultiGraphprotected; fHistogramTMultiGraphprotected; FillBuffer(char *&buffer)TNamedvirtual; FindObject(const char *name) constTObjectvirtual; FindObject(const TObject *obj) constTObjectvirtual; Fit(const char *formula, Option_t *option="""", Option_t *goption="""", Axis_t xmin=0, Axis_t xmax=0)TMultiGraphvirtual; Fit(TF1 *f1, Option_t *option="""", Option_t *goption="""", Axis_t rxmin=0, Axis_t rxmax=0)TMultiGraphvirtual; FitPanel()TMultiGraphvirtual; fMaximumTMultiGraphprotected; fMinimumTMultiGraphprotected; fNameTNamedprotected; fTitleTNamedprotected; fUniqueIDTObjectprivate; GetDrawOption() constTObjectvirtual; GetDtorOnly()TObjectstatic; GetFunction(const char *name) constTMulti",MatchSource.WIKI,doc/master/classTMultiGraph-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph-members.html
https://root.cern/doc/master/classTMultiGraph-members.html:195,Modifiability,inherit,inherited,195,". ROOT: Member List. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. TMultiGraph Member List. This is the complete list of members for TMultiGraph, including all inherited members. AbstractMethod(const char *method) constTObject; Add(TGraph *graph, Option_t *chopt="""")TMultiGraphvirtual; Add(TMultiGraph *multigraph, Option_t *chopt="""")TMultiGraphvirtual; AddToTObjectTable(TObject *)TObjectprivatestatic; AppendPad(Option_t *option="""")TObjectvirtual; begin() constTMultiGraph; Browse(TBrowser *b) overrideTMultiGraphvirtual; CheckedHash()TObjectinline; Class()TMultiGraphstatic; Class_Name()TMultiGraphstatic; Class_Version()TMultiGraphinlinestatic; ClassName() constTObjectvirtual; Clear(Option_t *option="""") overrideTNamedvirtual; Clone(const char *newname="""") const overrideTNamedvirtual; Compare(const TObject *obj) const overrideTNamedvirtual; Copy(TObject &named) const overrideTNamedvirtual; DeclFileName()TMultiGraphinlinestatic; Delete(Option_t *option="""")TObjectvirtual; DistancetoPrimitive(Int_t px, Int_t py) overrideTMultiGraphvirtual; DoError(int level, const char *location, const char *fmt, va_list va) constTObjectprotectedvirtual; Draw(Option_t *chopt="""") overrideTMultiGraphvirtual; DrawClass() constTObjectvirtual; DrawClone(Option_t *option="""") constTObjectvirtual; Dump() constTObjectvirtual; EDeprecatedStatusBits enum nameTObject; end() constTMultiGraphinline; Error(const char *method, const char *msgfmt,...) constTObjectvirtual; EStatusBits enum nameTObject; Execute(const char *method, const char *params, Int_t *error=nullptr)TObjectvirtual; Execute(TMethod *method, TObjArray *params, Int_t *error=nullptr)TObjectvirtual; ExecuteEvent(Int_t event, Int_t px, Int_t py)TObjectvirtual; Fatal(const char *method, const char *msgfmt,...) constTObjectvirtual; fBitsTObjectprivate; fFunctionsTMultiGraphprotected; fgDtorOnlyTObjectprivatestatic; fgObjectStatTObjectprivatestatic; fGraphsTMultiGraphprotected; fHistogramTMultiGraphprotected; Fil",MatchSource.WIKI,doc/master/classTMultiGraph-members.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph-members.html
https://root.cern/doc/master/classTMultiGraph.html:1475,Availability,error,error,1475,"oduction; MultiGraphs' drawing; Setting drawing options; Titles setting; The option &quot;3D&quot;; Legend drawing; Automatic coloring; Reverse axis. MultiGraphs' fitting; Fit box position. Axis' limits setting. Introduction; A TMultiGraph allows to manipulate a set of graphs as a single entity. In particular, when drawn, the X and Y axis ranges are automatically computed such as all the graphs will be visible.; TMultiGraph::Add should be used to add a new graph to the list.; The TMultiGraph owns the objects in the list.; The number of graphs in a multigraph can be retrieve with: mg->GetListOfGraphs()->GetEntries();. MultiGraphs' Drawing; The drawing options are the same as for TGraph. Like for TGraph, the painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; Example: TGraph *gr1 = new TGraph(...; TGraphErrors *gr2 = new TGraphErrors(...; TMultiGraph *mg = new TMultiGraph();; mg->Add(gr1,""lp"");; mg->Add(gr2,""cp"");; mg->Draw(""a"");; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::TMultiGraphTMultiGraph()TMultiGraph default constructor.Definition TMultiGraph.cxx:369; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; Setting drawing options; The drawing option for each TGraph may be specified as an optional second argument of the Add function.; If a draw option is specified, it will be used to draw the graph, otherwise the graph will be drawn with the option specified in TMultiGraph::Draw; Titles setting; The global title and the axis titles can be modified the following way:; [...]; auto mg = new TMultiGraph;; mg->SetTitle(""title;xaxis title; yaxis title"");; mg->Add(",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:5426,Availability,avail,available,5426,"r1"");; gr1->SetTitle(""graph 1"");; gr1->SetMarkerStyle(21);; gr1->SetDrawOption(""AP"");; gr1->SetLineColor(2);; gr1->SetLineWidth(4);; gr1->SetFillStyle(0);; ; auto gr2 = new TGraph( size, px, py2 );; gr2->SetName(""gr2"");; gr2->SetTitle(""graph 2"");; gr2->SetMarkerStyle(22);; gr2->SetMarkerColor(2);; gr2->SetDrawOption(""P"");; gr2->SetLineColor(3);; gr2->SetLineWidth(4);; gr2->SetFillStyle(0);; ; auto gr3 = new TGraph( size, px, py3 );; gr3->SetName(""gr3"");; gr3->SetTitle(""graph 3"");; gr3->SetMarkerStyle(23);; gr3->SetLineColor(4);; gr3->SetLineWidth(4);; gr3->SetFillStyle(0);; ; mg->Add( gr1 );; mg->Add( gr2 );; ; gr3->Draw(""ALP"");; mg->Draw(""LP"");; c3->BuildLegend();; }; sizesize_t size(const MatrixT &matrix)retrieve the size of a square matrix; int; c3return c3Definition legend3.C:15. Automatic coloring; Automatic coloring according to the current palette is available as shown in the following example:; ; void multigraphpalettecolor(); {; auto mg = new TMultiGraph();; ; auto gr1 = new TGraph(); gr1->SetMarkerStyle(20);; auto gr2 = new TGraph(); gr2->SetMarkerStyle(21);; auto gr3 = new TGraph(); gr3->SetMarkerStyle(23);; auto gr4 = new TGraph(); gr4->SetMarkerStyle(24);; ; Double_t dx = 6.28/100;; Double_t x = -3.14;; ; for (int i=0; i<=100; i++) {; x = x+dx;; gr1->SetPoint(i,x,2.*TMath::Sin(x));; gr2->SetPoint(i,x,TMath::Cos(x));; gr3->SetPoint(i,x,TMath::Cos(x*x));; gr4->SetPoint(i,x,TMath::Cos(x*x*x));; }; ; mg->Add(gr4,""PL"");; mg->Add(gr3,""PL"");; mg->Add(gr2,""*L"");; mg->Add(gr1,""PL"");; ; mg->Draw(""A pmc plc"");; }; . Reverse axis; SinceROOT version 6.19/02; When a TMultiGraph is drawn, the X-axis is drawn with increasing values from left to right and the Y-axis from bottom to top. The two options RX and RY allow to change this order. The option RX allows to draw the X-axis with increasing values from right to left and the RY option allows to draw the Y-axis with increasing values from top to bottom. The following example illustrate how to use these options.; {; aut",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:18153,Availability,error,error,18153,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:18242,Availability,error,error,18242,"n ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:18397,Availability,error,error,18397,"; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:18694,Availability,error,error,18694,"lete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:22432,Availability,error,error,22432,"d * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:29906,Availability,error,errors,29906,"MultiGraph.h. ◆ Fit() [1/2]. TFitResultPtr TMultiGraph::Fit ; (; const char * ; fname, . Option_t * ; option = """", . Option_t * ; goption = """", . Axis_t ; xmin = 0, . Axis_t ; xmax = 0 . ). virtual . Fit this graph with function with name fname. ; interface to TF1::Fit(TF1 *f1... ; Definition at line 526 of file TMultiGraph.cxx. ◆ Fit() [2/2]. TFitResultPtr TMultiGraph::Fit ; (; TF1 * ; f1, . Option_t * ; option = """", . Option_t * ; goption = """", . Axis_t ; rxmin = 0, . Axis_t ; rxmax = 0 . ). virtual . Fit this multigraph with function f1. ; In this function all graphs of the multigraph are fitted simultaneously; f1 is an already predefined function created by TF1. Predefined functions such as gaus, expo and poln are automatically created by ROOT.; The list of fit options is given in parameter optionwhich may takes the following values:. ""W"" Ignore all the point errors; ""U"" Use a User specified fitting algorithm (via SetFCN); ""Q"" Quiet mode (minimum printing); ""V"" Verbose mode (default is between Q and V); ""B"" Use this option when you want to fix one or more parameters and the fitting function is like ""gaus"",""expo"",""poln"",""landau"".; ""R"" Use the Range specified in the function range; ""N"" Do not store the graphics function, do not draw; ""0"" Do not plot the result of the fit. By default the fitted function is drawn unless the option""N"" above is specified.; ""+"" Add this new fitted function to the list of fitted functions (by default, any previous function is deleted); ""C"" In case of linear fitting, not calculate the chisquare (saves time); ""F"" If fitting a polN, switch to minuit fitter; ""ROB"" In case of linear fitting, compute the LTS regression coefficients (robust(resistant) regression), using the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points. When the fit is drawn (by default), the parameter goption may be used to specify a list of graphics options. See TGraph::Paint for a complete list o",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:30715,Availability,robust,robust,30715,"graphs of the multigraph are fitted simultaneously; f1 is an already predefined function created by TF1. Predefined functions such as gaus, expo and poln are automatically created by ROOT.; The list of fit options is given in parameter optionwhich may takes the following values:. ""W"" Ignore all the point errors; ""U"" Use a User specified fitting algorithm (via SetFCN); ""Q"" Quiet mode (minimum printing); ""V"" Verbose mode (default is between Q and V); ""B"" Use this option when you want to fix one or more parameters and the fitting function is like ""gaus"",""expo"",""poln"",""landau"".; ""R"" Use the Range specified in the function range; ""N"" Do not store the graphics function, do not draw; ""0"" Do not plot the result of the fit. By default the fitted function is drawn unless the option""N"" above is specified.; ""+"" Add this new fitted function to the list of fitted functions (by default, any previous function is deleted); ""C"" In case of linear fitting, not calculate the chisquare (saves time); ""F"" If fitting a polN, switch to minuit fitter; ""ROB"" In case of linear fitting, compute the LTS regression coefficients (robust(resistant) regression), using the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points. When the fit is drawn (by default), the parameter goption may be used to specify a list of graphics options. See TGraph::Paint for a complete list of these options.; In order to use the Range option, one must first create a function with the expression to be fitted. For example, if your graph has a defined range between -4 and 4 and you want to fit a gaussian only in the interval 1 to 3, you can do: TF1 *f1 = new TF1(""f1"",""gaus"",1,3);; graph->Fit(""f1"",""R"");; f1TF1 * f1Definition legend1.C:11; graphDefinition graph.py:1. Who is calling this function ?; Note that this function is called when calling TGraphErrors::Fit or TGraphAsymmErrors::Fit ot TGraphBentErrors::Fit see the discussion below on the errors calcul",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:31588,Availability,error,errors,31588,"is deleted); ""C"" In case of linear fitting, not calculate the chisquare (saves time); ""F"" If fitting a polN, switch to minuit fitter; ""ROB"" In case of linear fitting, compute the LTS regression coefficients (robust(resistant) regression), using the default fraction of good points; ""ROB=0.x"" - compute the LTS regression coefficients, using 0.x as a fraction of good points. When the fit is drawn (by default), the parameter goption may be used to specify a list of graphics options. See TGraph::Paint for a complete list of these options.; In order to use the Range option, one must first create a function with the expression to be fitted. For example, if your graph has a defined range between -4 and 4 and you want to fit a gaussian only in the interval 1 to 3, you can do: TF1 *f1 = new TF1(""f1"",""gaus"",1,3);; graph->Fit(""f1"",""R"");; f1TF1 * f1Definition legend1.C:11; graphDefinition graph.py:1. Who is calling this function ?; Note that this function is called when calling TGraphErrors::Fit or TGraphAsymmErrors::Fit ot TGraphBentErrors::Fit see the discussion below on the errors calculation. Setting initial conditions; Parameters must be initialized before invoking the Fit function. The setting of the parameter initial values is automatic for the predefined functions : poln, expo, gaus, landau. One can however disable this automatic computation by specifying the option ""B"". You can specify boundary limits for some or all parameters via f1->SetParLimits(p_number, parmin, parmax);; TF1::SetParLimitsvirtual void SetParLimits(Int_t ipar, Double_t parmin, Double_t parmax)Set lower and upper limits for parameter ipar.Definition TF1.cxx:3507; if parmin>=parmax, the parameter is fixed Note that you are not forced to fix the limits for all parameters. For example, if you fit a function with 6 parameters, you can do: func->SetParameters(0,3.1,1.e-6,0.1,-8,100);; func->SetParLimits(4,-10,-4);; func->SetParLimits(5, 1,1);; With this setup, parameters 0->3 can vary freely Parameter 4 ha",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:34438,Availability,error,error,34438,":Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t maxpar=25)Static function returning a pointer to the current fitter.Definition TVirtualFitter.cxx:159; where MyFittingFunction is of type: extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; f#define f(i)Definition RSha256.hxx:104. Access to the fit result; The function returns a TFitResultPtr which can hold a pointer to a TFitResult object. By default the TFitResultPtr contains only the status of the fit and it converts automatically to an integer. If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves as a smart pointer to it. For example one can do: TFitResultPtr r = graph->Fit(""myFunc"",""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TMatrixTSym< Double_t >; The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also from the fitted function. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each graph. When TGraph::Fit is invoked, the fitted function is added to this list. Given a graph gr, one can retrieve an associated function with: TF1 *myfunc = gr->GetFunction(""myfunc"");; TGraph::GetFunctionTF1 * GetFunction(const char *name) const",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:35030,Availability,error,error,35030,"ger. If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves as a smart pointer to it. For example one can do: TFitResultPtr r = graph->Fit(""myFunc"",""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TMatrixTSym< Double_t >; The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also from the fitted function. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each graph. When TGraph::Fit is invoked, the fitted function is added to this list. Given a graph gr, one can retrieve an associated function with: TF1 *myfunc = gr->GetFunction(""myfunc"");; TGraph::GetFunctionTF1 * GetFunction(const char *name) constReturn pointer to function with name.Definition TGraph.cxx:1416; grTGraphErrors * grDefinition legend1.C:25; If the graph is made persistent, the list of associated functions is also persistent. Given a pointer (see above) to an associated function myfunc, one can retrieve the function/fit parameters with calls such as: Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter; TF1::GetParErrorvirtual Double_t GetParError(Int_t ipar)",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:35968,Availability,error,error,35968,"class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TMatrixTSym< Double_t >; The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also from the fitted function. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each graph. When TGraph::Fit is invoked, the fitted function is added to this list. Given a graph gr, one can retrieve an associated function with: TF1 *myfunc = gr->GetFunction(""myfunc"");; TGraph::GetFunctionTF1 * GetFunction(const char *name) constReturn pointer to function with name.Definition TGraph.cxx:1416; grTGraphErrors * grDefinition legend1.C:25; If the graph is made persistent, the list of associated functions is also persistent. Given a pointer (see above) to an associated function myfunc, one can retrieve the function/fit parameters with calls such as: Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter; TF1::GetParErrorvirtual Double_t GetParError(Int_t ipar) constReturn value of parameter number ipar.Definition TF1.cxx:1930; TF1::GetChisquareDouble_t GetChisquare() constReturn the Chisquare after fitting. See ROOT::Fit::FitResult::Chi2()Definition TF1.h:472; TF1::GetParametervirtual Double_t GetParameter(Int_t ipar) constDefinition TF1.h:540. Fit Statistics; You can change the statistics box to display the fit parameters with the TStyle::SetOptFit(mode) method. This mode has four digits. mode = pcev (default = 0111). v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degrees of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011); prints the fit probability, parameter names/values, and errors. You can change the position of the statistics box with these lines (where g is a pointer to the TGraph):; Roo",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:36572,Availability,error,errors,36572,"C:25; If the graph is made persistent, the list of associated functions is also persistent. Given a pointer (see above) to an associated function myfunc, one can retrieve the function/fit parameters with calls such as: Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter; TF1::GetParErrorvirtual Double_t GetParError(Int_t ipar) constReturn value of parameter number ipar.Definition TF1.cxx:1930; TF1::GetChisquareDouble_t GetChisquare() constReturn the Chisquare after fitting. See ROOT::Fit::FitResult::Chi2()Definition TF1.h:472; TF1::GetParametervirtual Double_t GetParameter(Int_t ipar) constDefinition TF1.h:540. Fit Statistics; You can change the statistics box to display the fit parameters with the TStyle::SetOptFit(mode) method. This mode has four digits. mode = pcev (default = 0111). v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degrees of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011); prints the fit probability, parameter names/values, and errors. You can change the position of the statistics box with these lines (where g is a pointer to the TGraph):; Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408. Definition at line 699 of file TMultiGraph.cxx. ◆ FitPanel(). void TMultiGraph::FitPanel ; (; ). virtual . Display a panel with all histogram fit options. ; See class TFitPanel for example ; Definition at line 716 of file TMultiGraph.cxx. ◆ GetFunction(). TF1 * TMultiGraph::GetFunction ; (; const char * ; name); const. Return pointer to function with name. ; Functions such as TGraph::Fi",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:36775,Availability,error,errors,36775,"ated function myfunc, one can retrieve the function/fit parameters with calls such as: Double_t chi2 = myfunc->GetChisquare();; Double_t par0 = myfunc->GetParameter(0); //value of 1st parameter; Double_t err0 = myfunc->GetParError(0); //error on first parameter; TF1::GetParErrorvirtual Double_t GetParError(Int_t ipar) constReturn value of parameter number ipar.Definition TF1.cxx:1930; TF1::GetChisquareDouble_t GetChisquare() constReturn the Chisquare after fitting. See ROOT::Fit::FitResult::Chi2()Definition TF1.h:472; TF1::GetParametervirtual Double_t GetParameter(Int_t ipar) constDefinition TF1.h:540. Fit Statistics; You can change the statistics box to display the fit parameters with the TStyle::SetOptFit(mode) method. This mode has four digits. mode = pcev (default = 0111). v = 1; print name/values of parameters; e = 1; print errors (if e=1, v must be 1); c = 1; print Chisquare/Number of degrees of freedom; p = 1; print Probability. For example: gStyle->SetOptFit(1011); prints the fit probability, parameter names/values, and errors. You can change the position of the statistics box with these lines (where g is a pointer to the TGraph):; Root > TPaveStats *st = (TPaveStats*)g->GetListOfFunctions()->FindObject(""stats""); Root > st->SetX1NDC(newx1); //new x start position; Root > st->SetX2NDC(newx2); //new x end position; TObject::FindObjectvirtual TObject * FindObject(const char *name) constMust be redefined in derived classes.Definition TObject.cxx:408. Definition at line 699 of file TMultiGraph.cxx. ◆ FitPanel(). void TMultiGraph::FitPanel ; (; ). virtual . Display a panel with all histogram fit options. ; See class TFitPanel for example ; Definition at line 716 of file TMultiGraph.cxx. ◆ GetFunction(). TF1 * TMultiGraph::GetFunction ; (; const char * ; name); const. Return pointer to function with name. ; Functions such as TGraph::Fit store the fitted function in the list of functions of this graph. ; Definition at line 1086 of file TMultiGraph.cxx. ◆ GetGraphDra",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:38269,Deployability,update,updated,38269,"e 699 of file TMultiGraph.cxx. ◆ FitPanel(). void TMultiGraph::FitPanel ; (; ). virtual . Display a panel with all histogram fit options. ; See class TFitPanel for example ; Definition at line 716 of file TMultiGraph.cxx. ◆ GetFunction(). TF1 * TMultiGraph::GetFunction ; (; const char * ; name); const. Return pointer to function with name. ; Functions such as TGraph::Fit store the fitted function in the list of functions of this graph. ; Definition at line 1086 of file TMultiGraph.cxx. ◆ GetGraphDrawOption(). Option_t * TMultiGraph::GetGraphDrawOption ; (; const TGraph * ; gr); const. virtual . Return the draw option for the TGraph gr in this TMultiGraph. ; The return option is the one specified when calling TMultiGraph::Add(gr,option). ; Definition at line 740 of file TMultiGraph.cxx. ◆ GetHistogram(). TH1F * TMultiGraph::GetHistogram ; (; ). Returns a pointer to the histogram used to draw the axis. ; Takes into account following cases. if fHistogram exists it is returned; if fHistogram doesn't exists and gPad exists gPad is updated. That may trigger the creation of fHistogram. If fHistogram still does not exit but hframe does (if user called TPad::DrawFrame) the pointer to hframe histogram is returned; after the two previous steps, if fHistogram still doesn't exist, then it is created. . Definition at line 1015 of file TMultiGraph.cxx. ◆ GetListOfFunctions() [1/2]. TList * TMultiGraph::GetListOfFunctions ; (; ). Return pointer to list of functions. ; If pointer is null create the list ; Definition at line 1096 of file TMultiGraph.cxx. ◆ GetListOfFunctions() [2/2]. const TList * TMultiGraph::GetListOfFunctions ; (; ); const. inline . Definition at line 72 of file TMultiGraph.h. ◆ GetListOfGraphs(). TList * TMultiGraph::GetListOfGraphs ; (; ); const. inline . Definition at line 68 of file TMultiGraph.h. ◆ GetXaxis(). TAxis * TMultiGraph::GetXaxis ; (; ). Get x axis of the graph. ; This method returns a valid axis only after the TMultigraph has been drawn. ; Definitio",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:18159,Integrability,message,message,18159,"tructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:18700,Integrability,message,message,18700,"lete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:19690,Integrability,message,message,19690,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:22438,Integrability,message,message,22438,"d * operator new (size_t sz, void *vp);  ; void * operator new[] (size_t sz);  ; void * operator new[] (size_t sz, void *vp);  ; TObject & operator= (const TObject &rhs);  TObject assignment operator. ;  ; virtual void Pop ();  Pop on object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:22811,Integrability,message,message,22811,"e from the current directory. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  G",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:29278,Integrability,interface,interface,29278,"w(). void TMultiGraph::Draw ; (; Option_t * ; option = """"). overridevirtual . Draw this multigraph with its current attributes. ; Options to draw a graph are described in TGraphPainter.; The drawing option for each TGraph may be specified as an optional second argument of the Add function. You can use GetGraphDrawOption to return this option.; If a draw option is specified, it will be used to draw the graph, otherwise the graph will be drawn with the option specified in TMultiGraph::Draw. Use GetDrawOption to return the option specified when drawing the TMultiGraph. ; Reimplemented from TObject.; Definition at line 508 of file TMultiGraph.cxx. ◆ end(). TIter TMultiGraph::end ; (; ); const. inline . Definition at line 70 of file TMultiGraph.h. ◆ Fit() [1/2]. TFitResultPtr TMultiGraph::Fit ; (; const char * ; fname, . Option_t * ; option = """", . Option_t * ; goption = """", . Axis_t ; xmin = 0, . Axis_t ; xmax = 0 . ). virtual . Fit this graph with function with name fname. ; interface to TF1::Fit(TF1 *f1... ; Definition at line 526 of file TMultiGraph.cxx. ◆ Fit() [2/2]. TFitResultPtr TMultiGraph::Fit ; (; TF1 * ; f1, . Option_t * ; option = """", . Option_t * ; goption = """", . Axis_t ; rxmin = 0, . Axis_t ; rxmax = 0 . ). virtual . Fit this multigraph with function f1. ; In this function all graphs of the multigraph are fitted simultaneously; f1 is an already predefined function created by TF1. Predefined functions such as gaus, expo and poln are automatically created by ROOT.; The list of fit options is given in parameter optionwhich may takes the following values:. ""W"" Ignore all the point errors; ""U"" Use a User specified fitting algorithm (via SetFCN); ""Q"" Quiet mode (minimum printing); ""V"" Verbose mode (default is between Q and V); ""B"" Use this option when you want to fix one or more parameters and the fitting function is like ""gaus"",""expo"",""poln"",""landau"".; ""R"" Use the Range specified in the function range; ""N"" Do not store the graphics function, do not draw; ""0"" Do",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:40839,Integrability,rout,routine,40839,". ◆ InitPolynom(). void TMultiGraph::InitPolynom ; (; Double_t ; xmin, . Double_t ; xmax . ). virtual . Compute Initial values of parameters for a polynom. ; Definition at line 817 of file TMultiGraph.cxx. ◆ IsA(). TClass * TMultiGraph::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 85 of file TMultiGraph.h. ◆ IsInside(). Int_t TMultiGraph::IsInside ; (; Double_t ; x, . Double_t ; y . ); const. virtual . Return 1 if the point (x,y) is inside one of the graphs 0 otherwise. ; Definition at line 989 of file TMultiGraph.cxx. ◆ LeastSquareFit(). void TMultiGraph::LeastSquareFit ; (; Int_t ; m, . Double_t * ; a, . Double_t ; xmin, . Double_t ; xmax . ). virtual . Least squares lpolynomial fitting without weights. . m number of parameters; a array of parameters; first 1st point number to fit (default =0); last last point number to fit (default=fNpoints-1). based on CERNLIB routine LSQ: Translated to C++ by Rene Brun ; Definition at line 841 of file TMultiGraph.cxx. ◆ LeastSquareLinearFit(). void TMultiGraph::LeastSquareLinearFit ; (; Int_t ; ndata, . Double_t & ; a0, . Double_t & ; a1, . Int_t & ; ifail, . Double_t ; xmin, . Double_t ; xmax . ). virtual . Least square linear fit without weights. ; Fit a straight line (a0 + a1*x) to the data in this graph. ndata: number of points to fit; first: first point number to fit; last: last point to fit O(ndata should be last-first; ifail: return parameter indicating the status of the fit (ifail=0, fit is OK). extracted from CERNLIB LLSQ: Translated to C++ by Rene Brun ; Definition at line 936 of file TMultiGraph.cxx. ◆ operator=(). TMultiGraph & TMultiGraph::operator= ; (; const TMultiGraph & ; ). protecteddelete . ◆ Paint(). void TMultiGraph::Paint ; (; Option_t * ; chopt = """"). overridevirtual . Paint all the graphs of this multigraph. ; Reimplemented from TObject.; Definition at line 1130 of file TMultiGraph.cxx. ◆ PaintPads(). void TMultiGraph:",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:15256,Modifiability,inherit,inherited,15256,"d PaintPads (Option_t *chopt="""");  Divides the active pad and draws all Graphs in the Multigraph separately. ;  ; void PaintPolyLine3D (Option_t *chopt="""");  Paint all the graphs of this multigraph as 3D lines. ;  ; void PaintReverse (Option_t *chopt="""");  Paint all the graphs of this multigraph reverting values along X and/or Y axis. ;  ; void Print (Option_t *chopt="""") const override;  Print the list of graphs. ;  ; void RecursiveRemove (TObject *obj) override;  Recursively remove this object from a list. ;  ; void SavePrimitive (std::ostream &out, Option_t *option="""") override;  Save primitive as a C++ statement(s) on output stream out. ;  ; virtual void SetMaximum (Double_t maximum=-1111);  Set multigraph maximum. ;  ; virtual void SetMinimum (Double_t minimum=-1111);  Set multigraph minimum. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:16996,Modifiability,inherit,inherited,16996,"ide;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gRO",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:17789,Modifiability,inherit,inheritance,17789,"he TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:19788,Modifiability,inherit,inherits,19788,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:19905,Modifiability,inherit,inherits,19905,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:23312,Modifiability,inherit,inherited,23312,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TMultiGraph (const TMultiGraph &)=delete;  ; TMultiGraph & operator= (const TMultiGraph &)=delete;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TList * fFunctions {nullptr};  Pointer to list of functi",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:23522,Modifiability,inherit,inherited,23522,"stem error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TMultiGraph (const TMultiGraph &)=delete;  ; TMultiGraph & operator= (const TMultiGraph &)=delete;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TList * fFunctions {nullptr};  Pointer to list of functi",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:24167,Modifiability,inherit,inherited,24167,"st char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TMultiGraph (const TMultiGraph &)=delete;  ; TMultiGraph & operator= (const TMultiGraph &)=delete;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TList * fFunctions {nullptr};  Pointer to list of functions (fits and user) ;  ; TList * fGraphs {nullptr};  Pointer to list of TGraphs. ;  ; TH1F * fHistogram {nullptr};  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum {-1111};  Maximum value for plotting along y. ;  ; Double_t fMinimum {-1111};  Minimum value for plotting along y. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedSta",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:24753,Modifiability,inherit,inherited,24753," static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TMultiGraph (const TMultiGraph &)=delete;  ; TMultiGraph & operator= (const TMultiGraph &)=delete;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TList * fFunctions {nullptr};  Pointer to list of functions (fits and user) ;  ; TList * fGraphs {nullptr};  Pointer to list of TGraphs. ;  ; TH1F * fHistogram {nullptr};  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum {-1111};  Maximum value for plotting along y. ;  ; Double_t fMinimum {-1111};  Minimum value for plotting along y. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiGraph.h>. Inheritance diagram for TMultiGraph:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:24857,Modifiability,inherit,inherited,24857," SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions;  TMultiGraph (const TMultiGraph &)=delete;  ; TMultiGraph & operator= (const TMultiGraph &)=delete;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; TList * fFunctions {nullptr};  Pointer to list of functions (fits and user) ;  ; TList * fGraphs {nullptr};  Pointer to list of TGraphs. ;  ; TH1F * fHistogram {nullptr};  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum {-1111};  Maximum value for plotting along y. ;  ; Double_t fMinimum {-1111};  Minimum value for plotting along y. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiGraph.h>. Inheritance diagram for TMultiGraph:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMultiGraph() [1/3]. TMultiGraph::TMultiGraph ; (; const TMultiGraph & ; ). protecteddelete . ◆ TMultiGraph() [2/3]. TMultiGraph::TMultiGraph ; (; ).",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:25498,Modifiability,inherit,inherited,25498,"fHistogram {nullptr};  Pointer to histogram used for drawing axis. ;  ; Double_t fMaximum {-1111};  Maximum value for plotting along y. ;  ; Double_t fMinimum {-1111};  Minimum value for plotting along y. ;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiGraph.h>. Inheritance diagram for TMultiGraph:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMultiGraph() [1/3]. TMultiGraph::TMultiGraph ; (; const TMultiGraph & ; ). protecteddelete . ◆ TMultiGraph() [2/3]. TMultiGraph::TMultiGraph ; (; ). TMultiGraph default constructor. ; Definition at line 369 of file TMultiGraph.cxx. ◆ TMultiGraph() [3/3]. TMultiGraph::TMultiGraph ; (; const char * ; name, . const char * ; title . ). Constructor with name and title. ; Definition at line 375 of file TMultiGraph.cxx. ◆ ~TMultiGraph(). TMultiGraph::~TMultiGraph ; (; ). override . TMultiGraph destructor. ; Definition at line 383 of file TMultiGraph.cxx. Member Function Documentation. ◆ Add() [1/2]. void TMultiGraph::Add ; (; TGraph * ; graph, . Option_t * ; chopt = """" . ). virtual . Add a new graph to the list of graphs. ; Note that the graph is",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:1138,Performance,perform,performed,1138,"blic Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; List of all members ; TMultiGraph Class ReferenceHistogram Library » Graph classes. ; A TMultiGraph is a collection of TGraph (or derived) objects. . Introduction; MultiGraphs' drawing; Setting drawing options; Titles setting; The option &quot;3D&quot;; Legend drawing; Automatic coloring; Reverse axis. MultiGraphs' fitting; Fit box position. Axis' limits setting. Introduction; A TMultiGraph allows to manipulate a set of graphs as a single entity. In particular, when drawn, the X and Y axis ranges are automatically computed such as all the graphs will be visible.; TMultiGraph::Add should be used to add a new graph to the list.; The TMultiGraph owns the objects in the list.; The number of graphs in a multigraph can be retrieve with: mg->GetListOfGraphs()->GetEntries();. MultiGraphs' Drawing; The drawing options are the same as for TGraph. Like for TGraph, the painting is performed thanks to the TGraphPainter class. All details about the various painting options are given in this class.; Example: TGraph *gr1 = new TGraph(...; TGraphErrors *gr2 = new TGraphErrors(...; TMultiGraph *mg = new TMultiGraph();; mg->Add(gr1,""lp"");; mg->Add(gr2,""cp"");; mg->Draw(""a"");; TGraphErrorsA TGraphErrors is a TGraph with error bars.Definition TGraphErrors.h:26; TGraphA TGraph is an object made of two arrays X and Y with npoints each.Definition TGraph.h:41; TMultiGraphA TMultiGraph is a collection of TGraph (or derived) objects.Definition TMultiGraph.h:34; TMultiGraph::TMultiGraphTMultiGraph()TMultiGraph default constructor.Definition TMultiGraph.cxx:369; TMultiGraph::Addvirtual void Add(TGraph *graph, Option_t *chopt="""")Add a new graph to the list of graphs.Definition TMultiGraph.cxx:419; Setting drawing options; The drawing option for each TGraph may be specified as an optional second argument of the Add function.; If a draw option is specified, it will be used to draw the gr",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:16124,Security,hash,hash,16124," override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetName (const char *name);  Set the name of the TNamed. ;  ; virtual void SetNameTitle (const char *name, const char *title);  Set all the TNamed parameters (name and title). ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiGraph.html:34284,Security,access,access,34284,":Fitterstatic TVirtualFitter * Fitter(TObject *obj, Int_t maxpar=25)Static function returning a pointer to the current fitter.Definition TVirtualFitter.cxx:159; where MyFittingFunction is of type: extern void MyFittingFunction(Int_t &npar, Double_t *gin, Double_t &f, Double_t *u, Int_t flag);; f#define f(i)Definition RSha256.hxx:104. Access to the fit result; The function returns a TFitResultPtr which can hold a pointer to a TFitResult object. By default the TFitResultPtr contains only the status of the fit and it converts automatically to an integer. If the option ""S"" is instead used, TFitResultPtr contains the TFitResult and behaves as a smart pointer to it. For example one can do: TFitResultPtr r = graph->Fit(""myFunc"",""S"");; TMatrixDSym cov = r->GetCovarianceMatrix(); // to access the covariance matrix; Double_t par0 = r->Parameter(0); // retrieve the value for the parameter 0; Double_t err0 = r->ParError(0); // retrieve the error for the parameter 0; r->Print(""V""); // print full information of fit including covariance matrix; r->Write(); // store the result in a file; rOption_t Option_t TPoint TPoint const char GetTextMagnitude GetFillStyle GetLineColor GetLineWidth GetMarkerStyle GetTextAlign GetTextColor GetTextSize void char Point_t Rectangle_t WindowAttributes_t Float_t rDefinition TGWin32VirtualXProxy.cxx:168; TFitResultPtrProvides an indirection to the TFitResult class and with a semantics identical to a TFitResult pointe...Definition TFitResultPtr.h:32; TMatrixTSym< Double_t >; The fit parameters, error and chi2 (but not covariance matrix) can be retrieved also from the fitted function. Associated functions; One or more object (typically a TF1*) can be added to the list of functions (fFunctions) associated to each graph. When TGraph::Fit is invoked, the fitted function is added to this list. Given a graph gr, one can retrieve an associated function with: TF1 *myfunc = gr->GetFunction(""myfunc"");; TGraph::GetFunctionTF1 * GetFunction(const char *name) const",MatchSource.WIKI,doc/master/classTMultiGraph.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiGraph.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:1014,Availability,avail,available,1014,"; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMultiLayerPerceptron Class Reference. ; This class describes a neural network. ; There are facilities to train the network and use the output.; The input layer is made of inactive neurons (returning the optionally normalized input) and output neurons are linear. The type of hidden neurons is free, the default being sigmoids. (One should still try to pass normalized inputs, e.g. between [0.,1]); The basic input is a TTree and two (training and test) TEventLists. Input and output neurons are assigned a value computed for each event with the same possibilities as for TTree::Draw(). Events may be weighted individually or via TTree::SetWeight(). 6 learning methods are available: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:1697,Availability,error,errors,1697,"ve neurons (returning the optionally normalized input) and output neurons are linear. The type of hidden neurons is free, the default being sigmoids. (One should still try to pass normalized inputs, e.g. between [0.,1]); The basic input is a TTree and two (training and test) TEventLists. Input and output neurons are assigned a value computed for each event with the same possibilities as for TTree::Draw(). Events may be weighted individually or via TTree::SetWeight(). 6 learning methods are available: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal over background discrimination). More than 50% of neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package originally written by Jerome Schwindling. MLPfit remains one of the fastest tool for neural networks studies, and this ROOT add-on will not try to compete on that. A clear a",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:3577,Availability,error,error,3577,"ation has been chosen over a faster but more difficult to maintain code. Nevertheless, the time penalty does not exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); wi",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:3618,Availability,error,error,3618,"t exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); with; \(\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\); The parameters for ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:3684,Availability,error,error,3684,"t exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); with; \(\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\); The parameters for ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:3802,Availability,error,error,3802,"ucture:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); with; \(\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\); The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent with fixed step size (batch learning):; It i",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:4197,Availability,error,errors,4197,"h f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); with; \(\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\); The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent with fixed step size (batch learning):; It is the same as the stochastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm:; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower tau = higher precision = slower searc",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:8335,Availability,avail,available,8335,"itly, or via a string containing the formula to be used to define them, exactly as for a TCut.; The learning method is defined using the TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :. TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS. A weight can be assigned to events, either in the constructor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, one starts the training with TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are available.; Example: net.Train(100,""text, graph, update=10"");; When the neural net is trained, it can be used directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a standalone C++ code ( TMultiLayerPerceptron::Export() ).; Finally, note that even if this implementation is inspired from the mlpfit code, the feature lists are not exactly matching:. mlpfit hybrid learning method is not implemented; output neurons can be normalized, this is not the case for mlpfit; the neural net is exported in C++, FORTRAN or PYTHON; the drawResult() method allows a fast check of the learning procedure. In addition, the paw version of mlpfit had additional limitations on the number of neurons, hidden layers and inputs/outputs that does not apply to TMultiLayerPerceptron. ; Definition at line 26 of file TMultiLayerPerceptron.h. Public Types; enum  EDataSet { kTraining; , kTest; };  ; enum  ELearningMethod { ;   kStochastic; , kBatch; , kSteepestDescent; , kRibierePolak; , ;   kFletcherReeves",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:16654,Availability,error,error,16654,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:16743,Availability,error,error,16743,"longs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:16898,Availability,error,error,16898,"y. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:17195,Availability,error,error,17195,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:21759,Availability,error,error,21759," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:23881,Availability,error,error,23881,". ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void AttachData ();  Connects the TTree to Neurons in input and output layers. ;  ; void BFGSDir (TMatrixD &, Double_t *);  Computes the direction for the BFGS algorithm as the product between the Hessian estimate (bfgsh) and the dir. ;  ; void BuildNetwork ();  Instantiates the network from the description. ;  ; void ConjugateGradientsDir (Double_t *, Double_t);  Sets the search direction to conjugate gradient direction beta should be: ;  ; Double_t DerivDir (Double_t *);  scalar product between gradient and direction = derivative along direction ;  ; bool GetBFGSH (TMatrixD &, TMatrixD &, TMatrixD &);  Computes the hessian matrix using the BFGS update algorithm. ;  ; Double_t GetCrossEntropy () const;  Cross entropy error for a softmax output neuron, for a given event. ;  ; Double_t GetCrossEntropyBinary () const;  Cross entropy error for sigmoid output neurons, for a given event. ;  ; void GetEntry (Int_t) const;  Load an entry into the network. ;  ; Double_t GetSumSquareError () const;  Error on the output for a given event. ;  ; Bool_t LineSearch (Double_t *, Double_t *);  Search along the line defined by direction. ;  ; void MLP_Batch (Double_t *);  One step for the batch (stochastic) method. ;  ; void MLP_Stochastic (Double_t *);  One step for the stochastic method buffer should contain the previous dw vector and will be updated. ;  ; void SetGammaDelta (TMatrixD &, TMatrixD &, Double_t *);  Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ;  ; void SteepestDir (Double_t *);  Sets the search direction to steepest descent. ;  ;  Pr",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:23996,Availability,error,error,23996,";  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void AttachData ();  Connects the TTree to Neurons in input and output layers. ;  ; void BFGSDir (TMatrixD &, Double_t *);  Computes the direction for the BFGS algorithm as the product between the Hessian estimate (bfgsh) and the dir. ;  ; void BuildNetwork ();  Instantiates the network from the description. ;  ; void ConjugateGradientsDir (Double_t *, Double_t);  Sets the search direction to conjugate gradient direction beta should be: ;  ; Double_t DerivDir (Double_t *);  scalar product between gradient and direction = derivative along direction ;  ; bool GetBFGSH (TMatrixD &, TMatrixD &, TMatrixD &);  Computes the hessian matrix using the BFGS update algorithm. ;  ; Double_t GetCrossEntropy () const;  Cross entropy error for a softmax output neuron, for a given event. ;  ; Double_t GetCrossEntropyBinary () const;  Cross entropy error for sigmoid output neurons, for a given event. ;  ; void GetEntry (Int_t) const;  Load an entry into the network. ;  ; Double_t GetSumSquareError () const;  Error on the output for a given event. ;  ; Bool_t LineSearch (Double_t *, Double_t *);  Search along the line defined by direction. ;  ; void MLP_Batch (Double_t *);  One step for the batch (stochastic) method. ;  ; void MLP_Stochastic (Double_t *);  One step for the stochastic method buffer should contain the previous dw vector and will be updated. ;  ; void SetGammaDelta (TMatrixD &, TMatrixD &, Double_t *);  Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ;  ; void SteepestDir (Double_t *);  Sets the search direction to steepest descent. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const c",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:39829,Availability,error,error,39829,"finition at line 1324 of file TMultiLayerPerceptron.cxx. ◆ Export(). void TMultiLayerPerceptron::Export ; (; Option_t * ; filename = ""NNfunction"", . Option_t * ; language = ""C++"" . ); const. Exports the NN as a function for any non-ROOT-dependant code Supported languages are: only C++ , FORTRAN and Python (yet) This feature is also useful if you want to plot the NN as a function (TF1 or TF2). ; Definition at line 1738 of file TMultiLayerPerceptron.cxx. ◆ GetBFGSH(). bool TMultiLayerPerceptron::GetBFGSH ; (; TMatrixD & ; bfgsh, . TMatrixD & ; gamma, . TMatrixD & ; delta . ). protected . Computes the hessian matrix using the BFGS update algorithm. ; from gamma (g_{(t+1)}-g_{(t)}) and delta (w_{(t+1)}-w_{(t)}). It returns true if such a direction could not be found (if gamma and delta are orthogonal). ; Definition at line 2405 of file TMultiLayerPerceptron.cxx. ◆ GetCrossEntropy(). Double_t TMultiLayerPerceptron::GetCrossEntropy ; (; ); const. protected . Cross entropy error for a softmax output neuron, for a given event. ; Definition at line 1142 of file TMultiLayerPerceptron.cxx. ◆ GetCrossEntropyBinary(). Double_t TMultiLayerPerceptron::GetCrossEntropyBinary ; (; ); const. protected . Cross entropy error for sigmoid output neurons, for a given event. ; Definition at line 1111 of file TMultiLayerPerceptron.cxx. ◆ GetDelta(). Double_t TMultiLayerPerceptron::GetDelta ; (; ); const. inline . Definition at line 78 of file TMultiLayerPerceptron.h. ◆ GetEntry(). void TMultiLayerPerceptron::GetEntry ; (; Int_t ; entry); const. protected . Load an entry into the network. ; Definition at line 759 of file TMultiLayerPerceptron.cxx. ◆ GetEpsilon(). Double_t TMultiLayerPerceptron::GetEpsilon ; (; ); const. inline . Definition at line 77 of file TMultiLayerPerceptron.h. ◆ GetError() [1/2]. Double_t TMultiLayerPerceptron::GetError ; (; Int_t ; event); const. Error on the output for a given event. ; Definition at line 1046 of file TMultiLayerPerceptron.cxx. ◆ GetError() [2/2]. Doub",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:40066,Availability,error,error,40066,"-dependant code Supported languages are: only C++ , FORTRAN and Python (yet) This feature is also useful if you want to plot the NN as a function (TF1 or TF2). ; Definition at line 1738 of file TMultiLayerPerceptron.cxx. ◆ GetBFGSH(). bool TMultiLayerPerceptron::GetBFGSH ; (; TMatrixD & ; bfgsh, . TMatrixD & ; gamma, . TMatrixD & ; delta . ). protected . Computes the hessian matrix using the BFGS update algorithm. ; from gamma (g_{(t+1)}-g_{(t)}) and delta (w_{(t+1)}-w_{(t)}). It returns true if such a direction could not be found (if gamma and delta are orthogonal). ; Definition at line 2405 of file TMultiLayerPerceptron.cxx. ◆ GetCrossEntropy(). Double_t TMultiLayerPerceptron::GetCrossEntropy ; (; ); const. protected . Cross entropy error for a softmax output neuron, for a given event. ; Definition at line 1142 of file TMultiLayerPerceptron.cxx. ◆ GetCrossEntropyBinary(). Double_t TMultiLayerPerceptron::GetCrossEntropyBinary ; (; ); const. protected . Cross entropy error for sigmoid output neurons, for a given event. ; Definition at line 1111 of file TMultiLayerPerceptron.cxx. ◆ GetDelta(). Double_t TMultiLayerPerceptron::GetDelta ; (; ); const. inline . Definition at line 78 of file TMultiLayerPerceptron.h. ◆ GetEntry(). void TMultiLayerPerceptron::GetEntry ; (; Int_t ; entry); const. protected . Load an entry into the network. ; Definition at line 759 of file TMultiLayerPerceptron.cxx. ◆ GetEpsilon(). Double_t TMultiLayerPerceptron::GetEpsilon ; (; ); const. inline . Definition at line 77 of file TMultiLayerPerceptron.h. ◆ GetError() [1/2]. Double_t TMultiLayerPerceptron::GetError ; (; Int_t ; event); const. Error on the output for a given event. ; Definition at line 1046 of file TMultiLayerPerceptron.cxx. ◆ GetError() [2/2]. Double_t TMultiLayerPerceptron::GetError ; (; TMultiLayerPerceptron::EDataSet ; set); const. Error on the whole dataset. ; Definition at line 1075 of file TMultiLayerPerceptron.cxx. ◆ GetEta(). Double_t TMultiLayerPerceptron::GetEta ; (; ); ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:49583,Availability,error,error,49583,"SteepestDir ; (; Double_t * ; dir). protected . Sets the search direction to steepest descent. ; Definition at line 2253 of file TMultiLayerPerceptron.cxx. ◆ Streamer(). void TMultiLayerPerceptron::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiLayerPerceptron::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 151 of file TMultiLayerPerceptron.h. ◆ Train(). void TMultiLayerPerceptron::Train ; (; Int_t ; nEpoch, . Option_t * ; option = ""text"", . Double_t ; minE = 0 . ). Train the network. ; nEpoch is the number of iterations. option can contain:; ""text"" (simple text output); ""graph"" (evoluting graphical training curves); ""update=X"" (step for the text/graph output update); ""+"" will skip the randomisation and start from the previous values.; ""current"" (draw in the current canvas); ""minErrorTrain"" (stop when NN error on the training sample gets below minE; ""minErrorTest"" (stop when NN error on the test sample gets below minE All combinations are available. . Definition at line 788 of file TMultiLayerPerceptron.cxx. Friends And Related Symbol Documentation. ◆ TMLPAnalyzer. friend class TMLPAnalyzer. friend . Definition at line 27 of file TMultiLayerPerceptron.h. Member Data Documentation. ◆ fCurrentTree. Int_t TMultiLayerPerceptron::fCurrentTree. private . ! index of the current tree in a chain ; Definition at line 124 of file TMultiLayerPerceptron.h. ◆ fCurrentTreeWeight. Double_t TMultiLayerPerceptron::fCurrentTreeWeight. private . ! weight of the current tree in a chain ; Definition at line 125 of file TMultiLayerPerceptron.h. ◆ fData. TTree* TMultiLayerPerceptron::fData. private . ! pointer to the tree used as datasource ; Definition at line 123 of file TMultiLayerPerceptron.h. ◆ fDelta. Double_t TMultiLayerPerceptron::fDelta. private . ! Delta - used in stochastic minimisation - Default=0. ; Definition at line 143 of file TMu",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:49658,Availability,error,error,49658,"SteepestDir ; (; Double_t * ; dir). protected . Sets the search direction to steepest descent. ; Definition at line 2253 of file TMultiLayerPerceptron.cxx. ◆ Streamer(). void TMultiLayerPerceptron::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiLayerPerceptron::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 151 of file TMultiLayerPerceptron.h. ◆ Train(). void TMultiLayerPerceptron::Train ; (; Int_t ; nEpoch, . Option_t * ; option = ""text"", . Double_t ; minE = 0 . ). Train the network. ; nEpoch is the number of iterations. option can contain:; ""text"" (simple text output); ""graph"" (evoluting graphical training curves); ""update=X"" (step for the text/graph output update); ""+"" will skip the randomisation and start from the previous values.; ""current"" (draw in the current canvas); ""minErrorTrain"" (stop when NN error on the training sample gets below minE; ""minErrorTest"" (stop when NN error on the test sample gets below minE All combinations are available. . Definition at line 788 of file TMultiLayerPerceptron.cxx. Friends And Related Symbol Documentation. ◆ TMLPAnalyzer. friend class TMLPAnalyzer. friend . Definition at line 27 of file TMultiLayerPerceptron.h. Member Data Documentation. ◆ fCurrentTree. Int_t TMultiLayerPerceptron::fCurrentTree. private . ! index of the current tree in a chain ; Definition at line 124 of file TMultiLayerPerceptron.h. ◆ fCurrentTreeWeight. Double_t TMultiLayerPerceptron::fCurrentTreeWeight. private . ! weight of the current tree in a chain ; Definition at line 125 of file TMultiLayerPerceptron.h. ◆ fData. TTree* TMultiLayerPerceptron::fData. private . ! pointer to the tree used as datasource ; Definition at line 123 of file TMultiLayerPerceptron.h. ◆ fDelta. Double_t TMultiLayerPerceptron::fDelta. private . ! Delta - used in stochastic minimisation - Default=0. ; Definition at line 143 of file TMu",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:49720,Availability,avail,available,49720,"SteepestDir ; (; Double_t * ; dir). protected . Sets the search direction to steepest descent. ; Definition at line 2253 of file TMultiLayerPerceptron.cxx. ◆ Streamer(). void TMultiLayerPerceptron::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiLayerPerceptron::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 151 of file TMultiLayerPerceptron.h. ◆ Train(). void TMultiLayerPerceptron::Train ; (; Int_t ; nEpoch, . Option_t * ; option = ""text"", . Double_t ; minE = 0 . ). Train the network. ; nEpoch is the number of iterations. option can contain:; ""text"" (simple text output); ""graph"" (evoluting graphical training curves); ""update=X"" (step for the text/graph output update); ""+"" will skip the randomisation and start from the previous values.; ""current"" (draw in the current canvas); ""minErrorTrain"" (stop when NN error on the training sample gets below minE; ""minErrorTest"" (stop when NN error on the test sample gets below minE All combinations are available. . Definition at line 788 of file TMultiLayerPerceptron.cxx. Friends And Related Symbol Documentation. ◆ TMLPAnalyzer. friend class TMLPAnalyzer. friend . Definition at line 27 of file TMultiLayerPerceptron.h. Member Data Documentation. ◆ fCurrentTree. Int_t TMultiLayerPerceptron::fCurrentTree. private . ! index of the current tree in a chain ; Definition at line 124 of file TMultiLayerPerceptron.h. ◆ fCurrentTreeWeight. Double_t TMultiLayerPerceptron::fCurrentTreeWeight. private . ! weight of the current tree in a chain ; Definition at line 125 of file TMultiLayerPerceptron.h. ◆ fData. TTree* TMultiLayerPerceptron::fData. private . ! pointer to the tree used as datasource ; Definition at line 123 of file TMultiLayerPerceptron.h. ◆ fDelta. Double_t TMultiLayerPerceptron::fDelta. private . ! Delta - used in stochastic minimisation - Default=0. ; Definition at line 143 of file TMu",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:3336,Deployability,continuous,continuous,3336,"red from the MLPfit package originally written by Jerome Schwindling. MLPfit remains one of the fastest tool for neural networks studies, and this ROOT add-on will not try to compete on that. A clear and flexible Object Oriented implementation has been chosen over a faster but more difficult to maintain code. Nevertheless, the time penalty does not exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is t",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:4454,Deployability,update,updated,4454,"error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); with; \(\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\); The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent with fixed step size (batch learning):; It is the same as the stochastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm:; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower tau = higher precision = slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the Polak-Ribiere updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Conjugate gradients with the Fletcher-Reeves updating formula:; Weights are set to the minimum along the line d",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:4843,Deployability,update,updated,4843,"ect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); with; \(\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\); The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent with fixed step size (batch learning):; It is the same as the stochastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm:; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower tau = higher precision = slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the Polak-Ribiere updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Conjugate gradients with the Fletcher-Reeves updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Broyden, Fletcher, Goldfarb, Shanno (BFGS) method:; Implies the computation of a NxN matrix compu",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:8191,Deployability,update,update,8191,"and the TEventLists can be defined in the constructor, or later with the suited setter method. The lists used for training and test can be defined either explicitly, or via a string containing the formula to be used to define them, exactly as for a TCut.; The learning method is defined using the TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :. TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS. A weight can be assigned to events, either in the constructor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, one starts the training with TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are available.; Example: net.Train(100,""text, graph, update=10"");; When the neural net is trained, it can be used directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a standalone C++ code ( TMultiLayerPerceptron::Export() ).; Finally, note that even if this implementation is inspired from the mlpfit code, the feature lists are not exactly matching:. mlpfit hybrid learning method is not implemented; output neurons can be normalized, this is not the case for mlpfit; the neural net is exported in C++, FORTRAN or PYTHON; the drawResult() method allows a fast check of the learning procedure. In addition, the paw version of mlpfit had additional limitations on the number of neurons, hidden layers and inputs/outputs that does not apply to TMultiLayerPerceptron. ; Definition at line 26 of file TMultiLayerPerceptron.h. Public ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:8233,Deployability,update,update,8233,"and the TEventLists can be defined in the constructor, or later with the suited setter method. The lists used for training and test can be defined either explicitly, or via a string containing the formula to be used to define them, exactly as for a TCut.; The learning method is defined using the TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :. TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS. A weight can be assigned to events, either in the constructor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, one starts the training with TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are available.; Example: net.Train(100,""text, graph, update=10"");; When the neural net is trained, it can be used directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a standalone C++ code ( TMultiLayerPerceptron::Export() ).; Finally, note that even if this implementation is inspired from the mlpfit code, the feature lists are not exactly matching:. mlpfit hybrid learning method is not implemented; output neurons can be normalized, this is not the case for mlpfit; the neural net is exported in C++, FORTRAN or PYTHON; the drawResult() method allows a fast check of the learning procedure. In addition, the paw version of mlpfit had additional limitations on the number of neurons, hidden layers and inputs/outputs that does not apply to TMultiLayerPerceptron. ; Definition at line 26 of file TMultiLayerPerceptron.h. Public ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:8384,Deployability,update,update,8384,"the TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :. TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS. A weight can be assigned to events, either in the constructor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, one starts the training with TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are available.; Example: net.Train(100,""text, graph, update=10"");; When the neural net is trained, it can be used directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a standalone C++ code ( TMultiLayerPerceptron::Export() ).; Finally, note that even if this implementation is inspired from the mlpfit code, the feature lists are not exactly matching:. mlpfit hybrid learning method is not implemented; output neurons can be normalized, this is not the case for mlpfit; the neural net is exported in C++, FORTRAN or PYTHON; the drawResult() method allows a fast check of the learning procedure. In addition, the paw version of mlpfit had additional limitations on the number of neurons, hidden layers and inputs/outputs that does not apply to TMultiLayerPerceptron. ; Definition at line 26 of file TMultiLayerPerceptron.h. Public Types; enum  EDataSet { kTraining; , kTest; };  ; enum  ELearningMethod { ;   kStochastic; , kBatch; , kSteepestDescent; , kRibierePolak; , ;   kFletcherReeves; , kBFGS. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x0",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:23808,Deployability,update,update,23808,"rited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void AttachData ();  Connects the TTree to Neurons in input and output layers. ;  ; void BFGSDir (TMatrixD &, Double_t *);  Computes the direction for the BFGS algorithm as the product between the Hessian estimate (bfgsh) and the dir. ;  ; void BuildNetwork ();  Instantiates the network from the description. ;  ; void ConjugateGradientsDir (Double_t *, Double_t);  Sets the search direction to conjugate gradient direction beta should be: ;  ; Double_t DerivDir (Double_t *);  scalar product between gradient and direction = derivative along direction ;  ; bool GetBFGSH (TMatrixD &, TMatrixD &, TMatrixD &);  Computes the hessian matrix using the BFGS update algorithm. ;  ; Double_t GetCrossEntropy () const;  Cross entropy error for a softmax output neuron, for a given event. ;  ; Double_t GetCrossEntropyBinary () const;  Cross entropy error for sigmoid output neurons, for a given event. ;  ; void GetEntry (Int_t) const;  Load an entry into the network. ;  ; Double_t GetSumSquareError () const;  Error on the output for a given event. ;  ; Bool_t LineSearch (Double_t *, Double_t *);  Search along the line defined by direction. ;  ; void MLP_Batch (Double_t *);  One step for the batch (stochastic) method. ;  ; void MLP_Stochastic (Double_t *);  One step for the stochastic method buffer should contain the previous dw vector and will be updated. ;  ; void SetGammaDelta (TMatrixD &, TMatrixD &, Double_t *);  Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)}",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:24503,Deployability,update,updated,24503," from the description. ;  ; void ConjugateGradientsDir (Double_t *, Double_t);  Sets the search direction to conjugate gradient direction beta should be: ;  ; Double_t DerivDir (Double_t *);  scalar product between gradient and direction = derivative along direction ;  ; bool GetBFGSH (TMatrixD &, TMatrixD &, TMatrixD &);  Computes the hessian matrix using the BFGS update algorithm. ;  ; Double_t GetCrossEntropy () const;  Cross entropy error for a softmax output neuron, for a given event. ;  ; Double_t GetCrossEntropyBinary () const;  Cross entropy error for sigmoid output neurons, for a given event. ;  ; void GetEntry (Int_t) const;  Load an entry into the network. ;  ; Double_t GetSumSquareError () const;  Error on the output for a given event. ;  ; Bool_t LineSearch (Double_t *, Double_t *);  Search along the line defined by direction. ;  ; void MLP_Batch (Double_t *);  One step for the batch (stochastic) method. ;  ; void MLP_Stochastic (Double_t *);  One step for the stochastic method buffer should contain the previous dw vector and will be updated. ;  ; void SetGammaDelta (TMatrixD &, TMatrixD &, Double_t *);  Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ;  ; void SteepestDir (Double_t *);  Sets the search direction to steepest descent. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions;  TMultiLayerPerceptron (const TMultiLayerPerceptron &);  ; void BuildFirstLayer (TString &);  Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ;  ; void BuildHiddenLayers (TString &);  Builds hidden layers. ;  ; void BuildLastLayer (TString &, Int_t);  B",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:25667,Deployability,update,updates,25667,"(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ;  ; void SteepestDir (Double_t *);  Sets the search direction to steepest descent. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions;  TMultiLayerPerceptron (const TMultiLayerPerceptron &);  ; void BuildFirstLayer (TString &);  Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ;  ; void BuildHiddenLayers (TString &);  Builds hidden layers. ;  ; void BuildLastLayer (TString &, Int_t);  Builds the output layer Neurons are linear combinations of input, by default. ;  ; void BuildOneHiddenLayer (const TString &sNumNodes, Int_t &layer, Int_t &prevStart, Int_t &prevStop, Bool_t lastLayer);  Builds a hidden layer, updates the number of layers. ;  ; void ExpandStructure ();  Expand the structure of the first layer. ;  ; void MLP_Line (Double_t *, Double_t *, Double_t);  Sets the weights to a point along a line Weights are set to [origin + (dist * dir)]. ;  ; TMultiLayerPerceptron & operator= (const TMultiLayerPerceptron &);  ; void Shuffle (Int_t *, Int_t) const;  Shuffle the Int_t index[n] in input. ;  . Private Attributes; Int_t fCurrentTree;  ! index of the current tree in a chain ;  ; Double_t fCurrentTreeWeight;  ! weight of the current tree in a chain ;  ; TTree * fData;  ! pointer to the tree used as datasource ;  ; Double_t fDelta;  ! Delta - used in stochastic minimisation - Default=0. ;  ; Double_t fEpsilon;  ! Epsilon - used in stochastic minimisation - Default=0. ;  ; Double_t fEta;  ! Eta - used in stochastic minimisation - Default=0.1 ;  ; Double_t fEtaDecay;  ! EtaDecay - Eta *= EtaDecay at each epoch - Default=1. ;  ; TTr",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:35793,Deployability,update,updates,35793,"ayers(). void TMultiLayerPerceptron::BuildHiddenLayers ; (; TString & ; hidden). private . Builds hidden layers. ; Definition at line 1419 of file TMultiLayerPerceptron.cxx. ◆ BuildLastLayer(). void TMultiLayerPerceptron::BuildLastLayer ; (; TString & ; output, . Int_t ; prev . ). private . Builds the output layer Neurons are linear combinations of input, by default. ; If the structure ends with ""!"", neurons are set up for classification, ie. with a sigmoid (1 neuron) or softmax (more neurons) activation function. ; Definition at line 1483 of file TMultiLayerPerceptron.cxx. ◆ BuildNetwork(). void TMultiLayerPerceptron::BuildNetwork ; (; ). protected . Instantiates the network from the description. ; Definition at line 1370 of file TMultiLayerPerceptron.cxx. ◆ BuildOneHiddenLayer(). void TMultiLayerPerceptron::BuildOneHiddenLayer ; (; const TString & ; sNumNodes, . Int_t & ; layer, . Int_t & ; prevStart, . Int_t & ; prevStop, . Bool_t ; lastLayer . ). private . Builds a hidden layer, updates the number of layers. ; Definition at line 1438 of file TMultiLayerPerceptron.cxx. ◆ Class(). static TClass * TMultiLayerPerceptron::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiLayerPerceptron::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiLayerPerceptron::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 151 of file TMultiLayerPerceptron.h. ◆ ComputeDEDw(). void TMultiLayerPerceptron::ComputeDEDw ; (; ); const. Compute the DEDw = sum on all training events of dedw for each weight normalized by the number of events. ; Definition at line 1163 of file TMultiLayerPerceptron.cxx. ◆ ConjugateGradientsDir(). void TMultiLayerPerceptron::ConjugateGradientsDir ; (; Double_t * ; dir, . Double_t ; beta . ). protected . Sets the search direction to conjugate gradient direction beta should be: ; \(||g_{(t+1)}||^2 / ||g_{(t)}||^2\",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:39484,Deployability,update,update,39484,"le_t TMultiLayerPerceptron::Evaluate ; (; Int_t ; index, . Double_t * ; params . ); const. Returns the Neural Net for a given set of input parameters #parameters must equal #input neurons. ; Definition at line 1713 of file TMultiLayerPerceptron.cxx. ◆ ExpandStructure(). void TMultiLayerPerceptron::ExpandStructure ; (; ). private . Expand the structure of the first layer. ; Definition at line 1324 of file TMultiLayerPerceptron.cxx. ◆ Export(). void TMultiLayerPerceptron::Export ; (; Option_t * ; filename = ""NNfunction"", . Option_t * ; language = ""C++"" . ); const. Exports the NN as a function for any non-ROOT-dependant code Supported languages are: only C++ , FORTRAN and Python (yet) This feature is also useful if you want to plot the NN as a function (TF1 or TF2). ; Definition at line 1738 of file TMultiLayerPerceptron.cxx. ◆ GetBFGSH(). bool TMultiLayerPerceptron::GetBFGSH ; (; TMatrixD & ; bfgsh, . TMatrixD & ; gamma, . TMatrixD & ; delta . ). protected . Computes the hessian matrix using the BFGS update algorithm. ; from gamma (g_{(t+1)}-g_{(t)}) and delta (w_{(t+1)}-w_{(t)}). It returns true if such a direction could not be found (if gamma and delta are orthogonal). ; Definition at line 2405 of file TMultiLayerPerceptron.cxx. ◆ GetCrossEntropy(). Double_t TMultiLayerPerceptron::GetCrossEntropy ; (; ); const. protected . Cross entropy error for a softmax output neuron, for a given event. ; Definition at line 1142 of file TMultiLayerPerceptron.cxx. ◆ GetCrossEntropyBinary(). Double_t TMultiLayerPerceptron::GetCrossEntropyBinary ; (; ); const. protected . Cross entropy error for sigmoid output neurons, for a given event. ; Definition at line 1111 of file TMultiLayerPerceptron.cxx. ◆ GetDelta(). Double_t TMultiLayerPerceptron::GetDelta ; (; ); const. inline . Definition at line 78 of file TMultiLayerPerceptron.h. ◆ GetEntry(). void TMultiLayerPerceptron::GetEntry ; (; Int_t ; entry); const. protected . Load an entry into the network. ; Definition at line 759 of file T",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:42630,Deployability,update,updated,42630,"tron::GetStructure ; (; ); const. inline . Definition at line 83 of file TMultiLayerPerceptron.h. ◆ GetSumSquareError(). Double_t TMultiLayerPerceptron::GetSumSquareError ; (; ); const. protected . Error on the output for a given event. ; Definition at line 1098 of file TMultiLayerPerceptron.cxx. ◆ GetTau(). Double_t TMultiLayerPerceptron::GetTau ; (; ); const. inline . Definition at line 81 of file TMultiLayerPerceptron.h. ◆ GetType(). TNeuron::ENeuronType TMultiLayerPerceptron::GetType ; (; ); const. inline . Definition at line 84 of file TMultiLayerPerceptron.h. ◆ IsA(). TClass * TMultiLayerPerceptron::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 151 of file TMultiLayerPerceptron.h. ◆ LineSearch(). bool TMultiLayerPerceptron::LineSearch ; (; Double_t * ; direction, . Double_t * ; buffer . ). protected . Search along the line defined by direction. ; buffer is not used but is updated with the new dw so that it can be used by a later stochastic step. It returns true if the line search fails. ; Definition at line 2274 of file TMultiLayerPerceptron.cxx. ◆ LoadWeights(). Bool_t TMultiLayerPerceptron::LoadWeights ; (; Option_t * ; filename = """"). Loads the weights from a text file conforming to the format defined by DumpWeights. ; Definition at line 1657 of file TMultiLayerPerceptron.cxx. ◆ MLP_Batch(). void TMultiLayerPerceptron::MLP_Batch ; (; Double_t * ; buffer). protected . One step for the batch (stochastic) method. ; DEDw should have been updated before calling this. ; Definition at line 2203 of file TMultiLayerPerceptron.cxx. ◆ MLP_Line(). void TMultiLayerPerceptron::MLP_Line ; (; Double_t * ; origin, . Double_t * ; dir, . Double_t ; dist . ). private . Sets the weights to a point along a line Weights are set to [origin + (dist * dir)]. ; Definition at line 2231 of file TMultiLayerPerceptron.cxx. ◆ MLP_Stochastic(). void TMultiLayerPerceptron::MLP_Stochastic ; (; Double_t * ; ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:43206,Deployability,update,updated,43206,"yerPerceptron.h. ◆ IsA(). TClass * TMultiLayerPerceptron::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Definition at line 151 of file TMultiLayerPerceptron.h. ◆ LineSearch(). bool TMultiLayerPerceptron::LineSearch ; (; Double_t * ; direction, . Double_t * ; buffer . ). protected . Search along the line defined by direction. ; buffer is not used but is updated with the new dw so that it can be used by a later stochastic step. It returns true if the line search fails. ; Definition at line 2274 of file TMultiLayerPerceptron.cxx. ◆ LoadWeights(). Bool_t TMultiLayerPerceptron::LoadWeights ; (; Option_t * ; filename = """"). Loads the weights from a text file conforming to the format defined by DumpWeights. ; Definition at line 1657 of file TMultiLayerPerceptron.cxx. ◆ MLP_Batch(). void TMultiLayerPerceptron::MLP_Batch ; (; Double_t * ; buffer). protected . One step for the batch (stochastic) method. ; DEDw should have been updated before calling this. ; Definition at line 2203 of file TMultiLayerPerceptron.cxx. ◆ MLP_Line(). void TMultiLayerPerceptron::MLP_Line ; (; Double_t * ; origin, . Double_t * ; dir, . Double_t ; dist . ). private . Sets the weights to a point along a line Weights are set to [origin + (dist * dir)]. ; Definition at line 2231 of file TMultiLayerPerceptron.cxx. ◆ MLP_Stochastic(). void TMultiLayerPerceptron::MLP_Stochastic ; (; Double_t * ; buffer). protected . One step for the stochastic method buffer should contain the previous dw vector and will be updated. ; Definition at line 2158 of file TMultiLayerPerceptron.cxx. ◆ operator=(). TMultiLayerPerceptron & TMultiLayerPerceptron::operator= ; (; const TMultiLayerPerceptron & ; ). private . ◆ Randomize(). void TMultiLayerPerceptron::Randomize ; (; ); const. Randomize the weights. ; Definition at line 1239 of file TMultiLayerPerceptron.cxx. ◆ Result(). Double_t TMultiLayerPerceptron::Result ; (; Int_t ; event, . Int_t ; index = 0 . ); co",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:43766,Deployability,update,updated,43766," the line search fails. ; Definition at line 2274 of file TMultiLayerPerceptron.cxx. ◆ LoadWeights(). Bool_t TMultiLayerPerceptron::LoadWeights ; (; Option_t * ; filename = """"). Loads the weights from a text file conforming to the format defined by DumpWeights. ; Definition at line 1657 of file TMultiLayerPerceptron.cxx. ◆ MLP_Batch(). void TMultiLayerPerceptron::MLP_Batch ; (; Double_t * ; buffer). protected . One step for the batch (stochastic) method. ; DEDw should have been updated before calling this. ; Definition at line 2203 of file TMultiLayerPerceptron.cxx. ◆ MLP_Line(). void TMultiLayerPerceptron::MLP_Line ; (; Double_t * ; origin, . Double_t * ; dir, . Double_t ; dist . ). private . Sets the weights to a point along a line Weights are set to [origin + (dist * dir)]. ; Definition at line 2231 of file TMultiLayerPerceptron.cxx. ◆ MLP_Stochastic(). void TMultiLayerPerceptron::MLP_Stochastic ; (; Double_t * ; buffer). protected . One step for the stochastic method buffer should contain the previous dw vector and will be updated. ; Definition at line 2158 of file TMultiLayerPerceptron.cxx. ◆ operator=(). TMultiLayerPerceptron & TMultiLayerPerceptron::operator= ; (; const TMultiLayerPerceptron & ; ). private . ◆ Randomize(). void TMultiLayerPerceptron::Randomize ; (; ); const. Randomize the weights. ; Definition at line 1239 of file TMultiLayerPerceptron.cxx. ◆ Result(). Double_t TMultiLayerPerceptron::Result ; (; Int_t ; event, . Int_t ; index = 0 . ); const. Computes the output for a given event. ; Look at the output neuron designed by index. ; Definition at line 1033 of file TMultiLayerPerceptron.cxx. ◆ SetData(). void TMultiLayerPerceptron::SetData ; (; TTree * ; data). Set the data source. ; Definition at line 590 of file TMultiLayerPerceptron.cxx. ◆ SetDelta(). void TMultiLayerPerceptron::SetDelta ; (; Double_t ; delta). Sets Delta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:49393,Deployability,update,update,49393,"le; n: the size of the array. Output:; index: the shuffled indexes. This method is used for stochastic training ; Definition at line 2139 of file TMultiLayerPerceptron.cxx. ◆ SteepestDir(). void TMultiLayerPerceptron::SteepestDir ; (; Double_t * ; dir). protected . Sets the search direction to steepest descent. ; Definition at line 2253 of file TMultiLayerPerceptron.cxx. ◆ Streamer(). void TMultiLayerPerceptron::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiLayerPerceptron::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 151 of file TMultiLayerPerceptron.h. ◆ Train(). void TMultiLayerPerceptron::Train ; (; Int_t ; nEpoch, . Option_t * ; option = ""text"", . Double_t ; minE = 0 . ). Train the network. ; nEpoch is the number of iterations. option can contain:; ""text"" (simple text output); ""graph"" (evoluting graphical training curves); ""update=X"" (step for the text/graph output update); ""+"" will skip the randomisation and start from the previous values.; ""current"" (draw in the current canvas); ""minErrorTrain"" (stop when NN error on the training sample gets below minE; ""minErrorTest"" (stop when NN error on the test sample gets below minE All combinations are available. . Definition at line 788 of file TMultiLayerPerceptron.cxx. Friends And Related Symbol Documentation. ◆ TMLPAnalyzer. friend class TMLPAnalyzer. friend . Definition at line 27 of file TMultiLayerPerceptron.h. Member Data Documentation. ◆ fCurrentTree. Int_t TMultiLayerPerceptron::fCurrentTree. private . ! index of the current tree in a chain ; Definition at line 124 of file TMultiLayerPerceptron.h. ◆ fCurrentTreeWeight. Double_t TMultiLayerPerceptron::fCurrentTreeWeight. private . ! weight of the current tree in a chain ; Definition at line 125 of file TMultiLayerPerceptron.h. ◆ fData. TTree* TMultiLayerPerceptron::fData. private . ! pointer to the tree used as da",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:49435,Deployability,update,update,49435,"le; n: the size of the array. Output:; index: the shuffled indexes. This method is used for stochastic training ; Definition at line 2139 of file TMultiLayerPerceptron.cxx. ◆ SteepestDir(). void TMultiLayerPerceptron::SteepestDir ; (; Double_t * ; dir). protected . Sets the search direction to steepest descent. ; Definition at line 2253 of file TMultiLayerPerceptron.cxx. ◆ Streamer(). void TMultiLayerPerceptron::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiLayerPerceptron::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 151 of file TMultiLayerPerceptron.h. ◆ Train(). void TMultiLayerPerceptron::Train ; (; Int_t ; nEpoch, . Option_t * ; option = ""text"", . Double_t ; minE = 0 . ). Train the network. ; nEpoch is the number of iterations. option can contain:; ""text"" (simple text output); ""graph"" (evoluting graphical training curves); ""update=X"" (step for the text/graph output update); ""+"" will skip the randomisation and start from the previous values.; ""current"" (draw in the current canvas); ""minErrorTrain"" (stop when NN error on the training sample gets below minE; ""minErrorTest"" (stop when NN error on the test sample gets below minE All combinations are available. . Definition at line 788 of file TMultiLayerPerceptron.cxx. Friends And Related Symbol Documentation. ◆ TMLPAnalyzer. friend class TMLPAnalyzer. friend . Definition at line 27 of file TMultiLayerPerceptron.h. Member Data Documentation. ◆ fCurrentTree. Int_t TMultiLayerPerceptron::fCurrentTree. private . ! index of the current tree in a chain ; Definition at line 124 of file TMultiLayerPerceptron.h. ◆ fCurrentTreeWeight. Double_t TMultiLayerPerceptron::fCurrentTreeWeight. private . ! weight of the current tree in a chain ; Definition at line 125 of file TMultiLayerPerceptron.h. ◆ fData. TTree* TMultiLayerPerceptron::fData. private . ! pointer to the tree used as da",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:5841,Energy Efficiency,power,powerful,5841,"hastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm:; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower tau = higher precision = slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the Polak-Ribiere updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Conjugate gradients with the Fletcher-Reeves updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Broyden, Fletcher, Goldfarb, Shanno (BFGS) method:; Implies the computation of a NxN matrix computation, but seems more powerful at least for less than 300 weights. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent. How to use it...; TMLP is build from 3 classes: TNeuron, TSynapse and TMultiLayerPerceptron. Only TMultiLayerPerceptron should be used explicitly by the user.; TMultiLayerPerceptron will take examples from a TTree given in the constructor. The network is described by a simple string: The input/output layers are defined by giving the expression for each neuron, separated by comas. Hidden layers are just described by the number of neurons. The layers are separated by colons. In addition, input/output layer formulas can be preceded by '@' (e.g ""@out"") if one wants to also normalize the data from the TTree. Input and outputs are taken from the TTree given as second argument. Expressions are evaluated as for TTree::Draw(), arrays are expended in distinct neurons, one for each index. This can only be d",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:12239,Integrability,depend,dependant,12239,"const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each weight normalized by the number of events. ;  ; void Draw (Option_t *option="""") override;  Draws the network structure. ;  ; void DrawResult (Int_t index=0, Option_t *option=""test"") const;  Draws the neural net output It produces an histogram with the output for the two datasets. ;  ; Bool_t DumpWeights (Option_t *filename=""-"") const;  Dumps the weights to a text file. ;  ; Double_t Evaluate (Int_t index, Double_t *params) const;  Returns the Neural Net for a given set of input parameters #parameters must equal #input neurons. ;  ; void Export (Option_t *filename=""NNfunction"", Option_t *language=""C++"") const;  Exports the NN as a function for any non-ROOT-dependant code Supported languages are: only C++ , FORTRAN and Python (yet) This feature is also useful if you want to plot the NN as a function (TF1 or TF2). ;  ; Double_t GetDelta () const;  ; Double_t GetEpsilon () const;  ; Double_t GetError (Int_t event) const;  Error on the output for a given event. ;  ; Double_t GetError (TMultiLayerPerceptron::EDataSet set) const;  Error on the whole dataset. ;  ; Double_t GetEta () const;  ; Double_t GetEtaDecay () const;  ; TMultiLayerPerceptron::ELearningMethod GetLearningMethod () const;  ; Int_t GetReset () const;  ; TString GetStructure () const;  ; Double_t GetTau () const;  ; TNeuron::ENeuronType GetType () const;  ; TClass * IsA () const override;  ; Bool_t LoadWeights (Option_t *filename="""");  Loads the weights from a text file conforming to the format defined by DumpWeights. ;  ; void Randomize () const;  Randomize the weights. ;  ; Double_t Result (Int_t event, Int_t index=0) const;  Computes the output for a given event. ;  ; void SetData (TTre",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:16660,Integrability,message,message,16660,". ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:17201,Integrability,message,message,17201,"putes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:18403,Integrability,message,message,18403,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:21765,Integrability,message,message,21765," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:22138,Integrability,message,message,22138," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Prote",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:39085,Integrability,depend,dependant,39085,"tion at line 1533 of file TMultiLayerPerceptron.cxx. ◆ DumpWeights(). Bool_t TMultiLayerPerceptron::DumpWeights ; (; Option_t * ; filename = ""-""); const. Dumps the weights to a text file. ; Set filename to ""-"" (default) to dump to the standard output ; Definition at line 1607 of file TMultiLayerPerceptron.cxx. ◆ Evaluate(). Double_t TMultiLayerPerceptron::Evaluate ; (; Int_t ; index, . Double_t * ; params . ); const. Returns the Neural Net for a given set of input parameters #parameters must equal #input neurons. ; Definition at line 1713 of file TMultiLayerPerceptron.cxx. ◆ ExpandStructure(). void TMultiLayerPerceptron::ExpandStructure ; (; ). private . Expand the structure of the first layer. ; Definition at line 1324 of file TMultiLayerPerceptron.cxx. ◆ Export(). void TMultiLayerPerceptron::Export ; (; Option_t * ; filename = ""NNfunction"", . Option_t * ; language = ""C++"" . ); const. Exports the NN as a function for any non-ROOT-dependant code Supported languages are: only C++ , FORTRAN and Python (yet) This feature is also useful if you want to plot the NN as a function (TF1 or TF2). ; Definition at line 1738 of file TMultiLayerPerceptron.cxx. ◆ GetBFGSH(). bool TMultiLayerPerceptron::GetBFGSH ; (; TMatrixD & ; bfgsh, . TMatrixD & ; gamma, . TMatrixD & ; delta . ). protected . Computes the hessian matrix using the BFGS update algorithm. ; from gamma (g_{(t+1)}-g_{(t)}) and delta (w_{(t+1)}-w_{(t)}). It returns true if such a direction could not be found (if gamma and delta are orthogonal). ; Definition at line 2405 of file TMultiLayerPerceptron.cxx. ◆ GetCrossEntropy(). Double_t TMultiLayerPerceptron::GetCrossEntropy ; (; ); const. protected . Cross entropy error for a softmax output neuron, for a given event. ; Definition at line 1142 of file TMultiLayerPerceptron.cxx. ◆ GetCrossEntropyBinary(). Double_t TMultiLayerPerceptron::GetCrossEntropyBinary ; (; ); const. protected . Cross entropy error for sigmoid output neurons, for a given event. ; Definition at line 1",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:1340,Modifiability,layers,layers,1340,"ve neurons (returning the optionally normalized input) and output neurons are linear. The type of hidden neurons is free, the default being sigmoids. (One should still try to pass normalized inputs, e.g. between [0.,1]); The basic input is a TTree and two (training and test) TEventLists. Input and output neurons are assigned a value computed for each event with the same possibilities as for TTree::Draw(). Events may be weighted individually or via TTree::SetWeight(). 6 learning methods are available: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal over background discrimination). More than 50% of neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package originally written by Jerome Schwindling. MLPfit remains one of the fastest tool for neural networks studies, and this ROOT add-on will not try to compete on that. A clear a",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:1393,Modifiability,layers,layers,1393,"ve neurons (returning the optionally normalized input) and output neurons are linear. The type of hidden neurons is free, the default being sigmoids. (One should still try to pass normalized inputs, e.g. between [0.,1]); The basic input is a TTree and two (training and test) TEventLists. Input and output neurons are assigned a value computed for each event with the same possibilities as for TTree::Draw(). Events may be weighted individually or via TTree::SetWeight(). 6 learning methods are available: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal over background discrimination). More than 50% of neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package originally written by Jerome Schwindling. MLPfit remains one of the fastest tool for neural networks studies, and this ROOT add-on will not try to compete on that. A clear a",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:2523,Modifiability,flexible,flexible,2523,"e normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal over background discrimination). More than 50% of neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package originally written by Jerome Schwindling. MLPfit remains one of the fastest tool for neural networks studies, and this ROOT add-on will not try to compete on that. A clear and flexible Object Oriented implementation has been chosen over a faster but more difficult to maintain code. Nevertheless, the time penalty does not exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:3234,Modifiability,layers,layers,3234,"r background discrimination). More than 50% of neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package originally written by Jerome Schwindling. MLPfit remains one of the fastest tool for neural networks studies, and this ROOT add-on will not try to compete on that. A clear and flexible Object Oriented implementation has been chosen over a faster but more difficult to maintain code. Nevertheless, the time penalty does not exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called ba",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:6297,Modifiability,layers,layers,6297," along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Conjugate gradients with the Fletcher-Reeves updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Broyden, Fletcher, Goldfarb, Shanno (BFGS) method:; Implies the computation of a NxN matrix computation, but seems more powerful at least for less than 300 weights. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent. How to use it...; TMLP is build from 3 classes: TNeuron, TSynapse and TMultiLayerPerceptron. Only TMultiLayerPerceptron should be used explicitly by the user.; TMultiLayerPerceptron will take examples from a TTree given in the constructor. The network is described by a simple string: The input/output layers are defined by giving the expression for each neuron, separated by comas. Hidden layers are just described by the number of neurons. The layers are separated by colons. In addition, input/output layer formulas can be preceded by '@' (e.g ""@out"") if one wants to also normalize the data from the TTree. Input and outputs are taken from the TTree given as second argument. Expressions are evaluated as for TTree::Draw(), arrays are expended in distinct neurons, one for each index. This can only be done for fixed-size arrays. If the formula ends with ""!"", softmax functions are used for the output layer. One defines the training and test datasets by TEventLists.; Example: TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; TMultiLayerPerceptron::TMultiLayerPerceptronTMultiLayerPerceptron()Default constructor.Definition TMultiLayerPerceptron.cxx:264; Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. The lists used for training and test can b",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:6385,Modifiability,layers,layers,6385,"ochs where the direction is reset to the steepest descent.; Conjugate gradients with the Fletcher-Reeves updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Broyden, Fletcher, Goldfarb, Shanno (BFGS) method:; Implies the computation of a NxN matrix computation, but seems more powerful at least for less than 300 weights. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent. How to use it...; TMLP is build from 3 classes: TNeuron, TSynapse and TMultiLayerPerceptron. Only TMultiLayerPerceptron should be used explicitly by the user.; TMultiLayerPerceptron will take examples from a TTree given in the constructor. The network is described by a simple string: The input/output layers are defined by giving the expression for each neuron, separated by comas. Hidden layers are just described by the number of neurons. The layers are separated by colons. In addition, input/output layer formulas can be preceded by '@' (e.g ""@out"") if one wants to also normalize the data from the TTree. Input and outputs are taken from the TTree given as second argument. Expressions are evaluated as for TTree::Draw(), arrays are expended in distinct neurons, one for each index. This can only be done for fixed-size arrays. If the formula ends with ""!"", softmax functions are used for the output layer. One defines the training and test datasets by TEventLists.; Example: TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; TMultiLayerPerceptron::TMultiLayerPerceptronTMultiLayerPerceptron()Default constructor.Definition TMultiLayerPerceptron.cxx:264; Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. The lists used for training and test can be defined either explicitly, or via a string containing the formula to be used to define them, exactl",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:6441,Modifiability,layers,layers,6441,"t descent.; Conjugate gradients with the Fletcher-Reeves updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Broyden, Fletcher, Goldfarb, Shanno (BFGS) method:; Implies the computation of a NxN matrix computation, but seems more powerful at least for less than 300 weights. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent. How to use it...; TMLP is build from 3 classes: TNeuron, TSynapse and TMultiLayerPerceptron. Only TMultiLayerPerceptron should be used explicitly by the user.; TMultiLayerPerceptron will take examples from a TTree given in the constructor. The network is described by a simple string: The input/output layers are defined by giving the expression for each neuron, separated by comas. Hidden layers are just described by the number of neurons. The layers are separated by colons. In addition, input/output layer formulas can be preceded by '@' (e.g ""@out"") if one wants to also normalize the data from the TTree. Input and outputs are taken from the TTree given as second argument. Expressions are evaluated as for TTree::Draw(), arrays are expended in distinct neurons, one for each index. This can only be done for fixed-size arrays. If the formula ends with ""!"", softmax functions are used for the output layer. One defines the training and test datasets by TEventLists.; Example: TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; TMultiLayerPerceptron::TMultiLayerPerceptronTMultiLayerPerceptron()Default constructor.Definition TMultiLayerPerceptron.cxx:264; Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. The lists used for training and test can be defined either explicitly, or via a string containing the formula to be used to define them, exactly as for a TCut.; The learning method is define",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:9034,Modifiability,layers,layers,9034,"tions). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are available.; Example: net.Train(100,""text, graph, update=10"");; When the neural net is trained, it can be used directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a standalone C++ code ( TMultiLayerPerceptron::Export() ).; Finally, note that even if this implementation is inspired from the mlpfit code, the feature lists are not exactly matching:. mlpfit hybrid learning method is not implemented; output neurons can be normalized, this is not the case for mlpfit; the neural net is exported in C++, FORTRAN or PYTHON; the drawResult() method allows a fast check of the learning procedure. In addition, the paw version of mlpfit had additional limitations on the number of neurons, hidden layers and inputs/outputs that does not apply to TMultiLayerPerceptron. ; Definition at line 26 of file TMultiLayerPerceptron.h. Public Types; enum  EDataSet { kTraining; , kTest; };  ; enum  ELearningMethod { ;   kStochastic; , kBatch; , kSteepestDescent; , kRibierePolak; , ;   kFletcherReeves; , kBFGS. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLaye",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:9360,Modifiability,inherit,inherited,9360,"an be used directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a standalone C++ code ( TMultiLayerPerceptron::Export() ).; Finally, note that even if this implementation is inspired from the mlpfit code, the feature lists are not exactly matching:. mlpfit hybrid learning method is not implemented; output neurons can be normalized, this is not the case for mlpfit; the neural net is exported in C++, FORTRAN or PYTHON; the drawResult() method allows a fast check of the learning procedure. In addition, the paw version of mlpfit had additional limitations on the number of neurons, hidden layers and inputs/outputs that does not apply to TMultiLayerPerceptron. ; Definition at line 26 of file TMultiLayerPerceptron.h. Public Types; enum  EDataSet { kTraining; , kTest; };  ; enum  ELearningMethod { ;   kStochastic; , kBatch; , kSteepestDescent; , kRibierePolak; , ;   kFletcherReeves; , kBFGS. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLayerPerceptron ();  Default constructor. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const cha",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:10331,Modifiability,layers,layers,10331,"ELearningMethod { ;   kStochastic; , kBatch; , kSteepestDescent; , kRibierePolak; , ;   kFletcherReeves; , kBFGS. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLayerPerceptron ();  Default constructor. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:10695,Modifiability,layers,layers,10695,"Overwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLayerPerceptron ();  Default constructor. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each wei",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:11014,Modifiability,layers,layers,11014,"nu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLayerPerceptron ();  Default constructor. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each weight normalized by the number of events. ;  ; void Draw (Option_t *option="""") override;  Draws the network structure. ;  ; void DrawResult (Int_t index=0, Option_t *option=""test"") const;  Draws the neural net output It produces an histogram with the output for the two datasets. ;  ; Bool_t DumpWeights (Option_t *filename=""-"") const;  Dumps t",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:11358,Modifiability,layers,layers,11358," char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each weight normalized by the number of events. ;  ; void Draw (Option_t *option="""") override;  Draws the network structure. ;  ; void DrawResult (Int_t index=0, Option_t *option=""test"") const;  Draws the neural net output It produces an histogram with the output for the two datasets. ;  ; Bool_t DumpWeights (Option_t *filename=""-"") const;  Dumps the weights to a text file. ;  ; Double_t Evaluate (Int_t index, Double_t *params) const;  Returns the Neural Net for a given set of input parameters #parameters must equal #input neurons. ;  ; void Export (Option_t *filename=""NNfunction"", Option_t *language=""C++"") const;  Exports the NN as a function for any non-ROOT-dependant co",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:14977,Modifiability,inherit,inherited,14977,"ght (const char *);  Set the event weight. ;  ; void SetLearningMethod (TMultiLayerPerceptron::ELearningMethod method);  Sets the learning method. ;  ; void SetReset (Int_t reset);  Sets number of epochs between two resets of the search direction to the steepest descent. ;  ; void SetTau (Double_t tau);  Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetTestDataSet (const char *test);  Sets the Test dataset. ;  ; void SetTestDataSet (TEventList *test);  Sets the Test dataset. ;  ; void SetTrainingDataSet (const char *train);  Sets the Training dataset. ;  ; void SetTrainingDataSet (TEventList *train);  Sets the Training dataset. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (Int_t nEpoch, Option_t *option=""text"", Double_t minE=0);  Train the network. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:16290,Modifiability,inherit,inheritance,16290," ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:18501,Modifiability,inherit,inherits,18501,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:18618,Modifiability,inherit,inherits,18618,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:22639,Modifiability,inherit,inherited,22639,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void AttachData ();  Connects the TTree to Neurons in input and output layers. ;  ; void BFGSDir (TMatrixD &, Double_t *);  Computes the direction for the BFGS algorithm as the product between the Hessian estimate (bfgsh) and the dir. ;  ; void BuildNetwork ();  Instantiates the network from the description. ;  ; void ConjugateGradientsDir (Double_t *, Double_t);  Sets the search direction to conjugate gradient direction beta should be: ;  ; Double_t DerivDir (Double_t *);  scalar product bet",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:23224,Modifiability,layers,layers,23224,"t char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Protected Member Functions; void AttachData ();  Connects the TTree to Neurons in input and output layers. ;  ; void BFGSDir (TMatrixD &, Double_t *);  Computes the direction for the BFGS algorithm as the product between the Hessian estimate (bfgsh) and the dir. ;  ; void BuildNetwork ();  Instantiates the network from the description. ;  ; void ConjugateGradientsDir (Double_t *, Double_t);  Sets the search direction to conjugate gradient direction beta should be: ;  ; Double_t DerivDir (Double_t *);  scalar product between gradient and direction = derivative along direction ;  ; bool GetBFGSH (TMatrixD &, TMatrixD &, TMatrixD &);  Computes the hessian matrix using the BFGS update algorithm. ;  ; Double_t GetCrossEntropy () const;  Cross entropy error for a softmax output neuron, for a given event. ;  ; Double_t GetCrossEntropyBinary () const;  Cross entropy error for sigmoid output neurons, for a given event. ;  ; void GetEntry (Int_t) const;  Load an entry into the network. ;  ; Double_t GetSumSquareError () const;  Error on the output",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:24905,Modifiability,inherit,inherited,24905,"inary () const;  Cross entropy error for sigmoid output neurons, for a given event. ;  ; void GetEntry (Int_t) const;  Load an entry into the network. ;  ; Double_t GetSumSquareError () const;  Error on the output for a given event. ;  ; Bool_t LineSearch (Double_t *, Double_t *);  Search along the line defined by direction. ;  ; void MLP_Batch (Double_t *);  One step for the batch (stochastic) method. ;  ; void MLP_Stochastic (Double_t *);  One step for the stochastic method buffer should contain the previous dw vector and will be updated. ;  ; void SetGammaDelta (TMatrixD &, TMatrixD &, Double_t *);  Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ;  ; void SteepestDir (Double_t *);  Sets the search direction to steepest descent. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions;  TMultiLayerPerceptron (const TMultiLayerPerceptron &);  ; void BuildFirstLayer (TString &);  Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ;  ; void BuildHiddenLayers (TString &);  Builds hidden layers. ;  ; void BuildLastLayer (TString &, Int_t);  Builds the output layer Neurons are linear combinations of input, by default. ;  ; void BuildOneHiddenLayer (const TString &sNumNodes, Int_t &layer, Int_t &prevStart, Int_t &prevStop, Bool_t lastLayer);  Builds a hidden layer, updates the number of layers. ;  ; void ExpandStructure ();  Expand the structure of the first layer. ;  ; void MLP_Line (Double_t *, Double_t *, Double_t);  Sets the weights to a point along a line Weights are set to [origin + (dist * dir)]. ;  ; TMultiLayerPerceptron & operator= (const TMultiLay",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:25386,Modifiability,layers,layers,25386,"_t *);  Search along the line defined by direction. ;  ; void MLP_Batch (Double_t *);  One step for the batch (stochastic) method. ;  ; void MLP_Stochastic (Double_t *);  One step for the stochastic method buffer should contain the previous dw vector and will be updated. ;  ; void SetGammaDelta (TMatrixD &, TMatrixD &, Double_t *);  Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ;  ; void SteepestDir (Double_t *);  Sets the search direction to steepest descent. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions;  TMultiLayerPerceptron (const TMultiLayerPerceptron &);  ; void BuildFirstLayer (TString &);  Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ;  ; void BuildHiddenLayers (TString &);  Builds hidden layers. ;  ; void BuildLastLayer (TString &, Int_t);  Builds the output layer Neurons are linear combinations of input, by default. ;  ; void BuildOneHiddenLayer (const TString &sNumNodes, Int_t &layer, Int_t &prevStart, Int_t &prevStop, Bool_t lastLayer);  Builds a hidden layer, updates the number of layers. ;  ; void ExpandStructure ();  Expand the structure of the first layer. ;  ; void MLP_Line (Double_t *, Double_t *, Double_t);  Sets the weights to a point along a line Weights are set to [origin + (dist * dir)]. ;  ; TMultiLayerPerceptron & operator= (const TMultiLayerPerceptron &);  ; void Shuffle (Int_t *, Int_t) const;  Shuffle the Int_t index[n] in input. ;  . Private Attributes; Int_t fCurrentTree;  ! index of the current tree in a chain ;  ; Double_t fCurrentTreeWeight;  ! weight of the current tree in a chain ;  ; TTree * fData; ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:25689,Modifiability,layers,layers,25689,"(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ;  ; void SteepestDir (Double_t *);  Sets the search direction to steepest descent. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions;  TMultiLayerPerceptron (const TMultiLayerPerceptron &);  ; void BuildFirstLayer (TString &);  Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ;  ; void BuildHiddenLayers (TString &);  Builds hidden layers. ;  ; void BuildLastLayer (TString &, Int_t);  Builds the output layer Neurons are linear combinations of input, by default. ;  ; void BuildOneHiddenLayer (const TString &sNumNodes, Int_t &layer, Int_t &prevStart, Int_t &prevStop, Bool_t lastLayer);  Builds a hidden layer, updates the number of layers. ;  ; void ExpandStructure ();  Expand the structure of the first layer. ;  ; void MLP_Line (Double_t *, Double_t *, Double_t);  Sets the weights to a point along a line Weights are set to [origin + (dist * dir)]. ;  ; TMultiLayerPerceptron & operator= (const TMultiLayerPerceptron &);  ; void Shuffle (Int_t *, Int_t) const;  Shuffle the Int_t index[n] in input. ;  . Private Attributes; Int_t fCurrentTree;  ! index of the current tree in a chain ;  ; Double_t fCurrentTreeWeight;  ! weight of the current tree in a chain ;  ; TTree * fData;  ! pointer to the tree used as datasource ;  ; Double_t fDelta;  ! Delta - used in stochastic minimisation - Default=0. ;  ; Double_t fEpsilon;  ! Epsilon - used in stochastic minimisation - Default=0. ;  ; Double_t fEta;  ! Eta - used in stochastic minimisation - Default=0.1 ;  ; Double_t fEtaDecay;  ! EtaDecay - Eta *= EtaDecay at each epoch - Default=1. ;  ; TTr",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:28160,Modifiability,inherit,inherited,28160," ;  ; TObjArray fNetwork;  Collection of all the neurons in the network. ;  ; TNeuron::ENeuronType fOutType;  Type of output neurons. ;  ; Int_t fReset;  ! number of epochs between two resets of the search direction to the steepest descent - Default=50 ;  ; TString fStructure;  String containing the network structure. ;  ; TObjArray fSynapses;  Collection of all the synapses in the network. ;  ; Double_t fTau;  ! Tau - used in line search - Default=3. ;  ; TEventList * fTest;  ! EventList defining the events in the test dataset ;  ; Bool_t fTestOwner;  ! internal flag whether one has to delete fTest or not ;  ; TEventList * fTraining;  ! EventList defining the events in the training dataset ;  ; Bool_t fTrainingOwner;  ! internal flag whether one has to delete fTraining or not ;  ; TNeuron::ENeuronType fType;  Type of hidden neurons. ;  ; TString fWeight;  String containing the event weight. ;  . Friends; class TMLPAnalyzer;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiLayerPerceptron.h>. Inheritance diagram for TMultiLayerPerceptron:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EDataSet. enum TMultiLayerPerceptron::EDataSet. EnumeratorkTraining ; kTest . Definition at line 32 of file TMultiLayerPerceptron.h. ◆ ELearningMethod. enum TMultiLayerPerceptron::ELearningMethod. EnumeratorkStochastic ; kBatch ; kSteepestDescent ; kRibierePolak ; kFletcherReeves ; kBFGS . Definition at line 30 of file TMultiLayerPerceptron.h. Constructor & Destructor Documentation. ◆ TMultiLayerPerceptron() [1/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; ). Default constructor. ; Definition at line 264 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [2/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:29378,Modifiability,layers,layers,29378,"i, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EDataSet. enum TMultiLayerPerceptron::EDataSet. EnumeratorkTraining ; kTest . Definition at line 32 of file TMultiLayerPerceptron.h. ◆ ELearningMethod. enum TMultiLayerPerceptron::ELearningMethod. EnumeratorkStochastic ; kBatch ; kSteepestDescent ; kRibierePolak ; kFletcherReeves ; kBFGS . Definition at line 30 of file TMultiLayerPerceptron.h. Constructor & Destructor Documentation. ◆ TMultiLayerPerceptron() [1/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; ). Default constructor. ; Definition at line 264 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [2/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENe",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:29453,Modifiability,layers,layers,29453,"Perceptron::EDataSet. EnumeratorkTraining ; kTest . Definition at line 32 of file TMultiLayerPerceptron.h. ◆ ELearningMethod. enum TMultiLayerPerceptron::ELearningMethod. EnumeratorkStochastic ; kBatch ; kSteepestDescent ; kRibierePolak ; kFletcherReeves ; kBFGS . Definition at line 30 of file TMultiLayerPerceptron.h. Constructor & Destructor Documentation. ◆ TMultiLayerPerceptron() [1/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; ). Default constructor. ; Definition at line 264 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [2/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . )",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:29509,Modifiability,layers,layers,29509," . Definition at line 32 of file TMultiLayerPerceptron.h. ◆ ELearningMethod. enum TMultiLayerPerceptron::ELearningMethod. EnumeratorkStochastic ; kBatch ; kSteepestDescent ; kRibierePolak ; kFletcherReeves ; kBFGS . Definition at line 30 of file TMultiLayerPerceptron.h. Constructor & Destructor Documentation. ◆ TMultiLayerPerceptron() [1/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; ). Default constructor. ; Definition at line 264 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [2/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: T",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:29602,Modifiability,variab,variable,29602,"rningMethod. enum TMultiLayerPerceptron::ELearningMethod. EnumeratorkStochastic ; kBatch ; kSteepestDescent ; kRibierePolak ; kFletcherReeves ; kBFGS . Definition at line 30 of file TMultiLayerPerceptron.h. Constructor & Destructor Documentation. ◆ TMultiLayerPerceptron() [1/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; ). Default constructor. ; Definition at line 264 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [2/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names se",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:30538,Modifiability,layers,layers,30538,".; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; ex",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:30613,Modifiability,layers,layers,30613,"The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:30669,Modifiability,layers,layers,30669,"neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:30762,Modifiability,variab,variable,30762,"put and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:31642,Modifiability,layers,layers,31642,"he number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:31717,Modifiability,layers,layers,31717," prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:31773,Modifiability,layers,layers,31773,"lized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:31866,Modifiability,variab,variable,31866,"for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:32720,Modifiability,layers,layers,32720,"rs are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 380 of file TMultiLayerPerceptron.cxx. ◆ ~TMultiLayerPerceptron(). TMultiLayerPerceptron::~TMultiLayerPerceptron ; (; ). override . Destructor. ; Definition at line 581 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [6/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const TMultiLayerPerceptron & ; ). private . Me",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:32795,Modifiability,layers,layers,32795,"10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 380 of file TMultiLayerPerceptron.cxx. ◆ ~TMultiLayerPerceptron(). TMultiLayerPerceptron::~TMultiLayerPerceptron ; (; ). override . Destructor. ; Definition at line 581 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [6/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const TMultiLayerPerceptron & ; ). private . Member Function Documentation. ◆ AttachData(). void TMultiLayerPerceptron::AttachData ; (; ). pro",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:32851,Modifiability,layers,layers,32851,"e variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 380 of file TMultiLayerPerceptron.cxx. ◆ ~TMultiLayerPerceptron(). TMultiLayerPerceptron::~TMultiLayerPerceptron ; (; ). override . Destructor. ; Definition at line 581 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [6/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const TMultiLayerPerceptron & ; ). private . Member Function Documentation. ◆ AttachData(). void TMultiLayerPerceptron::AttachData ; (; ). protected . Connects the TTree to Neurons in input ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:32944,Modifiability,variab,variable,32944,"!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 380 of file TMultiLayerPerceptron.cxx. ◆ ~TMultiLayerPerceptron(). TMultiLayerPerceptron::~TMultiLayerPerceptron ; (; ). override . Destructor. ; Definition at line 581 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [6/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const TMultiLayerPerceptron & ; ). private . Member Function Documentation. ◆ AttachData(). void TMultiLayerPerceptron::AttachData ; (; ). protected . Connects the TTree to Neurons in input and output layers. ; The formulas associated to each neuron are ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:33875,Modifiability,layers,layers,33875,"yers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 380 of file TMultiLayerPerceptron.cxx. ◆ ~TMultiLayerPerceptron(). TMultiLayerPerceptron::~TMultiLayerPerceptron ; (; ). override . Destructor. ; Definition at line 581 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [6/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const TMultiLayerPerceptron & ; ). private . Member Function Documentation. ◆ AttachData(). void TMultiLayerPerceptron::AttachData ; (; ). protected . Connects the TTree to Neurons in input and output layers. ; The formulas associated to each neuron are created and reported to the network formula manager. By default, the branch is not normalised since this would degrade performance for classification jobs. Normalisation can be requested by putting '@' in front of the formula. ; Definition at line 1266 of file TMultiLayerPerceptron.cxx. ◆ BFGSDir(). void TMultiLayerPerceptron::BFGSDir ; (; TMatrixD & ; bfgsh, . Double_t * ; dir . ). protected . Computes the direction for the BFGS algorithm as the product between the Hessian estimate (bfgsh) and the dir. ; Definition at line 2494 of file TMultiLayerPerceptron.cxx. ◆ BuildFirstLayer(). void TMultiLayerPerceptron::BuildFirstLayer ; (; TString & ; input). private . Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ; Definition at line 1401 of file TMultiLayerPerceptron.cxx. ◆ BuildHiddenLayers(). void TMultiLayerPerceptron::BuildHiddenLayers ; (",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:34900,Modifiability,layers,layers,34900,"s associated to each neuron are created and reported to the network formula manager. By default, the branch is not normalised since this would degrade performance for classification jobs. Normalisation can be requested by putting '@' in front of the formula. ; Definition at line 1266 of file TMultiLayerPerceptron.cxx. ◆ BFGSDir(). void TMultiLayerPerceptron::BFGSDir ; (; TMatrixD & ; bfgsh, . Double_t * ; dir . ). protected . Computes the direction for the BFGS algorithm as the product between the Hessian estimate (bfgsh) and the dir. ; Definition at line 2494 of file TMultiLayerPerceptron.cxx. ◆ BuildFirstLayer(). void TMultiLayerPerceptron::BuildFirstLayer ; (; TString & ; input). private . Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ; Definition at line 1401 of file TMultiLayerPerceptron.cxx. ◆ BuildHiddenLayers(). void TMultiLayerPerceptron::BuildHiddenLayers ; (; TString & ; hidden). private . Builds hidden layers. ; Definition at line 1419 of file TMultiLayerPerceptron.cxx. ◆ BuildLastLayer(). void TMultiLayerPerceptron::BuildLastLayer ; (; TString & ; output, . Int_t ; prev . ). private . Builds the output layer Neurons are linear combinations of input, by default. ; If the structure ends with ""!"", neurons are set up for classification, ie. with a sigmoid (1 neuron) or softmax (more neurons) activation function. ; Definition at line 1483 of file TMultiLayerPerceptron.cxx. ◆ BuildNetwork(). void TMultiLayerPerceptron::BuildNetwork ; (; ). protected . Instantiates the network from the description. ; Definition at line 1370 of file TMultiLayerPerceptron.cxx. ◆ BuildOneHiddenLayer(). void TMultiLayerPerceptron::BuildOneHiddenLayer ; (; const TString & ; sNumNodes, . Int_t & ; layer, . Int_t & ; prevStart, . Int_t & ; prevStop, . Bool_t ; lastLayer . ). private . Builds a hidden layer, updates the number of layers. ; Definition at line 1438 of file TMultiLayerPerceptron.cxx. ◆ Class(). s",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:35815,Modifiability,layers,layers,35815,"ayers(). void TMultiLayerPerceptron::BuildHiddenLayers ; (; TString & ; hidden). private . Builds hidden layers. ; Definition at line 1419 of file TMultiLayerPerceptron.cxx. ◆ BuildLastLayer(). void TMultiLayerPerceptron::BuildLastLayer ; (; TString & ; output, . Int_t ; prev . ). private . Builds the output layer Neurons are linear combinations of input, by default. ; If the structure ends with ""!"", neurons are set up for classification, ie. with a sigmoid (1 neuron) or softmax (more neurons) activation function. ; Definition at line 1483 of file TMultiLayerPerceptron.cxx. ◆ BuildNetwork(). void TMultiLayerPerceptron::BuildNetwork ; (; ). protected . Instantiates the network from the description. ; Definition at line 1370 of file TMultiLayerPerceptron.cxx. ◆ BuildOneHiddenLayer(). void TMultiLayerPerceptron::BuildOneHiddenLayer ; (; const TString & ; sNumNodes, . Int_t & ; layer, . Int_t & ; prevStart, . Int_t & ; prevStop, . Bool_t ; lastLayer . ). private . Builds a hidden layer, updates the number of layers. ; Definition at line 1438 of file TMultiLayerPerceptron.cxx. ◆ Class(). static TClass * TMultiLayerPerceptron::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMultiLayerPerceptron::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMultiLayerPerceptron::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 151 of file TMultiLayerPerceptron.h. ◆ ComputeDEDw(). void TMultiLayerPerceptron::ComputeDEDw ; (; ); const. Compute the DEDw = sum on all training events of dedw for each weight normalized by the number of events. ; Definition at line 1163 of file TMultiLayerPerceptron.cxx. ◆ ConjugateGradientsDir(). void TMultiLayerPerceptron::ConjugateGradientsDir ; (; Double_t * ; dir, . Double_t ; beta . ). protected . Sets the search direction to conjugate gradient direction beta should be: ; \(||g_{(t+1)}||^2 / ||g_{(t)}||^2\",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:34047,Performance,perform,performance,34047," for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 380 of file TMultiLayerPerceptron.cxx. ◆ ~TMultiLayerPerceptron(). TMultiLayerPerceptron::~TMultiLayerPerceptron ; (; ). override . Destructor. ; Definition at line 581 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [6/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const TMultiLayerPerceptron & ; ). private . Member Function Documentation. ◆ AttachData(). void TMultiLayerPerceptron::AttachData ; (; ). protected . Connects the TTree to Neurons in input and output layers. ; The formulas associated to each neuron are created and reported to the network formula manager. By default, the branch is not normalised since this would degrade performance for classification jobs. Normalisation can be requested by putting '@' in front of the formula. ; Definition at line 1266 of file TMultiLayerPerceptron.cxx. ◆ BFGSDir(). void TMultiLayerPerceptron::BFGSDir ; (; TMatrixD & ; bfgsh, . Double_t * ; dir . ). protected . Computes the direction for the BFGS algorithm as the product between the Hessian estimate (bfgsh) and the dir. ; Definition at line 2494 of file TMultiLayerPerceptron.cxx. ◆ BuildFirstLayer(). void TMultiLayerPerceptron::BuildFirstLayer ; (; TString & ; input). private . Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ; Definition at line 1401 of file TMultiLayerPerceptron.cxx. ◆ BuildHiddenLayers(). void TMultiLayerPerceptron::BuildHiddenLayers ; (; TString & ; hidden). private . Builds hidden layers. ; Definition at line 1419 of file TMultiLayerPerceptron.cxx. ◆ BuildLastLayer(). void TMultiLayerPerceptron::BuildLastLayer ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:2033,Safety,predict,predictions,2033,"kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal over background discrimination). More than 50% of neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package originally written by Jerome Schwindling. MLPfit remains one of the fastest tool for neural networks studies, and this ROOT add-on will not try to compete on that. A clear and flexible Object Oriented implementation has been chosen over a faster but more difficult to maintain code. Nevertheless, the time penalty does not exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previou",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:18132,Security,hash,hash,18132," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:789,Testability,test,test,789,". ROOT: TMultiLayerPerceptron Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMultiLayerPerceptron Class Reference. ; This class describes a neural network. ; There are facilities to train the network and use the output.; The input layer is made of inactive neurons (returning the optionally normalized input) and output neurons are linear. The type of hidden neurons is free, the default being sigmoids. (One should still try to pass normalized inputs, e.g. between [0.,1]); The basic input is a TTree and two (training and test) TEventLists. Input and output neurons are assigned a value computed for each event with the same possibilities as for TTree::Draw(). Events may be weighted individually or via TTree::SetWeight(). 6 learning methods are available: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. imag",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:6937,Testability,test,test,6937,"ochs where the direction is reset to the steepest descent. How to use it...; TMLP is build from 3 classes: TNeuron, TSynapse and TMultiLayerPerceptron. Only TMultiLayerPerceptron should be used explicitly by the user.; TMultiLayerPerceptron will take examples from a TTree given in the constructor. The network is described by a simple string: The input/output layers are defined by giving the expression for each neuron, separated by comas. Hidden layers are just described by the number of neurons. The layers are separated by colons. In addition, input/output layer formulas can be preceded by '@' (e.g ""@out"") if one wants to also normalize the data from the TTree. Input and outputs are taken from the TTree given as second argument. Expressions are evaluated as for TTree::Draw(), arrays are expended in distinct neurons, one for each index. This can only be done for fixed-size arrays. If the formula ends with ""!"", softmax functions are used for the output layer. One defines the training and test datasets by TEventLists.; Example: TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; TMultiLayerPerceptron::TMultiLayerPerceptronTMultiLayerPerceptron()Default constructor.Definition TMultiLayerPerceptron.cxx:264; Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. The lists used for training and test can be defined either explicitly, or via a string containing the formula to be used to define them, exactly as for a TCut.; The learning method is defined using the TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :. TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS. A weight can be assigned to events, either in the constructor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, on",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:7296,Testability,test,test,7296,"r each neuron, separated by comas. Hidden layers are just described by the number of neurons. The layers are separated by colons. In addition, input/output layer formulas can be preceded by '@' (e.g ""@out"") if one wants to also normalize the data from the TTree. Input and outputs are taken from the TTree given as second argument. Expressions are evaluated as for TTree::Draw(), arrays are expended in distinct neurons, one for each index. This can only be done for fixed-size arrays. If the formula ends with ""!"", softmax functions are used for the output layer. One defines the training and test datasets by TEventLists.; Example: TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; TMultiLayerPerceptron::TMultiLayerPerceptronTMultiLayerPerceptron()Default constructor.Definition TMultiLayerPerceptron.cxx:264; Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. The lists used for training and test can be defined either explicitly, or via a string containing the formula to be used to define them, exactly as for a TCut.; The learning method is defined using the TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :. TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS. A weight can be assigned to events, either in the constructor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, one starts the training with TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are availabl",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:10174,Testability,test,test,10174,"ELearningMethod { ;   kStochastic; , kBatch; , kSteepestDescent; , kRibierePolak; , ;   kFletcherReeves; , kBFGS. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLayerPerceptron ();  Default constructor. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:10535,Testability,test,test,10535,"Overwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLayerPerceptron ();  Default constructor. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each wei",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:10857,Testability,test,test,10857,"nu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLayerPerceptron ();  Default constructor. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each weight normalized by the number of events. ;  ; void Draw (Option_t *option="""") override;  Draws the network structure. ;  ; void DrawResult (Int_t index=0, Option_t *option=""test"") const;  Draws the neural net output It produces an histogram with the output for the two datasets. ;  ; Bool_t DumpWeights (Option_t *filename=""-"") const;  Dumps t",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:11198,Testability,test,test,11198," char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each weight normalized by the number of events. ;  ; void Draw (Option_t *option="""") override;  Draws the network structure. ;  ; void DrawResult (Int_t index=0, Option_t *option=""test"") const;  Draws the neural net output It produces an histogram with the output for the two datasets. ;  ; Bool_t DumpWeights (Option_t *filename=""-"") const;  Dumps the weights to a text file. ;  ; Double_t Evaluate (Int_t index, Double_t *params) const;  Returns the Neural Net for a given set of input parameters #parameters must equal #input neurons. ;  ; void Export (Option_t *filename=""NNfunction"", Option_t *language=""C++"") const;  Exports the NN as a function for any non-ROOT-dependant co",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:11750,Testability,test,test,11750,"ayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each weight normalized by the number of events. ;  ; void Draw (Option_t *option="""") override;  Draws the network structure. ;  ; void DrawResult (Int_t index=0, Option_t *option=""test"") const;  Draws the neural net output It produces an histogram with the output for the two datasets. ;  ; Bool_t DumpWeights (Option_t *filename=""-"") const;  Dumps the weights to a text file. ;  ; Double_t Evaluate (Int_t index, Double_t *params) const;  Returns the Neural Net for a given set of input parameters #parameters must equal #input neurons. ;  ; void Export (Option_t *filename=""NNfunction"", Option_t *language=""C++"") const;  Exports the NN as a function for any non-ROOT-dependant code Supported languages are: only C++ , FORTRAN and Python (yet) This feature is also useful if you want to plot the NN as a function (TF1 or TF2). ;  ; Double_t GetDelta () const;  ; Double_t GetEpsilon () const;  ; Double_t GetError (Int_t event) const;  Error on the output for a given event. ;  ; Double_t GetError (TMultiLayerPerceptron::EDataSet set) const;  Error on the whole dataset. ;  ; Double_t GetEta () const;  ; Double_t GetEtaDecay () const;  ; TMultiLayerPerceptron::ELearningMethod GetLearningMethod () cons",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:14455,Testability,test,test,14455,"he constructor for the complete description of learning methods and parameters) ;  ; void SetEpsilon (Double_t eps);  Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEta (Double_t eta);  Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEtaDecay (Double_t ed);  Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEventWeight (const char *);  Set the event weight. ;  ; void SetLearningMethod (TMultiLayerPerceptron::ELearningMethod method);  Sets the learning method. ;  ; void SetReset (Int_t reset);  Sets number of epochs between two resets of the search direction to the steepest descent. ;  ; void SetTau (Double_t tau);  Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetTestDataSet (const char *test);  Sets the Test dataset. ;  ; void SetTestDataSet (TEventList *test);  Sets the Test dataset. ;  ; void SetTrainingDataSet (const char *train);  Sets the Training dataset. ;  ; void SetTrainingDataSet (TEventList *train);  Sets the Training dataset. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (Int_t nEpoch, Option_t *option=""text"", Double_t minE=0);  Train the network. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to cur",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:14524,Testability,test,test,14524,"astic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEta (Double_t eta);  Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEtaDecay (Double_t ed);  Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEventWeight (const char *);  Set the event weight. ;  ; void SetLearningMethod (TMultiLayerPerceptron::ELearningMethod method);  Sets the learning method. ;  ; void SetReset (Int_t reset);  Sets number of epochs between two resets of the search direction to the steepest descent. ;  ; void SetTau (Double_t tau);  Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetTestDataSet (const char *test);  Sets the Test dataset. ;  ; void SetTestDataSet (TEventList *test);  Sets the Test dataset. ;  ; void SetTrainingDataSet (const char *train);  Sets the Training dataset. ;  ; void SetTrainingDataSet (TEventList *train);  Sets the Training dataset. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (Int_t nEpoch, Option_t *option=""text"", Double_t minE=0);  Train the network. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:27692,Testability,test,test,27692,"Collection of the input neurons; subset of fNetwork. ;  ; Double_t fLastAlpha;  ! internal parameter used in line search ;  ; TObjArray fLastLayer;  Collection of the output neurons; subset of fNetwork. ;  ; ELearningMethod fLearningMethod;  ! The Learning Method ;  ; TTreeFormulaManager * fManager;  ! TTreeFormulaManager for the weight and neurons ;  ; TObjArray fNetwork;  Collection of all the neurons in the network. ;  ; TNeuron::ENeuronType fOutType;  Type of output neurons. ;  ; Int_t fReset;  ! number of epochs between two resets of the search direction to the steepest descent - Default=50 ;  ; TString fStructure;  String containing the network structure. ;  ; TObjArray fSynapses;  Collection of all the synapses in the network. ;  ; Double_t fTau;  ! Tau - used in line search - Default=3. ;  ; TEventList * fTest;  ! EventList defining the events in the test dataset ;  ; Bool_t fTestOwner;  ! internal flag whether one has to delete fTest or not ;  ; TEventList * fTraining;  ! EventList defining the events in the training dataset ;  ; Bool_t fTrainingOwner;  ! internal flag whether one has to delete fTraining or not ;  ; TNeuron::ENeuronType fType;  Type of hidden neurons. ;  ; TString fWeight;  String containing the event weight. ;  . Friends; class TMLPAnalyzer;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiLayerPerceptron.h>. Inheritance diagram for TMultiLayerPerceptron:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EDataSet. enum TMultiLayerPerceptron::EDataSet. EnumeratorkTraining ; kTest . Definition at line 32 of file TMultiLayerPerceptron.h. ◆ ELearningMethod. enum TMultiLayerPerceptron::ELearningMethod. EnumeratorkStochastic ; kBatch ; kSteepestDescent ; kRibierePolak ; kFletcherReeves ; kBFGS . Definition at line 30 of file TMultiLayerPerceptron.h. Constructor & Destructor Doc",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:29194,Testability,test,test,29194,"kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <TMultiLayerPerceptron.h>. Inheritance diagram for TMultiLayerPerceptron:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EDataSet. enum TMultiLayerPerceptron::EDataSet. EnumeratorkTraining ; kTest . Definition at line 32 of file TMultiLayerPerceptron.h. ◆ ELearningMethod. enum TMultiLayerPerceptron::ELearningMethod. EnumeratorkStochastic ; kBatch ; kSteepestDescent ; kRibierePolak ; kFletcherReeves ; kBFGS . Definition at line 30 of file TMultiLayerPerceptron.h. Constructor & Destructor Documentation. ◆ TMultiLayerPerceptron() [1/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; ). Default constructor. ; Definition at line 264 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [2/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::T",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:29826,Testability,test,test,29826,"LayerPerceptron::TMultiLayerPerceptron ; (; ). Default constructor. ; Definition at line 264 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [2/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer on",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:29925,Testability,test,testing,29925,"LayerPerceptron::TMultiLayerPerceptron ; (; ). Default constructor. ; Definition at line 264 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [2/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer on",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:30354,Testability,test,test,30354," string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::T",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:30986,Testability,test,test,30986,"r, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are tak",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:31085,Testability,test,testing,31085,"r, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are tak",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:31463,Testability,test,test,31463," ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . con",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:32090,Testability,test,test,32090,")%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTre",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:32541,Testability,test,test,32541," extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 380 of file TMultiLayerPerceptron.cxx. ◆ ~TMultiLayerPerceptron(). TMultiLayerPerceptron::~TMultiLayerPerceptron ; (; ). override . Destructor. ; Defi",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:33168,Testability,test,test,33168,"entLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 380 of file TMultiLayerPerceptron.cxx. ◆ ~TMultiLayerPerceptron(). TMultiLayerPerceptron::~TMultiLayerPerceptron ; (; ). override . Destructor. ; Definition at line 581 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [6/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const TMultiLayerPerceptron & ; ). private . Member Function Documentation. ◆ AttachData(). void TMultiLayerPerceptron::AttachData ; (; ). protected . Connects the TTree to Neurons in input and output layers. ; The formulas associated to each neuron are created and reported to the network formula manager. By default, the branch is not normalised since this would degrade performance for classification jobs. Normalisation can be requested by putting '@' in front of the formula. ; Definition at line 1266 of file TMultiLayerPerce",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:37826,Testability,test,test,37826,"\(g_{(t+1)} (g_{(t+1)}-g_{(t)}) / ||g_{(t)}||^2\) (Ribiere-Polak) ; Definition at line 2379 of file TMultiLayerPerceptron.cxx. ◆ DeclFileName(). static const char * TMultiLayerPerceptron::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 151 of file TMultiLayerPerceptron.h. ◆ DerivDir(). Double_t TMultiLayerPerceptron::DerivDir ; (; Double_t * ; dir). protected . scalar product between gradient and direction = derivative along direction ; Definition at line 2470 of file TMultiLayerPerceptron.cxx. ◆ Draw(). void TMultiLayerPerceptron::Draw ; (; Option_t * ; option = """"). overridevirtual . Draws the network structure. ; Neurons are depicted by a blue disk, and synapses by lines connecting neurons. The line width is proportional to the weight. ; Reimplemented from TObject.; Definition at line 2524 of file TMultiLayerPerceptron.cxx. ◆ DrawResult(). void TMultiLayerPerceptron::DrawResult ; (; Int_t ; index = 0, . Option_t * ; option = ""test"" . ); const. Draws the neural net output It produces an histogram with the output for the two datasets. ; Index is the number of the desired output neuron. ""option"" can contain:; test or train to select a dataset; comp to produce a X-Y comparison plot; nocanv to not create a new TCanvas for the plot . Definition at line 1533 of file TMultiLayerPerceptron.cxx. ◆ DumpWeights(). Bool_t TMultiLayerPerceptron::DumpWeights ; (; Option_t * ; filename = ""-""); const. Dumps the weights to a text file. ; Set filename to ""-"" (default) to dump to the standard output ; Definition at line 1607 of file TMultiLayerPerceptron.cxx. ◆ Evaluate(). Double_t TMultiLayerPerceptron::Evaluate ; (; Int_t ; index, . Double_t * ; params . ); const. Returns the Neural Net for a given set of input parameters #parameters must equal #input neurons. ; Definition at line 1713 of file TMultiLayerPerceptron.cxx. ◆ ExpandStructure(). void TMultiLayerPerceptron::ExpandStructure ; (; ). private . Expand the stru",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:38010,Testability,test,test,38010," file containing the class declaration ; Definition at line 151 of file TMultiLayerPerceptron.h. ◆ DerivDir(). Double_t TMultiLayerPerceptron::DerivDir ; (; Double_t * ; dir). protected . scalar product between gradient and direction = derivative along direction ; Definition at line 2470 of file TMultiLayerPerceptron.cxx. ◆ Draw(). void TMultiLayerPerceptron::Draw ; (; Option_t * ; option = """"). overridevirtual . Draws the network structure. ; Neurons are depicted by a blue disk, and synapses by lines connecting neurons. The line width is proportional to the weight. ; Reimplemented from TObject.; Definition at line 2524 of file TMultiLayerPerceptron.cxx. ◆ DrawResult(). void TMultiLayerPerceptron::DrawResult ; (; Int_t ; index = 0, . Option_t * ; option = ""test"" . ); const. Draws the neural net output It produces an histogram with the output for the two datasets. ; Index is the number of the desired output neuron. ""option"" can contain:; test or train to select a dataset; comp to produce a X-Y comparison plot; nocanv to not create a new TCanvas for the plot . Definition at line 1533 of file TMultiLayerPerceptron.cxx. ◆ DumpWeights(). Bool_t TMultiLayerPerceptron::DumpWeights ; (; Option_t * ; filename = ""-""); const. Dumps the weights to a text file. ; Set filename to ""-"" (default) to dump to the standard output ; Definition at line 1607 of file TMultiLayerPerceptron.cxx. ◆ Evaluate(). Double_t TMultiLayerPerceptron::Evaluate ; (; Int_t ; index, . Double_t * ; params . ); const. Returns the Neural Net for a given set of input parameters #parameters must equal #input neurons. ; Definition at line 1713 of file TMultiLayerPerceptron.cxx. ◆ ExpandStructure(). void TMultiLayerPerceptron::ExpandStructure ; (; ). private . Expand the structure of the first layer. ; Definition at line 1324 of file TMultiLayerPerceptron.cxx. ◆ Export(). void TMultiLayerPerceptron::Export ; (; Option_t * ; filename = ""NNfunction"", . Option_t * ; language = ""C++"" . ); const. Exports the NN as a f",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:47246,Testability,test,test,47246,"ultiLayerPerceptron::SetLearningMethod ; (; TMultiLayerPerceptron::ELearningMethod ; method). Sets the learning method. ; Available methods are: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 690 of file TMultiLayerPerceptron.cxx. ◆ SetReset(). void TMultiLayerPerceptron::SetReset ; (; Int_t ; reset). Sets number of epochs between two resets of the search direction to the steepest descent. ; (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 751 of file TMultiLayerPerceptron.cxx. ◆ SetTau(). void TMultiLayerPerceptron::SetTau ; (; Double_t ; tau). Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 740 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [1/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; const char * ; test). Sets the Test dataset. ; Those events will not be used for the minimization but for control. Note that the tree must be already defined. ; Definition at line 666 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [2/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; TEventList * ; test). Sets the Test dataset. ; Those events will not be used for the minimization but for control ; Definition at line 633 of file TMultiLayerPerceptron.cxx. ◆ SetTrainingDataSet() [1/2]. void TMultiLayerPerceptron::SetTrainingDataSet ; (; const char * ; train). Sets the Training dataset. ; Those events will be used for the minimization. Note that the tree must be already defined. ; Definition at line 645 of file TMultiLayerPerceptron.cxx. ◆ SetTrainingDataSet() [2/2]. void TMultiLayerPerceptron::SetTrainingDataSet ; (; TEventList * ; train). Sets the Training dataset. ; Those events will be used for the minimization ; Definition at line 622 of file TMultiLayerPerceptr",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:47539,Testability,test,test,47539,"ethods and parameters) ; Definition at line 690 of file TMultiLayerPerceptron.cxx. ◆ SetReset(). void TMultiLayerPerceptron::SetReset ; (; Int_t ; reset). Sets number of epochs between two resets of the search direction to the steepest descent. ; (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 751 of file TMultiLayerPerceptron.cxx. ◆ SetTau(). void TMultiLayerPerceptron::SetTau ; (; Double_t ; tau). Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 740 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [1/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; const char * ; test). Sets the Test dataset. ; Those events will not be used for the minimization but for control. Note that the tree must be already defined. ; Definition at line 666 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [2/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; TEventList * ; test). Sets the Test dataset. ; Those events will not be used for the minimization but for control ; Definition at line 633 of file TMultiLayerPerceptron.cxx. ◆ SetTrainingDataSet() [1/2]. void TMultiLayerPerceptron::SetTrainingDataSet ; (; const char * ; train). Sets the Training dataset. ; Those events will be used for the minimization. Note that the tree must be already defined. ; Definition at line 645 of file TMultiLayerPerceptron.cxx. ◆ SetTrainingDataSet() [2/2]. void TMultiLayerPerceptron::SetTrainingDataSet ; (; TEventList * ; train). Sets the Training dataset. ; Those events will be used for the minimization ; Definition at line 622 of file TMultiLayerPerceptron.cxx. ◆ Shuffle(). void TMultiLayerPerceptron::Shuffle ; (; Int_t * ; index, . Int_t ; n . ); const. private . Shuffle the Int_t index[n] in input. ; Input:; index: the array to shuffle; n: the size of the array. Output:; index: the shuffled indexes. This method is used for stochastic train",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:49671,Testability,test,test,49671,"SteepestDir ; (; Double_t * ; dir). protected . Sets the search direction to steepest descent. ; Definition at line 2253 of file TMultiLayerPerceptron.cxx. ◆ Streamer(). void TMultiLayerPerceptron::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiLayerPerceptron::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 151 of file TMultiLayerPerceptron.h. ◆ Train(). void TMultiLayerPerceptron::Train ; (; Int_t ; nEpoch, . Option_t * ; option = ""text"", . Double_t ; minE = 0 . ). Train the network. ; nEpoch is the number of iterations. option can contain:; ""text"" (simple text output); ""graph"" (evoluting graphical training curves); ""update=X"" (step for the text/graph output update); ""+"" will skip the randomisation and start from the previous values.; ""current"" (draw in the current canvas); ""minErrorTrain"" (stop when NN error on the training sample gets below minE; ""minErrorTest"" (stop when NN error on the test sample gets below minE All combinations are available. . Definition at line 788 of file TMultiLayerPerceptron.cxx. Friends And Related Symbol Documentation. ◆ TMLPAnalyzer. friend class TMLPAnalyzer. friend . Definition at line 27 of file TMultiLayerPerceptron.h. Member Data Documentation. ◆ fCurrentTree. Int_t TMultiLayerPerceptron::fCurrentTree. private . ! index of the current tree in a chain ; Definition at line 124 of file TMultiLayerPerceptron.h. ◆ fCurrentTreeWeight. Double_t TMultiLayerPerceptron::fCurrentTreeWeight. private . ! weight of the current tree in a chain ; Definition at line 125 of file TMultiLayerPerceptron.h. ◆ fData. TTree* TMultiLayerPerceptron::fData. private . ! pointer to the tree used as datasource ; Definition at line 123 of file TMultiLayerPerceptron.h. ◆ fDelta. Double_t TMultiLayerPerceptron::fDelta. private . ! Delta - used in stochastic minimisation - Default=0. ; Definition at line 143 of file TMu",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:53663,Testability,test,test,53663,tiLayerPerceptron.h. ◆ fOutType. TNeuron::ENeuronType TMultiLayerPerceptron::fOutType. private . Type of output neurons. ; Definition at line 133 of file TMultiLayerPerceptron.h. ◆ fReset. Int_t TMultiLayerPerceptron::fReset. private . ! number of epochs between two resets of the search direction to the steepest descent - Default=50 ; Definition at line 147 of file TMultiLayerPerceptron.h. ◆ fStructure. TString TMultiLayerPerceptron::fStructure. private . String containing the network structure. ; Definition at line 130 of file TMultiLayerPerceptron.h. ◆ fSynapses. TObjArray TMultiLayerPerceptron::fSynapses. private . Collection of all the synapses in the network. ; Definition at line 129 of file TMultiLayerPerceptron.h. ◆ fTau. Double_t TMultiLayerPerceptron::fTau. private . ! Tau - used in line search - Default=3. ; Definition at line 145 of file TMultiLayerPerceptron.h. ◆ fTest. TEventList* TMultiLayerPerceptron::fTest. private . ! EventList defining the events in the test dataset ; Definition at line 137 of file TMultiLayerPerceptron.h. ◆ fTestOwner. Bool_t TMultiLayerPerceptron::fTestOwner. private . ! internal flag whether one has to delete fTest or not ; Definition at line 149 of file TMultiLayerPerceptron.h. ◆ fTraining. TEventList* TMultiLayerPerceptron::fTraining. private . ! EventList defining the events in the training dataset ; Definition at line 136 of file TMultiLayerPerceptron.h. ◆ fTrainingOwner. Bool_t TMultiLayerPerceptron::fTrainingOwner. private . ! internal flag whether one has to delete fTraining or not ; Definition at line 148 of file TMultiLayerPerceptron.h. ◆ fType. TNeuron::ENeuronType TMultiLayerPerceptron::fType. private . Type of hidden neurons. ; Definition at line 132 of file TMultiLayerPerceptron.h. ◆ fWeight. TString TMultiLayerPerceptron::fWeight. private . String containing the event weight. ; Definition at line 131 of file TMultiLayerPerceptron.h. Libraries for TMultiLayerPerceptron:. [legend]; The documentation for this class wa,MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:993,Usability,learn,learning,993,"; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; TMultiLayerPerceptron Class Reference. ; This class describes a neural network. ; There are facilities to train the network and use the output.; The input layer is made of inactive neurons (returning the optionally normalized input) and output neurons are linear. The type of hidden neurons is free, the default being sigmoids. (One should still try to pass normalized inputs, e.g. between [0.,1]); The basic input is a TTree and two (training and test) TEventLists. Input and output neurons are assigned a value computed for each event with the same possibilities as for TTree::Draw(). Events may be weighted individually or via TTree::SetWeight(). 6 learning methods are available: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS.; This implementation, written by C. Delaere, is inspired from the mlpfit package from J.Schwindling et al. with some extensions:. the algorithms are globally the same; in TMultilayerPerceptron, there is no limitation on the number of layers/neurons, while MLPFIT was limited to 2 hidden layers; TMultilayerPerceptron allows you to save the network in a root file, and provides more export functionalities; TMultilayerPerceptron gives more flexibility regarding the normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:2513,Usability,clear,clear,2513,"e normalization of inputs/outputs; TMultilayerPerceptron provides, thanks to Andrea Bocci, the possibility to use cross-entropy errors, which allows to train a network for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal over background discrimination). More than 50% of neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package originally written by Jerome Schwindling. MLPfit remains one of the fastest tool for neural networks studies, and this ROOT add-on will not try to compete on that. A clear and flexible Object Oriented implementation has been chosen over a faster but more difficult to maintain code. Nevertheless, the time penalty does not exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:2729,Usability,simpl,simple,2729,"for pattern classification based on Bayesian posterior probability. Introduction; Neural Networks are more and more used in various fields for data analysis and classification, both for research and commercial institutions. Some randomly chosen examples are:. image analysis; financial movements predictions and analysis; sales forecast and product shipping optimisation; in particles physics: mainly for classification tasks (signal over background discrimination). More than 50% of neural networks are multilayer perceptrons. This implementation of multilayer perceptrons is inspired from the MLPfit package originally written by Jerome Schwindling. MLPfit remains one of the fastest tool for neural networks studies, and this ROOT add-on will not try to compete on that. A clear and flexible Object Oriented implementation has been chosen over a faster but more difficult to maintain code. Nevertheless, the time penalty does not exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:3535,Usability,learn,learning,3535,"ation has been chosen over a faster but more difficult to maintain code. Nevertheless, the time penalty does not exceed a factor 2. The MLP; The multilayer perceptron is a simple feed-forward network with the following structure:. It is made of neurons characterized by a bias and weighted links between them (let's call those links synapses). The input neurons receive the inputs, normalize them and forward them to the first hidden layer.; Each neuron in any subsequent layer first computes a linear combination of the outputs of the previous layer. The output of the neuron is then function of that combination with f being linear for output neurons or a sigmoid for hidden layers. This is useful because of two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); wi",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:4254,Usability,learn,learning,4254,"two theorems:. A linear combination of sigmoids can approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); with; \(\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\); The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent with fixed step size (batch learning):; It is the same as the stochastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm:; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower tau = higher precision = slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the Polak-Ribiere updating for",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:4335,Usability,learn,learning,4335," approximate any continuous function.; Trained with output = 1 for the signal and 0 for the background, the approximated function of inputs X is the probability of signal, knowing X. Learning methods; The aim of all learning methods is to minimize the total error on a set of weighted examples. The error is defined as the sum in quadrature, divided by two, of the error on each individual output neuron. In all methods implemented, one needs to compute the first derivative of that error with respect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); with; \(\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\); The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent with fixed step size (batch learning):; It is the same as the stochastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm:; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower tau = higher precision = slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the Polak-Ribiere updating formula:; Weights are set to the minimum along the lin",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:4764,Usability,learn,learning,4764,"ect to the weights. Exploiting the well-known properties of the derivative, especially the derivative of compound functions, one can write:. for a neuron: product of the local derivative with the weighted sum on the outputs of the derivatives.; for a synapse: product of the input with the local derivative of the output neuron. This computation is called back-propagation of the errors. A loop over all examples is called an epoch. Six learning methods are implemented.; Stochastic minimization:; is the most trivial learning method. This is the Robbins-Monro stochastic approximation applied to multilayer perceptrons. The weights are updated after each example according to the formula: \(w_{ij}(t+1) = w_{ij}(t) + \Delta w_{ij}(t)\); with; \(\Delta w_{ij}(t) = - \eta(d e_p / d w_{ij} + \delta) + \epsilon \Delta w_{ij}(t-1)\); The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent with fixed step size (batch learning):; It is the same as the stochastic minimization, but the weights are updated after considering all the examples, with the total derivative dEdw. The parameters for this method are Eta, EtaDecay, Delta and Epsilon.; Steepest descent algorithm:; Weights are set to the minimum along the line defined by the gradient. The only parameter for this method is Tau. Lower tau = higher precision = slower search. A value Tau = 3 seems reasonable.; Conjugate gradients with the Polak-Ribiere updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Conjugate gradients with the Fletcher-Reeves updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Broyden, Fletcher, Goldfarb, Shanno (BFGS) method:; Implies the computation of a NxN matrix compu",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:6265,Usability,simpl,simple,6265," along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Conjugate gradients with the Fletcher-Reeves updating formula:; Weights are set to the minimum along the line defined by the conjugate gradient. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent.; Broyden, Fletcher, Goldfarb, Shanno (BFGS) method:; Implies the computation of a NxN matrix computation, but seems more powerful at least for less than 300 weights. Parameters are Tau and Reset, which defines the epochs where the direction is reset to the steepest descent. How to use it...; TMLP is build from 3 classes: TNeuron, TSynapse and TMultiLayerPerceptron. Only TMultiLayerPerceptron should be used explicitly by the user.; TMultiLayerPerceptron will take examples from a TTree given in the constructor. The network is described by a simple string: The input/output layers are defined by giving the expression for each neuron, separated by comas. Hidden layers are just described by the number of neurons. The layers are separated by colons. In addition, input/output layer formulas can be preceded by '@' (e.g ""@out"") if one wants to also normalize the data from the TTree. Input and outputs are taken from the TTree given as second argument. Expressions are evaluated as for TTree::Draw(), arrays are expended in distinct neurons, one for each index. This can only be done for fixed-size arrays. If the formula ends with ""!"", softmax functions are used for the output layer. One defines the training and test datasets by TEventLists.; Example: TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; TMultiLayerPerceptron::TMultiLayerPerceptronTMultiLayerPerceptron()Default constructor.Definition TMultiLayerPerceptron.cxx:264; Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. The lists used for training and test can b",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:7429,Usability,learn,learning,7429,"olons. In addition, input/output layer formulas can be preceded by '@' (e.g ""@out"") if one wants to also normalize the data from the TTree. Input and outputs are taken from the TTree given as second argument. Expressions are evaluated as for TTree::Draw(), arrays are expended in distinct neurons, one for each index. This can only be done for fixed-size arrays. If the formula ends with ""!"", softmax functions are used for the output layer. One defines the training and test datasets by TEventLists.; Example: TMultiLayerPerceptron(""x,y:10:5:f"",inputTree);; TMultiLayerPerceptron::TMultiLayerPerceptronTMultiLayerPerceptron()Default constructor.Definition TMultiLayerPerceptron.cxx:264; Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. The lists used for training and test can be defined either explicitly, or via a string containing the formula to be used to define them, exactly as for a TCut.; The learning method is defined using the TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :. TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS. A weight can be assigned to events, either in the constructor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, one starts the training with TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are available.; Example: net.Train(100,""text, graph, update=10"");; When the neural net is trained, it can be used directly ( TMultiLayer",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:8121,Usability,simpl,simple,8121,"and the TEventLists can be defined in the constructor, or later with the suited setter method. The lists used for training and test can be defined either explicitly, or via a string containing the formula to be used to define them, exactly as for a TCut.; The learning method is defined using the TMultiLayerPerceptron::SetLearningMethod() . Learning methods are :. TMultiLayerPerceptron::kStochastic,; TMultiLayerPerceptron::kBatch,; TMultiLayerPerceptron::kSteepestDescent,; TMultiLayerPerceptron::kRibierePolak,; TMultiLayerPerceptron::kFletcherReeves,; TMultiLayerPerceptron::kBFGS. A weight can be assigned to events, either in the constructor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, one starts the training with TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are available.; Example: net.Train(100,""text, graph, update=10"");; When the neural net is trained, it can be used directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a standalone C++ code ( TMultiLayerPerceptron::Export() ).; Finally, note that even if this implementation is inspired from the mlpfit code, the feature lists are not exactly matching:. mlpfit hybrid learning method is not implemented; output neurons can be normalized, this is not the case for mlpfit; the neural net is exported in C++, FORTRAN or PYTHON; the drawResult() method allows a fast check of the learning procedure. In addition, the paw version of mlpfit had additional limitations on the number of neurons, hidden layers and inputs/outputs that does not apply to TMultiLayerPerceptron. ; Definition at line 26 of file TMultiLayerPerceptron.h. Public ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:8707,Usability,learn,learning,8707,"ctor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, one starts the training with TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are available.; Example: net.Train(100,""text, graph, update=10"");; When the neural net is trained, it can be used directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a standalone C++ code ( TMultiLayerPerceptron::Export() ).; Finally, note that even if this implementation is inspired from the mlpfit code, the feature lists are not exactly matching:. mlpfit hybrid learning method is not implemented; output neurons can be normalized, this is not the case for mlpfit; the neural net is exported in C++, FORTRAN or PYTHON; the drawResult() method allows a fast check of the learning procedure. In addition, the paw version of mlpfit had additional limitations on the number of neurons, hidden layers and inputs/outputs that does not apply to TMultiLayerPerceptron. ; Definition at line 26 of file TMultiLayerPerceptron.h. Public Types; enum  EDataSet { kTraining; , kTest; };  ; enum  ELearningMethod { ;   kStochastic; , kBatch; , kSteepestDescent; , kRibierePolak; , ;   kFletcherReeves; , kBFGS. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsRefer",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:8915,Usability,learn,learning,8915,"ctor, either with TMultiLayerPerceptron::SetEventWeight(). In addition, the TTree weight is taken into account.; Finally, one starts the training with TMultiLayerPerceptron::Train(Int_t nepoch, Option_t* options). The first argument is the number of epochs while option is a string that can contain: ""text"" (simple text output) , ""graph"" (evoluting graphical training curves), ""update=X"" (step for the text/graph output update) or ""+"" (will skip the randomisation and start from the previous values). All combinations are available.; Example: net.Train(100,""text, graph, update=10"");; When the neural net is trained, it can be used directly ( TMultiLayerPerceptron::Evaluate() ) or exported to a standalone C++ code ( TMultiLayerPerceptron::Export() ).; Finally, note that even if this implementation is inspired from the mlpfit code, the feature lists are not exactly matching:. mlpfit hybrid learning method is not implemented; output neurons can be normalized, this is not the case for mlpfit; the neural net is exported in C++, FORTRAN or PYTHON; the drawResult() method allows a fast check of the learning procedure. In addition, the paw version of mlpfit had additional limitations on the number of neurons, hidden layers and inputs/outputs that does not apply to TMultiLayerPerceptron. ; Definition at line 26 of file TMultiLayerPerceptron.h. Public Types; enum  EDataSet { kTraining; , kTest; };  ; enum  ELearningMethod { ;   kStochastic; , kBatch; , kSteepestDescent; , kRibierePolak; , ;   kFletcherReeves; , kBFGS. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsRefer",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:10299,Usability,simpl,simple,10299,"ELearningMethod { ;   kStochastic; , kBatch; , kSteepestDescent; , kRibierePolak; , ;   kFletcherReeves; , kBFGS. };  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLayerPerceptron ();  Default constructor. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:10663,Usability,simpl,simple,10663,"Overwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLayerPerceptron ();  Default constructor. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each wei",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:10982,Usability,simpl,simple,10982,"nu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  . Public Member Functions;  TMultiLayerPerceptron ();  Default constructor. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each weight normalized by the number of events. ;  ; void Draw (Option_t *option="""") override;  Draws the network structure. ;  ; void DrawResult (Int_t index=0, Option_t *option=""test"") const;  Draws the neural net output It produces an histogram with the output for the two datasets. ;  ; Bool_t DumpWeights (Option_t *filename=""-"") const;  Dumps t",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:11326,Usability,simpl,simple,11326," char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, const char *weight, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data, TEventList *training, TEventList *test, TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  TMultiLayerPerceptron (const char *layout, TTree *data=nullptr, const char *training=""Entry$%2==0"", const char *test="""", TNeuron::ENeuronType type=TNeuron::kSigmoid, const char *extF="""", const char *extD="""");  The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ;  ;  ~TMultiLayerPerceptron () override;  Destructor. ;  ; void ComputeDEDw () const;  Compute the DEDw = sum on all training events of dedw for each weight normalized by the number of events. ;  ; void Draw (Option_t *option="""") override;  Draws the network structure. ;  ; void DrawResult (Int_t index=0, Option_t *option=""test"") const;  Draws the neural net output It produces an histogram with the output for the two datasets. ;  ; Bool_t DumpWeights (Option_t *filename=""-"") const;  Dumps the weights to a text file. ;  ; Double_t Evaluate (Int_t index, Double_t *params) const;  Returns the Neural Net for a given set of input parameters #parameters must equal #input neurons. ;  ; void Export (Option_t *filename=""NNfunction"", Option_t *language=""C++"") const;  Exports the NN as a function for any non-ROOT-dependant co",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:13420,Usability,learn,learning,13420,"t GetEta () const;  ; Double_t GetEtaDecay () const;  ; TMultiLayerPerceptron::ELearningMethod GetLearningMethod () const;  ; Int_t GetReset () const;  ; TString GetStructure () const;  ; Double_t GetTau () const;  ; TNeuron::ENeuronType GetType () const;  ; TClass * IsA () const override;  ; Bool_t LoadWeights (Option_t *filename="""");  Loads the weights from a text file conforming to the format defined by DumpWeights. ;  ; void Randomize () const;  Randomize the weights. ;  ; Double_t Result (Int_t event, Int_t index=0) const;  Computes the output for a given event. ;  ; void SetData (TTree *);  Set the data source. ;  ; void SetDelta (Double_t delta);  Sets Delta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEpsilon (Double_t eps);  Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEta (Double_t eta);  Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEtaDecay (Double_t ed);  Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEventWeight (const char *);  Set the event weight. ;  ; void SetLearningMethod (TMultiLayerPerceptron::ELearningMethod method);  Sets the learning method. ;  ; void SetReset (Int_t reset);  Sets number of epochs between two resets of the search direction to the steepest descent. ;  ; void SetTau (Double_t tau);  Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetTestDataSet (const char *test);  Sets the Test dataset. ;  ; void SetTestDataSet (TEventList *test);  Sets the Test dataset. ;  ; void SetTrainingDataSet (const char *train);  Sets the Training dataset. ;  ; void SetTrainingDa",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:13595,Usability,learn,learning,13595,"t GetEta () const;  ; Double_t GetEtaDecay () const;  ; TMultiLayerPerceptron::ELearningMethod GetLearningMethod () const;  ; Int_t GetReset () const;  ; TString GetStructure () const;  ; Double_t GetTau () const;  ; TNeuron::ENeuronType GetType () const;  ; TClass * IsA () const override;  ; Bool_t LoadWeights (Option_t *filename="""");  Loads the weights from a text file conforming to the format defined by DumpWeights. ;  ; void Randomize () const;  Randomize the weights. ;  ; Double_t Result (Int_t event, Int_t index=0) const;  Computes the output for a given event. ;  ; void SetData (TTree *);  Set the data source. ;  ; void SetDelta (Double_t delta);  Sets Delta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEpsilon (Double_t eps);  Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEta (Double_t eta);  Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEtaDecay (Double_t ed);  Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEventWeight (const char *);  Set the event weight. ;  ; void SetLearningMethod (TMultiLayerPerceptron::ELearningMethod method);  Sets the learning method. ;  ; void SetReset (Int_t reset);  Sets number of epochs between two resets of the search direction to the steepest descent. ;  ; void SetTau (Double_t tau);  Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetTestDataSet (const char *test);  Sets the Test dataset. ;  ; void SetTestDataSet (TEventList *test);  Sets the Test dataset. ;  ; void SetTrainingDataSet (const char *train);  Sets the Training dataset. ;  ; void SetTrainingDa",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:13762,Usability,learn,learning,13762,"t GetEta () const;  ; Double_t GetEtaDecay () const;  ; TMultiLayerPerceptron::ELearningMethod GetLearningMethod () const;  ; Int_t GetReset () const;  ; TString GetStructure () const;  ; Double_t GetTau () const;  ; TNeuron::ENeuronType GetType () const;  ; TClass * IsA () const override;  ; Bool_t LoadWeights (Option_t *filename="""");  Loads the weights from a text file conforming to the format defined by DumpWeights. ;  ; void Randomize () const;  Randomize the weights. ;  ; Double_t Result (Int_t event, Int_t index=0) const;  Computes the output for a given event. ;  ; void SetData (TTree *);  Set the data source. ;  ; void SetDelta (Double_t delta);  Sets Delta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEpsilon (Double_t eps);  Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEta (Double_t eta);  Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEtaDecay (Double_t ed);  Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEventWeight (const char *);  Set the event weight. ;  ; void SetLearningMethod (TMultiLayerPerceptron::ELearningMethod method);  Sets the learning method. ;  ; void SetReset (Int_t reset);  Sets number of epochs between two resets of the search direction to the steepest descent. ;  ; void SetTau (Double_t tau);  Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetTestDataSet (const char *test);  Sets the Test dataset. ;  ; void SetTestDataSet (TEventList *test);  Sets the Test dataset. ;  ; void SetTrainingDataSet (const char *train);  Sets the Training dataset. ;  ; void SetTrainingDa",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:13936,Usability,learn,learning,13936,"t GetEta () const;  ; Double_t GetEtaDecay () const;  ; TMultiLayerPerceptron::ELearningMethod GetLearningMethod () const;  ; Int_t GetReset () const;  ; TString GetStructure () const;  ; Double_t GetTau () const;  ; TNeuron::ENeuronType GetType () const;  ; TClass * IsA () const override;  ; Bool_t LoadWeights (Option_t *filename="""");  Loads the weights from a text file conforming to the format defined by DumpWeights. ;  ; void Randomize () const;  Randomize the weights. ;  ; Double_t Result (Int_t event, Int_t index=0) const;  Computes the output for a given event. ;  ; void SetData (TTree *);  Set the data source. ;  ; void SetDelta (Double_t delta);  Sets Delta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEpsilon (Double_t eps);  Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEta (Double_t eta);  Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEtaDecay (Double_t ed);  Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEventWeight (const char *);  Set the event weight. ;  ; void SetLearningMethod (TMultiLayerPerceptron::ELearningMethod method);  Sets the learning method. ;  ; void SetReset (Int_t reset);  Sets number of epochs between two resets of the search direction to the steepest descent. ;  ; void SetTau (Double_t tau);  Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetTestDataSet (const char *test);  Sets the Test dataset. ;  ; void SetTestDataSet (TEventList *test);  Sets the Test dataset. ;  ; void SetTrainingDataSet (const char *train);  Sets the Training dataset. ;  ; void SetTrainingDa",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:14120,Usability,learn,learning,14120,"oid Randomize () const;  Randomize the weights. ;  ; Double_t Result (Int_t event, Int_t index=0) const;  Computes the output for a given event. ;  ; void SetData (TTree *);  Set the data source. ;  ; void SetDelta (Double_t delta);  Sets Delta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEpsilon (Double_t eps);  Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEta (Double_t eta);  Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEtaDecay (Double_t ed);  Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEventWeight (const char *);  Set the event weight. ;  ; void SetLearningMethod (TMultiLayerPerceptron::ELearningMethod method);  Sets the learning method. ;  ; void SetReset (Int_t reset);  Sets number of epochs between two resets of the search direction to the steepest descent. ;  ; void SetTau (Double_t tau);  Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetTestDataSet (const char *test);  Sets the Test dataset. ;  ; void SetTestDataSet (TEventList *test);  Sets the Test dataset. ;  ; void SetTrainingDataSet (const char *train);  Sets the Training dataset. ;  ; void SetTrainingDataSet (TEventList *train);  Sets the Training dataset. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (Int_t nEpoch, Option_t *option=""text"", Double_t minE=0);  Train the network. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:14384,Usability,learn,learning,14384,"he constructor for the complete description of learning methods and parameters) ;  ; void SetEpsilon (Double_t eps);  Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEta (Double_t eta);  Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEtaDecay (Double_t ed);  Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetEventWeight (const char *);  Set the event weight. ;  ; void SetLearningMethod (TMultiLayerPerceptron::ELearningMethod method);  Sets the learning method. ;  ; void SetReset (Int_t reset);  Sets number of epochs between two resets of the search direction to the steepest descent. ;  ; void SetTau (Double_t tau);  Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ;  ; void SetTestDataSet (const char *test);  Sets the Test dataset. ;  ; void SetTestDataSet (TEventList *test);  Sets the Test dataset. ;  ; void SetTrainingDataSet (const char *train);  Sets the Training dataset. ;  ; void SetTrainingDataSet (TEventList *train);  Sets the Training dataset. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void Train (Int_t nEpoch, Option_t *option=""text"", Double_t minE=0);  Train the network. ;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to cur",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:25293,Usability,simpl,simple,25293,"_t *);  Search along the line defined by direction. ;  ; void MLP_Batch (Double_t *);  One step for the batch (stochastic) method. ;  ; void MLP_Stochastic (Double_t *);  One step for the stochastic method buffer should contain the previous dw vector and will be updated. ;  ; void SetGammaDelta (TMatrixD &, TMatrixD &, Double_t *);  Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ;  ; void SteepestDir (Double_t *);  Sets the search direction to steepest descent. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Private Member Functions;  TMultiLayerPerceptron (const TMultiLayerPerceptron &);  ; void BuildFirstLayer (TString &);  Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ;  ; void BuildHiddenLayers (TString &);  Builds hidden layers. ;  ; void BuildLastLayer (TString &, Int_t);  Builds the output layer Neurons are linear combinations of input, by default. ;  ; void BuildOneHiddenLayer (const TString &sNumNodes, Int_t &layer, Int_t &prevStart, Int_t &prevStop, Bool_t lastLayer);  Builds a hidden layer, updates the number of layers. ;  ; void ExpandStructure ();  Expand the structure of the first layer. ;  ; void MLP_Line (Double_t *, Double_t *, Double_t);  Sets the weights to a point along a line Weights are set to [origin + (dist * dir)]. ;  ; TMultiLayerPerceptron & operator= (const TMultiLayerPerceptron &);  ; void Shuffle (Int_t *, Int_t) const;  Shuffle the Int_t index[n] in input. ;  . Private Attributes; Int_t fCurrentTree;  ! index of the current tree in a chain ;  ; Double_t fCurrentTreeWeight;  ! weight of the current tree in a chain ;  ; TTree * fData; ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:29346,Usability,simpl,simple,29346,"i, or Opera instead.; [legend]; Member Enumeration Documentation. ◆ EDataSet. enum TMultiLayerPerceptron::EDataSet. EnumeratorkTraining ; kTest . Definition at line 32 of file TMultiLayerPerceptron.h. ◆ ELearningMethod. enum TMultiLayerPerceptron::ELearningMethod. EnumeratorkStochastic ; kBatch ; kSteepestDescent ; kRibierePolak ; kFletcherReeves ; kBFGS . Definition at line 30 of file TMultiLayerPerceptron.h. Constructor & Destructor Documentation. ◆ TMultiLayerPerceptron() [1/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; ). Default constructor. ; Definition at line 264 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [2/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENe",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:30506,Usability,simpl,simple,30506,".; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 446 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [3/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data = nullptr, . const char * ; training = ""Entry$%2==0"", . const char * ; test = """", . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; ex",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:31610,Usability,simpl,simple,31610,"he number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are two cuts (see TTreeFormula) defining events to be used during the neural net training and testing.; Example: ""Entry$%2"", ""(Entry$+1)%2"".; Both the TTree and the cut can be defined in the constructor, or later with the suited setter method. ; Definition at line 524 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [4/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; ",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:32688,Usability,simpl,simple,32688,"rs are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 318 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [5/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const char * ; layout, . const char * ; weight, . TTree * ; data, . TEventList * ; training, . TEventList * ; test, . TNeuron::ENeuronType ; type = TNeuron::kSigmoid, . const char * ; extF = """", . const char * ; extD = """" . ). The network is described by a simple string: The input/output layers are defined by giving the branch names separated by comas. ; Hidden layers are just described by the number of neurons. The layers are separated by colons.; Ex: ""x,y:10:5:f""; The output can be prepended by '@' if the variable has to be normalized. The output can be followed by '!' to use Softmax neurons for the output layer only.; Ex: ""x,y:10:5:c1,c2,c3!""; Input and outputs are taken from the TTree given as second argument. training and test are the two TEventLists defining events to be used during the neural net training. Both the TTree and the TEventLists can be defined in the constructor, or later with the suited setter method. ; Definition at line 380 of file TMultiLayerPerceptron.cxx. ◆ ~TMultiLayerPerceptron(). TMultiLayerPerceptron::~TMultiLayerPerceptron ; (; ). override . Destructor. ; Definition at line 581 of file TMultiLayerPerceptron.cxx. ◆ TMultiLayerPerceptron() [6/6]. TMultiLayerPerceptron::TMultiLayerPerceptron ; (; const TMultiLayerPerceptron & ; ). private . Me",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:34683,Usability,simpl,simple,34683,"LayerPerceptron & ; ). private . Member Function Documentation. ◆ AttachData(). void TMultiLayerPerceptron::AttachData ; (; ). protected . Connects the TTree to Neurons in input and output layers. ; The formulas associated to each neuron are created and reported to the network formula manager. By default, the branch is not normalised since this would degrade performance for classification jobs. Normalisation can be requested by putting '@' in front of the formula. ; Definition at line 1266 of file TMultiLayerPerceptron.cxx. ◆ BFGSDir(). void TMultiLayerPerceptron::BFGSDir ; (; TMatrixD & ; bfgsh, . Double_t * ; dir . ). protected . Computes the direction for the BFGS algorithm as the product between the Hessian estimate (bfgsh) and the dir. ; Definition at line 2494 of file TMultiLayerPerceptron.cxx. ◆ BuildFirstLayer(). void TMultiLayerPerceptron::BuildFirstLayer ; (; TString & ; input). private . Instantiates the neurons in input Inputs are normalised and the type is set to kOff (simple forward of the formula value) ; Definition at line 1401 of file TMultiLayerPerceptron.cxx. ◆ BuildHiddenLayers(). void TMultiLayerPerceptron::BuildHiddenLayers ; (; TString & ; hidden). private . Builds hidden layers. ; Definition at line 1419 of file TMultiLayerPerceptron.cxx. ◆ BuildLastLayer(). void TMultiLayerPerceptron::BuildLastLayer ; (; TString & ; output, . Int_t ; prev . ). private . Builds the output layer Neurons are linear combinations of input, by default. ; If the structure ends with ""!"", neurons are set up for classification, ie. with a sigmoid (1 neuron) or softmax (more neurons) activation function. ; Definition at line 1483 of file TMultiLayerPerceptron.cxx. ◆ BuildNetwork(). void TMultiLayerPerceptron::BuildNetwork ; (; ). protected . Instantiates the network from the description. ; Definition at line 1370 of file TMultiLayerPerceptron.cxx. ◆ BuildOneHiddenLayer(). void TMultiLayerPerceptron::BuildOneHiddenLayer ; (; const TString & ; sNumNodes, . Int_t & ; layer",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:44689,Usability,learn,learning,44689,"p for the stochastic method buffer should contain the previous dw vector and will be updated. ; Definition at line 2158 of file TMultiLayerPerceptron.cxx. ◆ operator=(). TMultiLayerPerceptron & TMultiLayerPerceptron::operator= ; (; const TMultiLayerPerceptron & ; ). private . ◆ Randomize(). void TMultiLayerPerceptron::Randomize ; (; ); const. Randomize the weights. ; Definition at line 1239 of file TMultiLayerPerceptron.cxx. ◆ Result(). Double_t TMultiLayerPerceptron::Result ; (; Int_t ; event, . Int_t ; index = 0 . ); const. Computes the output for a given event. ; Look at the output neuron designed by index. ; Definition at line 1033 of file TMultiLayerPerceptron.cxx. ◆ SetData(). void TMultiLayerPerceptron::SetData ; (; TTree * ; data). Set the data source. ; Definition at line 590 of file TMultiLayerPerceptron.cxx. ◆ SetDelta(). void TMultiLayerPerceptron::SetDelta ; (; Double_t ; delta). Sets Delta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 720 of file TMultiLayerPerceptron.cxx. ◆ SetEpsilon(). void TMultiLayerPerceptron::SetEpsilon ; (; Double_t ; eps). Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 710 of file TMultiLayerPerceptron.cxx. ◆ SetEta(). void TMultiLayerPerceptron::SetEta ; (; Double_t ; eta). Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 700 of file TMultiLayerPerceptron.cxx. ◆ SetEtaDecay(). void TMultiLayerPerceptron::SetEtaDecay ; (; Double_t ; ed). Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 730 of file TMultiLayerPerceptron.cxx. ◆ SetEventWeight(). void TMultiLayerPerceptron::SetEventWeight ; (; const char * ; branch)",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:44963,Usability,learn,learning,44963,"e . ◆ Randomize(). void TMultiLayerPerceptron::Randomize ; (; ); const. Randomize the weights. ; Definition at line 1239 of file TMultiLayerPerceptron.cxx. ◆ Result(). Double_t TMultiLayerPerceptron::Result ; (; Int_t ; event, . Int_t ; index = 0 . ); const. Computes the output for a given event. ; Look at the output neuron designed by index. ; Definition at line 1033 of file TMultiLayerPerceptron.cxx. ◆ SetData(). void TMultiLayerPerceptron::SetData ; (; TTree * ; data). Set the data source. ; Definition at line 590 of file TMultiLayerPerceptron.cxx. ◆ SetDelta(). void TMultiLayerPerceptron::SetDelta ; (; Double_t ; delta). Sets Delta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 720 of file TMultiLayerPerceptron.cxx. ◆ SetEpsilon(). void TMultiLayerPerceptron::SetEpsilon ; (; Double_t ; eps). Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 710 of file TMultiLayerPerceptron.cxx. ◆ SetEta(). void TMultiLayerPerceptron::SetEta ; (; Double_t ; eta). Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 700 of file TMultiLayerPerceptron.cxx. ◆ SetEtaDecay(). void TMultiLayerPerceptron::SetEtaDecay ; (; Double_t ; ed). Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 730 of file TMultiLayerPerceptron.cxx. ◆ SetEventWeight(). void TMultiLayerPerceptron::SetEventWeight ; (; const char * ; branch). Set the event weight. ; Definition at line 606 of file TMultiLayerPerceptron.cxx. ◆ SetGammaDelta(). void TMultiLayerPerceptron::SetGammaDelta ; (; TMatrixD & ; gamma, . TMatrixD & ; delta, . Double_t * ; buffer . ). protected . Sets the gamma \((g_{(t+1)}-g_{(t)})\) and",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:45225,Usability,learn,learning,45225,"tes the output for a given event. ; Look at the output neuron designed by index. ; Definition at line 1033 of file TMultiLayerPerceptron.cxx. ◆ SetData(). void TMultiLayerPerceptron::SetData ; (; TTree * ; data). Set the data source. ; Definition at line 590 of file TMultiLayerPerceptron.cxx. ◆ SetDelta(). void TMultiLayerPerceptron::SetDelta ; (; Double_t ; delta). Sets Delta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 720 of file TMultiLayerPerceptron.cxx. ◆ SetEpsilon(). void TMultiLayerPerceptron::SetEpsilon ; (; Double_t ; eps). Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 710 of file TMultiLayerPerceptron.cxx. ◆ SetEta(). void TMultiLayerPerceptron::SetEta ; (; Double_t ; eta). Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 700 of file TMultiLayerPerceptron.cxx. ◆ SetEtaDecay(). void TMultiLayerPerceptron::SetEtaDecay ; (; Double_t ; ed). Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 730 of file TMultiLayerPerceptron.cxx. ◆ SetEventWeight(). void TMultiLayerPerceptron::SetEventWeight ; (; const char * ; branch). Set the event weight. ; Definition at line 606 of file TMultiLayerPerceptron.cxx. ◆ SetGammaDelta(). void TMultiLayerPerceptron::SetGammaDelta ; (; TMatrixD & ; gamma, . TMatrixD & ; delta, . Double_t * ; buffer . ). protected . Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ; Definition at line 2431 of file TMultiLayerPerceptron.cxx. ◆ SetLearningMethod(). void TMul",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:45499,Usability,learn,learning,45499,"LayerPerceptron.cxx. ◆ SetDelta(). void TMultiLayerPerceptron::SetDelta ; (; Double_t ; delta). Sets Delta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 720 of file TMultiLayerPerceptron.cxx. ◆ SetEpsilon(). void TMultiLayerPerceptron::SetEpsilon ; (; Double_t ; eps). Sets Epsilon - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 710 of file TMultiLayerPerceptron.cxx. ◆ SetEta(). void TMultiLayerPerceptron::SetEta ; (; Double_t ; eta). Sets Eta - used in stochastic minimisation (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 700 of file TMultiLayerPerceptron.cxx. ◆ SetEtaDecay(). void TMultiLayerPerceptron::SetEtaDecay ; (; Double_t ; ed). Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 730 of file TMultiLayerPerceptron.cxx. ◆ SetEventWeight(). void TMultiLayerPerceptron::SetEventWeight ; (; const char * ; branch). Set the event weight. ; Definition at line 606 of file TMultiLayerPerceptron.cxx. ◆ SetGammaDelta(). void TMultiLayerPerceptron::SetGammaDelta ; (; TMatrixD & ; gamma, . TMatrixD & ; delta, . Double_t * ; buffer . ). protected . Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ; Definition at line 2431 of file TMultiLayerPerceptron.cxx. ◆ SetLearningMethod(). void TMultiLayerPerceptron::SetLearningMethod ; (; TMultiLayerPerceptron::ELearningMethod ; method). Sets the learning method. ; Available methods are: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. (look at the constructor for the complete descri",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:46320,Usability,learn,learning,46320,"EtaDecay(). void TMultiLayerPerceptron::SetEtaDecay ; (; Double_t ; ed). Sets EtaDecay - Eta *= EtaDecay at each epoch (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 730 of file TMultiLayerPerceptron.cxx. ◆ SetEventWeight(). void TMultiLayerPerceptron::SetEventWeight ; (; const char * ; branch). Set the event weight. ; Definition at line 606 of file TMultiLayerPerceptron.cxx. ◆ SetGammaDelta(). void TMultiLayerPerceptron::SetGammaDelta ; (; TMatrixD & ; gamma, . TMatrixD & ; delta, . Double_t * ; buffer . ). protected . Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ; Definition at line 2431 of file TMultiLayerPerceptron.cxx. ◆ SetLearningMethod(). void TMultiLayerPerceptron::SetLearningMethod ; (; TMultiLayerPerceptron::ELearningMethod ; method). Sets the learning method. ; Available methods are: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 690 of file TMultiLayerPerceptron.cxx. ◆ SetReset(). void TMultiLayerPerceptron::SetReset ; (; Int_t ; reset). Sets number of epochs between two resets of the search direction to the steepest descent. ; (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 751 of file TMultiLayerPerceptron.cxx. ◆ SetTau(). void TMultiLayerPerceptron::SetTau ; (; Double_t ; tau). Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 740 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [1/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; const char * ; test). Sets the Test dataset. ; Those events will not be used for the minimiz",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:46500,Usability,learn,learning,46500," and parameters) ; Definition at line 730 of file TMultiLayerPerceptron.cxx. ◆ SetEventWeight(). void TMultiLayerPerceptron::SetEventWeight ; (; const char * ; branch). Set the event weight. ; Definition at line 606 of file TMultiLayerPerceptron.cxx. ◆ SetGammaDelta(). void TMultiLayerPerceptron::SetGammaDelta ; (; TMatrixD & ; gamma, . TMatrixD & ; delta, . Double_t * ; buffer . ). protected . Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ; Definition at line 2431 of file TMultiLayerPerceptron.cxx. ◆ SetLearningMethod(). void TMultiLayerPerceptron::SetLearningMethod ; (; TMultiLayerPerceptron::ELearningMethod ; method). Sets the learning method. ; Available methods are: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 690 of file TMultiLayerPerceptron.cxx. ◆ SetReset(). void TMultiLayerPerceptron::SetReset ; (; Int_t ; reset). Sets number of epochs between two resets of the search direction to the steepest descent. ; (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 751 of file TMultiLayerPerceptron.cxx. ◆ SetTau(). void TMultiLayerPerceptron::SetTau ; (; Double_t ; tau). Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 740 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [1/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; const char * ; test). Sets the Test dataset. ; Those events will not be used for the minimization but for control. Note that the tree must be already defined. ; Definition at line 666 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [2/2]. void TMultiLayerPerceptron::SetTestData",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:46814,Usability,learn,learning,46814," (; TMatrixD & ; gamma, . TMatrixD & ; delta, . Double_t * ; buffer . ). protected . Sets the gamma \((g_{(t+1)}-g_{(t)})\) and delta \((w_{(t+1)}-w_{(t)})\) vectors Gamma is computed here, so ComputeDEDw cannot have been called before, and delta is a direct translation of buffer into a TMatrixD. ; Definition at line 2431 of file TMultiLayerPerceptron.cxx. ◆ SetLearningMethod(). void TMultiLayerPerceptron::SetLearningMethod ; (; TMultiLayerPerceptron::ELearningMethod ; method). Sets the learning method. ; Available methods are: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 690 of file TMultiLayerPerceptron.cxx. ◆ SetReset(). void TMultiLayerPerceptron::SetReset ; (; Int_t ; reset). Sets number of epochs between two resets of the search direction to the steepest descent. ; (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 751 of file TMultiLayerPerceptron.cxx. ◆ SetTau(). void TMultiLayerPerceptron::SetTau ; (; Double_t ; tau). Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 740 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [1/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; const char * ; test). Sets the Test dataset. ; Those events will not be used for the minimization but for control. Note that the tree must be already defined. ; Definition at line 666 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [2/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; TEventList * ; test). Sets the Test dataset. ; Those events will not be used for the minimization but for control ; Definition at line 633 of file TMultiLayerPerceptron.cxx. ◆ SetTrainingDataSet() [1/2]. void TMultiLayerPerceptron::SetTrainingDataSet ; (; const char * ; train). Sets the Training dataset",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:47064,Usability,learn,learning,47064,", and delta is a direct translation of buffer into a TMatrixD. ; Definition at line 2431 of file TMultiLayerPerceptron.cxx. ◆ SetLearningMethod(). void TMultiLayerPerceptron::SetLearningMethod ; (; TMultiLayerPerceptron::ELearningMethod ; method). Sets the learning method. ; Available methods are: kStochastic, kBatch, kSteepestDescent, kRibierePolak, kFletcherReeves and kBFGS. (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 690 of file TMultiLayerPerceptron.cxx. ◆ SetReset(). void TMultiLayerPerceptron::SetReset ; (; Int_t ; reset). Sets number of epochs between two resets of the search direction to the steepest descent. ; (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 751 of file TMultiLayerPerceptron.cxx. ◆ SetTau(). void TMultiLayerPerceptron::SetTau ; (; Double_t ; tau). Sets Tau - used in line search (look at the constructor for the complete description of learning methods and parameters) ; Definition at line 740 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [1/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; const char * ; test). Sets the Test dataset. ; Those events will not be used for the minimization but for control. Note that the tree must be already defined. ; Definition at line 666 of file TMultiLayerPerceptron.cxx. ◆ SetTestDataSet() [2/2]. void TMultiLayerPerceptron::SetTestDataSet ; (; TEventList * ; test). Sets the Test dataset. ; Those events will not be used for the minimization but for control ; Definition at line 633 of file TMultiLayerPerceptron.cxx. ◆ SetTrainingDataSet() [1/2]. void TMultiLayerPerceptron::SetTrainingDataSet ; (; const char * ; train). Sets the Training dataset. ; Those events will be used for the minimization. Note that the tree must be already defined. ; Definition at line 645 of file TMultiLayerPerceptron.cxx. ◆ SetTrainingDataSet() [2/2]. void TMultiLayerPerceptron::SetTrainingDataSet ; (",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMultiLayerPerceptron.html:49324,Usability,simpl,simple,49324,"le; n: the size of the array. Output:; index: the shuffled indexes. This method is used for stochastic training ; Definition at line 2139 of file TMultiLayerPerceptron.cxx. ◆ SteepestDir(). void TMultiLayerPerceptron::SteepestDir ; (; Double_t * ; dir). protected . Sets the search direction to steepest descent. ; Definition at line 2253 of file TMultiLayerPerceptron.cxx. ◆ Streamer(). void TMultiLayerPerceptron::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject. ◆ StreamerNVirtual(). void TMultiLayerPerceptron::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 151 of file TMultiLayerPerceptron.h. ◆ Train(). void TMultiLayerPerceptron::Train ; (; Int_t ; nEpoch, . Option_t * ; option = ""text"", . Double_t ; minE = 0 . ). Train the network. ; nEpoch is the number of iterations. option can contain:; ""text"" (simple text output); ""graph"" (evoluting graphical training curves); ""update=X"" (step for the text/graph output update); ""+"" will skip the randomisation and start from the previous values.; ""current"" (draw in the current canvas); ""minErrorTrain"" (stop when NN error on the training sample gets below minE; ""minErrorTest"" (stop when NN error on the test sample gets below minE All combinations are available. . Definition at line 788 of file TMultiLayerPerceptron.cxx. Friends And Related Symbol Documentation. ◆ TMLPAnalyzer. friend class TMLPAnalyzer. friend . Definition at line 27 of file TMultiLayerPerceptron.h. Member Data Documentation. ◆ fCurrentTree. Int_t TMultiLayerPerceptron::fCurrentTree. private . ! index of the current tree in a chain ; Definition at line 124 of file TMultiLayerPerceptron.h. ◆ fCurrentTreeWeight. Double_t TMultiLayerPerceptron::fCurrentTreeWeight. private . ! weight of the current tree in a chain ; Definition at line 125 of file TMultiLayerPerceptron.h. ◆ fData. TTree* TMultiLayerPerceptron::fData. private . ! pointer to the tree used as da",MatchSource.WIKI,doc/master/classTMultiLayerPerceptron.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMultiLayerPerceptron.html
https://root.cern/doc/master/classTMutexImp.html:2423,Availability,error,error,2423,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:2512,Availability,error,error,2512,"ar *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns strin",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:2667,Availability,error,error,2667,";  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title o",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:2964,Availability,error,error,2964,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:7528,Availability,error,error,7528," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:2429,Integrability,message,message,2429,"object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Return",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:2970,Integrability,message,message,2970,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:4172,Integrability,message,message,4172,"ived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this metho",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:7534,Integrability,message,message,7534," must be overridden when a class wants to print itself. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:7907,Integrability,message,message,7907," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Addit",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:662,Modifiability,inherit,inherited,662,". ROOT: TMutexImp Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; List of all members ; TMutexImp Class Referenceabstract. . Definition at line 27 of file TMutexImp.h. Public Member Functions;  TMutexImp ();  ; virtual ~TMutexImp ();  ; TClass * IsA () const override;  ; virtual Int_t Lock ()=0;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual Int_t TryLock ()=0;  ; virtual Int_t UnLock ()=0;  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all o",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:2059,Modifiability,inherit,inheritance,2059,"pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Clear (Option_t *="""");  ; virtual TObject * Clone (const char *newname="""") const;  Make a clone of an object using the Streamer facility. ;  ; virtual Int_t Compare (const TObject *obj) const;  Compare abstract method. ;  ; virtual void Copy (TObject &object) const;  Copy this to obj. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:4270,Modifiability,inherit,inherits,4270,"ed by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a ",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:4387,Modifiability,inherit,inherits,4387,"ame of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; virtual Bool_t IsSortable () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; virtual void ls (Option_t *option="""") const;  The ls function lists the contents of a class on stdout. ;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its p",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:8408,Modifiability,inherit,inherited,8408,"reamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , k",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:8938,Modifiability,inherit,inherited,8938,";  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMutexImp.h>. Inheritance diagram for TMutexImp:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera inst",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:9579,Modifiability,inherit,inherited,9579,"tatus of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMutexImp.h>. Inheritance diagram for TMutexImp:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMutexImp(). TMutexImp::TMutexImp ; (; ). inline . Definition at line 30 of file TMutexImp.h. ◆ ~TMutexImp(). virtual TMutexImp::~TMutexImp ; (; ). inlinevirtual . Definition at line 31 of file TMutexImp.h. Member Function Documentation. ◆ Class(). static TClass * TMutexImp::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMutexImp::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMutexImp::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 37 of file TMutexImp.h. ◆ DeclFileName(). ",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:9678,Modifiability,inherit,inherited,9678,"tatus of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  . Additional Inherited Members;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . #include <TMutexImp.h>. Inheritance diagram for TMutexImp:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ TMutexImp(). TMutexImp::TMutexImp ; (; ). inline . Definition at line 30 of file TMutexImp.h. ◆ ~TMutexImp(). virtual TMutexImp::~TMutexImp ; (; ). inlinevirtual . Definition at line 31 of file TMutexImp.h. Member Function Documentation. ◆ Class(). static TClass * TMutexImp::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMutexImp::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMutexImp::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 37 of file TMutexImp.h. ◆ DeclFileName(). ",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMutexImp.html:3901,Security,hash,hash,3901," Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual const char * GetName () const;  Returns name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual const char * GetTitle () const;  Returns title of object. ;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; virtual ULong_t Hash () const;  Return hash value for this object. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t",MatchSource.WIKI,doc/master/classTMutexImp.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMutexImp.html
https://root.cern/doc/master/classTMVA.html:328,Modifiability,variab,variable,328,". ROOT: TMVA Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Attributes |; List of all members ; TMVA Class ReferenceTMVA. ; Base Class for all classes that need option parsing. ; Node for the Decision Tree.; The node specifies ONE variable out of the given set of selection variable that is used to split the sample which ""arrives"" at the node, into a left (background-enhanced) and a right (signal-enhanced) sample. . Public Types; enum  ECellValue { ;   kValue; , kValueError; , kValueDensity; , kMeanValue; , ;   kRms; , kRmsOvMean; , kCellVolume. };  ; enum  EDTSeparation { ;   kFoam; , kGiniIndex; , kMisClassificationError; , kCrossEntropy; , ;   kGiniIndexWithLaplace; , kSdivSqrtSplusB. };  ; enum class  EEfficiencyPlotType { kEffBvsEffS; , kRejBvsEffS; };  ; enum  EFoamType { ;   kSeparate; , kDiscr; , kMonoTarget; , kMultiTarget; , ;   kMultiClass. };  ; enum  EMsgType { ;   kDEBUG = 1; , kVERBOSE = 2; , kINFO = 3; , kWARNING = 4; , ;   kERROR = 5; , kFATAL = 6; , kSILENT = 7; , kHEADER = 8. };  ; enum  ETargetSelection { kMean = 0; , kMpv = 1; };  ; using EventCollection_t = std::vector< Event * >;  ; using EventOutputs_t = std::vector< Float_t >;  ; using EventOutputsMulticlass_t = std::vector< std::vector< Float_t > >;  ; using EventTypes_t = std::vector< Bool_t >;  ; enum  HistType { kMVAType = 0; , kProbaType = 1; , kRarityType = 2; , kCompareType = 3; };  ; typedef UInt_t TMVAVersion_t;  ; enum  VIType { kShort =0; , kAll =1; , kRandom =2; };  . Public Attributes; std::vector< TControlBar * > BDT_Global__cbar;  ; std::vector< TControlBar * > BDTReg_Global__cbar;  ; const Bool_t GeneticAlgorithm__DEBUG__ = kFALSE;  ; const int max_Events_ = 200000;  ; const int max_nLayers_ = 6;  ; const int max_nNodes_ = 200;  ; const int max_nVar_ = 200;  ; const Bool_t MethodPDERS_UseFindRoot = kFALSE;  . Member Typedef Documentation. ◆ EventCollection_t. using TMVA::EventCollec",MatchSource.WIKI,doc/master/classTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA.html
https://root.cern/doc/master/classTMVA.html:371,Modifiability,variab,variable,371,". ROOT: TMVA Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Attributes |; List of all members ; TMVA Class ReferenceTMVA. ; Base Class for all classes that need option parsing. ; Node for the Decision Tree.; The node specifies ONE variable out of the given set of selection variable that is used to split the sample which ""arrives"" at the node, into a left (background-enhanced) and a right (signal-enhanced) sample. . Public Types; enum  ECellValue { ;   kValue; , kValueError; , kValueDensity; , kMeanValue; , ;   kRms; , kRmsOvMean; , kCellVolume. };  ; enum  EDTSeparation { ;   kFoam; , kGiniIndex; , kMisClassificationError; , kCrossEntropy; , ;   kGiniIndexWithLaplace; , kSdivSqrtSplusB. };  ; enum class  EEfficiencyPlotType { kEffBvsEffS; , kRejBvsEffS; };  ; enum  EFoamType { ;   kSeparate; , kDiscr; , kMonoTarget; , kMultiTarget; , ;   kMultiClass. };  ; enum  EMsgType { ;   kDEBUG = 1; , kVERBOSE = 2; , kINFO = 3; , kWARNING = 4; , ;   kERROR = 5; , kFATAL = 6; , kSILENT = 7; , kHEADER = 8. };  ; enum  ETargetSelection { kMean = 0; , kMpv = 1; };  ; using EventCollection_t = std::vector< Event * >;  ; using EventOutputs_t = std::vector< Float_t >;  ; using EventOutputsMulticlass_t = std::vector< std::vector< Float_t > >;  ; using EventTypes_t = std::vector< Bool_t >;  ; enum  HistType { kMVAType = 0; , kProbaType = 1; , kRarityType = 2; , kCompareType = 3; };  ; typedef UInt_t TMVAVersion_t;  ; enum  VIType { kShort =0; , kAll =1; , kRandom =2; };  . Public Attributes; std::vector< TControlBar * > BDT_Global__cbar;  ; std::vector< TControlBar * > BDTReg_Global__cbar;  ; const Bool_t GeneticAlgorithm__DEBUG__ = kFALSE;  ; const int max_Events_ = 200000;  ; const int max_nLayers_ = 6;  ; const int max_nNodes_ = 200;  ; const int max_nVar_ = 200;  ; const Bool_t MethodPDERS_UseFindRoot = kFALSE;  . Member Typedef Documentation. ◆ EventCollection_t. using TMVA::EventCollec",MatchSource.WIKI,doc/master/classTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA.html
https://root.cern/doc/master/classTMVA.html:466,Modifiability,enhance,enhanced,466,". ROOT: TMVA Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Attributes |; List of all members ; TMVA Class ReferenceTMVA. ; Base Class for all classes that need option parsing. ; Node for the Decision Tree.; The node specifies ONE variable out of the given set of selection variable that is used to split the sample which ""arrives"" at the node, into a left (background-enhanced) and a right (signal-enhanced) sample. . Public Types; enum  ECellValue { ;   kValue; , kValueError; , kValueDensity; , kMeanValue; , ;   kRms; , kRmsOvMean; , kCellVolume. };  ; enum  EDTSeparation { ;   kFoam; , kGiniIndex; , kMisClassificationError; , kCrossEntropy; , ;   kGiniIndexWithLaplace; , kSdivSqrtSplusB. };  ; enum class  EEfficiencyPlotType { kEffBvsEffS; , kRejBvsEffS; };  ; enum  EFoamType { ;   kSeparate; , kDiscr; , kMonoTarget; , kMultiTarget; , ;   kMultiClass. };  ; enum  EMsgType { ;   kDEBUG = 1; , kVERBOSE = 2; , kINFO = 3; , kWARNING = 4; , ;   kERROR = 5; , kFATAL = 6; , kSILENT = 7; , kHEADER = 8. };  ; enum  ETargetSelection { kMean = 0; , kMpv = 1; };  ; using EventCollection_t = std::vector< Event * >;  ; using EventOutputs_t = std::vector< Float_t >;  ; using EventOutputsMulticlass_t = std::vector< std::vector< Float_t > >;  ; using EventTypes_t = std::vector< Bool_t >;  ; enum  HistType { kMVAType = 0; , kProbaType = 1; , kRarityType = 2; , kCompareType = 3; };  ; typedef UInt_t TMVAVersion_t;  ; enum  VIType { kShort =0; , kAll =1; , kRandom =2; };  . Public Attributes; std::vector< TControlBar * > BDT_Global__cbar;  ; std::vector< TControlBar * > BDTReg_Global__cbar;  ; const Bool_t GeneticAlgorithm__DEBUG__ = kFALSE;  ; const int max_Events_ = 200000;  ; const int max_nLayers_ = 6;  ; const int max_nNodes_ = 200;  ; const int max_nVar_ = 200;  ; const Bool_t MethodPDERS_UseFindRoot = kFALSE;  . Member Typedef Documentation. ◆ EventCollection_t. using TMVA::EventCollec",MatchSource.WIKI,doc/master/classTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA.html
https://root.cern/doc/master/classTMVA.html:496,Modifiability,enhance,enhanced,496,". ROOT: TMVA Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Types |; Public Attributes |; List of all members ; TMVA Class ReferenceTMVA. ; Base Class for all classes that need option parsing. ; Node for the Decision Tree.; The node specifies ONE variable out of the given set of selection variable that is used to split the sample which ""arrives"" at the node, into a left (background-enhanced) and a right (signal-enhanced) sample. . Public Types; enum  ECellValue { ;   kValue; , kValueError; , kValueDensity; , kMeanValue; , ;   kRms; , kRmsOvMean; , kCellVolume. };  ; enum  EDTSeparation { ;   kFoam; , kGiniIndex; , kMisClassificationError; , kCrossEntropy; , ;   kGiniIndexWithLaplace; , kSdivSqrtSplusB. };  ; enum class  EEfficiencyPlotType { kEffBvsEffS; , kRejBvsEffS; };  ; enum  EFoamType { ;   kSeparate; , kDiscr; , kMonoTarget; , kMultiTarget; , ;   kMultiClass. };  ; enum  EMsgType { ;   kDEBUG = 1; , kVERBOSE = 2; , kINFO = 3; , kWARNING = 4; , ;   kERROR = 5; , kFATAL = 6; , kSILENT = 7; , kHEADER = 8. };  ; enum  ETargetSelection { kMean = 0; , kMpv = 1; };  ; using EventCollection_t = std::vector< Event * >;  ; using EventOutputs_t = std::vector< Float_t >;  ; using EventOutputsMulticlass_t = std::vector< std::vector< Float_t > >;  ; using EventTypes_t = std::vector< Bool_t >;  ; enum  HistType { kMVAType = 0; , kProbaType = 1; , kRarityType = 2; , kCompareType = 3; };  ; typedef UInt_t TMVAVersion_t;  ; enum  VIType { kShort =0; , kAll =1; , kRandom =2; };  . Public Attributes; std::vector< TControlBar * > BDT_Global__cbar;  ; std::vector< TControlBar * > BDTReg_Global__cbar;  ; const Bool_t GeneticAlgorithm__DEBUG__ = kFALSE;  ; const int max_Events_ = 200000;  ; const int max_nLayers_ = 6;  ; const int max_nNodes_ = 200;  ; const int max_nVar_ = 200;  ; const Bool_t MethodPDERS_UseFindRoot = kFALSE;  . Member Typedef Documentation. ◆ EventCollection_t. using TMVA::EventCollec",MatchSource.WIKI,doc/master/classTMVA.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA.html
https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunction.html:930,Modifiability,inherit,inherited,930,". ROOT: TMVA::AbsoluteDeviationLossFunction Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; List of all members ; TMVA::AbsoluteDeviationLossFunction Class ReferenceTMVA. ; Absolute Deviation Loss Function. ; Definition at line 239 of file LossFunction.h. Public Member Functions;  AbsoluteDeviationLossFunction ();  ;  ~AbsoluteDeviationLossFunction ();  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  absolute deviation, determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the net loss for a collection of events ;  ; Int_t Id ();  ; TString Name ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::AbsoluteDeviationLossFunction:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ AbsoluteDeviationLossFunction(). TMVA::AbsoluteDeviationLossFunction::AbsoluteDeviationLossFunction ; (; ). inline . Definition at line 242 of file LossFunction.h. ◆ ~AbsoluteDeviationLossFunction(). TMVA::AbsoluteDeviationLossFunction::~AbsoluteDeviationLossFunction ; (; ). inline . Definition at line 243 of file LossFunction.h. Member Function Documentation. ◆ CalculateLoss(). Double_t TMVA::AbsoluteDeviationLossFunction::CalculateLoss ; (; LossFunctionEventInfo & ; e). virtual . absolute deviation, determine the loss for a single event ; Implements TMVA::LossFunction.; Definition at line 497 of file LossFunction.cxx. ◆ CalculateMeanLoss(). Double_t TMVA::AbsoluteDeviationLossFunction::CalculateMeanLoss ; (; std::vector< LossFunctionEventInfo",MatchSource.WIKI,doc/master/classTMVA_1_1AbsoluteDeviationLossFunction.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunction.html
https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html:1183,Modifiability,inherit,inherited,1183,"ember Functions |; List of all members ; TMVA::AbsoluteDeviationLossFunctionBDT Class ReferenceTMVA. ; Absolute Deviation BDT Loss Function. ; Definition at line 261 of file LossFunction.h. Public Member Functions;  AbsoluteDeviationLossFunctionBDT ();  ;  ~AbsoluteDeviationLossFunctionBDT ();  ; Double_t Fit (std::vector< LossFunctionEventInfo > &evs);  absolute deviation BDT, determine the fit value for the terminal node based upon the events in the terminal node ;  ; void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights);  absolute deviation BDT, initialize the targets and prepare for the regression ;  ; void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap);  absolute deviation BDT, set the targets for a collection of events ;  ; Double_t Target (LossFunctionEventInfo &e);  absolute deviation BDT, set the target for a single event ;  ;  Public Member Functions inherited from TMVA::LossFunctionBDT;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ;  Public Member Functions inherited from TMVA::AbsoluteDeviationLossFunction;  AbsoluteDeviationLossFunction ();  ;  ~AbsoluteDeviationLossFunction ();  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  absolute deviation, determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the net loss for a collection of events ;  ; Int_t Id ();  ; TString Name ();  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::AbsoluteDeviationLossFunctionBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [lege",MatchSource.WIKI,doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html
https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html:1302,Modifiability,inherit,inherited,1302,"ember Functions |; List of all members ; TMVA::AbsoluteDeviationLossFunctionBDT Class ReferenceTMVA. ; Absolute Deviation BDT Loss Function. ; Definition at line 261 of file LossFunction.h. Public Member Functions;  AbsoluteDeviationLossFunctionBDT ();  ;  ~AbsoluteDeviationLossFunctionBDT ();  ; Double_t Fit (std::vector< LossFunctionEventInfo > &evs);  absolute deviation BDT, determine the fit value for the terminal node based upon the events in the terminal node ;  ; void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights);  absolute deviation BDT, initialize the targets and prepare for the regression ;  ; void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap);  absolute deviation BDT, set the targets for a collection of events ;  ; Double_t Target (LossFunctionEventInfo &e);  absolute deviation BDT, set the target for a single event ;  ;  Public Member Functions inherited from TMVA::LossFunctionBDT;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ;  Public Member Functions inherited from TMVA::AbsoluteDeviationLossFunction;  AbsoluteDeviationLossFunction ();  ;  ~AbsoluteDeviationLossFunction ();  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  absolute deviation, determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the net loss for a collection of events ;  ; Int_t Id ();  ; TString Name ();  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::AbsoluteDeviationLossFunctionBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [lege",MatchSource.WIKI,doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html
https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html:1412,Modifiability,inherit,inherited,1412,"ember Functions |; List of all members ; TMVA::AbsoluteDeviationLossFunctionBDT Class ReferenceTMVA. ; Absolute Deviation BDT Loss Function. ; Definition at line 261 of file LossFunction.h. Public Member Functions;  AbsoluteDeviationLossFunctionBDT ();  ;  ~AbsoluteDeviationLossFunctionBDT ();  ; Double_t Fit (std::vector< LossFunctionEventInfo > &evs);  absolute deviation BDT, determine the fit value for the terminal node based upon the events in the terminal node ;  ; void Init (std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap, std::vector< double > &boostWeights);  absolute deviation BDT, initialize the targets and prepare for the regression ;  ; void SetTargets (std::vector< const TMVA::Event * > &evs, std::map< const TMVA::Event *, LossFunctionEventInfo > &evinfomap);  absolute deviation BDT, set the targets for a collection of events ;  ; Double_t Target (LossFunctionEventInfo &e);  absolute deviation BDT, set the target for a single event ;  ;  Public Member Functions inherited from TMVA::LossFunctionBDT;  LossFunctionBDT ();  ; virtual ~LossFunctionBDT ();  ;  Public Member Functions inherited from TMVA::LossFunction;  LossFunction ();  ; virtual ~LossFunction ();  ;  Public Member Functions inherited from TMVA::AbsoluteDeviationLossFunction;  AbsoluteDeviationLossFunction ();  ;  ~AbsoluteDeviationLossFunction ();  ; Double_t CalculateLoss (LossFunctionEventInfo &e);  absolute deviation, determine the loss for a single event ;  ; Double_t CalculateMeanLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the mean loss for a collection of events ;  ; Double_t CalculateNetLoss (std::vector< LossFunctionEventInfo > &evs);  absolute deviation, determine the net loss for a collection of events ;  ; Int_t Id ();  ; TString Name ();  . #include <TMVA/LossFunction.h>. Inheritance diagram for TMVA::AbsoluteDeviationLossFunctionBDT:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [lege",MatchSource.WIKI,doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1AbsoluteDeviationLossFunctionBDT.html
https://root.cern/doc/master/classTMVA_1_1BDTEventWrapper.html:1969,Modifiability,variab,variable,1969,"VarIndex ();  . Private Attributes; Double_t fBkgWeight;  cumulative background weight for splitting ;  ; const Event * fEvent;  ; Double_t fSigWeight;  same for the signal weights ;  . #include <TMVA/BDTEventWrapper.h>; Constructor & Destructor Documentation. ◆ BDTEventWrapper(). BDTEventWrapper::BDTEventWrapper ; (; const Event * ; e). Constructor. ; Definition at line 36 of file BDTEventWrapper.cxx. ◆ ~BDTEventWrapper(). BDTEventWrapper::~BDTEventWrapper ; (; ). Destructor. ; Definition at line 45 of file BDTEventWrapper.cxx. Member Function Documentation. ◆ GetCumulativeWeight(). Double_t BDTEventWrapper::GetCumulativeWeight ; (; Bool_t ; type); const. Get the accumulated weight. ; Parameters. type- true for signal, false for background . Returnsthe cumulative weight for sorted signal/background events ; Definition at line 64 of file BDTEventWrapper.cxx. ◆ GetVal() [1/2]. Double_t TMVA::BDTEventWrapper::GetVal ; (; ); const. inline . Returnsvalue of variable fVarIndex for this event ; Definition at line 65 of file BDTEventWrapper.h. ◆ GetVal() [2/2]. Double_t TMVA::BDTEventWrapper::GetVal ; (; Int_t ; var); const. inline . Definition at line 68 of file BDTEventWrapper.h. ◆ GetVarIndex(). static Int_t & TMVA::BDTEventWrapper::GetVarIndex ; (; ). inlinestaticprivate . Definition at line 73 of file BDTEventWrapper.h. ◆ operator*(). const Event * TMVA::BDTEventWrapper::operator* ; (; ); const. inline . Definition at line 66 of file BDTEventWrapper.h. ◆ operator<(). Bool_t TMVA::BDTEventWrapper::operator< ; (; const BDTEventWrapper & ; other); const. inline . Definition at line 82 of file BDTEventWrapper.h. ◆ SetCumulativeWeight(). void BDTEventWrapper::SetCumulativeWeight ; (; Bool_t ; type, . Double_t ; weight . ). Set the accumulated weight, for sorted signal/background events. ; Parameters. type- true for signal, false for background ; weight- the total weight. Parameters. type- true for signal, false for background ; weight- the total weight . Definition at line ",MatchSource.WIKI,doc/master/classTMVA_1_1BDTEventWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BDTEventWrapper.html
https://root.cern/doc/master/classTMVA_1_1BDTEventWrapper.html:3164,Modifiability,variab,variable,3164,"ition at line 65 of file BDTEventWrapper.h. ◆ GetVal() [2/2]. Double_t TMVA::BDTEventWrapper::GetVal ; (; Int_t ; var); const. inline . Definition at line 68 of file BDTEventWrapper.h. ◆ GetVarIndex(). static Int_t & TMVA::BDTEventWrapper::GetVarIndex ; (; ). inlinestaticprivate . Definition at line 73 of file BDTEventWrapper.h. ◆ operator*(). const Event * TMVA::BDTEventWrapper::operator* ; (; ); const. inline . Definition at line 66 of file BDTEventWrapper.h. ◆ operator<(). Bool_t TMVA::BDTEventWrapper::operator< ; (; const BDTEventWrapper & ; other); const. inline . Definition at line 82 of file BDTEventWrapper.h. ◆ SetCumulativeWeight(). void BDTEventWrapper::SetCumulativeWeight ; (; Bool_t ; type, . Double_t ; weight . ). Set the accumulated weight, for sorted signal/background events. ; Parameters. type- true for signal, false for background ; weight- the total weight. Parameters. type- true for signal, false for background ; weight- the total weight . Definition at line 54 of file BDTEventWrapper.cxx. ◆ SetVarIndex(). static void TMVA::BDTEventWrapper::SetVarIndex ; (; Int_t ; iVar). inlinestatic . Parameters. iVar- index of the variable in fEvent to use . Definition at line 59 of file BDTEventWrapper.h. Member Data Documentation. ◆ fBkgWeight. Double_t TMVA::BDTEventWrapper::fBkgWeight. private . cumulative background weight for splitting ; Definition at line 77 of file BDTEventWrapper.h. ◆ fEvent. const Event* TMVA::BDTEventWrapper::fEvent. private . Definition at line 75 of file BDTEventWrapper.h. ◆ fSigWeight. Double_t TMVA::BDTEventWrapper::fSigWeight. private . same for the signal weights ; Definition at line 78 of file BDTEventWrapper.h. Libraries for TMVA::BDTEventWrapper:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/BDTEventWrapper.h; tmva/tmva/src/BDTEventWrapper.cxx. TMVABDTEventWrapper. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1BDTEventWrapper.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BDTEventWrapper.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:5397,Energy Efficiency,reduce,reduce,5397," all its leaf nodes, fill max depth reached in the tree at the same time. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static BinarySearchTree * CreateFromXML (void *node, UInt_t tmva_Version_Code=262657);  re-create a new tree (decision tree or search tree) from XML ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::BinaryTree; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void DestroyNode (BinarySearchTreeNode *);  ; void Insert (const Event *, Node *);  private internal function to insert a event (node) at the proper position ;  ; Bool_t InVolume (const std::vector< Float_t > &, Volume *) const;  test if the data points are in the given volume ;  ; void NormalizeTree (std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, UInt_t);  normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ;  ; BinarySearchTreeNode * Search (Event *, Node *) const;  Private, recursive, function for searching. ;  ; Double_t SearchVolume (Node *, Volume *, Int_t, std::vector< const TMVA::BinarySearchTreeNode * > *events);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ;  . Private Attributes; Bool_t fCanNormalize;  the tree can be normalised ;  ; UInt_t fCurrentDepth;  internal variable, counting the depth of the tree during insertion ;  ; std::vector< Float_t > fMax [2];  RMS for signal and background for each variable. ;  ; std::vector< Float_t > fMeans [2];  mean for signal and background for each variable ;  ; std::vector< Float_t ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:13414,Energy Efficiency,reduce,reduce,13414,"al and background for each variable ; Definition at line 128 of file BinarySearchTree.h. ◆ Mean(). Float_t TMVA::BinarySearchTree::Mean ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to mean for signal and background for each variable ; Definition at line 119 of file BinarySearchTree.h. ◆ Min(). Float_t TMVA::BinarySearchTree::Min ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Minimum for signal and background for each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ; Definition at line 286 of file BinarySearchTree.cxx. ◆ RMS() [1/2]. Float_t TMVA::BinarySearchTree::RMS ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to RMS for signal and background for each variable ; Definition at line 122 of file BinarySearchTree.h. ◆ RMS() [2/2]. Float_t TMVA::BinarySearchTree::RMS ; (; UInt_t ; var). inline . access to RMS for each variable ; Definition at line 133 of file BinarySearchTree.h. ◆ Search() [1/2]. TMVA::BinarySearchTreeNode * TMVA::BinarySearchTree::Search ; (; Event * ; event, . Node * ; node . ); const. private . Private, recursive, function for searching. ; Definition at line 201 of file BinarySearchTree.cxx. ◆ Search() [2/2]. TMVA::BinarySearchTreeNode * TMVA::BinarySearchTree::Search ; (; Event * ; event); const. search the tree to find the node matching ""event"" ; Definition at line 193 of file BinarySearchTree.cxx. ◆ SearchVolume() [1/2]. Double_t TMVA::BinarySearchTre",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:797,Modifiability,variab,variable,797,"e Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) con",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:1180,Modifiability,variab,variables,1180,"e Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) con",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:1361,Modifiability,variab,variables,1361,"e Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) con",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:1828,Modifiability,variab,variable,1828,"e Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) con",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:1939,Modifiability,variab,variable,1939,"e Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) con",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:2052,Modifiability,variab,variable,2052,"e Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) con",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:2213,Modifiability,variab,variable,2213,"nst Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) const;  search the tree to find the node matching ""event"" ;  ; Double_t SearchVolume (Volume *, std::vector< const TMVA::BinarySearchTreeNode * > *events=nullptr);  search the whole tree and add up all weights of events that lie within the given volume ;  ; Int_t SearchVolumeWithMaxLimit (TMVA::Volume *, std::vector< const TMVA::BinarySearchTreeNode * > *events=nullptr, Int_t=-1);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume a maximum number of events can be given ;  ; void SetNormalize (Bool_t norm);  ; void SetPeriode (Int_t p);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::BinaryTree;  BinaryTree (void);  constructor for a yet ""empty"" tree. Needs to be filled afterwards ;  ; virtual ~BinaryTree ();  destructor (deletes the nodes and ""events"" if owned by the tree ;  ; virtual void * AddXMLTo (void *parent) const;  add attributes to XML ;  ; UInt_t CountNodes (Node *n=nullptr);  return the number of nodes in the tree. (make a new count --> takes time) ;  ; Node * GetLeftDaughter (Node *n);  get left daughter node current node ""n"" ;  ; UInt_t GetNNodes () const;  ; Node * GetRightDaughter (Node *n);  get right ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:2277,Modifiability,variab,variable,2277,"nst Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) const;  search the tree to find the node matching ""event"" ;  ; Double_t SearchVolume (Volume *, std::vector< const TMVA::BinarySearchTreeNode * > *events=nullptr);  search the whole tree and add up all weights of events that lie within the given volume ;  ; Int_t SearchVolumeWithMaxLimit (TMVA::Volume *, std::vector< const TMVA::BinarySearchTreeNode * > *events=nullptr, Int_t=-1);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume a maximum number of events can be given ;  ; void SetNormalize (Bool_t norm);  ; void SetPeriode (Int_t p);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::BinaryTree;  BinaryTree (void);  constructor for a yet ""empty"" tree. Needs to be filled afterwards ;  ; virtual ~BinaryTree ();  destructor (deletes the nodes and ""events"" if owned by the tree ;  ; virtual void * AddXMLTo (void *parent) const;  add attributes to XML ;  ; UInt_t CountNodes (Node *n=nullptr);  return the number of nodes in the tree. (make a new count --> takes time) ;  ; Node * GetLeftDaughter (Node *n);  get left daughter node current node ""n"" ;  ; UInt_t GetNNodes () const;  ; Node * GetRightDaughter (Node *n);  get right ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:3070,Modifiability,inherit,inherited,3070,"nst Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) const;  search the tree to find the node matching ""event"" ;  ; Double_t SearchVolume (Volume *, std::vector< const TMVA::BinarySearchTreeNode * > *events=nullptr);  search the whole tree and add up all weights of events that lie within the given volume ;  ; Int_t SearchVolumeWithMaxLimit (TMVA::Volume *, std::vector< const TMVA::BinarySearchTreeNode * > *events=nullptr, Int_t=-1);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume a maximum number of events can be given ;  ; void SetNormalize (Bool_t norm);  ; void SetPeriode (Int_t p);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::BinaryTree;  BinaryTree (void);  constructor for a yet ""empty"" tree. Needs to be filled afterwards ;  ; virtual ~BinaryTree ();  destructor (deletes the nodes and ""events"" if owned by the tree ;  ; virtual void * AddXMLTo (void *parent) const;  add attributes to XML ;  ; UInt_t CountNodes (Node *n=nullptr);  return the number of nodes in the tree. (make a new count --> takes time) ;  ; Node * GetLeftDaughter (Node *n);  get left daughter node current node ""n"" ;  ; UInt_t GetNNodes () const;  ; Node * GetRightDaughter (Node *n);  get right ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:4695,Modifiability,inherit,inherited,4695,"ightDaughter (Node *n);  get right daughter node current node ""n"" ;  ; virtual Node * GetRoot () const;  ; UInt_t GetTotalTreeDepth () const;  ; virtual void Print (std::ostream &os) const;  recursively print the tree ;  ; virtual void Read (std::istream &istr, UInt_t tmva_Version_Code=262657);  Read the binary tree from an input stream. ;  ; virtual void ReadXML (void *node, UInt_t tmva_Version_Code=262657);  read attributes from XML ;  ; void SetRoot (Node *r);  ; void SetTotalTreeDepth (Int_t depth);  ; void SetTotalTreeDepth (Node *n=nullptr);  descend a tree to find all its leaf nodes, fill max depth reached in the tree at the same time. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static BinarySearchTree * CreateFromXML (void *node, UInt_t tmva_Version_Code=262657);  re-create a new tree (decision tree or search tree) from XML ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::BinaryTree; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void DestroyNode (BinarySearchTreeNode *);  ; void Insert (const Event *, Node *);  private internal function to insert a event (node) at the proper position ;  ; Bool_t InVolume (const std::vector< Float_t > &, Volume *) const;  test if the data points are in the given volume ;  ; void NormalizeTree (std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, UInt_t);  normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ;  ; BinarySearchTreeNode * Search (Event *, Node *) const;  Private, recursive, function for searching. ;  ; Double_t SearchV",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:5917,Modifiability,variab,variable,5917,"archTreeNode *);  ; void Insert (const Event *, Node *);  private internal function to insert a event (node) at the proper position ;  ; Bool_t InVolume (const std::vector< Float_t > &, Volume *) const;  test if the data points are in the given volume ;  ; void NormalizeTree (std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, UInt_t);  normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ;  ; BinarySearchTreeNode * Search (Event *, Node *) const;  Private, recursive, function for searching. ;  ; Double_t SearchVolume (Node *, Volume *, Int_t, std::vector< const TMVA::BinarySearchTreeNode * > *events);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ;  . Private Attributes; Bool_t fCanNormalize;  the tree can be normalised ;  ; UInt_t fCurrentDepth;  internal variable, counting the depth of the tree during insertion ;  ; std::vector< Float_t > fMax [2];  RMS for signal and background for each variable. ;  ; std::vector< Float_t > fMeans [2];  mean for signal and background for each variable ;  ; std::vector< Float_t > fMin [2];  RMS for signal and background for each variable. ;  ; Double_t fNEventsW [2];  Number of events per class, taking into account event weights. ;  ; std::vector< std::pair< Double_t, const TMVA::Event * > > fNormalizeTreeTable;  ; UInt_t fPeriod;  periode (number of event variables) ;  ; std::vector< Float_t > fRMS [2];  RMS for signal and background for each variable. ;  ; Bool_t fStatisticsIsValid;  flag if last stat calculation is still valid, set to false if new node is insert ;  ; std::vector< Double_t > fSum [2];  Sum for signal and background for each variable. ;  ; Double_t fSumOfWeights;  Total number of events (weighted) counted during filling should be the same as fNEventsW[0]+fNEventsW[1]. ;  ; std::vector< Double_t > fSumSq",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:6053,Modifiability,variab,variable,6053,"archTreeNode *);  ; void Insert (const Event *, Node *);  private internal function to insert a event (node) at the proper position ;  ; Bool_t InVolume (const std::vector< Float_t > &, Volume *) const;  test if the data points are in the given volume ;  ; void NormalizeTree (std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, UInt_t);  normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ;  ; BinarySearchTreeNode * Search (Event *, Node *) const;  Private, recursive, function for searching. ;  ; Double_t SearchVolume (Node *, Volume *, Int_t, std::vector< const TMVA::BinarySearchTreeNode * > *events);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ;  . Private Attributes; Bool_t fCanNormalize;  the tree can be normalised ;  ; UInt_t fCurrentDepth;  internal variable, counting the depth of the tree during insertion ;  ; std::vector< Float_t > fMax [2];  RMS for signal and background for each variable. ;  ; std::vector< Float_t > fMeans [2];  mean for signal and background for each variable ;  ; std::vector< Float_t > fMin [2];  RMS for signal and background for each variable. ;  ; Double_t fNEventsW [2];  Number of events per class, taking into account event weights. ;  ; std::vector< std::pair< Double_t, const TMVA::Event * > > fNormalizeTreeTable;  ; UInt_t fPeriod;  periode (number of event variables) ;  ; std::vector< Float_t > fRMS [2];  RMS for signal and background for each variable. ;  ; Bool_t fStatisticsIsValid;  flag if last stat calculation is still valid, set to false if new node is insert ;  ; std::vector< Double_t > fSum [2];  Sum for signal and background for each variable. ;  ; Double_t fSumOfWeights;  Total number of events (weighted) counted during filling should be the same as fNEventsW[0]+fNEventsW[1]. ;  ; std::vector< Double_t > fSumSq",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:6144,Modifiability,variab,variable,6144,"data points are in the given volume ;  ; void NormalizeTree (std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, UInt_t);  normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ;  ; BinarySearchTreeNode * Search (Event *, Node *) const;  Private, recursive, function for searching. ;  ; Double_t SearchVolume (Node *, Volume *, Int_t, std::vector< const TMVA::BinarySearchTreeNode * > *events);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ;  . Private Attributes; Bool_t fCanNormalize;  the tree can be normalised ;  ; UInt_t fCurrentDepth;  internal variable, counting the depth of the tree during insertion ;  ; std::vector< Float_t > fMax [2];  RMS for signal and background for each variable. ;  ; std::vector< Float_t > fMeans [2];  mean for signal and background for each variable ;  ; std::vector< Float_t > fMin [2];  RMS for signal and background for each variable. ;  ; Double_t fNEventsW [2];  Number of events per class, taking into account event weights. ;  ; std::vector< std::pair< Double_t, const TMVA::Event * > > fNormalizeTreeTable;  ; UInt_t fPeriod;  periode (number of event variables) ;  ; std::vector< Float_t > fRMS [2];  RMS for signal and background for each variable. ;  ; Bool_t fStatisticsIsValid;  flag if last stat calculation is still valid, set to false if new node is insert ;  ; std::vector< Double_t > fSum [2];  Sum for signal and background for each variable. ;  ; Double_t fSumOfWeights;  Total number of events (weighted) counted during filling should be the same as fNEventsW[0]+fNEventsW[1]. ;  ; std::vector< Double_t > fSumSq [2];  Squared Sum for signal and background for each variable. ;  . Additional Inherited Members;  Protected Member Functions inherited from TMVA::BinaryTree; void DeleteNode (Node *);  protected, recursive, functi",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:6231,Modifiability,variab,variable,6231,"data points are in the given volume ;  ; void NormalizeTree (std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, UInt_t);  normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ;  ; BinarySearchTreeNode * Search (Event *, Node *) const;  Private, recursive, function for searching. ;  ; Double_t SearchVolume (Node *, Volume *, Int_t, std::vector< const TMVA::BinarySearchTreeNode * > *events);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ;  . Private Attributes; Bool_t fCanNormalize;  the tree can be normalised ;  ; UInt_t fCurrentDepth;  internal variable, counting the depth of the tree during insertion ;  ; std::vector< Float_t > fMax [2];  RMS for signal and background for each variable. ;  ; std::vector< Float_t > fMeans [2];  mean for signal and background for each variable ;  ; std::vector< Float_t > fMin [2];  RMS for signal and background for each variable. ;  ; Double_t fNEventsW [2];  Number of events per class, taking into account event weights. ;  ; std::vector< std::pair< Double_t, const TMVA::Event * > > fNormalizeTreeTable;  ; UInt_t fPeriod;  periode (number of event variables) ;  ; std::vector< Float_t > fRMS [2];  RMS for signal and background for each variable. ;  ; Bool_t fStatisticsIsValid;  flag if last stat calculation is still valid, set to false if new node is insert ;  ; std::vector< Double_t > fSum [2];  Sum for signal and background for each variable. ;  ; Double_t fSumOfWeights;  Total number of events (weighted) counted during filling should be the same as fNEventsW[0]+fNEventsW[1]. ;  ; std::vector< Double_t > fSumSq [2];  Squared Sum for signal and background for each variable. ;  . Additional Inherited Members;  Protected Member Functions inherited from TMVA::BinaryTree; void DeleteNode (Node *);  protected, recursive, functi",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:6463,Modifiability,variab,variables,6463,"arch procedure (on average). ;  ; BinarySearchTreeNode * Search (Event *, Node *) const;  Private, recursive, function for searching. ;  ; Double_t SearchVolume (Node *, Volume *, Int_t, std::vector< const TMVA::BinarySearchTreeNode * > *events);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ;  . Private Attributes; Bool_t fCanNormalize;  the tree can be normalised ;  ; UInt_t fCurrentDepth;  internal variable, counting the depth of the tree during insertion ;  ; std::vector< Float_t > fMax [2];  RMS for signal and background for each variable. ;  ; std::vector< Float_t > fMeans [2];  mean for signal and background for each variable ;  ; std::vector< Float_t > fMin [2];  RMS for signal and background for each variable. ;  ; Double_t fNEventsW [2];  Number of events per class, taking into account event weights. ;  ; std::vector< std::pair< Double_t, const TMVA::Event * > > fNormalizeTreeTable;  ; UInt_t fPeriod;  periode (number of event variables) ;  ; std::vector< Float_t > fRMS [2];  RMS for signal and background for each variable. ;  ; Bool_t fStatisticsIsValid;  flag if last stat calculation is still valid, set to false if new node is insert ;  ; std::vector< Double_t > fSum [2];  Sum for signal and background for each variable. ;  ; Double_t fSumOfWeights;  Total number of events (weighted) counted during filling should be the same as fNEventsW[0]+fNEventsW[1]. ;  ; std::vector< Double_t > fSumSq [2];  Squared Sum for signal and background for each variable. ;  . Additional Inherited Members;  Protected Member Functions inherited from TMVA::BinaryTree; void DeleteNode (Node *);  protected, recursive, function used by the class destructor and when Pruning ;  ; MsgLogger & Log () const;  ;  Protected Attributes inherited from TMVA::BinaryTree; UInt_t fDepth;  maximal depth in tree reached ;  ; UInt_t fNNodes;  total number of nodes in the tree (counted) ;  ; Node * fRoot;  the root node of the tree ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:6552,Modifiability,variab,variable,6552,"arch procedure (on average). ;  ; BinarySearchTreeNode * Search (Event *, Node *) const;  Private, recursive, function for searching. ;  ; Double_t SearchVolume (Node *, Volume *, Int_t, std::vector< const TMVA::BinarySearchTreeNode * > *events);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ;  . Private Attributes; Bool_t fCanNormalize;  the tree can be normalised ;  ; UInt_t fCurrentDepth;  internal variable, counting the depth of the tree during insertion ;  ; std::vector< Float_t > fMax [2];  RMS for signal and background for each variable. ;  ; std::vector< Float_t > fMeans [2];  mean for signal and background for each variable ;  ; std::vector< Float_t > fMin [2];  RMS for signal and background for each variable. ;  ; Double_t fNEventsW [2];  Number of events per class, taking into account event weights. ;  ; std::vector< std::pair< Double_t, const TMVA::Event * > > fNormalizeTreeTable;  ; UInt_t fPeriod;  periode (number of event variables) ;  ; std::vector< Float_t > fRMS [2];  RMS for signal and background for each variable. ;  ; Bool_t fStatisticsIsValid;  flag if last stat calculation is still valid, set to false if new node is insert ;  ; std::vector< Double_t > fSum [2];  Sum for signal and background for each variable. ;  ; Double_t fSumOfWeights;  Total number of events (weighted) counted during filling should be the same as fNEventsW[0]+fNEventsW[1]. ;  ; std::vector< Double_t > fSumSq [2];  Squared Sum for signal and background for each variable. ;  . Additional Inherited Members;  Protected Member Functions inherited from TMVA::BinaryTree; void DeleteNode (Node *);  protected, recursive, function used by the class destructor and when Pruning ;  ; MsgLogger & Log () const;  ;  Protected Attributes inherited from TMVA::BinaryTree; UInt_t fDepth;  maximal depth in tree reached ;  ; UInt_t fNNodes;  total number of nodes in the tree (counted) ;  ; Node * fRoot;  the root node of the tree ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:6755,Modifiability,variab,variable,6755,"arySearchTreeNode * > *events);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ;  . Private Attributes; Bool_t fCanNormalize;  the tree can be normalised ;  ; UInt_t fCurrentDepth;  internal variable, counting the depth of the tree during insertion ;  ; std::vector< Float_t > fMax [2];  RMS for signal and background for each variable. ;  ; std::vector< Float_t > fMeans [2];  mean for signal and background for each variable ;  ; std::vector< Float_t > fMin [2];  RMS for signal and background for each variable. ;  ; Double_t fNEventsW [2];  Number of events per class, taking into account event weights. ;  ; std::vector< std::pair< Double_t, const TMVA::Event * > > fNormalizeTreeTable;  ; UInt_t fPeriod;  periode (number of event variables) ;  ; std::vector< Float_t > fRMS [2];  RMS for signal and background for each variable. ;  ; Bool_t fStatisticsIsValid;  flag if last stat calculation is still valid, set to false if new node is insert ;  ; std::vector< Double_t > fSum [2];  Sum for signal and background for each variable. ;  ; Double_t fSumOfWeights;  Total number of events (weighted) counted during filling should be the same as fNEventsW[0]+fNEventsW[1]. ;  ; std::vector< Double_t > fSumSq [2];  Squared Sum for signal and background for each variable. ;  . Additional Inherited Members;  Protected Member Functions inherited from TMVA::BinaryTree; void DeleteNode (Node *);  protected, recursive, function used by the class destructor and when Pruning ;  ; MsgLogger & Log () const;  ;  Protected Attributes inherited from TMVA::BinaryTree; UInt_t fDepth;  maximal depth in tree reached ;  ; UInt_t fNNodes;  total number of nodes in the tree (counted) ;  ; Node * fRoot;  the root node of the tree the tree only has it's root node, the ""daughters"" are taken care of by the ""node"" properties of the ""root"" ;  . #include <TMVA/BinarySearchTree.h>. Inheritance diagram for TMVA::BinarySearchTree:. This browser is not",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:6990,Modifiability,variab,variable,6990,"the tree during insertion ;  ; std::vector< Float_t > fMax [2];  RMS for signal and background for each variable. ;  ; std::vector< Float_t > fMeans [2];  mean for signal and background for each variable ;  ; std::vector< Float_t > fMin [2];  RMS for signal and background for each variable. ;  ; Double_t fNEventsW [2];  Number of events per class, taking into account event weights. ;  ; std::vector< std::pair< Double_t, const TMVA::Event * > > fNormalizeTreeTable;  ; UInt_t fPeriod;  periode (number of event variables) ;  ; std::vector< Float_t > fRMS [2];  RMS for signal and background for each variable. ;  ; Bool_t fStatisticsIsValid;  flag if last stat calculation is still valid, set to false if new node is insert ;  ; std::vector< Double_t > fSum [2];  Sum for signal and background for each variable. ;  ; Double_t fSumOfWeights;  Total number of events (weighted) counted during filling should be the same as fNEventsW[0]+fNEventsW[1]. ;  ; std::vector< Double_t > fSumSq [2];  Squared Sum for signal and background for each variable. ;  . Additional Inherited Members;  Protected Member Functions inherited from TMVA::BinaryTree; void DeleteNode (Node *);  protected, recursive, function used by the class destructor and when Pruning ;  ; MsgLogger & Log () const;  ;  Protected Attributes inherited from TMVA::BinaryTree; UInt_t fDepth;  maximal depth in tree reached ;  ; UInt_t fNNodes;  total number of nodes in the tree (counted) ;  ; Node * fRoot;  the root node of the tree the tree only has it's root node, the ""daughters"" are taken care of by the ""node"" properties of the ""root"" ;  . #include <TMVA/BinarySearchTree.h>. Inheritance diagram for TMVA::BinarySearchTree:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BinarySearchTree() [1/2]. TMVA::BinarySearchTree::BinarySearchTree ; (; void ; ). default constructor ; Definition at line 63 of file BinarySearchTree.cxx. ◆ BinarySear",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:7063,Modifiability,inherit,inherited,7063,"events per class, taking into account event weights. ;  ; std::vector< std::pair< Double_t, const TMVA::Event * > > fNormalizeTreeTable;  ; UInt_t fPeriod;  periode (number of event variables) ;  ; std::vector< Float_t > fRMS [2];  RMS for signal and background for each variable. ;  ; Bool_t fStatisticsIsValid;  flag if last stat calculation is still valid, set to false if new node is insert ;  ; std::vector< Double_t > fSum [2];  Sum for signal and background for each variable. ;  ; Double_t fSumOfWeights;  Total number of events (weighted) counted during filling should be the same as fNEventsW[0]+fNEventsW[1]. ;  ; std::vector< Double_t > fSumSq [2];  Squared Sum for signal and background for each variable. ;  . Additional Inherited Members;  Protected Member Functions inherited from TMVA::BinaryTree; void DeleteNode (Node *);  protected, recursive, function used by the class destructor and when Pruning ;  ; MsgLogger & Log () const;  ;  Protected Attributes inherited from TMVA::BinaryTree; UInt_t fDepth;  maximal depth in tree reached ;  ; UInt_t fNNodes;  total number of nodes in the tree (counted) ;  ; Node * fRoot;  the root node of the tree the tree only has it's root node, the ""daughters"" are taken care of by the ""node"" properties of the ""root"" ;  . #include <TMVA/BinarySearchTree.h>. Inheritance diagram for TMVA::BinarySearchTree:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BinarySearchTree() [1/2]. TMVA::BinarySearchTree::BinarySearchTree ; (; void ; ). default constructor ; Definition at line 63 of file BinarySearchTree.cxx. ◆ BinarySearchTree() [2/2]. TMVA::BinarySearchTree::BinarySearchTree ; (; const BinarySearchTree & ; b). copy constructor that creates a true copy, i.e. a completely independent tree ; Definition at line 77 of file BinarySearchTree.cxx. ◆ ~BinarySearchTree(). TMVA::BinarySearchTree::~BinarySearchTree ; (; void ; ). virtual . destructor ; Def",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:7256,Modifiability,inherit,inherited,7256,"events per class, taking into account event weights. ;  ; std::vector< std::pair< Double_t, const TMVA::Event * > > fNormalizeTreeTable;  ; UInt_t fPeriod;  periode (number of event variables) ;  ; std::vector< Float_t > fRMS [2];  RMS for signal and background for each variable. ;  ; Bool_t fStatisticsIsValid;  flag if last stat calculation is still valid, set to false if new node is insert ;  ; std::vector< Double_t > fSum [2];  Sum for signal and background for each variable. ;  ; Double_t fSumOfWeights;  Total number of events (weighted) counted during filling should be the same as fNEventsW[0]+fNEventsW[1]. ;  ; std::vector< Double_t > fSumSq [2];  Squared Sum for signal and background for each variable. ;  . Additional Inherited Members;  Protected Member Functions inherited from TMVA::BinaryTree; void DeleteNode (Node *);  protected, recursive, function used by the class destructor and when Pruning ;  ; MsgLogger & Log () const;  ;  Protected Attributes inherited from TMVA::BinaryTree; UInt_t fDepth;  maximal depth in tree reached ;  ; UInt_t fNNodes;  total number of nodes in the tree (counted) ;  ; Node * fRoot;  the root node of the tree the tree only has it's root node, the ""daughters"" are taken care of by the ""node"" properties of the ""root"" ;  . #include <TMVA/BinarySearchTree.h>. Inheritance diagram for TMVA::BinarySearchTree:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BinarySearchTree() [1/2]. TMVA::BinarySearchTree::BinarySearchTree ; (; void ; ). default constructor ; Definition at line 63 of file BinarySearchTree.cxx. ◆ BinarySearchTree() [2/2]. TMVA::BinarySearchTree::BinarySearchTree ; (; const BinarySearchTree & ; b). copy constructor that creates a true copy, i.e. a completely independent tree ; Definition at line 77 of file BinarySearchTree.cxx. ◆ ~BinarySearchTree(). TMVA::BinarySearchTree::~BinarySearchTree ; (; void ; ). virtual . destructor ; Def",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:8506,Modifiability,variab,variable,8506,"of by the ""node"" properties of the ""root"" ;  . #include <TMVA/BinarySearchTree.h>. Inheritance diagram for TMVA::BinarySearchTree:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BinarySearchTree() [1/2]. TMVA::BinarySearchTree::BinarySearchTree ; (; void ; ). default constructor ; Definition at line 63 of file BinarySearchTree.cxx. ◆ BinarySearchTree() [2/2]. TMVA::BinarySearchTree::BinarySearchTree ; (; const BinarySearchTree & ; b). copy constructor that creates a true copy, i.e. a completely independent tree ; Definition at line 77 of file BinarySearchTree.cxx. ◆ ~BinarySearchTree(). TMVA::BinarySearchTree::~BinarySearchTree ; (; void ; ). virtual . destructor ; Definition at line 92 of file BinarySearchTree.cxx. Member Function Documentation. ◆ CalcStatistics(). void TMVA::BinarySearchTree::CalcStatistics ; (; TMVA::Node * ; n = nullptr). calculate basic statistics (mean, rms for each variable) ; Definition at line 430 of file BinarySearchTree.cxx. ◆ Class(). static TClass * TMVA::BinarySearchTree::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::BinarySearchTree::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::BinarySearchTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 173 of file BinarySearchTree.h. ◆ ClassName(). virtual const char * TMVA::BinarySearchTree::ClassName ; (; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 81 of file BinarySearchTree.h. ◆ Clear(). void TMVA::BinarySearchTree::Clear ; (; TMVA::Node * ; n = nullptr). clear nodes ; Definition at line 354 of file BinarySearchTree.cxx. ◆ CreateFromXML(). TMVA::BinarySearchTree * TMVA::BinarySearchTree::CreateFromXML ; (; void * ; node, . UInt_t ; tmva_Version_Code = 262657 . ). static . re-create a new tree (decision tr",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:10513,Modifiability,variab,variables,10513,"ch tree) from XML ; Definition at line 103 of file BinarySearchTree.cxx. ◆ CreateNode(). virtual Node * TMVA::BinarySearchTree::CreateNode ; (; UInt_t ; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 78 of file BinarySearchTree.h. ◆ CreateTree(). virtual BinaryTree * TMVA::BinarySearchTree::CreateTree ; (; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 79 of file BinarySearchTree.h. ◆ DeclFileName(). static const char * TMVA::BinarySearchTree::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 173 of file BinarySearchTree.h. ◆ DestroyNode(). void TMVA::BinarySearchTree::DestroyNode ; (; BinarySearchTreeNode * ; ). private . ◆ Fill() [1/2]. Double_t TMVA::BinarySearchTree::Fill ; (; const std::vector< TMVA::Event * > & ; events, . const std::vector< Int_t > & ; theVars, . Int_t ; theType = -1 . ). create the search tree from the event collection using ONLY the variables specified in ""theVars"" ; Definition at line 249 of file BinarySearchTree.cxx. ◆ Fill() [2/2]. Double_t TMVA::BinarySearchTree::Fill ; (; const std::vector< TMVA::Event * > & ; events, . Int_t ; theType = -1 . ). create the search tree from the events in a TTree using ALL the variables specified included in the Event ; Definition at line 260 of file BinarySearchTree.cxx. ◆ GetPeriode(). UInt_t TMVA::BinarySearchTree::GetPeriode ; (; void ; ); const. inline . Definition at line 100 of file BinarySearchTree.h. ◆ GetSumOfWeights() [1/2]. Double_t TMVA::BinarySearchTree::GetSumOfWeights ; (; Int_t ; theType); const. return the sum of event (node) weights ; Definition at line 233 of file BinarySearchTree.cxx. ◆ GetSumOfWeights() [2/2]. Double_t TMVA::BinarySearchTree::GetSumOfWeights ; (; void ; ); const. return the sum of event (node) weights ; Definition at line 218 of file BinarySearchTree.cxx. ◆ Insert() [1/2]. void TMVA::BinarySearchTree::Insert ; (; const Event * ; event). insert a ne",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:10799,Modifiability,variab,variables,10799,"ree * TMVA::BinarySearchTree::CreateTree ; (; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 79 of file BinarySearchTree.h. ◆ DeclFileName(). static const char * TMVA::BinarySearchTree::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 173 of file BinarySearchTree.h. ◆ DestroyNode(). void TMVA::BinarySearchTree::DestroyNode ; (; BinarySearchTreeNode * ; ). private . ◆ Fill() [1/2]. Double_t TMVA::BinarySearchTree::Fill ; (; const std::vector< TMVA::Event * > & ; events, . const std::vector< Int_t > & ; theVars, . Int_t ; theType = -1 . ). create the search tree from the event collection using ONLY the variables specified in ""theVars"" ; Definition at line 249 of file BinarySearchTree.cxx. ◆ Fill() [2/2]. Double_t TMVA::BinarySearchTree::Fill ; (; const std::vector< TMVA::Event * > & ; events, . Int_t ; theType = -1 . ). create the search tree from the events in a TTree using ALL the variables specified included in the Event ; Definition at line 260 of file BinarySearchTree.cxx. ◆ GetPeriode(). UInt_t TMVA::BinarySearchTree::GetPeriode ; (; void ; ); const. inline . Definition at line 100 of file BinarySearchTree.h. ◆ GetSumOfWeights() [1/2]. Double_t TMVA::BinarySearchTree::GetSumOfWeights ; (; Int_t ; theType); const. return the sum of event (node) weights ; Definition at line 233 of file BinarySearchTree.cxx. ◆ GetSumOfWeights() [2/2]. Double_t TMVA::BinarySearchTree::GetSumOfWeights ; (; void ; ); const. return the sum of event (node) weights ; Definition at line 218 of file BinarySearchTree.cxx. ◆ Insert() [1/2]. void TMVA::BinarySearchTree::Insert ; (; const Event * ; event). insert a new ""event"" in the binary tree ; Definition at line 114 of file BinarySearchTree.cxx. ◆ Insert() [2/2]. void TMVA::BinarySearchTree::Insert ; (; const Event * ; event, . Node * ; node . ). private . private internal function to insert a event (node) at the proper position ; Definition at line",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:12461,Modifiability,variab,variable,12461,"SearchTree::Insert ; (; const Event * ; event). insert a new ""event"" in the binary tree ; Definition at line 114 of file BinarySearchTree.cxx. ◆ Insert() [2/2]. void TMVA::BinarySearchTree::Insert ; (; const Event * ; event, . Node * ; node . ). private . private internal function to insert a event (node) at the proper position ; Definition at line 147 of file BinarySearchTree.cxx. ◆ InVolume(). Bool_t TMVA::BinarySearchTree::InVolume ; (; const std::vector< Float_t > & ; event, . Volume * ; volume . ); const. private . test if the data points are in the given volume ; Definition at line 415 of file BinarySearchTree.cxx. ◆ IsA(). virtual TClass * TMVA::BinarySearchTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::BinaryTree.; Definition at line 173 of file BinarySearchTree.h. ◆ Max(). Float_t TMVA::BinarySearchTree::Max ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Maximum for signal and background for each variable ; Definition at line 128 of file BinarySearchTree.h. ◆ Mean(). Float_t TMVA::BinarySearchTree::Mean ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to mean for signal and background for each variable ; Definition at line 119 of file BinarySearchTree.h. ◆ Min(). Float_t TMVA::BinarySearchTree::Min ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Minimum for signal and background for each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the se",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:12675,Modifiability,variab,variable,12675,"; event, . Node * ; node . ). private . private internal function to insert a event (node) at the proper position ; Definition at line 147 of file BinarySearchTree.cxx. ◆ InVolume(). Bool_t TMVA::BinarySearchTree::InVolume ; (; const std::vector< Float_t > & ; event, . Volume * ; volume . ); const. private . test if the data points are in the given volume ; Definition at line 415 of file BinarySearchTree.cxx. ◆ IsA(). virtual TClass * TMVA::BinarySearchTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::BinaryTree.; Definition at line 173 of file BinarySearchTree.h. ◆ Max(). Float_t TMVA::BinarySearchTree::Max ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Maximum for signal and background for each variable ; Definition at line 128 of file BinarySearchTree.h. ◆ Mean(). Float_t TMVA::BinarySearchTree::Mean ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to mean for signal and background for each variable ; Definition at line 119 of file BinarySearchTree.h. ◆ Min(). Float_t TMVA::BinarySearchTree::Min ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Minimum for signal and background for each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ; Definition at line 286 of file BinarySearchTree.cxx. ◆ RMS() [1/2]. Float_t TMVA::BinarySearchTree::RMS ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to RMS for signal ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:12890,Modifiability,variab,variable,12890,":InVolume ; (; const std::vector< Float_t > & ; event, . Volume * ; volume . ); const. private . test if the data points are in the given volume ; Definition at line 415 of file BinarySearchTree.cxx. ◆ IsA(). virtual TClass * TMVA::BinarySearchTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::BinaryTree.; Definition at line 173 of file BinarySearchTree.h. ◆ Max(). Float_t TMVA::BinarySearchTree::Max ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Maximum for signal and background for each variable ; Definition at line 128 of file BinarySearchTree.h. ◆ Mean(). Float_t TMVA::BinarySearchTree::Mean ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to mean for signal and background for each variable ; Definition at line 119 of file BinarySearchTree.h. ◆ Min(). Float_t TMVA::BinarySearchTree::Min ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Minimum for signal and background for each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ; Definition at line 286 of file BinarySearchTree.cxx. ◆ RMS() [1/2]. Float_t TMVA::BinarySearchTree::RMS ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to RMS for signal and background for each variable ; Definition at line 122 of file BinarySearchTree.h. ◆ RMS() [2/2]. Float_t TMVA::BinarySearchTree::RMS ; (; UInt_t ; var). inline . access to RMS for each variable ; Definition at ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:13703,Modifiability,variab,variable,13703,"9 of file BinarySearchTree.h. ◆ Min(). Float_t TMVA::BinarySearchTree::Min ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Minimum for signal and background for each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ; Definition at line 286 of file BinarySearchTree.cxx. ◆ RMS() [1/2]. Float_t TMVA::BinarySearchTree::RMS ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to RMS for signal and background for each variable ; Definition at line 122 of file BinarySearchTree.h. ◆ RMS() [2/2]. Float_t TMVA::BinarySearchTree::RMS ; (; UInt_t ; var). inline . access to RMS for each variable ; Definition at line 133 of file BinarySearchTree.h. ◆ Search() [1/2]. TMVA::BinarySearchTreeNode * TMVA::BinarySearchTree::Search ; (; Event * ; event, . Node * ; node . ); const. private . Private, recursive, function for searching. ; Definition at line 201 of file BinarySearchTree.cxx. ◆ Search() [2/2]. TMVA::BinarySearchTreeNode * TMVA::BinarySearchTree::Search ; (; Event * ; event); const. search the tree to find the node matching ""event"" ; Definition at line 193 of file BinarySearchTree.cxx. ◆ SearchVolume() [1/2]. Double_t TMVA::BinarySearchTree::SearchVolume ; (; Node * ; t, . Volume * ; volume, . Int_t ; depth, . std::vector< const TMVA::BinarySearchTreeNode * > * ; events . ). private . recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ; Definition at",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:13868,Modifiability,variab,variable,13868,"each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ; Definition at line 286 of file BinarySearchTree.cxx. ◆ RMS() [1/2]. Float_t TMVA::BinarySearchTree::RMS ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to RMS for signal and background for each variable ; Definition at line 122 of file BinarySearchTree.h. ◆ RMS() [2/2]. Float_t TMVA::BinarySearchTree::RMS ; (; UInt_t ; var). inline . access to RMS for each variable ; Definition at line 133 of file BinarySearchTree.h. ◆ Search() [1/2]. TMVA::BinarySearchTreeNode * TMVA::BinarySearchTree::Search ; (; Event * ; event, . Node * ; node . ); const. private . Private, recursive, function for searching. ; Definition at line 201 of file BinarySearchTree.cxx. ◆ Search() [2/2]. TMVA::BinarySearchTreeNode * TMVA::BinarySearchTree::Search ; (; Event * ; event); const. search the tree to find the node matching ""event"" ; Definition at line 193 of file BinarySearchTree.cxx. ◆ SearchVolume() [1/2]. Double_t TMVA::BinarySearchTree::SearchVolume ; (; Node * ; t, . Volume * ; volume, . Int_t ; depth, . std::vector< const TMVA::BinarySearchTreeNode * > * ; events . ). private . recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ; Definition at line 380 of file BinarySearchTree.cxx. ◆ SearchVolume() [2/2]. Double_t TMVA::BinarySearchTree::SearchVolume ; (; Volume * ; volume, . std::vector< const TMVA::BinarySearchTreeN",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:16325,Modifiability,variab,variable,16325,"n the given volume a maximum number of events can be given ; Definition at line 495 of file BinarySearchTree.cxx. ◆ SetNormalize(). void TMVA::BinarySearchTree::SetNormalize ; (; Bool_t ; norm). inline . Definition at line 135 of file BinarySearchTree.h. ◆ SetPeriode(). void TMVA::BinarySearchTree::SetPeriode ; (; Int_t ; p). inline . Definition at line 97 of file BinarySearchTree.h. ◆ Streamer(). virtual void TMVA::BinarySearchTree::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::BinaryTree. ◆ StreamerNVirtual(). void TMVA::BinarySearchTree::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 173 of file BinarySearchTree.h. Member Data Documentation. ◆ fCanNormalize. Bool_t TMVA::BinarySearchTree::fCanNormalize. private . the tree can be normalised ; Definition at line 170 of file BinarySearchTree.h. ◆ fCurrentDepth. UInt_t TMVA::BinarySearchTree::fCurrentDepth. private . internal variable, counting the depth of the tree during insertion ; Definition at line 157 of file BinarySearchTree.h. ◆ fMax. std::vector<Float_t> TMVA::BinarySearchTree::fMax[2]. private . RMS for signal and background for each variable. ; Definition at line 163 of file BinarySearchTree.h. ◆ fMeans. std::vector<Float_t> TMVA::BinarySearchTree::fMeans[2]. private . mean for signal and background for each variable ; Definition at line 160 of file BinarySearchTree.h. ◆ fMin. std::vector<Float_t> TMVA::BinarySearchTree::fMin[2]. private . RMS for signal and background for each variable. ; Definition at line 162 of file BinarySearchTree.h. ◆ fNEventsW. Double_t TMVA::BinarySearchTree::fNEventsW[2]. private . Number of events per class, taking into account event weights. ; Definition at line 166 of file BinarySearchTree.h. ◆ fNormalizeTreeTable. std::vector< std::pair<Double_t,const TMVA::Event*> > TMVA::BinarySearchTree::fNormalizeTreeTable. private . Definition at line 171 of file BinarySearchTree.h. ◆ fPeriod. UInt_t TMVA::BinarySearchTree::f",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:16547,Modifiability,variab,variable,16547,"ee::SetNormalize ; (; Bool_t ; norm). inline . Definition at line 135 of file BinarySearchTree.h. ◆ SetPeriode(). void TMVA::BinarySearchTree::SetPeriode ; (; Int_t ; p). inline . Definition at line 97 of file BinarySearchTree.h. ◆ Streamer(). virtual void TMVA::BinarySearchTree::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::BinaryTree. ◆ StreamerNVirtual(). void TMVA::BinarySearchTree::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 173 of file BinarySearchTree.h. Member Data Documentation. ◆ fCanNormalize. Bool_t TMVA::BinarySearchTree::fCanNormalize. private . the tree can be normalised ; Definition at line 170 of file BinarySearchTree.h. ◆ fCurrentDepth. UInt_t TMVA::BinarySearchTree::fCurrentDepth. private . internal variable, counting the depth of the tree during insertion ; Definition at line 157 of file BinarySearchTree.h. ◆ fMax. std::vector<Float_t> TMVA::BinarySearchTree::fMax[2]. private . RMS for signal and background for each variable. ; Definition at line 163 of file BinarySearchTree.h. ◆ fMeans. std::vector<Float_t> TMVA::BinarySearchTree::fMeans[2]. private . mean for signal and background for each variable ; Definition at line 160 of file BinarySearchTree.h. ◆ fMin. std::vector<Float_t> TMVA::BinarySearchTree::fMin[2]. private . RMS for signal and background for each variable. ; Definition at line 162 of file BinarySearchTree.h. ◆ fNEventsW. Double_t TMVA::BinarySearchTree::fNEventsW[2]. private . Number of events per class, taking into account event weights. ; Definition at line 166 of file BinarySearchTree.h. ◆ fNormalizeTreeTable. std::vector< std::pair<Double_t,const TMVA::Event*> > TMVA::BinarySearchTree::fNormalizeTreeTable. private . Definition at line 171 of file BinarySearchTree.h. ◆ fPeriod. UInt_t TMVA::BinarySearchTree::fPeriod. private . periode (number of event variables) ; Definition at line 156 of file BinarySearchTree.h. ◆ fRMS. std::vector<Float_t> TMVA::BinarySearchTree",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:16726,Modifiability,variab,variable,16726," file BinarySearchTree.h. ◆ Streamer(). virtual void TMVA::BinarySearchTree::Streamer ; (; TBuffer & ; ). virtual . Reimplemented from TMVA::BinaryTree. ◆ StreamerNVirtual(). void TMVA::BinarySearchTree::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 173 of file BinarySearchTree.h. Member Data Documentation. ◆ fCanNormalize. Bool_t TMVA::BinarySearchTree::fCanNormalize. private . the tree can be normalised ; Definition at line 170 of file BinarySearchTree.h. ◆ fCurrentDepth. UInt_t TMVA::BinarySearchTree::fCurrentDepth. private . internal variable, counting the depth of the tree during insertion ; Definition at line 157 of file BinarySearchTree.h. ◆ fMax. std::vector<Float_t> TMVA::BinarySearchTree::fMax[2]. private . RMS for signal and background for each variable. ; Definition at line 163 of file BinarySearchTree.h. ◆ fMeans. std::vector<Float_t> TMVA::BinarySearchTree::fMeans[2]. private . mean for signal and background for each variable ; Definition at line 160 of file BinarySearchTree.h. ◆ fMin. std::vector<Float_t> TMVA::BinarySearchTree::fMin[2]. private . RMS for signal and background for each variable. ; Definition at line 162 of file BinarySearchTree.h. ◆ fNEventsW. Double_t TMVA::BinarySearchTree::fNEventsW[2]. private . Number of events per class, taking into account event weights. ; Definition at line 166 of file BinarySearchTree.h. ◆ fNormalizeTreeTable. std::vector< std::pair<Double_t,const TMVA::Event*> > TMVA::BinarySearchTree::fNormalizeTreeTable. private . Definition at line 171 of file BinarySearchTree.h. ◆ fPeriod. UInt_t TMVA::BinarySearchTree::fPeriod. private . periode (number of event variables) ; Definition at line 156 of file BinarySearchTree.h. ◆ fRMS. std::vector<Float_t> TMVA::BinarySearchTree::fRMS[2]. private . RMS for signal and background for each variable. ; Definition at line 161 of file BinarySearchTree.h. ◆ fStatisticsIsValid. Bool_t TMVA::BinarySearchTree::fStatisticsIsValid. private",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:16899,Modifiability,variab,variable,16899,"ree. ◆ StreamerNVirtual(). void TMVA::BinarySearchTree::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 173 of file BinarySearchTree.h. Member Data Documentation. ◆ fCanNormalize. Bool_t TMVA::BinarySearchTree::fCanNormalize. private . the tree can be normalised ; Definition at line 170 of file BinarySearchTree.h. ◆ fCurrentDepth. UInt_t TMVA::BinarySearchTree::fCurrentDepth. private . internal variable, counting the depth of the tree during insertion ; Definition at line 157 of file BinarySearchTree.h. ◆ fMax. std::vector<Float_t> TMVA::BinarySearchTree::fMax[2]. private . RMS for signal and background for each variable. ; Definition at line 163 of file BinarySearchTree.h. ◆ fMeans. std::vector<Float_t> TMVA::BinarySearchTree::fMeans[2]. private . mean for signal and background for each variable ; Definition at line 160 of file BinarySearchTree.h. ◆ fMin. std::vector<Float_t> TMVA::BinarySearchTree::fMin[2]. private . RMS for signal and background for each variable. ; Definition at line 162 of file BinarySearchTree.h. ◆ fNEventsW. Double_t TMVA::BinarySearchTree::fNEventsW[2]. private . Number of events per class, taking into account event weights. ; Definition at line 166 of file BinarySearchTree.h. ◆ fNormalizeTreeTable. std::vector< std::pair<Double_t,const TMVA::Event*> > TMVA::BinarySearchTree::fNormalizeTreeTable. private . Definition at line 171 of file BinarySearchTree.h. ◆ fPeriod. UInt_t TMVA::BinarySearchTree::fPeriod. private . periode (number of event variables) ; Definition at line 156 of file BinarySearchTree.h. ◆ fRMS. std::vector<Float_t> TMVA::BinarySearchTree::fRMS[2]. private . RMS for signal and background for each variable. ; Definition at line 161 of file BinarySearchTree.h. ◆ fStatisticsIsValid. Bool_t TMVA::BinarySearchTree::fStatisticsIsValid. private . flag if last stat calculation is still valid, set to false if new node is insert ; Definition at line 158 of file BinarySearchTree.h. ◆ fSum. std:",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:17417,Modifiability,variab,variables,17417,". ◆ fMax. std::vector<Float_t> TMVA::BinarySearchTree::fMax[2]. private . RMS for signal and background for each variable. ; Definition at line 163 of file BinarySearchTree.h. ◆ fMeans. std::vector<Float_t> TMVA::BinarySearchTree::fMeans[2]. private . mean for signal and background for each variable ; Definition at line 160 of file BinarySearchTree.h. ◆ fMin. std::vector<Float_t> TMVA::BinarySearchTree::fMin[2]. private . RMS for signal and background for each variable. ; Definition at line 162 of file BinarySearchTree.h. ◆ fNEventsW. Double_t TMVA::BinarySearchTree::fNEventsW[2]. private . Number of events per class, taking into account event weights. ; Definition at line 166 of file BinarySearchTree.h. ◆ fNormalizeTreeTable. std::vector< std::pair<Double_t,const TMVA::Event*> > TMVA::BinarySearchTree::fNormalizeTreeTable. private . Definition at line 171 of file BinarySearchTree.h. ◆ fPeriod. UInt_t TMVA::BinarySearchTree::fPeriod. private . periode (number of event variables) ; Definition at line 156 of file BinarySearchTree.h. ◆ fRMS. std::vector<Float_t> TMVA::BinarySearchTree::fRMS[2]. private . RMS for signal and background for each variable. ; Definition at line 161 of file BinarySearchTree.h. ◆ fStatisticsIsValid. Bool_t TMVA::BinarySearchTree::fStatisticsIsValid. private . flag if last stat calculation is still valid, set to false if new node is insert ; Definition at line 158 of file BinarySearchTree.h. ◆ fSum. std::vector<Double_t> TMVA::BinarySearchTree::fSum[2]. private . Sum for signal and background for each variable. ; Definition at line 164 of file BinarySearchTree.h. ◆ fSumOfWeights. Double_t TMVA::BinarySearchTree::fSumOfWeights. private . Total number of events (weighted) counted during filling should be the same as fNEventsW[0]+fNEventsW[1]. ; . used as a check ; Definition at line 167 of file BinarySearchTree.h. ◆ fSumSq. std::vector<Double_t> TMVA::BinarySearchTree::fSumSq[2]. private . Squared Sum for signal and background for each variable. ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:17592,Modifiability,variab,variable,17592,"e 163 of file BinarySearchTree.h. ◆ fMeans. std::vector<Float_t> TMVA::BinarySearchTree::fMeans[2]. private . mean for signal and background for each variable ; Definition at line 160 of file BinarySearchTree.h. ◆ fMin. std::vector<Float_t> TMVA::BinarySearchTree::fMin[2]. private . RMS for signal and background for each variable. ; Definition at line 162 of file BinarySearchTree.h. ◆ fNEventsW. Double_t TMVA::BinarySearchTree::fNEventsW[2]. private . Number of events per class, taking into account event weights. ; Definition at line 166 of file BinarySearchTree.h. ◆ fNormalizeTreeTable. std::vector< std::pair<Double_t,const TMVA::Event*> > TMVA::BinarySearchTree::fNormalizeTreeTable. private . Definition at line 171 of file BinarySearchTree.h. ◆ fPeriod. UInt_t TMVA::BinarySearchTree::fPeriod. private . periode (number of event variables) ; Definition at line 156 of file BinarySearchTree.h. ◆ fRMS. std::vector<Float_t> TMVA::BinarySearchTree::fRMS[2]. private . RMS for signal and background for each variable. ; Definition at line 161 of file BinarySearchTree.h. ◆ fStatisticsIsValid. Bool_t TMVA::BinarySearchTree::fStatisticsIsValid. private . flag if last stat calculation is still valid, set to false if new node is insert ; Definition at line 158 of file BinarySearchTree.h. ◆ fSum. std::vector<Double_t> TMVA::BinarySearchTree::fSum[2]. private . Sum for signal and background for each variable. ; Definition at line 164 of file BinarySearchTree.h. ◆ fSumOfWeights. Double_t TMVA::BinarySearchTree::fSumOfWeights. private . Total number of events (weighted) counted during filling should be the same as fNEventsW[0]+fNEventsW[1]. ; . used as a check ; Definition at line 167 of file BinarySearchTree.h. ◆ fSumSq. std::vector<Double_t> TMVA::BinarySearchTree::fSumSq[2]. private . Squared Sum for signal and background for each variable. ; Definition at line 165 of file BinarySearchTree.h. Libraries for TMVA::BinarySearchTree:. [legend]; The documentation for this class was gen",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:17984,Modifiability,variab,variable,17984,"t_t> TMVA::BinarySearchTree::fMin[2]. private . RMS for signal and background for each variable. ; Definition at line 162 of file BinarySearchTree.h. ◆ fNEventsW. Double_t TMVA::BinarySearchTree::fNEventsW[2]. private . Number of events per class, taking into account event weights. ; Definition at line 166 of file BinarySearchTree.h. ◆ fNormalizeTreeTable. std::vector< std::pair<Double_t,const TMVA::Event*> > TMVA::BinarySearchTree::fNormalizeTreeTable. private . Definition at line 171 of file BinarySearchTree.h. ◆ fPeriod. UInt_t TMVA::BinarySearchTree::fPeriod. private . periode (number of event variables) ; Definition at line 156 of file BinarySearchTree.h. ◆ fRMS. std::vector<Float_t> TMVA::BinarySearchTree::fRMS[2]. private . RMS for signal and background for each variable. ; Definition at line 161 of file BinarySearchTree.h. ◆ fStatisticsIsValid. Bool_t TMVA::BinarySearchTree::fStatisticsIsValid. private . flag if last stat calculation is still valid, set to false if new node is insert ; Definition at line 158 of file BinarySearchTree.h. ◆ fSum. std::vector<Double_t> TMVA::BinarySearchTree::fSum[2]. private . Sum for signal and background for each variable. ; Definition at line 164 of file BinarySearchTree.h. ◆ fSumOfWeights. Double_t TMVA::BinarySearchTree::fSumOfWeights. private . Total number of events (weighted) counted during filling should be the same as fNEventsW[0]+fNEventsW[1]. ; . used as a check ; Definition at line 167 of file BinarySearchTree.h. ◆ fSumSq. std::vector<Double_t> TMVA::BinarySearchTree::fSumSq[2]. private . Squared Sum for signal and background for each variable. ; Definition at line 165 of file BinarySearchTree.h. Libraries for TMVA::BinarySearchTree:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/BinarySearchTree.h; tmva/tmva/src/BinarySearchTree.cxx. TMVABinarySearchTree. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:18425,Modifiability,variab,variable,18425,"t_t> TMVA::BinarySearchTree::fMin[2]. private . RMS for signal and background for each variable. ; Definition at line 162 of file BinarySearchTree.h. ◆ fNEventsW. Double_t TMVA::BinarySearchTree::fNEventsW[2]. private . Number of events per class, taking into account event weights. ; Definition at line 166 of file BinarySearchTree.h. ◆ fNormalizeTreeTable. std::vector< std::pair<Double_t,const TMVA::Event*> > TMVA::BinarySearchTree::fNormalizeTreeTable. private . Definition at line 171 of file BinarySearchTree.h. ◆ fPeriod. UInt_t TMVA::BinarySearchTree::fPeriod. private . periode (number of event variables) ; Definition at line 156 of file BinarySearchTree.h. ◆ fRMS. std::vector<Float_t> TMVA::BinarySearchTree::fRMS[2]. private . RMS for signal and background for each variable. ; Definition at line 161 of file BinarySearchTree.h. ◆ fStatisticsIsValid. Bool_t TMVA::BinarySearchTree::fStatisticsIsValid. private . flag if last stat calculation is still valid, set to false if new node is insert ; Definition at line 158 of file BinarySearchTree.h. ◆ fSum. std::vector<Double_t> TMVA::BinarySearchTree::fSum[2]. private . Sum for signal and background for each variable. ; Definition at line 164 of file BinarySearchTree.h. ◆ fSumOfWeights. Double_t TMVA::BinarySearchTree::fSumOfWeights. private . Total number of events (weighted) counted during filling should be the same as fNEventsW[0]+fNEventsW[1]. ; . used as a check ; Definition at line 167 of file BinarySearchTree.h. ◆ fSumSq. std::vector<Double_t> TMVA::BinarySearchTree::fSumSq[2]. private . Squared Sum for signal and background for each variable. ; Definition at line 165 of file BinarySearchTree.h. Libraries for TMVA::BinarySearchTree:. [legend]; The documentation for this class was generated from the following files:; tmva/tmva/inc/TMVA/BinarySearchTree.h; tmva/tmva/src/BinarySearchTree.cxx. TMVABinarySearchTree. ROOT master - Reference Guide Generated on Tue Nov 5 2024 09:45:29 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:1775,Security,access,access,1775,"e Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) con",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:1889,Security,access,access,1889,"e Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) con",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:1999,Security,access,access,1999,"e Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) con",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:2164,Security,access,access,2164,"nst Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) const;  search the tree to find the node matching ""event"" ;  ; Double_t SearchVolume (Volume *, std::vector< const TMVA::BinarySearchTreeNode * > *events=nullptr);  search the whole tree and add up all weights of events that lie within the given volume ;  ; Int_t SearchVolumeWithMaxLimit (TMVA::Volume *, std::vector< const TMVA::BinarySearchTreeNode * > *events=nullptr, Int_t=-1);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume a maximum number of events can be given ;  ; void SetNormalize (Bool_t norm);  ; void SetPeriode (Int_t p);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::BinaryTree;  BinaryTree (void);  constructor for a yet ""empty"" tree. Needs to be filled afterwards ;  ; virtual ~BinaryTree ();  destructor (deletes the nodes and ""events"" if owned by the tree ;  ; virtual void * AddXMLTo (void *parent) const;  add attributes to XML ;  ; UInt_t CountNodes (Node *n=nullptr);  return the number of nodes in the tree. (make a new count --> takes time) ;  ; Node * GetLeftDaughter (Node *n);  get left daughter node current node ""n"" ;  ; UInt_t GetNNodes () const;  ; Node * GetRightDaughter (Node *n);  get right ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:2254,Security,access,access,2254,"nst Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) const;  search the tree to find the node matching ""event"" ;  ; Double_t SearchVolume (Volume *, std::vector< const TMVA::BinarySearchTreeNode * > *events=nullptr);  search the whole tree and add up all weights of events that lie within the given volume ;  ; Int_t SearchVolumeWithMaxLimit (TMVA::Volume *, std::vector< const TMVA::BinarySearchTreeNode * > *events=nullptr, Int_t=-1);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume a maximum number of events can be given ;  ; void SetNormalize (Bool_t norm);  ; void SetPeriode (Int_t p);  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::BinaryTree;  BinaryTree (void);  constructor for a yet ""empty"" tree. Needs to be filled afterwards ;  ; virtual ~BinaryTree ();  destructor (deletes the nodes and ""events"" if owned by the tree ;  ; virtual void * AddXMLTo (void *parent) const;  add attributes to XML ;  ; UInt_t CountNodes (Node *n=nullptr);  return the number of nodes in the tree. (make a new count --> takes time) ;  ; Node * GetLeftDaughter (Node *n);  get left daughter node current node ""n"" ;  ; UInt_t GetNNodes () const;  ; Node * GetRightDaughter (Node *n);  get right ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:12408,Security,access,access,12408,"SearchTree::Insert ; (; const Event * ; event). insert a new ""event"" in the binary tree ; Definition at line 114 of file BinarySearchTree.cxx. ◆ Insert() [2/2]. void TMVA::BinarySearchTree::Insert ; (; const Event * ; event, . Node * ; node . ). private . private internal function to insert a event (node) at the proper position ; Definition at line 147 of file BinarySearchTree.cxx. ◆ InVolume(). Bool_t TMVA::BinarySearchTree::InVolume ; (; const std::vector< Float_t > & ; event, . Volume * ; volume . ); const. private . test if the data points are in the given volume ; Definition at line 415 of file BinarySearchTree.cxx. ◆ IsA(). virtual TClass * TMVA::BinarySearchTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::BinaryTree.; Definition at line 173 of file BinarySearchTree.h. ◆ Max(). Float_t TMVA::BinarySearchTree::Max ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Maximum for signal and background for each variable ; Definition at line 128 of file BinarySearchTree.h. ◆ Mean(). Float_t TMVA::BinarySearchTree::Mean ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to mean for signal and background for each variable ; Definition at line 119 of file BinarySearchTree.h. ◆ Min(). Float_t TMVA::BinarySearchTree::Min ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Minimum for signal and background for each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the se",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:12625,Security,access,access,12625,"; event, . Node * ; node . ). private . private internal function to insert a event (node) at the proper position ; Definition at line 147 of file BinarySearchTree.cxx. ◆ InVolume(). Bool_t TMVA::BinarySearchTree::InVolume ; (; const std::vector< Float_t > & ; event, . Volume * ; volume . ); const. private . test if the data points are in the given volume ; Definition at line 415 of file BinarySearchTree.cxx. ◆ IsA(). virtual TClass * TMVA::BinarySearchTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::BinaryTree.; Definition at line 173 of file BinarySearchTree.h. ◆ Max(). Float_t TMVA::BinarySearchTree::Max ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Maximum for signal and background for each variable ; Definition at line 128 of file BinarySearchTree.h. ◆ Mean(). Float_t TMVA::BinarySearchTree::Mean ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to mean for signal and background for each variable ; Definition at line 119 of file BinarySearchTree.h. ◆ Min(). Float_t TMVA::BinarySearchTree::Min ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Minimum for signal and background for each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ; Definition at line 286 of file BinarySearchTree.cxx. ◆ RMS() [1/2]. Float_t TMVA::BinarySearchTree::RMS ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to RMS for signal ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:12837,Security,access,access,12837,":InVolume ; (; const std::vector< Float_t > & ; event, . Volume * ; volume . ); const. private . test if the data points are in the given volume ; Definition at line 415 of file BinarySearchTree.cxx. ◆ IsA(). virtual TClass * TMVA::BinarySearchTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::BinaryTree.; Definition at line 173 of file BinarySearchTree.h. ◆ Max(). Float_t TMVA::BinarySearchTree::Max ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Maximum for signal and background for each variable ; Definition at line 128 of file BinarySearchTree.h. ◆ Mean(). Float_t TMVA::BinarySearchTree::Mean ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to mean for signal and background for each variable ; Definition at line 119 of file BinarySearchTree.h. ◆ Min(). Float_t TMVA::BinarySearchTree::Min ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Minimum for signal and background for each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ; Definition at line 286 of file BinarySearchTree.cxx. ◆ RMS() [1/2]. Float_t TMVA::BinarySearchTree::RMS ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to RMS for signal and background for each variable ; Definition at line 122 of file BinarySearchTree.h. ◆ RMS() [2/2]. Float_t TMVA::BinarySearchTree::RMS ; (; UInt_t ; var). inline . access to RMS for each variable ; Definition at ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:13654,Security,access,access,13654,"9 of file BinarySearchTree.h. ◆ Min(). Float_t TMVA::BinarySearchTree::Min ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Minimum for signal and background for each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ; Definition at line 286 of file BinarySearchTree.cxx. ◆ RMS() [1/2]. Float_t TMVA::BinarySearchTree::RMS ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to RMS for signal and background for each variable ; Definition at line 122 of file BinarySearchTree.h. ◆ RMS() [2/2]. Float_t TMVA::BinarySearchTree::RMS ; (; UInt_t ; var). inline . access to RMS for each variable ; Definition at line 133 of file BinarySearchTree.h. ◆ Search() [1/2]. TMVA::BinarySearchTreeNode * TMVA::BinarySearchTree::Search ; (; Event * ; event, . Node * ; node . ); const. private . Private, recursive, function for searching. ; Definition at line 201 of file BinarySearchTree.cxx. ◆ Search() [2/2]. TMVA::BinarySearchTreeNode * TMVA::BinarySearchTree::Search ; (; Event * ; event); const. search the tree to find the node matching ""event"" ; Definition at line 193 of file BinarySearchTree.cxx. ◆ SearchVolume() [1/2]. Double_t TMVA::BinarySearchTree::SearchVolume ; (; Node * ; t, . Volume * ; volume, . Int_t ; depth, . std::vector< const TMVA::BinarySearchTreeNode * > * ; events . ). private . recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ; Definition at",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:13845,Security,access,access,13845,"each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisation of tree. ; Definition at line 343 of file BinarySearchTree.cxx. ◆ NormalizeTree() [2/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; leftBound, . std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator ; rightBound, . UInt_t ; actDim . ). private . normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ; Definition at line 286 of file BinarySearchTree.cxx. ◆ RMS() [1/2]. Float_t TMVA::BinarySearchTree::RMS ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to RMS for signal and background for each variable ; Definition at line 122 of file BinarySearchTree.h. ◆ RMS() [2/2]. Float_t TMVA::BinarySearchTree::RMS ; (; UInt_t ; var). inline . access to RMS for each variable ; Definition at line 133 of file BinarySearchTree.h. ◆ Search() [1/2]. TMVA::BinarySearchTreeNode * TMVA::BinarySearchTree::Search ; (; Event * ; event, . Node * ; node . ); const. private . Private, recursive, function for searching. ; Definition at line 201 of file BinarySearchTree.cxx. ◆ Search() [2/2]. TMVA::BinarySearchTreeNode * TMVA::BinarySearchTree::Search ; (; Event * ; event); const. search the tree to find the node matching ""event"" ; Definition at line 193 of file BinarySearchTree.cxx. ◆ SearchVolume() [1/2]. Double_t TMVA::BinarySearchTree::SearchVolume ; (; Node * ; t, . Volume * ; volume, . Int_t ; depth, . std::vector< const TMVA::BinarySearchTreeNode * > * ; events . ). private . recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ; Definition at line 380 of file BinarySearchTree.cxx. ◆ SearchVolume() [2/2]. Double_t TMVA::BinarySearchTree::SearchVolume ; (; Volume * ; volume, . std::vector< const TMVA::BinarySearchTreeN",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:5139,Testability,test,test,5139," all its leaf nodes, fill max depth reached in the tree at the same time. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static BinarySearchTree * CreateFromXML (void *node, UInt_t tmva_Version_Code=262657);  re-create a new tree (decision tree or search tree) from XML ;  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::BinaryTree; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Member Functions; void DestroyNode (BinarySearchTreeNode *);  ; void Insert (const Event *, Node *);  private internal function to insert a event (node) at the proper position ;  ; Bool_t InVolume (const std::vector< Float_t > &, Volume *) const;  test if the data points are in the given volume ;  ; void NormalizeTree (std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, std::vector< std::pair< Double_t, const TMVA::Event * > >::iterator, UInt_t);  normalises the binary-search tree to reduce the branch length and hence speed up the search procedure (on average). ;  ; BinarySearchTreeNode * Search (Event *, Node *) const;  Private, recursive, function for searching. ;  ; Double_t SearchVolume (Node *, Volume *, Int_t, std::vector< const TMVA::BinarySearchTreeNode * > *events);  recursively walk through the daughter nodes and add up all weights of events that lie within the given volume ;  . Private Attributes; Bool_t fCanNormalize;  the tree can be normalised ;  ; UInt_t fCurrentDepth;  internal variable, counting the depth of the tree during insertion ;  ; std::vector< Float_t > fMax [2];  RMS for signal and background for each variable. ;  ; std::vector< Float_t > fMeans [2];  mean for signal and background for each variable ;  ; std::vector< Float_t ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:11989,Testability,test,test,11989," GetSumOfWeights() [1/2]. Double_t TMVA::BinarySearchTree::GetSumOfWeights ; (; Int_t ; theType); const. return the sum of event (node) weights ; Definition at line 233 of file BinarySearchTree.cxx. ◆ GetSumOfWeights() [2/2]. Double_t TMVA::BinarySearchTree::GetSumOfWeights ; (; void ; ); const. return the sum of event (node) weights ; Definition at line 218 of file BinarySearchTree.cxx. ◆ Insert() [1/2]. void TMVA::BinarySearchTree::Insert ; (; const Event * ; event). insert a new ""event"" in the binary tree ; Definition at line 114 of file BinarySearchTree.cxx. ◆ Insert() [2/2]. void TMVA::BinarySearchTree::Insert ; (; const Event * ; event, . Node * ; node . ). private . private internal function to insert a event (node) at the proper position ; Definition at line 147 of file BinarySearchTree.cxx. ◆ InVolume(). Bool_t TMVA::BinarySearchTree::InVolume ; (; const std::vector< Float_t > & ; event, . Volume * ; volume . ); const. private . test if the data points are in the given volume ; Definition at line 415 of file BinarySearchTree.cxx. ◆ IsA(). virtual TClass * TMVA::BinarySearchTree::IsA ; (; ); const. inlinevirtual . ReturnsTClass describing current object ; Reimplemented from TMVA::BinaryTree.; Definition at line 173 of file BinarySearchTree.h. ◆ Max(). Float_t TMVA::BinarySearchTree::Max ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Maximum for signal and background for each variable ; Definition at line 128 of file BinarySearchTree.h. ◆ Mean(). Float_t TMVA::BinarySearchTree::Mean ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to mean for signal and background for each variable ; Definition at line 119 of file BinarySearchTree.h. ◆ Min(). Float_t TMVA::BinarySearchTree::Min ; (; Types::ESBType ; sb, . UInt_t ; var . ). inline . access to Minimum for signal and background for each variable ; Definition at line 125 of file BinarySearchTree.h. ◆ NormalizeTree() [1/2]. void TMVA::BinarySearchTree::NormalizeTree ; (; ). Normalisat",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:333,Usability,simpl,simple,333,". ROOT: TMVA::BinarySearchTree Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Member Functions |; Private Attributes |; List of all members ; TMVA::BinarySearchTree Class ReferenceTMVA. ; A simple Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  ac",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:893,Usability,clear,clear,893,"e Binary search tree including a volume search method. ; Definition at line 65 of file BinarySearchTree.h. Public Member Functions;  BinarySearchTree (const BinarySearchTree &b);  copy constructor that creates a true copy, i.e. a completely independent tree ;  ;  BinarySearchTree (void);  default constructor ;  ; virtual ~BinarySearchTree (void);  destructor ;  ; void CalcStatistics (TMVA::Node *n=nullptr);  calculate basic statistics (mean, rms for each variable) ;  ; virtual const char * ClassName () const;  ; void Clear (TMVA::Node *n=nullptr);  clear nodes ;  ; virtual Node * CreateNode (UInt_t) const;  ; virtual BinaryTree * CreateTree () const;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, const std::vector< Int_t > &theVars, Int_t theType=-1);  create the search tree from the event collection using ONLY the variables specified in ""theVars"" ;  ; Double_t Fill (const std::vector< TMVA::Event * > &events, Int_t theType=-1);  create the search tree from the events in a TTree using ALL the variables specified included in the Event ;  ; UInt_t GetPeriode (void) const;  ; Double_t GetSumOfWeights (Int_t theType) const;  return the sum of event (node) weights ;  ; Double_t GetSumOfWeights (void) const;  return the sum of event (node) weights ;  ; void Insert (const Event *);  insert a new ""event"" in the binary tree ;  ; virtual TClass * IsA () const;  ; Float_t Max (Types::ESBType sb, UInt_t var);  access to Maximum for signal and background for each variable ;  ; Float_t Mean (Types::ESBType sb, UInt_t var);  access to mean for signal and background for each variable ;  ; Float_t Min (Types::ESBType sb, UInt_t var);  access to Minimum for signal and background for each variable ;  ; void NormalizeTree ();  Normalisation of tree. ;  ; Float_t RMS (Types::ESBType sb, UInt_t var);  access to RMS for signal and background for each variable ;  ; Float_t RMS (UInt_t var);  access to RMS for each variable ;  ; BinarySearchTreeNode * Search (Event *event) con",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html:9258,Usability,clear,clear,9258," at line 92 of file BinarySearchTree.cxx. Member Function Documentation. ◆ CalcStatistics(). void TMVA::BinarySearchTree::CalcStatistics ; (; TMVA::Node * ; n = nullptr). calculate basic statistics (mean, rms for each variable) ; Definition at line 430 of file BinarySearchTree.cxx. ◆ Class(). static TClass * TMVA::BinarySearchTree::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * TMVA::BinarySearchTree::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t TMVA::BinarySearchTree::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 173 of file BinarySearchTree.h. ◆ ClassName(). virtual const char * TMVA::BinarySearchTree::ClassName ; (; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 81 of file BinarySearchTree.h. ◆ Clear(). void TMVA::BinarySearchTree::Clear ; (; TMVA::Node * ; n = nullptr). clear nodes ; Definition at line 354 of file BinarySearchTree.cxx. ◆ CreateFromXML(). TMVA::BinarySearchTree * TMVA::BinarySearchTree::CreateFromXML ; (; void * ; node, . UInt_t ; tmva_Version_Code = 262657 . ). static . re-create a new tree (decision tree or search tree) from XML ; Definition at line 103 of file BinarySearchTree.cxx. ◆ CreateNode(). virtual Node * TMVA::BinarySearchTree::CreateNode ; (; UInt_t ; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 78 of file BinarySearchTree.h. ◆ CreateTree(). virtual BinaryTree * TMVA::BinarySearchTree::CreateTree ; (; ); const. inlinevirtual . Implements TMVA::BinaryTree.; Definition at line 79 of file BinarySearchTree.h. ◆ DeclFileName(). static const char * TMVA::BinarySearchTree::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 173 of file BinarySearchTree.h. ◆ DestroyNode(). void TMVA::BinarySearchTree::DestroyNode ; (; BinarySearchTreeNode * ; ). private . ◆ Fill() [1/2]. ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTree.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTree.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html:547,Modifiability,variab,variable,547,". ROOT: TMVA::BinarySearchTreeNode Class Reference. ; ROOT  ; . master. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Private Attributes |; List of all members ; TMVA::BinarySearchTreeNode Class ReferenceTMVA. ; Node for the BinarySearch or Decision Trees. ; for the binary search tree, it basically consists of the EVENT, and pointers to the parent and daughters; in case of the Decision Tree, it specifies parent and daughters, as well as ""which variable is used"" in the selection of this node, including the respective cut value. ; Definition at line 55 of file BinarySearchTreeNode.h. Public Member Functions;  BinarySearchTreeNode (BinarySearchTreeNode *parent, char pos);  constructor of a daughter node as a daughter of 'p' ;  ;  BinarySearchTreeNode (const BinarySearchTreeNode &n, BinarySearchTreeNode *parent=nullptr);  copy constructor of a node. ;  ;  BinarySearchTreeNode (const Event *e=nullptr, UInt_t signalClass=0);  constructor of a node for the search tree ;  ; virtual ~BinarySearchTreeNode ();  node destructor ;  ; virtual void AddAttributesToNode (void *node) const;  adding attributes to tree node ;  ; virtual void AddContentToNode (std::stringstream &s) const;  adding attributes to tree node ;  ; virtual Node * CreateNode () const;  ; virtual Bool_t EqualsMe (const Event &) const;  check if the event fed into the node actually equals the event that forms the node (in case of a search tree) ;  ; UInt_t GetClass () const;  ; const std::vector< Float_t > & GetEventV () const;  ; Short_t GetSelector () const;  return index of variable used for discrimination at this node ;  ; const std::vector< Float_t > & GetTargets () const;  ; Float_t GetWeight () const;  ; virtual Bool_t GoesLeft (const Event &) const;  check if the event fed into the node goes/descends to the left daughter ;  ; virtual Bool_t GoesRight (const Event &) const;  check if the event fed into the nod",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTreeNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html:1655,Modifiability,variab,variable,1655,"de *parent, char pos);  constructor of a daughter node as a daughter of 'p' ;  ;  BinarySearchTreeNode (const BinarySearchTreeNode &n, BinarySearchTreeNode *parent=nullptr);  copy constructor of a node. ;  ;  BinarySearchTreeNode (const Event *e=nullptr, UInt_t signalClass=0);  constructor of a node for the search tree ;  ; virtual ~BinarySearchTreeNode ();  node destructor ;  ; virtual void AddAttributesToNode (void *node) const;  adding attributes to tree node ;  ; virtual void AddContentToNode (std::stringstream &s) const;  adding attributes to tree node ;  ; virtual Node * CreateNode () const;  ; virtual Bool_t EqualsMe (const Event &) const;  check if the event fed into the node actually equals the event that forms the node (in case of a search tree) ;  ; UInt_t GetClass () const;  ; const std::vector< Float_t > & GetEventV () const;  ; Short_t GetSelector () const;  return index of variable used for discrimination at this node ;  ; const std::vector< Float_t > & GetTargets () const;  ; Float_t GetWeight () const;  ; virtual Bool_t GoesLeft (const Event &) const;  check if the event fed into the node goes/descends to the left daughter ;  ; virtual Bool_t GoesRight (const Event &) const;  check if the event fed into the node goes/descends to the right daughter ;  ; virtual TClass * IsA () const;  ; virtual void Print (std::ostream &os) const;  print the node ;  ; virtual void PrintRec (std::ostream &os) const;  recursively print the node and its daughters (--> print the 'tree') ;  ; virtual void ReadAttributes (void *node, UInt_t tmva_Version_Code=262657);  read attributes from XML ;  ; virtual void ReadContent (std::stringstream &s);  read events from node ;  ; virtual Bool_t ReadDataRecord (std::istream &is, UInt_t tmva_Version_Code=262657);  Read the data block. ;  ; void SetSelector (Short_t i);  set index of variable used for discrimination at this node ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTreeNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html:2603,Modifiability,variab,variable,2603,"Attributes (void *node, UInt_t tmva_Version_Code=262657);  read attributes from XML ;  ; virtual void ReadContent (std::stringstream &s);  read events from node ;  ; virtual Bool_t ReadDataRecord (std::istream &is, UInt_t tmva_Version_Code=262657);  Read the data block. ;  ; void SetSelector (Short_t i);  set index of variable used for discrimination at this node ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Node;  Node ();  ;  Node (const Node &n);  copy constructor, make sure you don't just copy the pointer to the node, but that the parents/daughters are initialized to 0 (and set by the copy constructors of the derived classes ;  ;  Node (Node *p, char pos);  constructor of a daughter node as a daughter of 'p' ;  ; virtual ~Node ();  node destructor ;  ; void * AddXMLTo (void *parent) const;  add attributes to XML ;  ; Int_t CountMeAndAllDaughters () const;  recursively go through the part of the tree below this node and count all daughters ;  ; int GetCount ();  returns the global number of instantiated nodes ;  ; UInt_t GetDepth () const;  ; virtual Node * GetLeft () const;  ; virtual Node * GetParent () const;  ; virtual TMVA::BinaryTree * GetParentTree () const;  ; char GetPos () const;  ; virtual Node * GetRight () const;  ; void ReadXML (void *node, UInt_t tmva_Version_Code=262657);  read attributes from XML ;  ; void SetDepth (UInt_t d);  ; virtual void SetLeft (Node *l);  ; virtual void SetParent (Node *p);  ; virtual void SetParentTree (TMVA::BinaryTree *t);  ; void SetPos (char s);  ; virtual void SetRight (Node *r);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Node; static TClass * Class (",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTreeNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html:2782,Modifiability,inherit,inherited,2782,"Attributes (void *node, UInt_t tmva_Version_Code=262657);  read attributes from XML ;  ; virtual void ReadContent (std::stringstream &s);  read events from node ;  ; virtual Bool_t ReadDataRecord (std::istream &is, UInt_t tmva_Version_Code=262657);  Read the data block. ;  ; void SetSelector (Short_t i);  set index of variable used for discrimination at this node ;  ; virtual void Streamer (TBuffer &);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TMVA::Node;  Node ();  ;  Node (const Node &n);  copy constructor, make sure you don't just copy the pointer to the node, but that the parents/daughters are initialized to 0 (and set by the copy constructors of the derived classes ;  ;  Node (Node *p, char pos);  constructor of a daughter node as a daughter of 'p' ;  ; virtual ~Node ();  node destructor ;  ; void * AddXMLTo (void *parent) const;  add attributes to XML ;  ; Int_t CountMeAndAllDaughters () const;  recursively go through the part of the tree below this node and count all daughters ;  ; int GetCount ();  returns the global number of instantiated nodes ;  ; UInt_t GetDepth () const;  ; virtual Node * GetLeft () const;  ; virtual Node * GetParent () const;  ; virtual TMVA::BinaryTree * GetParentTree () const;  ; char GetPos () const;  ; virtual Node * GetRight () const;  ; void ReadXML (void *node, UInt_t tmva_Version_Code=262657);  read attributes from XML ;  ; void SetDepth (UInt_t d);  ; virtual void SetLeft (Node *l);  ; virtual void SetParent (Node *p);  ; virtual void SetParentTree (TMVA::BinaryTree *t);  ; void SetPos (char s);  ; virtual void SetRight (Node *r);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Node; static TClass * Class (",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTreeNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html:4233,Modifiability,inherit,inherited,4233,"o XML ;  ; Int_t CountMeAndAllDaughters () const;  recursively go through the part of the tree below this node and count all daughters ;  ; int GetCount ();  returns the global number of instantiated nodes ;  ; UInt_t GetDepth () const;  ; virtual Node * GetLeft () const;  ; virtual Node * GetParent () const;  ; virtual TMVA::BinaryTree * GetParentTree () const;  ; char GetPos () const;  ; virtual Node * GetRight () const;  ; void ReadXML (void *node, UInt_t tmva_Version_Code=262657);  read attributes from XML ;  ; void SetDepth (UInt_t d);  ; virtual void SetLeft (Node *l);  ; virtual void SetParent (Node *p);  ; virtual void SetParentTree (TMVA::BinaryTree *t);  ; void SetPos (char s);  ; virtual void SetRight (Node *r);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Node; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; UInt_t fClass;  ; std::vector< Float_t > fEventV;  ; Short_t fSelector;  index of variable used in node selection (decision tree) ;  ; std::vector< Float_t > fTargets;  ; Float_t fWeight;  . Additional Inherited Members;  Protected Attributes inherited from TMVA::Node; UInt_t fDepth;  depth of the node within the tree (seen from root node) ;  ; Node * fLeft;  pointers to the two ""daughter"" nodes ;  ; Node * fParent;  the previous (parent) node ;  ; BinaryTree * fParentTree;  pointer to the parent tree to which the Node belongs ;  ; char fPos;  position, i.e. it is a left (l) or right (r) daughter ;  ; Node * fRight;  pointers to the two ""daughter"" nodes ;  . #include <TMVA/BinarySearchTreeNode.h>. Inheritance diagram for TMVA::BinarySearchTreeNode:. This browser is not",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTreeNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html:4517,Modifiability,variab,variable,4517,"nst;  ; virtual TMVA::BinaryTree * GetParentTree () const;  ; char GetPos () const;  ; virtual Node * GetRight () const;  ; void ReadXML (void *node, UInt_t tmva_Version_Code=262657);  read attributes from XML ;  ; void SetDepth (UInt_t d);  ; virtual void SetLeft (Node *l);  ; virtual void SetParent (Node *p);  ; virtual void SetParentTree (TMVA::BinaryTree *t);  ; void SetPos (char s);  ; virtual void SetRight (Node *r);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Node; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; UInt_t fClass;  ; std::vector< Float_t > fEventV;  ; Short_t fSelector;  index of variable used in node selection (decision tree) ;  ; std::vector< Float_t > fTargets;  ; Float_t fWeight;  . Additional Inherited Members;  Protected Attributes inherited from TMVA::Node; UInt_t fDepth;  depth of the node within the tree (seen from root node) ;  ; Node * fLeft;  pointers to the two ""daughter"" nodes ;  ; Node * fParent;  the previous (parent) node ;  ; BinaryTree * fParentTree;  pointer to the parent tree to which the Node belongs ;  ; char fPos;  position, i.e. it is a left (l) or right (r) daughter ;  ; Node * fRight;  pointers to the two ""daughter"" nodes ;  . #include <TMVA/BinarySearchTreeNode.h>. Inheritance diagram for TMVA::BinarySearchTreeNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BinarySearchTreeNode() [1/3]. TMVA::BinarySearchTreeNode::BinarySearchTreeNode ; (; const Event * ; e = nullptr, . UInt_t ; signalClass = 0 . ). constructor of a node for the search tree ",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTreeNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html
https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html:4678,Modifiability,inherit,inherited,4678,"SetParent (Node *p);  ; virtual void SetParentTree (TMVA::BinaryTree *t);  ; void SetPos (char s);  ; virtual void SetRight (Node *r);  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TMVA::Node; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  . Private Attributes; UInt_t fClass;  ; std::vector< Float_t > fEventV;  ; Short_t fSelector;  index of variable used in node selection (decision tree) ;  ; std::vector< Float_t > fTargets;  ; Float_t fWeight;  . Additional Inherited Members;  Protected Attributes inherited from TMVA::Node; UInt_t fDepth;  depth of the node within the tree (seen from root node) ;  ; Node * fLeft;  pointers to the two ""daughter"" nodes ;  ; Node * fParent;  the previous (parent) node ;  ; BinaryTree * fParentTree;  pointer to the parent tree to which the Node belongs ;  ; char fPos;  position, i.e. it is a left (l) or right (r) daughter ;  ; Node * fRight;  pointers to the two ""daughter"" nodes ;  . #include <TMVA/BinarySearchTreeNode.h>. Inheritance diagram for TMVA::BinarySearchTreeNode:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ BinarySearchTreeNode() [1/3]. TMVA::BinarySearchTreeNode::BinarySearchTreeNode ; (; const Event * ; e = nullptr, . UInt_t ; signalClass = 0 . ). constructor of a node for the search tree ; Definition at line 59 of file BinarySearchTreeNode.cxx. ◆ BinarySearchTreeNode() [2/3]. TMVA::BinarySearchTreeNode::BinarySearchTreeNode ; (; BinarySearchTreeNode * ; parent, . char ; pos . ). constructor of a daughter node as a daughter of 'p' ; Definition at line 78 of file BinarySearch",MatchSource.WIKI,doc/master/classTMVA_1_1BinarySearchTreeNode.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/master/classTMVA_1_1BinarySearchTreeNode.html
