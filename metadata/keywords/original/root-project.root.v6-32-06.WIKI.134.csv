id,quality_attribute,keyword,matched_word,match_idx,sentence,source,filename,author,repo,version,wiki,url
https://root.cern/doc/v632/classRooAbsReal.html:139155,Availability,error,error,139155,"l.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected components that should be plotted, find all nodes that (in)directly depend on these selected nodes. Mark all directly and indirectly selected nodes as 'selected' using the selectComp() method ; Definition at line 1466 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ; fr, . double ; Z, . const RooArgSet * ; params, . const RooLinkedList & ; argList, . bool ; linMethod . ); const. protected . Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ; Parameters. [in]frameRooPlot to plot on ; [in]frThe RooFitResult, where errors can be extracted ; [in]ZThe desired significance (width) of the error band ; [in]paramsIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated us",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:139269,Availability,error,error,139269," using the selectComp() method ; Definition at line 1466 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ; fr, . double ; Z, . const RooArgSet * ; params, . const RooLinkedList & ; argList, . bool ; linMethod . ); const. protected . Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ; Parameters. [in]frameRooPlot to plot on ; [in]frThe RooFitResult, where errors can be extracted ; [in]ZThe desired significance (width) of the error band ; [in]paramsIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations for each value of x, where N% is con",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:139315,Availability,error,error,139315," using the selectComp() method ; Definition at line 1466 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ; fr, . double ; Z, . const RooArgSet * ; params, . const RooLinkedList & ; argList, . bool ; linMethod . ); const. protected . Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ; Parameters. [in]frameRooPlot to plot on ; [in]frThe RooFitResult, where errors can be extracted ; [in]ZThe desired significance (width) of the error band ; [in]paramsIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations for each value of x, where N% is con",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:139942,Availability,robust,robust,139942,"msIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111) Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate. ; Definition at line 2686 of file RooAbsReal.cxx. ◆ plotSamplingHint(). std::list< double > * RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Inter",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:139949,Availability,error,error,139949,"msIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the band was plotted on (for chaining of plotting commands).; The linearized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111) Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate. ; Definition at line 2686 of file RooAbsReal.cxx. ◆ plotSamplingHint(). std::list< double > * RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Inter",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:140193,Availability,error,error,140193,"arized error is calculated as follows: ; \[; \mathrm{error}(x) = Z * F_a(x) * \mathrm{Corr}(a,a') * F_{a'}^\mathrm{T}(x),; \]. where ; \[; F_a(x) = \frac{ f(x,a+\mathrm{d}a) - f(x,a-\mathrm{d}a) }{2},; \]. with \( f(x) \) the plotted curve and \( \mathrm{d}a \) taken from the fit result, and \( \mathrm{Corr}(a,a') \) = the correlation matrix from the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111) Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate. ; Definition at line 2686 of file RooAbsReal.cxx. ◆ plotSamplingHint(). std::list< double > * RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in RooLagrangianMorphFunc, RooAdditio",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:143172,Availability,error,error,143172,"t. virtual . Deprecated:OBSOLETE – RETAINED FOR BACKWARD COMPATIBILITY. Use plotOn() with Slice() instead ; Definition at line 2253 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3770 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3662 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:143244,Availability,error,errors,143244,"ith Slice() instead ; Definition at line 2253 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3770 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3662 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:143366,Availability,error,error,143366,"id RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3770 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3662 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ;",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:143405,Availability,error,errors,143405,"id RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3770 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3662 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ;",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:143462,Availability,error,errors,143462,"deredObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3770 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3662 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGe",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:144954,Availability,error,error,144954,"alue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 424 of file RooAbsReal.cxx. ◆ redirectServersHook(). bool RooAbsReal::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . Function that is called at the end of redirectServers(). ; Can be overloaded to inject some class-dependent behavior after server redirection, e.g. resetting of caches. The return value is meant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooAbsTestStatistic, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, and RooProjectedPdf.; Definition at line 4550 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 384 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooAddModel",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:147401,Availability,error,error,147401,"RooAddPdf ; Reimplemented in RooBernstein, RooChebychev, RooAddModel, RooAddPdf, RooProdPdf, and RooSimultaneous.; Definition at line 3455 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 568 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAbsTestStatistic, RooAddition, and RooConstraintSum.; Definition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (;",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:147461,Availability,error,error,147461,"Pdf, and RooSimultaneous.; Definition at line 3455 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 568 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAbsTestStatistic, RooAddition, and RooConstraintSum.; Definition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPl",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:147531,Availability,error,errors,147531,"Pdf, and RooSimultaneous.; Definition at line 3455 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 568 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAbsTestStatistic, RooAddition, and RooConstraintSum.; Definition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPl",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:147647,Availability,error,error,147647," double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 568 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAbsTestStatistic, RooAddition, and RooConstraintSum.; Definition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at l",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:152986,Availability,error,error,152986,"earCombination, RooLinearVar, RooMoment, RooMultiVarGaussian, RooNLLVar, RooNumCdf, RooNumConvolution, RooNumConvPdf, RooNumRunningInt, RooPolyFunc, RooPolyVar, RooProdPdf, RooProduct, RooProfileLL, RooProjectedPdf, RooPullVar, RooRangeBoolean, RooRatio, RooRealIntegral, RooRealMPFE, RooRealSumFunc, RooRealSumPdf, RooRealVar, RooRecursiveFraction, RooResolutionModel, RooSecondMoment, RooSimultaneous, RooTruthModel, RooWrapperPdf, RooXYChi2Var, RooLegendre, RooNonCentralChiSquare, and RooSpHarmonic. ◆ StreamerNVirtual(). void RooAbsReal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 558 of file RooAbsReal.h. ◆ syncCache(). void RooAbsReal::syncCache ; (; const RooArgSet * ; set = nullptr). inlineoverrideprotectedvirtual . Implements RooAbsArg.; Reimplemented in RooErrorVar.; Definition at line 463 of file RooAbsReal.h. ◆ traceEval(). double RooAbsReal::traceEval ; (; const RooArgSet * ; set); const. protected . Calculate current value of object, with error tracing wrapper. ; Definition at line 317 of file RooAbsReal.cxx. ◆ writeToStream(). void RooAbsReal::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooConstVar, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 434 of file RooAbsReal.cxx. Friends And Related Symbol Documentation. ◆ AddCacheElem. friend class AddCacheElem. friend . Definition at line 414 of file RooAbsReal.h. ◆ BatchInterfaceAccessor. friend class BatchInterfaceAccessor. friend . Definition at line 406 of file RooAbsReal.h. ◆ RooAddHelpers. friend class RooAddHelpers. friend . Definition at line 411 of file RooAbsReal.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 413 of file RooAbsReal.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 412 of file RooAbsReal.h. ◆ RooFit::Eva",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:8996,Deployability,configurat,configuration,8996,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:9026,Deployability,integrat,integration,9026,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:9957,Deployability,configurat,configuration,9957,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:9987,Deployability,integrat,integration,9987,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:14582,Deployability,integrat,integration,14582,"on tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:14594,Deployability,configurat,configuration,14594,"on tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:14709,Deployability,integrat,integration,14709," void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:14721,Deployability,configurat,configuration,14721," void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19008,Deployability,integrat,integration,19008,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &o",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19020,Deployability,configurat,configuration,19020,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &o",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19141,Deployability,integrat,integrator,19141,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19152,Deployability,configurat,configuration,19152,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19185,Deployability,integrat,integration,19185,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19197,Deployability,configurat,configuration,19197,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19607,Deployability,integrat,integrator,19607,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollec",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19618,Deployability,configurat,configuration,19618,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollec",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19748,Deployability,integrat,integrator,19748,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19759,Deployability,configurat,configuration,19759,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:33291,Deployability,update,updates,33291,"eClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const RooAbsArg &arg) const;  Check if this is serving values to arg. ;  ; bool isValueServer (const char *name) const;  Check if this is serving values to an object with name name. ;  ; bool isShapeServer (const RooAbsArg &arg) const;  Check if this is serving shape to arg. ;  ; bool isShapeServer (const char *name) const;  Check if this is serving shape to an object with name name. ;  ; void leafNodeServerList (RooAbsColl",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:35342,Deployability,integrat,integrated,35342," *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all leaf nodes of the arg tree, starting with ourself as top node. ;  ; void branchNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all branch nodes of the arg tree starting with ourself as top node. ;  ; void treeNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool doBranch=true, bool doLeaf=true, bool valueOnly=false, bool recurseNonDerived=false) const;  Fill supplied list with nodes of the arg tree, following all server links, starting with ourself as top node. ;  ; virtual bool isFundamental () const;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:48638,Deployability,integrat,integration,48638,"onst;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:48650,Deployability,configurat,configuration,48650,"onst;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:52407,Deployability,integrat,integrated,52407,"irty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:52465,Deployability,integrat,integration,52465,"irty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:58474,Deployability,integrat,integration,58474," void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . Protected Attributes; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _d",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:87800,Deployability,configurat,configuration,87800," 1211 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ; Definition at line 211 of file RooAbsReal.h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:87830,Deployability,integrat,integration,87830," 1211 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ; Definition at line 211 of file RooAbsReal.h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88266,Deployability,integrat,integration,88266,"set in range named rangeName with integrand normalized over observables in nset. ; Definition at line 211 of file RooAbsReal.h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88460,Deployability,integrat,integrates,88460,".h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const Roo",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88485,Deployability,integrat,integrates,88485,".h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const Roo",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88746,Deployability,integrat,integrated,88746,"in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is aut",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88830,Deployability,integrat,integration,88830,"r any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; No",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:89576,Deployability,integrat,integration,89576,"d is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:89772,Deployability,integrat,integrates,89772,"ain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr<",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:89797,Deployability,integrat,integrates,89797,"ain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr<",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:89901,Deployability,integrat,integrating,89901,"rmed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create int",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:90288,Deployability,configurat,configuration,90288,"mdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Inter",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:90318,Deployability,integrat,integration,90318,"mdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Inter",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:90980,Deployability,configurat,configuration,90980,"tegral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Internal utility function for createIntegral() that creates the actual integral object. ; Definition at line 588 of file RooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3903 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:91010,Deployability,integrat,integration,91010,"tegral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Internal utility function for createIntegral() that creates the actual integral object. ; Definition at line 588 of file RooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3903 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:91672,Deployability,integrat,integration,91672,"file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Internal utility function for createIntegral() that creates the actual integral object. ; Definition at line 588 of file RooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3903 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:92914,Deployability,integrat,integrated,92914,"Vars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integrals ; [in]condObsConditional observables, which are not integrated for normalisation, even if they are in dependentVars or projectedVars. . ReturnsA pointer to the newly created object, or zero in case of an error. The caller is responsible for deleting the cloneSet (which includes the returned projection object). ; Definition at line 842 of file RooAbsReal.cxx. ◆ createPlotProjection() [2/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; depVars, . const RooArgSet & ; projVars, . RooArgSet *& ; cloneSet . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; createPlotProjection() ; Definition at line 813 of file RooAbsReal.cxx. ◆ createProfile(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createProfile ; (; const RooArgSet & ; paramsOfInterest). virtual . Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ; The nuisance parameters are defined as all parameters of the function except the s",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:94960,Deployability,integrat,integration,94960,"bsReal.cxx. ◆ createRunningIntegral() [1/2]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3782 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the us",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95154,Deployability,integrat,integrates,95154,"ooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3782 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95179,Deployability,integrat,integrates,95179,"ooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3782 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95307,Deployability,integrat,integration,95307,"(; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95531,Deployability,integrat,integration,95531,"(; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95664,Deployability,integrat,integrates,95664,"(; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95794,Deployability,integrat,integration,95794,"he running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of int",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:96123,Deployability,integrat,integrate,96123," name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . ScanNum() Apply scanning technique if cdf integral involves numeric integration . ScanAll() Always apply scanning technique . ScanNone() Never apply scanning technique . PyROOT; The RooAbsReal::creat",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:96649,Deployability,integrat,integration,96649,"gInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . ScanNum() Apply scanning technique if cdf integral involves numeric integration . ScanAll() Always apply scanning technique . ScanNone() Never apply scanning technique . PyROOT; The RooAbsReal::createRunningIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 3826 of file RooAbsReal.cxx. ◆ createScanRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3886 of file RooAbsReal.cxx",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:96911,Deployability,integrat,integration,96911,"parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . ScanNum() Apply scanning technique if cdf integral involves numeric integration . ScanAll() Always apply scanning technique . ScanNone() Never apply scanning technique . PyROOT; The RooAbsReal::createRunningIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 3826 of file RooAbsReal.cxx. ◆ createScanRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3886 of file RooAbsReal.cxx. ◆ DeclFileName(). static const char * RooAbsReal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 558 of file RooAbsReal.h. ◆ defaultErrorLevel(). virtual double RooAbsReal::defaultErrorLevel ; (; ); ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:98255,Deployability,integrat,integration,98255,"wningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3886 of file RooAbsReal.cxx. ◆ DeclFileName(). static const char * RooAbsReal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 558 of file RooAbsReal.h. ◆ defaultErrorLevel(). virtual double RooAbsReal::defaultErrorLevel ; (; ); const. inlinevirtual . Reimplemented in RooAddition, RooChi2Var, RooFit::TestStatistics::RooRealL, RooFormulaVar, RooFit::Experimental::RooFuncWrapper, RooNLLVar, RooXYChi2Var, and ProgressMonitor.; Definition at line 248 of file RooAbsReal.h. ◆ defaultIntegratorConfig(). RooNumIntConfig * RooAbsReal::defaultIntegratorConfig ; (; ). static . Returns the default numeric integration configuration for all RooAbsReals. ; Definition at line 3354 of file RooAbsReal.cxx. ◆ derivative() [1/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . const RooArgSet & ; normSet, . Int_t ; order, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 4075 of file RooAbsReal.cxx. ◆ derivative() [2/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . Int_t ; order = 1, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 4063 of file RooAbsReal.cxx. ◆ doEval(). void RooAbsReal::doEval ; (; RooFit::EvalContext & ; ctx); const. virtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented in RooStats::HistFactory::FlexibleInterpVar, ParamHistFunc, PiecewiseInterpolation, RooArgusBG, RooBernstein, RooBifurGauss, RooBM",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:98267,Deployability,configurat,configuration,98267,"wningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3886 of file RooAbsReal.cxx. ◆ DeclFileName(). static const char * RooAbsReal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 558 of file RooAbsReal.h. ◆ defaultErrorLevel(). virtual double RooAbsReal::defaultErrorLevel ; (; ); const. inlinevirtual . Reimplemented in RooAddition, RooChi2Var, RooFit::TestStatistics::RooRealL, RooFormulaVar, RooFit::Experimental::RooFuncWrapper, RooNLLVar, RooXYChi2Var, and ProgressMonitor.; Definition at line 248 of file RooAbsReal.h. ◆ defaultIntegratorConfig(). RooNumIntConfig * RooAbsReal::defaultIntegratorConfig ; (; ). static . Returns the default numeric integration configuration for all RooAbsReals. ; Definition at line 3354 of file RooAbsReal.cxx. ◆ derivative() [1/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . const RooArgSet & ; normSet, . Int_t ; order, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 4075 of file RooAbsReal.cxx. ◆ derivative() [2/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . Int_t ; order = 1, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 4063 of file RooAbsReal.cxx. ◆ doEval(). void RooAbsReal::doEval ; (; RooFit::EvalContext & ; ctx); const. virtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented in RooStats::HistFactory::FlexibleInterpVar, ParamHistFunc, PiecewiseInterpolation, RooArgusBG, RooBernstein, RooBifurGauss, RooBM",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:104304,Deployability,integrat,integrating,104304,"plied by the number of expected events in each bin; An optional scaling by a given scaleFactor can be performed. Returns a pointer to the input RooDataHist, or zero in case of an error.; If correctForBinSize is true the RooDataHist is filled with the functions density (function value times the bin volume) rather than function value.; If showProgress is true a process indicator is printed on stdout in steps of one percent, which is mostly useful for the sampling of expensive functions such as likelihoods ; Definition at line 1152 of file RooAbsReal.cxx. ◆ fillHistogram(). TH1 * RooAbsReal::fillHistogram ; (; TH1 * ; hist, . const RooArgList & ; plotVars, . double ; scaleFactor = 1, . const RooArgSet * ; projectedVars = nullptr, . bool ; scaleForDensity = true, . const RooArgSet * ; condObs = nullptr, . bool ; setError = true . ); const. Fill the ROOT histogram 'hist' with values sampled from this function at the bin centers. ; Our value is calculated by first integrating out any variables in projectedVars and then scaling the result by scaleFactor. Returns a pointer to the input histogram, or zero in case of an error. The input histogram can be any TH1 subclass, and therefore of arbitrary dimension. Variables are matched with the (x,y,...) dimensions of the input histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 975 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs,",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:105592,Deployability,integrat,integration,105592," histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 975 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 699 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4127 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPd",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:105664,Deployability,integrat,integrated,105664," histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 975 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 699 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4127 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPd",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:105857,Deployability,integrat,integrated,105857,"her than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 975 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 699 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4127 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPdf components that have the default 'automatic' interpretation of coefficients (i.e. the interpretation is defined by the observables passed to getVal()). If force is ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:108900,Deployability,integrat,integration,108900,"ooRealSumPdf, RooAbsAnaConvPdf, RooAbsCachedPdf, RooBinSamplingPdf, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3963 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralW",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:108996,Deployability,integrat,integrate,108996,"rojectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3963 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullpt",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:109068,Deployability,integrat,integration,109068,"rojectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3963 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullpt",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:109080,Deployability,configurat,configuration,109080,"rojectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3963 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullpt",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:109101,Deployability,integrat,integration,109101,"tual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3963 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. virtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be a",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111049,Deployability,integrat,integration,111049,"gral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to em",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111061,Deployability,configurat,configuration,111061,"gral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to em",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111116,Deployability,configurat,configuration,111116,"rator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFun",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111168,Deployability,configurat,configuration,111168,"rator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFun",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111217,Deployability,configurat,configuration,111217,"rator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFun",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111434,Deployability,integrat,integration,111434,"izedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3468 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111446,Deployability,configurat,configuration,111446,"izedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3468 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111501,Deployability,configurat,configuration,111501,"oExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3468 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 404 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSe",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111553,Deployability,configurat,configuration,111553,"oExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3468 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 404 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSe",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111602,Deployability,configurat,configuration,111602,"oExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3468 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 404 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSe",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:115043,Deployability,integrat,integrated,115043," inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealMPFE, RooRealVar, RooResolutionModel, RooMomentMorph, RooMomentMorphFunc, RooMomentMorphFuncND, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddPdf, RooErrorVar, and RooRealIntegral.; Definition at line 281 of file RooAbsReal.cxx. ◆ globalSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 3051 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Rei",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:116796,Deployability,integrat,integrated,116796,"balSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 3051 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 395 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 394 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 169 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::integralNameSuffix ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const char * ; rangeName = nullptr, . bool ; omitEmpty = false . ); const. protected . Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ; Definition at line 753 of file RooAbsReal.cxx. ◆ IsA(). TClass * RooAbsReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, RooGamma, RooGaussian",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:116854,Deployability,integrat,integration,116854,"balSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 3051 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 395 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 394 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 169 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::integralNameSuffix ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const char * ; rangeName = nullptr, . bool ; omitEmpty = false . ); const. protected . Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ; Definition at line 753 of file RooAbsReal.cxx. ◆ IsA(). TClass * RooAbsReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, RooGamma, RooGaussian",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:127262,Deployability,integrat,integrated,127262,"t * RooAbsReal::mean ; (; RooRealVar & ; obs). inline . Definition at line 366 of file RooAbsReal.h. ◆ mean() [2/2]. RooAbsMoment * RooAbsReal::mean ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 367 of file RooAbsReal.h. ◆ minTrialSamples(). virtual Int_t RooAbsReal::minTrialSamples ; (; const RooArgSet & ; ); const. inlinevirtual . Reimplemented in RooBinSamplingPdf, and RooWrapperPdf.; Definition at line 241 of file RooAbsReal.h. ◆ moment() [1/2]. RooAbsMoment * RooAbsReal::moment ; (; RooRealVar & ; obs, . const RooArgSet & ; normObs, . Int_t ; order, . bool ; central, . bool ; takeRoot, . bool ; intNormObs . ). Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ; Parameters. [in]obsObservable to calculate the moments for ; [in]normObsNormalise w.r.t. these observables ; [in]orderOrder of the moment ; [in]centralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root ; [in]intNormObsIf true, the moment of the function integrated over all normalization observables is returned. . Definition at line 4110 of file RooAbsReal.cxx. ◆ moment() [2/2]. RooAbsMoment * RooAbsReal::moment ; (; RooRealVar & ; obs, . Int_t ; order, . bool ; central, . bool ; takeRoot . ). Return function representing moment of function of given order. ; Parameters. [in]obsObservable to calculate the moments for ; [in]orderOrder of the moment ; [in]centralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root . Definition at line 4091 of file RooAbsReal.cxx. ◆ numEvalErrorItems(). Int_t RooAbsReal::numEvalErrorItems ; (; ). static . Definition at line 300 of file RooAbsReal.cxx. ◆ numEvalErrors(). Int_t RooAbsReal::numEvalErrors ; (; ). static . Return the number of logged evaluation errors since the last clearing. ; Definition at line 3701 of file RooAbsReal.cxx. ◆ off",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:129837,Deployability,integrat,integrated,129837,"(; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Definition at line 2284 of file RooAbsReal.cxx. ◆ plotOn() [1/3]. RooAbsReal::plotOn ; (; RooPlot * ; frame, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {}, . const RooCmdArg & ; arg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*,",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:130332,Deployability,integrat,integrating,130332,"rg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});. Project(const RooArgSet& set) Override default projection behaviour by projecting over observables given in the set, ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d)",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:130660,Deployability,integrat,integrating,130660,"g4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});. Project(const RooArgSet& set) Override default projection behaviour by projecting over observables given in the set, ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d) Override default projection technique (integration). For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) A",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:131380,Deployability,integrat,integration,131380,"ese. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});. Project(const RooArgSet& set) Override default projection behaviour by projecting over observables given in the set, ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d) Override default projection technique (integration). For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging. ProjectionRange(const char* rn) Override default range of projection integrals to a different range specified by given range name. This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per curve. A negative value suppress output completely, a zero value will only print the error count per p.d.f co",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:136789,Deployability,integrat,integration,136789,"form better in the presence of strong correlations, but may take (much) longer to calculate. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma' . Details on error band visualization; VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter: See alsoplotOnWithErrorBand(). PyROOT; The RooAbsReal::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented in RooSimultaneous, RooAbsPdf, and RooSimultaneous.; Definition at line 1639 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface to modify the default projection behaviour. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1931 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; f",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:147965,Deployability,integrat,integration,147965,"rg.; Definition at line 568 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAbsTestStatistic, RooAddition, and RooConstraintSum.; Definition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:147977,Deployability,configurat,configuration,147977,"rg.; Definition at line 568 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAbsTestStatistic, RooAddition, and RooConstraintSum.; Definition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:148192,Deployability,integrat,integrator,148192,"ition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:148203,Deployability,configurat,configuration,148203,"ition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:148236,Deployability,integrat,integration,148236,"ition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:148248,Deployability,configurat,configuration,148248,"ition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149429,Deployability,integrat,integrator,149429,"inition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1B",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149440,Deployability,configurat,configuration,149440,"inition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1B",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149511,Deployability,configurat,configuration,149511,"Real::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149746,Deployability,integrat,integrator,149746,"verrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149757,Deployability,configurat,configuration,149757,"verrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149828,Deployability,configurat,configuration,149828,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149938,Deployability,integrat,integrator,149938,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149949,Deployability,configurat,configuration,149949,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149975,Deployability,install,installed,149975,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:150000,Deployability,configurat,configuration,150000,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:155081,Deployability,integrat,integration,155081,"Binding. friend class RooRealBinding. friend . Definition at line 408 of file RooAbsReal.h. ◆ RooRealSumFunc. friend class RooRealSumFunc. friend . Definition at line 410 of file RooAbsReal.h. ◆ RooRealSumPdf. friend class RooRealSumPdf. friend . Definition at line 409 of file RooAbsReal.h. ◆ RooVectorDataStore. friend class RooVectorDataStore. friend . Definition at line 407 of file RooAbsReal.h. Member Data Documentation. ◆ _evalErrorCount. Int_t RooAbsReal::_evalErrorCount = 0. staticprotected . Definition at line 554 of file RooAbsReal.h. ◆ _evalErrorList. std::map< const RooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > > RooAbsReal::_evalErrorList. staticprotected . Definition at line 553 of file RooAbsReal.h. ◆ _evalErrorMode. RooAbsReal::ErrorLoggingMode RooAbsReal::_evalErrorMode = RooAbsReal::PrintErrors. staticprotected . Definition at line 552 of file RooAbsReal.h. ◆ _forceNumInt. bool RooAbsReal::_forceNumInt = false. protected . Force numerical integration if flag set. ; Definition at line 546 of file RooAbsReal.h. ◆ _globalSelectComp. bool RooAbsReal::_globalSelectComp = false. staticprotected . Definition at line 555 of file RooAbsReal.h. ◆ _hideOffset. bool RooAbsReal::_hideOffset = true. staticprotected . Offset hiding flag. ; Definition at line 556 of file RooAbsReal.h. ◆ _label. TString RooAbsReal::_label. protected . Plot label for objects value. ; Definition at line 545 of file RooAbsReal.h. ◆ _lastNormSetId. RooFit::UniqueId<RooArgSet>::Value_t RooAbsReal::_lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval. mutableprotected . Component selection flag for RooAbsPdf::plotCompOn. ; ! ; Definition at line 550 of file RooAbsReal.h. ◆ _plotBins. Int_t RooAbsReal::_plotBins = 100. protected . Number of plot bins. ; Definition at line 542 of file RooAbsReal.h. ◆ _plotMax. double RooAbsReal::_plotMax = 0.0. protected . Maximum of plot range. ; Definition at line 541 of file RooAbsReal.h. ◆ _plotMin. double RooAbsReal::_plotMin",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:4825,Energy Efficiency,adapt,adaptor,4825,"(const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:67662,Energy Efficiency,adapt,adaptor,67662,"le RooAbsReal.cxx. ◆ binBoundaries(). std::list< double > * RooAbsReal::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooMomentMorphFunc, RooParamHistFunc, RooAddition, RooAddPdf, RooFormulaVar, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooRealSumFunc, RooRealSumPdf, RooBinSamplingPdf, RooBinWidthFunction, RooLinearCombination, RooWrapperPdf, and PdfWrapper.; Definition at line 3640 of file RooAbsReal.cxx. ◆ bindVars(). RooFit::OwningPtr< RooAbsFunc > RooAbsReal::bindVars ; (; const RooArgSet & ; vars, . const RooArgSet * ; nset = nullptr, . bool ; clipInvalid = false . ); const. Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ; For example, calling bindVars({x1,x3}) on an object F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the current values of x2 and x4. The caller takes ownership of the returned adaptor. ; Definition at line 3065 of file RooAbsReal.cxx. ◆ buildCallToAnalyticIntegral(). std::string RooAbsReal::buildCallToAnalyticIntegral ; (; Int_t ; code, . const char * ; rangeName, . RooFit::Detail::CodeSquashContext & ; ctx . ); const. virtual . This function defines the analytical integral translation for the class. ; Parameters. [in]codeThe code that decides the integrands. ; [in]rangeNameName of the normalization range. ; [in]ctxAn object to manage auxiliary information for code-squashing. ReturnsThe representative code string of the integral for the given object. ; Reimplemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLa",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:67937,Energy Efficiency,adapt,adaptor,67937,"bs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooMomentMorphFunc, RooParamHistFunc, RooAddition, RooAddPdf, RooFormulaVar, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooRealSumFunc, RooRealSumPdf, RooBinSamplingPdf, RooBinWidthFunction, RooLinearCombination, RooWrapperPdf, and PdfWrapper.; Definition at line 3640 of file RooAbsReal.cxx. ◆ bindVars(). RooFit::OwningPtr< RooAbsFunc > RooAbsReal::bindVars ; (; const RooArgSet & ; vars, . const RooArgSet * ; nset = nullptr, . bool ; clipInvalid = false . ); const. Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ; For example, calling bindVars({x1,x3}) on an object F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the current values of x2 and x4. The caller takes ownership of the returned adaptor. ; Definition at line 3065 of file RooAbsReal.cxx. ◆ buildCallToAnalyticIntegral(). std::string RooAbsReal::buildCallToAnalyticIntegral ; (; Int_t ; code, . const char * ; rangeName, . RooFit::Detail::CodeSquashContext & ; ctx . ); const. virtual . This function defines the analytical integral translation for the class. ; Parameters. [in]codeThe code that decides the integrands. ; [in]rangeNameName of the normalization range. ; [in]ctxAn object to manage auxiliary information for code-squashing. ReturnsThe representative code string of the integral for the given object. ; Reimplemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLandau, RooPolynomial, RooUniform, RooEfficiency, and RooPolyVar.; Definition at line 4501 of file RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const Roo",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:71647,Energy Efficiency,consumption,consumption,71647,"e fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4181 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbs",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:75972,Energy Efficiency,consumption,consumption,75972," have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4312 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:78133,Energy Efficiency,consumption,consumption,78133," have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:110368,Energy Efficiency,efficient,efficient,110368,"al, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. virtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111998,Energy Efficiency,efficient,efficiently,111998,"ion used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3468 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 404 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSet & ; nset = {} . ); const. Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ; Estimates the uncertainty \(\sigma_f(x;\theta)\) on a function \(f(x;\theta)\) represented by this RooAbsReal. Here, \(\theta\) is a vector of parameters with uncertainties \(\sigma_\theta\), and \(x\) are usually observables. The uncertainty is estimated by linearly propagating the parameter uncertainties using the correlation matrix from a fit result.; The square of ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:773,Integrability,interface,interface,773,". ROOT: RooAbsReal Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Types |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Static Protected Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Friends |; List of all members ; RooAbsReal Class ReferenceabstractRooFit » RooFit Core. ; Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. ; Implementation of RooAbsReal may be derived, thus no interface is provided to modify the contents. PyROOT; Some member functions of RooAbsReal that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsReal::plotOn, RooAbsReal::createHistogram, RooAbsReal::chi2FitTo, RooAbsReal::createChi2, RooAbsReal::createRunningIntegral and RooAbsReal::createIntegral For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; var.plotOn(frame, ROOT.RooFit.Components(""background"")); ; # With keyword arguments:; var.plotOn(frame, Components=""background""). Definition at line 59 of file RooAbsReal.h. Classes; class  EvalError;  ; class  EvalErrorContext;  Context to temporarily change the error logging mode as long as the context is alive. More...;  ; struct  GlobalSelectComponentRAII;  ; struct  PlotOpt;  ; class  Ref;  A RooAbsReal::Ref can be constructed from a RooAbsReal& or a double that will be implicitly converted to a RooConstVar&. More...;  . Public Types; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEven",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:4815,Integrability,interface,interface,4815,"(const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:9026,Integrability,integrat,integration,9026,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:9987,Integrability,integrat,integration,9987,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:10208,Integrability,depend,dependentVars,10208,"nction over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooArgSet &nset={});  Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooCmdArg &",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:14582,Integrability,integrat,integration,14582,"on tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:14709,Integrability,integrat,integration,14709," void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:16186,Integrability,message,message,16186,"s parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:16263,Integrability,message,message,16263,"s parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19008,Integrability,integrat,integration,19008,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &o",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19141,Integrability,integrat,integrator,19141,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19185,Integrability,integrat,integration,19185,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19607,Integrability,integrat,integrator,19607,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollec",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19748,Integrability,integrat,integrator,19748,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:21228,Integrability,depend,dependent,21228," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained T",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:21435,Integrability,depend,dependent,21435," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileCon",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:22602,Integrability,depend,dependsOn,22602,"can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:22720,Integrability,depend,depend,22720,"can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:22782,Integrability,depend,dependsOn,22782,"lone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:22911,Integrability,depend,depend,22911,"lone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:22991,Integrability,depend,dependsOn,22991,"st override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:23107,Integrability,depend,depend,23107,"st override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:23179,Integrability,depend,dependsOnValue,23179,"td::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:23290,Integrability,depend,depends,23290,"td::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:23359,Integrability,depend,dependsOnValue,23359,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:23481,Integrability,depend,depends,23481,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:24468,Integrability,depend,dependents,24468," bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable lis",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:24658,Integrability,depend,depends,24658,"me) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set o",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:25385,Integrability,depend,dependents,25385,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:27408,Integrability,depend,depend,27408,"connected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; v",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:27814,Integrability,depend,dependents,27814,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:28020,Integrability,depend,dependents,28020,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:29258,Integrability,interface,interface,29258,"y of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os, const char *ind="""");  Hook function interface for object to insert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (co",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:32807,Integrability,depend,dependentOverlaps,32807,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:32891,Integrability,depend,dependentOverlaps,32891,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:35342,Integrability,integrat,integrated,35342," *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all leaf nodes of the arg tree, starting with ourself as top node. ;  ; void branchNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all branch nodes of the arg tree starting with ourself as top node. ;  ; void treeNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool doBranch=true, bool doLeaf=true, bool valueOnly=false, bool recurseNonDerived=false) const;  Fill supplied list with nodes of the arg tree, following all server links, starting with ourself as top node. ;  ; virtual bool isFundamental () const;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:36199,Integrability,depend,depend,36199,"tal-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old s",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:36896,Integrability,depend,depend,36896,"Change=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:42373,Integrability,message,message,42373,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:42914,Integrability,message,message,42914,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:43904,Integrability,message,message,43904,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:46998,Integrability,message,message,46998,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption s",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:47371,Integrability,message,message,47371," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char *",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:48501,Integrability,message,messages,48501,"_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error o",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:48638,Integrability,integrat,integration,48638,"onst;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:48953,Integrability,message,message,48953,"ents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:49044,Integrability,message,messages,49044,"ents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:52407,Integrability,integrat,integrated,52407,"irty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:52465,Integrability,integrat,integration,52465,"irty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:55649,Integrability,wrap,wrapper,55649,"bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:58474,Integrability,integrat,integration,58474," void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . Protected Attributes; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _d",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:67652,Integrability,interface,interface,67652,"le RooAbsReal.cxx. ◆ binBoundaries(). std::list< double > * RooAbsReal::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooMomentMorphFunc, RooParamHistFunc, RooAddition, RooAddPdf, RooFormulaVar, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooRealSumFunc, RooRealSumPdf, RooBinSamplingPdf, RooBinWidthFunction, RooLinearCombination, RooWrapperPdf, and PdfWrapper.; Definition at line 3640 of file RooAbsReal.cxx. ◆ bindVars(). RooFit::OwningPtr< RooAbsFunc > RooAbsReal::bindVars ; (; const RooArgSet & ; vars, . const RooArgSet * ; nset = nullptr, . bool ; clipInvalid = false . ); const. Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ; For example, calling bindVars({x1,x3}) on an object F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the current values of x2 and x4. The caller takes ownership of the returned adaptor. ; Definition at line 3065 of file RooAbsReal.cxx. ◆ buildCallToAnalyticIntegral(). std::string RooAbsReal::buildCallToAnalyticIntegral ; (; Int_t ; code, . const char * ; rangeName, . RooFit::Detail::CodeSquashContext & ; ctx . ); const. virtual . This function defines the analytical integral translation for the class. ; Parameters. [in]codeThe code that decides the integrands. ; [in]rangeNameName of the normalization range. ; [in]ctxAn object to manage auxiliary information for code-squashing. ReturnsThe representative code string of the integral for the given object. ; Reimplemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLa",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:69993,Integrability,message,messages,69993,"t RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedur",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:71798,Integrability,message,messages,71798,"ool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4181 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of th",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:72193,Integrability,message,messages,72193,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . Definition at line 4181 of file RooAbsReal.cxx. ◆ chi2FitTo() [2/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \( n_\text{observed} \). If for a given bin \( n_\text{expected} \) is lower than the \( n_\text{observed} \), the lower uncertainty is taken (e",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:76123,Integrability,message,messages,76123,"n column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4312 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y v",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:76518,Integrability,message,messages,76518,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4312 of file RooAbsReal.cxx. ◆ chi2FitTo() [4/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooLinkedList & ; cmdList . ). virtual . Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ; The y values can either be the event weights, or can be another column designated by the YVar() argument. The y value must have errors defined for the \( \chi^2 \) to be well defined. Options to control construction of the chi-square . YVar(RooRealVar& yvar) Designate given column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bo",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:78284,Integrability,message,messages,78284,"n column in dataset as Y value . Integrate(bool flag) Integrate function over range specified by X errors rather than take value at bin center. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 558 o",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:78679,Integrability,message,messages,78679,"lag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as well . Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 558 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3622 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy th",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:79417,Integrability,message,messages,79417,"lErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 558 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3622 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 3082 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:87830,Integrability,integrat,integration,87830," 1211 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ; Definition at line 211 of file RooAbsReal.h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88266,Integrability,integrat,integration,88266,"set in range named rangeName with integrand normalized over observables in nset. ; Definition at line 211 of file RooAbsReal.h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88460,Integrability,integrat,integrates,88460,".h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const Roo",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88485,Integrability,integrat,integrates,88485,".h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const Roo",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88746,Integrability,integrat,integrated,88746,"in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is aut",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88830,Integrability,integrat,integration,88830,"r any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; No",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:89576,Integrability,integrat,integration,89576,"d is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:89772,Integrability,integrat,integrates,89772,"ain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr<",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:89797,Integrability,integrat,integrates,89797,"ain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr<",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:89901,Integrability,integrat,integrating,89901,"rmed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create int",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:90318,Integrability,integrat,integration,90318,"mdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Inter",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:91010,Integrability,integrat,integration,91010,"tegral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Internal utility function for createIntegral() that creates the actual integral object. ; Definition at line 588 of file RooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3903 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:91672,Integrability,integrat,integration,91672,"file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Internal utility function for createIntegral() that creates the actual integral object. ; Definition at line 588 of file RooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3903 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:91891,Integrability,depend,dependentVars,91891,"geName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Internal utility function for createIntegral() that creates the actual integral object. ; Definition at line 588 of file RooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3903 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integral",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:92485,Integrability,depend,dependentVarsDependent,92485,"t & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3903 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integrals ; [in]condObsConditional observables, which are not integrated for normalisation, even if they are in dependentVars or projectedVars. . ReturnsA pointer to the newly created object, or zero in case of an error. The caller is responsible for deleting the cloneSet (which includes the returned projection object). ; Definition at line 842 of file RooAbsReal.cxx. ◆ createPlotProjection() [2/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; depVars, . const RooArgSet & ; projVars, . RooArgSet *& ; cloneSet . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:92914,Integrability,integrat,integrated,92914,"Vars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integrals ; [in]condObsConditional observables, which are not integrated for normalisation, even if they are in dependentVars or projectedVars. . ReturnsA pointer to the newly created object, or zero in case of an error. The caller is responsible for deleting the cloneSet (which includes the returned projection object). ; Definition at line 842 of file RooAbsReal.cxx. ◆ createPlotProjection() [2/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; depVars, . const RooArgSet & ; projVars, . RooArgSet *& ; cloneSet . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; createPlotProjection() ; Definition at line 813 of file RooAbsReal.cxx. ◆ createProfile(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createProfile ; (; const RooArgSet & ; paramsOfInterest). virtual . Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ; The nuisance parameters are defined as all parameters of the function except the s",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:92964,Integrability,depend,dependentVars,92964,"Vars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integrals ; [in]condObsConditional observables, which are not integrated for normalisation, even if they are in dependentVars or projectedVars. . ReturnsA pointer to the newly created object, or zero in case of an error. The caller is responsible for deleting the cloneSet (which includes the returned projection object). ; Definition at line 842 of file RooAbsReal.cxx. ◆ createPlotProjection() [2/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; depVars, . const RooArgSet & ; projVars, . RooArgSet *& ; cloneSet . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; createPlotProjection() ; Definition at line 813 of file RooAbsReal.cxx. ◆ createProfile(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createProfile ; (; const RooArgSet & ; paramsOfInterest). virtual . Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ; The nuisance parameters are defined as all parameters of the function except the s",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:94960,Integrability,integrat,integration,94960,"bsReal.cxx. ◆ createRunningIntegral() [1/2]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3782 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the us",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95154,Integrability,integrat,integrates,95154,"ooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3782 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95179,Integrability,integrat,integrates,95179,"ooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3782 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95307,Integrability,integrat,integration,95307,"(; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95531,Integrability,integrat,integration,95531,"(; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95664,Integrability,integrat,integrates,95664,"(; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95794,Integrability,integrat,integration,95794,"he running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of int",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:96123,Integrability,integrat,integrate,96123," name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . ScanNum() Apply scanning technique if cdf integral involves numeric integration . ScanAll() Always apply scanning technique . ScanNone() Never apply scanning technique . PyROOT; The RooAbsReal::creat",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:96649,Integrability,integrat,integration,96649,"gInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . ScanNum() Apply scanning technique if cdf integral involves numeric integration . ScanAll() Always apply scanning technique . ScanNone() Never apply scanning technique . PyROOT; The RooAbsReal::createRunningIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 3826 of file RooAbsReal.cxx. ◆ createScanRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3886 of file RooAbsReal.cxx",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:96911,Integrability,integrat,integration,96911,"parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of interpolation applied on numeric cdf . ScanNum() Apply scanning technique if cdf integral involves numeric integration . ScanAll() Always apply scanning technique . ScanNone() Never apply scanning technique . PyROOT; The RooAbsReal::createRunningIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 3826 of file RooAbsReal.cxx. ◆ createScanRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3886 of file RooAbsReal.cxx. ◆ DeclFileName(). static const char * RooAbsReal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 558 of file RooAbsReal.h. ◆ defaultErrorLevel(). virtual double RooAbsReal::defaultErrorLevel ; (; ); ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:98255,Integrability,integrat,integration,98255,"wningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3886 of file RooAbsReal.cxx. ◆ DeclFileName(). static const char * RooAbsReal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 558 of file RooAbsReal.h. ◆ defaultErrorLevel(). virtual double RooAbsReal::defaultErrorLevel ; (; ); const. inlinevirtual . Reimplemented in RooAddition, RooChi2Var, RooFit::TestStatistics::RooRealL, RooFormulaVar, RooFit::Experimental::RooFuncWrapper, RooNLLVar, RooXYChi2Var, and ProgressMonitor.; Definition at line 248 of file RooAbsReal.h. ◆ defaultIntegratorConfig(). RooNumIntConfig * RooAbsReal::defaultIntegratorConfig ; (; ). static . Returns the default numeric integration configuration for all RooAbsReals. ; Definition at line 3354 of file RooAbsReal.cxx. ◆ derivative() [1/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . const RooArgSet & ; normSet, . Int_t ; order, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 4075 of file RooAbsReal.cxx. ◆ derivative() [2/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . Int_t ; order = 1, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 4063 of file RooAbsReal.cxx. ◆ doEval(). void RooAbsReal::doEval ; (; RooFit::EvalContext & ; ctx); const. virtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented in RooStats::HistFactory::FlexibleInterpVar, ParamHistFunc, PiecewiseInterpolation, RooArgusBG, RooBernstein, RooBifurGauss, RooBM",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:104304,Integrability,integrat,integrating,104304,"plied by the number of expected events in each bin; An optional scaling by a given scaleFactor can be performed. Returns a pointer to the input RooDataHist, or zero in case of an error.; If correctForBinSize is true the RooDataHist is filled with the functions density (function value times the bin volume) rather than function value.; If showProgress is true a process indicator is printed on stdout in steps of one percent, which is mostly useful for the sampling of expensive functions such as likelihoods ; Definition at line 1152 of file RooAbsReal.cxx. ◆ fillHistogram(). TH1 * RooAbsReal::fillHistogram ; (; TH1 * ; hist, . const RooArgList & ; plotVars, . double ; scaleFactor = 1, . const RooArgSet * ; projectedVars = nullptr, . bool ; scaleForDensity = true, . const RooArgSet * ; condObs = nullptr, . bool ; setError = true . ); const. Fill the ROOT histogram 'hist' with values sampled from this function at the bin centers. ; Our value is calculated by first integrating out any variables in projectedVars and then scaling the result by scaleFactor. Returns a pointer to the input histogram, or zero in case of an error. The input histogram can be any TH1 subclass, and therefore of arbitrary dimension. Variables are matched with the (x,y,...) dimensions of the input histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 975 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs,",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:105592,Integrability,integrat,integration,105592," histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 975 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 699 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4127 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPd",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:105664,Integrability,integrat,integrated,105664," histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 975 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 699 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4127 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPd",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:105819,Integrability,depend,depend,105819,"her than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 975 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 699 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4127 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPdf components that have the default 'automatic' interpretation of coefficients (i.e. the interpretation is defined by the observables passed to getVal()). If force is ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:105857,Integrability,integrat,integrated,105857,"her than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 975 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 699 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4127 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPdf components that have the default 'automatic' interpretation of coefficients (i.e. the interpretation is defined by the observables passed to getVal()). If force is ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:108879,Integrability,depend,dependents,108879,"ooRealSumPdf, RooAbsAnaConvPdf, RooAbsCachedPdf, RooBinSamplingPdf, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3963 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralW",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:108900,Integrability,integrat,integration,108900,"ooRealSumPdf, RooAbsAnaConvPdf, RooAbsCachedPdf, RooBinSamplingPdf, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3963 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralW",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:108965,Integrability,depend,dependents,108965,"rojectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3963 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullpt",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:108996,Integrability,integrat,integrate,108996,"rojectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3963 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullpt",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:109068,Integrability,integrat,integration,109068,"rojectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3963 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullpt",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:109101,Integrability,integrat,integration,109101,"tual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3963 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. virtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be a",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111049,Integrability,integrat,integration,111049,"gral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to em",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111434,Integrability,integrat,integration,111434,"izedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3468 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:114620,Integrability,depend,depending,114620,"RooAbsReal.cxx. ◆ getTitle(). TString RooAbsReal::getTitle ; (; bool ; appendUnit = false); const. Return this variable's title string. ; If appendUnit is true and this variable has units, also append a string "" (<unit>)"". ; Definition at line 263 of file RooAbsReal.cxx. ◆ getUnit(). const Text_t * RooAbsReal::getUnit ; (; ); const. inline . Definition at line 143 of file RooAbsReal.h. ◆ getVal() [1/2]. double RooAbsReal::getVal ; (; const RooArgSet & ; normalisationSet); const. inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealMPFE, RooRealVar, RooResolutionModel, RooMomentMorph, RooMomentM",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:115043,Integrability,integrat,integrated,115043," inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealMPFE, RooRealVar, RooResolutionModel, RooMomentMorph, RooMomentMorphFunc, RooMomentMorphFuncND, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddPdf, RooErrorVar, and RooRealIntegral.; Definition at line 281 of file RooAbsReal.cxx. ◆ globalSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 3051 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Rei",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:116796,Integrability,integrat,integrated,116796,"balSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 3051 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 395 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 394 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 169 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::integralNameSuffix ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const char * ; rangeName = nullptr, . bool ; omitEmpty = false . ); const. protected . Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ; Definition at line 753 of file RooAbsReal.cxx. ◆ IsA(). TClass * RooAbsReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, RooGamma, RooGaussian",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:116854,Integrability,integrat,integration,116854,"balSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 3051 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 395 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 394 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 169 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::integralNameSuffix ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const char * ; rangeName = nullptr, . bool ; omitEmpty = false . ); const. protected . Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ; Definition at line 753 of file RooAbsReal.cxx. ◆ IsA(). TClass * RooAbsReal::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, RooGamma, RooGaussian",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:121190,Integrability,message,message,121190,"ual bool RooAbsReal::isOffsetting ; (; ); const. inlinevirtual . Reimplemented in RooAbsTestStatistic.; Definition at line 377 of file RooAbsReal.h. ◆ isSelectedComp(). bool RooAbsReal::isSelectedComp ; (; ); const. If true, the current pdf is a selected component (for use in plotting) ; Definition at line 3041 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 452 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 454 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error log",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:121277,Integrability,message,message,121277,".; Definition at line 377 of file RooAbsReal.h. ◆ isSelectedComp(). bool RooAbsReal::isSelectedComp ; (; ); const. If true, the current pdf is a selected component (for use in plotting) ; Definition at line 3041 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 452 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 454 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition a",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:121313,Integrability,rout,routed,121313,"nt pdf is a selected component (for use in plotting) ; Definition at line 3041 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 452 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 454 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . cons",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:121340,Integrability,protocol,protocol,121340,"nt pdf is a selected component (for use in plotting) ; Definition at line 3041 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 452 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 454 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . cons",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:121377,Integrability,message,message,121377,"nt pdf is a selected component (for use in plotting) ; Definition at line 3041 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 452 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 454 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . cons",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:121598,Integrability,message,messages,121598," Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 452 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 454 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Defin",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:121737,Integrability,message,messages,121737," . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 454 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:122442,Integrability,message,message,122442,"uation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2988 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalytic",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:122551,Integrability,message,messages,122551,"al method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2988 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to a",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:123095,Integrability,depend,depend,123095,"immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2988 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to analDeps ; Definition at line 3228 of file RooAbsReal.cxx. ◆ matchArgs() [2/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a, . const RooArgProxy & ; b . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the contents of proxies a,b occur in set 'allDeps' then the arguments held in a,b are copied from allDeps to analDeps ; Definition at line 3245 of file RooAbsReal.cxx. ◆ matchArgs() [3",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:127262,Integrability,integrat,integrated,127262,"t * RooAbsReal::mean ; (; RooRealVar & ; obs). inline . Definition at line 366 of file RooAbsReal.h. ◆ mean() [2/2]. RooAbsMoment * RooAbsReal::mean ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 367 of file RooAbsReal.h. ◆ minTrialSamples(). virtual Int_t RooAbsReal::minTrialSamples ; (; const RooArgSet & ; ); const. inlinevirtual . Reimplemented in RooBinSamplingPdf, and RooWrapperPdf.; Definition at line 241 of file RooAbsReal.h. ◆ moment() [1/2]. RooAbsMoment * RooAbsReal::moment ; (; RooRealVar & ; obs, . const RooArgSet & ; normObs, . Int_t ; order, . bool ; central, . bool ; takeRoot, . bool ; intNormObs . ). Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ; Parameters. [in]obsObservable to calculate the moments for ; [in]normObsNormalise w.r.t. these observables ; [in]orderOrder of the moment ; [in]centralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root ; [in]intNormObsIf true, the moment of the function integrated over all normalization observables is returned. . Definition at line 4110 of file RooAbsReal.cxx. ◆ moment() [2/2]. RooAbsMoment * RooAbsReal::moment ; (; RooRealVar & ; obs, . Int_t ; order, . bool ; central, . bool ; takeRoot . ). Return function representing moment of function of given order. ; Parameters. [in]obsObservable to calculate the moments for ; [in]orderOrder of the moment ; [in]centralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root . Definition at line 4091 of file RooAbsReal.cxx. ◆ numEvalErrorItems(). Int_t RooAbsReal::numEvalErrorItems ; (; ). static . Definition at line 300 of file RooAbsReal.cxx. ◆ numEvalErrors(). Int_t RooAbsReal::numEvalErrors ; (; ). static . Return the number of logged evaluation errors since the last clearing. ; Definition at line 3701 of file RooAbsReal.cxx. ◆ off",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:129837,Integrability,integrat,integrated,129837,"(; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Definition at line 2284 of file RooAbsReal.cxx. ◆ plotOn() [1/3]. RooAbsReal::plotOn ; (; RooPlot * ; frame, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {}, . const RooCmdArg & ; arg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*,",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:130053,Integrability,message,message,130053,"1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {}, . const RooCmdArg & ; arg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slic",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:130332,Integrability,integrat,integrating,130332,"rg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});. Project(const RooArgSet& set) Override default projection behaviour by projecting over observables given in the set, ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d)",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:130660,Integrability,integrat,integrating,130660,"g4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});. Project(const RooArgSet& set) Override default projection behaviour by projecting over observables given in the set, ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d) Override default projection technique (integration). For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) A",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:131380,Integrability,integrat,integration,131380,"ese. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slice({{&tagCategory, ""2tag""}, {&jetCategory, ""3jet""}});. Project(const RooArgSet& set) Override default projection behaviour by projecting over observables given in the set, ignoring the default projection behavior. Advanced use only. ProjWData(const RooAbsData& d) Override default projection technique (integration). For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging. ProjectionRange(const char* rn) Override default range of projection integrals to a different range specified by given range name. This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per curve. A negative value suppress output completely, a zero value will only print the error count per p.d.f co",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:132426,Integrability,message,messages,132426,"For observables present in given dataset projection of PDF is achieved by constructing an average over all observable values in given set. Consult RooFit plotting tutorial for further explanation of meaning & use of this technique. ProjWData(const RooArgSet& s, const RooAbsData& d) As above but only consider subset 's' of observables in dataset 'd' for projection through data averaging. ProjectionRange(const char* rn) Override default range of projection integrals to a different range specified by given range name. This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per curve. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. EvalErrorValue(double value) Set curve points at which (pdf) evaluation errors occur to specified value. By default the function value is plotted. Normalization(double scale, ScaleType code) Adjust normalization by given scale factor. Interpretation of number depends on code:; Relative: relative adjustment factor for a normalized function,; NumEvent: scale to match given number of events.; Raw: relative adjustment factor for an un-normalized function. Name(const chat* name) Give curve specified name in frame. Useful if curve is to be referenced later. Asymmetry(const RooCategory& c) Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than the PDF projection. Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1. ShiftToZero(bool flag) Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when plotting \( -\log(L) \) o",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:132716,Integrability,depend,depends,132716,"data averaging. ProjectionRange(const char* rn) Override default range of projection integrals to a different range specified by given range name. This technique allows you to project a finite width slice in a real-valued observable. NumCPU(Int_t ncpu) Number of CPUs to use simultaneously to calculate data-weighted projections (only in combination with ProjWData). Misc content control . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per curve. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. EvalErrorValue(double value) Set curve points at which (pdf) evaluation errors occur to specified value. By default the function value is plotted. Normalization(double scale, ScaleType code) Adjust normalization by given scale factor. Interpretation of number depends on code:; Relative: relative adjustment factor for a normalized function,; NumEvent: scale to match given number of events.; Raw: relative adjustment factor for an un-normalized function. Name(const chat* name) Give curve specified name in frame. Useful if curve is to be referenced later. Asymmetry(const RooCategory& c) Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than the PDF projection. Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1. ShiftToZero(bool flag) Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when plotting \( -\log(L) \) or \( \chi^2 \) distributions. AddTo(const char* name, double_t wgtSelf, double_t wgtOther) Add constructed projection to already existing curve with given name and relative weight factors . Components(const char* names) When plotting sums of PDFs, plot only the named components (e.g. only the signal of a signal+background model). . Components(const RooArgSet& compSet) As a",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:136789,Integrability,integrat,integration,136789,"form better in the presence of strong correlations, but may take (much) longer to calculate. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma' . Details on error band visualization; VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter: See alsoplotOnWithErrorBand(). PyROOT; The RooAbsReal::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented in RooSimultaneous, RooAbsPdf, and RooSimultaneous.; Definition at line 1639 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface to modify the default projection behaviour. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1931 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; f",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:136992,Integrability,depend,dependents,136992,"lize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma' . Details on error band visualization; VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter: See alsoplotOnWithErrorBand(). PyROOT; The RooAbsReal::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented in RooSimultaneous, RooAbsPdf, and RooSimultaneous.; Definition at line 1639 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface to modify the default projection behaviour. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1931 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() with named arguments. ; Reimplemented in RooAbsPdf, RooSimultaneous, and RooSimultaneous.; Definition at l",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:137430,Integrability,depend,dependents,137430,"taneous.; Definition at line 1639 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface to modify the default projection behaviour. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1931 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() with named arguments. ; Reimplemented in RooAbsPdf, RooSimultaneous, and RooSimultaneous.; Definition at line 1659 of file RooAbsReal.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected components that should be plotted, find all nodes that (in)directly depend on these selected nodes. Mark all directly and indirectly selected nodes as 'selected' using the selectComp() method ; Definition at line 1466 of file RooAbsReal.cxx",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:137525,Integrability,interface,interface,137525," * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface to modify the default projection behaviour. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1931 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() with named arguments. ; Reimplemented in RooAbsPdf, RooSimultaneous, and RooSimultaneous.; Definition at line 1659 of file RooAbsReal.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected components that should be plotted, find all nodes that (in)directly depend on these selected nodes. Mark all directly and indirectly selected nodes as 'selected' using the selectComp() method ; Definition at line 1466 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:138227,Integrability,depend,depend,138227,"eneric real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface to modify the default projection behaviour. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1931 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() with named arguments. ; Reimplemented in RooAbsPdf, RooSimultaneous, and RooSimultaneous.; Definition at line 1659 of file RooAbsReal.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected components that should be plotted, find all nodes that (in)directly depend on these selected nodes. Mark all directly and indirectly selected nodes as 'selected' using the selectComp() method ; Definition at line 1466 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ; fr, . double ; Z, . const RooArgSet * ; params, . const RooLinkedList & ; argList, . bool ; linMethod . ); const. protected . Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ; Parameters. [in]frameRooPlot to plot on ; [in]frThe RooFitResult, where errors can be extracted ; [in]ZThe desired significance (width) of the error band ; [in]paramsIf non-zero, consider only the subset of the parameters in fr for the error evaluation ; [in]argListOptional RooCmdArg that can be applied to a regular plotOn() operation ; [in]linMethodBy default (linMethod=true), a linearized error is shown. . ReturnsThe RooPlot the",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:143372,Integrability,message,messages,143372,"id RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3770 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3662 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ;",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:143426,Integrability,message,message,143426,"deredObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3770 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3662 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGe",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:144830,Integrability,inject,inject,144830,"ar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 424 of file RooAbsReal.cxx. ◆ redirectServersHook(). bool RooAbsReal::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . Function that is called at the end of redirectServers(). ; Can be overloaded to inject some class-dependent behavior after server redirection, e.g. resetting of caches. The return value is meant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooAbsTestStatistic, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, and RooProjectedPdf.; Definition at line 4550 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 384 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed f",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:144848,Integrability,depend,dependent,144848,"ar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 424 of file RooAbsReal.cxx. ◆ redirectServersHook(). bool RooAbsReal::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . Function that is called at the end of redirectServers(). ; Can be overloaded to inject some class-dependent behavior after server redirection, e.g. resetting of caches. The return value is meant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooAbsTestStatistic, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, and RooProjectedPdf.; Definition at line 4550 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 384 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed f",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:145887,Integrability,depend,depends,145887,"eant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooAbsTestStatistic, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, and RooProjectedPdf.; Definition at line 4550 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 384 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooAddModel, RooAddPdf, and RooSimultaneous.; Definition at line 3442 of file RooAbsReal.cxx. ◆ selectNormalizationRange(). void RooAbsReal::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given normalization range to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooBernstein, RooChebychev, RooAddModel, RooAddPdf, RooProdPdf, and RooSimultaneous.; Definition at line 3455 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the d",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:146355,Integrability,depend,depends,146355,"df.; Definition at line 4550 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 384 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooAddModel, RooAddPdf, and RooSimultaneous.; Definition at line 3442 of file RooAbsReal.cxx. ◆ selectNormalizationRange(). void RooAbsReal::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given normalization range to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooBernstein, RooChebychev, RooAddModel, RooAddPdf, RooProdPdf, and RooSimultaneous.; Definition at line 3455 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 568 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAbsTestStatistic, RooAddition, and RooConstraintSum.; Definition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Optio",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:147965,Integrability,integrat,integration,147965,"rg.; Definition at line 568 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAbsTestStatistic, RooAddition, and RooConstraintSum.; Definition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:148192,Integrability,integrat,integrator,148192,"ition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:148236,Integrability,integrat,integration,148236,"ition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149429,Integrability,integrat,integrator,149429,"inition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1B",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149746,Integrability,integrat,integrator,149746,"verrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149938,Integrability,integrat,integrator,149938,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:153000,Integrability,wrap,wrapper,153000,"earCombination, RooLinearVar, RooMoment, RooMultiVarGaussian, RooNLLVar, RooNumCdf, RooNumConvolution, RooNumConvPdf, RooNumRunningInt, RooPolyFunc, RooPolyVar, RooProdPdf, RooProduct, RooProfileLL, RooProjectedPdf, RooPullVar, RooRangeBoolean, RooRatio, RooRealIntegral, RooRealMPFE, RooRealSumFunc, RooRealSumPdf, RooRealVar, RooRecursiveFraction, RooResolutionModel, RooSecondMoment, RooSimultaneous, RooTruthModel, RooWrapperPdf, RooXYChi2Var, RooLegendre, RooNonCentralChiSquare, and RooSpHarmonic. ◆ StreamerNVirtual(). void RooAbsReal::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 558 of file RooAbsReal.h. ◆ syncCache(). void RooAbsReal::syncCache ; (; const RooArgSet * ; set = nullptr). inlineoverrideprotectedvirtual . Implements RooAbsArg.; Reimplemented in RooErrorVar.; Definition at line 463 of file RooAbsReal.h. ◆ traceEval(). double RooAbsReal::traceEval ; (; const RooArgSet * ; set); const. protected . Calculate current value of object, with error tracing wrapper. ; Definition at line 317 of file RooAbsReal.cxx. ◆ writeToStream(). void RooAbsReal::writeToStream ; (; std::ostream & ; os, . bool ; compact . ); const. overridevirtual . Write object contents to stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooConstVar, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 434 of file RooAbsReal.cxx. Friends And Related Symbol Documentation. ◆ AddCacheElem. friend class AddCacheElem. friend . Definition at line 414 of file RooAbsReal.h. ◆ BatchInterfaceAccessor. friend class BatchInterfaceAccessor. friend . Definition at line 406 of file RooAbsReal.h. ◆ RooAddHelpers. friend class RooAddHelpers. friend . Definition at line 411 of file RooAbsReal.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 413 of file RooAbsReal.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 412 of file RooAbsReal.h. ◆ RooFit::Eva",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:155081,Integrability,integrat,integration,155081,"Binding. friend class RooRealBinding. friend . Definition at line 408 of file RooAbsReal.h. ◆ RooRealSumFunc. friend class RooRealSumFunc. friend . Definition at line 410 of file RooAbsReal.h. ◆ RooRealSumPdf. friend class RooRealSumPdf. friend . Definition at line 409 of file RooAbsReal.h. ◆ RooVectorDataStore. friend class RooVectorDataStore. friend . Definition at line 407 of file RooAbsReal.h. Member Data Documentation. ◆ _evalErrorCount. Int_t RooAbsReal::_evalErrorCount = 0. staticprotected . Definition at line 554 of file RooAbsReal.h. ◆ _evalErrorList. std::map< const RooAbsArg *, std::pair< std::string, std::list< RooAbsReal::EvalError > > > RooAbsReal::_evalErrorList. staticprotected . Definition at line 553 of file RooAbsReal.h. ◆ _evalErrorMode. RooAbsReal::ErrorLoggingMode RooAbsReal::_evalErrorMode = RooAbsReal::PrintErrors. staticprotected . Definition at line 552 of file RooAbsReal.h. ◆ _forceNumInt. bool RooAbsReal::_forceNumInt = false. protected . Force numerical integration if flag set. ; Definition at line 546 of file RooAbsReal.h. ◆ _globalSelectComp. bool RooAbsReal::_globalSelectComp = false. staticprotected . Definition at line 555 of file RooAbsReal.h. ◆ _hideOffset. bool RooAbsReal::_hideOffset = true. staticprotected . Offset hiding flag. ; Definition at line 556 of file RooAbsReal.h. ◆ _label. TString RooAbsReal::_label. protected . Plot label for objects value. ; Definition at line 545 of file RooAbsReal.h. ◆ _lastNormSetId. RooFit::UniqueId<RooArgSet>::Value_t RooAbsReal::_lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval. mutableprotected . Component selection flag for RooAbsPdf::plotCompOn. ; ! ; Definition at line 550 of file RooAbsReal.h. ◆ _plotBins. Int_t RooAbsReal::_plotBins = 100. protected . Number of plot bins. ; Definition at line 542 of file RooAbsReal.h. ◆ _plotMax. double RooAbsReal::_plotMax = 0.0. protected . Maximum of plot range. ; Definition at line 541 of file RooAbsReal.h. ◆ _plotMin. double RooAbsReal::_plotMin",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:2074,Modifiability,inherit,inherited,2074,"oCmdArg:; var.plotOn(frame, ROOT.RooFit.Components(""background"")); ; # With keyword arguments:; var.plotOn(frame, Components=""background""). Definition at line 59 of file RooAbsReal.h. Classes; class  EvalError;  ; class  EvalErrorContext;  Context to temporarily change the error logging mode as long as the context is alive. More...;  ; struct  GlobalSelectComponentRAII;  ; struct  PlotOpt;  ; class  Ref;  A RooAbsReal::Ref can be constructed from a RooAbsReal& or a double that will be implicitly converted to a RooConstVar&. More...;  . Public Types; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClas",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:2484,Modifiability,inherit,inherited,2484,"oCmdArg:; var.plotOn(frame, ROOT.RooFit.Components(""background"")); ; # With keyword arguments:; var.plotOn(frame, Components=""background""). Definition at line 59 of file RooAbsReal.h. Classes; class  EvalError;  ; class  EvalErrorContext;  Context to temporarily change the error logging mode as long as the context is alive. More...;  ; struct  GlobalSelectComponentRAII;  ; struct  PlotOpt;  ; class  Ref;  A RooAbsReal::Ref can be constructed from a RooAbsReal& or a double that will be implicitly converted to a RooConstVar&. More...;  . Public Types; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClas",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:3122,Modifiability,inherit,inherited,3122,"ctivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  . Public Member Functions;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implemen",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:4825,Modifiability,adapt,adaptor,4825,"(const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:4872,Modifiability,variab,variables,4872,"(const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; virtual double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual std::list< double > * binBoundaries (RooAbsRealLValue &obs, double xlo, double xhi) const;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:6552,Modifiability,variab,variable,6552,"2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooLinkedList &cmdList);  Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create a \( \chi^2 \) variable from a histogram and this function. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataHist &data, const RooLinkedList &cmdList);  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataSet &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create a \( \chi^2 \) from a series of x and y values stored in a dataset. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataSet &data, const RooLinkedList &cmdList);  See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:8233,Modifiability,variab,variables,8233,"inkedList &cmdList);  See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=nullptr) const override;  Create a RooRealVar fundamental object with our properties. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nu",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:8996,Modifiability,config,configuration,8996,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:9957,Modifiability,config,configuration,9957,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:14594,Modifiability,config,configuration,14594,"on tree headed by this object to the given set of observables. ;  ; virtual bool forceAnalyticalInt (const RooAbsArg &) const;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:14721,Modifiability,config,configuration,14721," void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:14984,Modifiability,variab,variable,14984,"arameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; virtual Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAb",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:15233,Modifiability,variab,variable,15233,"alIntegralWN (RooArgSet &allVars, RooArgSet &analVars, const RooArgSet *normSet, const char *rangeName=nullptr) const;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serve",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19020,Modifiability,config,configuration,19020,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &o",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19117,Modifiability,config,config,19117,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19152,Modifiability,config,configuration,19152,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19197,Modifiability,config,configuration,19197,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constru",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19370,Modifiability,variab,variable,19370,"es for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19618,Modifiability,config,configuration,19618,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollec",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:19759,Modifiability,config,configuration,19759,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:20088,Modifiability,inherit,inherited,20088,"tegration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollectio",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:21157,Modifiability,variab,variable,21157," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained T",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:21192,Modifiability,variab,variables,21192," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained T",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:21364,Modifiability,variab,variable,21364," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileCon",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:21399,Modifiability,variab,variables,21399," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileCon",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:21721,Modifiability,variab,variables,21721,"ponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; virtual bool checkObservables (const RooArgSet *nset) const;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; virtual TObject * clone (const char *newname=nullptr) const =0;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; virtual std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ;",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:24424,Modifiability,variab,variable,24424," bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable lis",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:25341,Modifiability,variab,variable,25341,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:26534,Modifiability,variab,variables,26534," set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (const Text_t *key) const;  Get string attribute mapped under key 'key'. ;  ; bool getTransientAttribute (const Text_t *name) const;  Check if a named attribute is set. ;  ; RooFit::OwningPtr< RooArgSet > getVariables (bool stripDisconnected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:39364,Modifiability,inherit,inherited,39364,"const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () cons",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:40910,Modifiability,inherit,inherited,40910,"ects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:42003,Modifiability,inherit,inheritance,42003,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:44002,Modifiability,inherit,inherits,44002,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:44119,Modifiability,inherit,inherits,44119,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:47678,Modifiability,inherit,inherited,47678,"id SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode (",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:48650,Modifiability,config,configuration,48650,"onst;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:49595,Modifiability,inherit,inherited,49595,");  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static T",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:49841,Modifiability,inherit,inherited,49841,"sages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:50051,Modifiability,inherit,inherited,50051,"sages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:50569,Modifiability,inherit,inherited,50569,"void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:52156,Modifiability,parameteriz,parameterized,52156,"en amount. ;  . Protected Member Functions; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:55691,Modifiability,inherit,inherited,55691," general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtua",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:57834,Modifiability,inherit,inherited,57834," attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . Protected Attributes; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buff",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:58211,Modifiability,inherit,inherited,58211,"alization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . Protected Attributes; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransien",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:59177,Modifiability,inherit,inherited,59177,"sues that cannot be handled in a single ioStreamer pass. ;  . Protected Attributes; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:60453,Modifiability,inherit,inherited,60453," RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:60883,Modifiability,inherit,inherited,60883,"AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooAbsReal.h>. Inheritance diagram for RooAbsReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EvalErrorIter. typedef std::map<constRooAbsArg*,std::pair<std::string,std::lis",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:61052,Modifiability,inherit,inherited,61052,"d by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooAbsReal.h>. Inheritance diagram for RooAbsReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EvalErrorIter. typedef std::map<constRooAbsArg*,std::pair<std::string,std::list<EvalError>>>::const_iterator RooAbsReal::EvalErrorIter. Definition at line 347 of file RooAbsReal.h. ◆ value_type. using RooAbsReal::value_",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:61583,Modifiability,inherit,inherited,61583,"< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooAbsReal.h>. Inheritance diagram for RooAbsReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EvalErrorIter. typedef std::map<constRooAbsArg*,std::pair<std::string,std::list<EvalError>>>::const_iterator RooAbsReal::EvalErrorIter. Definition at line 347 of file RooAbsReal.h. ◆ value_type. using RooAbsReal::value_type = double. Definition at line 61 of file RooAbsReal.h. Member Enumeration Documentation. ◆ ErrorLoggingMode. enum RooAbsReal::ErrorLoggingMode. EnumeratorPrintErrors ; CollectErrors ; CountErrors ; Ignore . Definition at line 321 of file RooAbsReal.h. ◆ ScaleType. enum RooAbsReal::ScaleType. EnumeratorRaw ; Relative ; NumEvent ; RelativeExpected . Definition at line 276 of file RooAbsReal.h. Constructor & Destructor Documentation. ◆ RooAbsReal() [1/4]. RooAbsReal::RooAbsReal ; (; ). coverity[UNINIT_CTOR] Default construct",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:67662,Modifiability,adapt,adaptor,67662,"le RooAbsReal.cxx. ◆ binBoundaries(). std::list< double > * RooAbsReal::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooMomentMorphFunc, RooParamHistFunc, RooAddition, RooAddPdf, RooFormulaVar, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooRealSumFunc, RooRealSumPdf, RooBinSamplingPdf, RooBinWidthFunction, RooLinearCombination, RooWrapperPdf, and PdfWrapper.; Definition at line 3640 of file RooAbsReal.cxx. ◆ bindVars(). RooFit::OwningPtr< RooAbsFunc > RooAbsReal::bindVars ; (; const RooArgSet & ; vars, . const RooArgSet * ; nset = nullptr, . bool ; clipInvalid = false . ); const. Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ; For example, calling bindVars({x1,x3}) on an object F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the current values of x2 and x4. The caller takes ownership of the returned adaptor. ; Definition at line 3065 of file RooAbsReal.cxx. ◆ buildCallToAnalyticIntegral(). std::string RooAbsReal::buildCallToAnalyticIntegral ; (; Int_t ; code, . const char * ; rangeName, . RooFit::Detail::CodeSquashContext & ; ctx . ); const. virtual . This function defines the analytical integral translation for the class. ; Parameters. [in]codeThe code that decides the integrands. ; [in]rangeNameName of the normalization range. ; [in]ctxAn object to manage auxiliary information for code-squashing. ReturnsThe representative code string of the integral for the given object. ; Reimplemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLa",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:67709,Modifiability,variab,variables,67709,"le RooAbsReal.cxx. ◆ binBoundaries(). std::list< double > * RooAbsReal::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooMomentMorphFunc, RooParamHistFunc, RooAddition, RooAddPdf, RooFormulaVar, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooRealSumFunc, RooRealSumPdf, RooBinSamplingPdf, RooBinWidthFunction, RooLinearCombination, RooWrapperPdf, and PdfWrapper.; Definition at line 3640 of file RooAbsReal.cxx. ◆ bindVars(). RooFit::OwningPtr< RooAbsFunc > RooAbsReal::bindVars ; (; const RooArgSet & ; vars, . const RooArgSet * ; nset = nullptr, . bool ; clipInvalid = false . ); const. Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ; For example, calling bindVars({x1,x3}) on an object F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the current values of x2 and x4. The caller takes ownership of the returned adaptor. ; Definition at line 3065 of file RooAbsReal.cxx. ◆ buildCallToAnalyticIntegral(). std::string RooAbsReal::buildCallToAnalyticIntegral ; (; Int_t ; code, . const char * ; rangeName, . RooFit::Detail::CodeSquashContext & ; ctx . ); const. virtual . This function defines the analytical integral translation for the class. ; Parameters. [in]codeThe code that decides the integrands. ; [in]rangeNameName of the normalization range. ; [in]ctxAn object to manage auxiliary information for code-squashing. ReturnsThe representative code string of the integral for the given object. ; Reimplemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLa",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:67937,Modifiability,adapt,adaptor,67937,"bs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooMomentMorphFunc, RooParamHistFunc, RooAddition, RooAddPdf, RooFormulaVar, RooHistFunc, RooHistPdf, RooProdPdf, RooProduct, RooRealSumFunc, RooRealSumPdf, RooBinSamplingPdf, RooBinWidthFunction, RooLinearCombination, RooWrapperPdf, and PdfWrapper.; Definition at line 3640 of file RooAbsReal.cxx. ◆ bindVars(). RooFit::OwningPtr< RooAbsFunc > RooAbsReal::bindVars ; (; const RooArgSet & ; vars, . const RooArgSet * ; nset = nullptr, . bool ; clipInvalid = false . ); const. Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ; For example, calling bindVars({x1,x3}) on an object F(x1,x2,x3,x4) returns an object f(x1,x3) that is evaluated using the current values of x2 and x4. The caller takes ownership of the returned adaptor. ; Definition at line 3065 of file RooAbsReal.cxx. ◆ buildCallToAnalyticIntegral(). std::string RooAbsReal::buildCallToAnalyticIntegral ; (; Int_t ; code, . const char * ; rangeName, . RooFit::Detail::CodeSquashContext & ; ctx . ); const. virtual . This function defines the analytical integral translation for the class. ; Parameters. [in]codeThe code that decides the integrands. ; [in]rangeNameName of the normalization range. ; [in]ctxAn object to manage auxiliary information for code-squashing. ReturnsThe representative code string of the integral for the given object. ; Reimplemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLandau, RooPolynomial, RooUniform, RooEfficiency, and RooPolyVar.; Definition at line 4501 of file RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const Roo",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:69666,Modifiability,extend,extended,69666,"v, RooExponential, RooGamma, RooGaussian, RooLandau, RooPolynomial, RooUniform, RooEfficiency, and RooPolyVar.; Definition at line 4501 of file RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:69737,Modifiability,extend,extended,69737,"RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . O",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:69866,Modifiability,extend,extended,69866,"RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . O",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:70132,Modifiability,extend,extended,70132,"ooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:70267,Modifiability,extend,extended,70267,"E in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bo",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:73541,Modifiability,extend,extended,73541,"ult. ; List of possible commands in the cmdList:. Type of CmdArg Effect on \( \chi^2 \) . DataError() Choose between:; RooAbsData::Expected: Expected Poisson error ( \( \sqrt{n_\text{expected}} \) from the PDF).; RooAbsData::SumW2: The observed error from the square root of the sum of weights, i.e., symmetric errors calculated with the standard deviation of a Poisson distribution.; RooAbsData::Poisson: Asymmetric errors from the central 68 % interval around a Poisson distribution with mean \( n_\text{observed} \). If for a given bin \( n_\text{expected} \) is lower than the \( n_\text{observed} \), the lower uncertainty is taken (e.g., the difference between the mean and the 16 % quantile). If \( n_\text{expected} \) is higher than \( n_\text{observed} \), the higher uncertainty is taken (e.g., the difference between the 84 % quantile and the mean).; RooAbsData::Auto (default): RooAbsData::Expected for unweighted data, RooAbsData::SumW2 for weighted data. . Extended() Use expected number of events of an extended p.d.f as normalization . NumCPU() Activate parallel processing feature . Range() Calculate \( \chi^2 \) only in selected region . Verbose() Verbose output of GOF framework . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Only useful for binned fits. . SumCoefRange() Set the range in which to interpret the coefficients of RooAddPdf components . SplitRange() Fit ranges used in different categories get named after the category. Using Range(""range""), SplitRange() as switches, different ranges could be set like this: myVariable.setRange(""range_pi0"", 135, 210);; myVariable.setRange(""range_gamma"", 50, 210);; . ConditionalObservables(Args_t &&... argsOrArgSet) Define projected observables. Arguments can either be multiple RooRealVar or a single RooArgSet containing them. Definition at line 4235 of file RooAbsReal.cxx. ◆ chi2FitTo() [3/4]. RooAbsReal::chi2FitTo ; (; RooDataSet & ; xydata, . const RooCmdArg & ; arg1 = {}, . const RooCmd",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:80326,Modifiability,variab,variable,80326,"oAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3622 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 3082 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8ordered arguments. The list of supported command arguments is given in the documentation for RooChi2Var::RooChi2Var(const char name, const char title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&).; Parameters. dataHistogram with data . Returns\( \chi^2 \) variable. PyROOT; The RooAbsReal::createChi2() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ createChi2() [2/4]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . See alsoRooAbsReal::createChi2(RooDataHist&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,cons",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:80829,Modifiability,variab,variable,80829,"lean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 3082 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8ordered arguments. The list of supported command arguments is given in the documentation for RooChi2Var::RooChi2Var(const char name, const char title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&).; Parameters. dataHistogram with data . Returns\( \chi^2 \) variable. PyROOT; The RooAbsReal::createChi2() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4254 of file RooAbsReal.cxx. ◆ createChi2() [2/4]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooLinkedList & ; cmdList . ). virtual . See alsoRooAbsReal::createChi2(RooDataHist&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ; Parameters. datahist data ; cmdListList with RooCmdArg() from the table . Definition at line 4276 of file RooAbsReal.cxx. ◆ createChi2() [3/4]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createChi2 ; (; RooDataSet & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCm",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:84625,Modifiability,extend,extended,84625,"Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function. ; Parameters. [in]nameName of the ROOT histogram ; [in]xvarObservable to be std::mapped on x axis of ROOT histogram ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8Arguments according to list below . ReturnsTH1 *, one of TH{1,2,3}. The caller takes ownership. Effect on histogram creation . IntrinsicBinning() Apply binning defined by function or pdf (as advertised via binBoundaries() method) . Binning(const char* name) Apply binning with given name to x axis of histogram . Binning(RooAbsBinning& binning) Apply specified binning to x axis of histogram . Binning(int nbins, [double lo, double hi]) Apply specified binning to x axis of histogram . ConditionalObservables(Args_t &&... argsOrArgSet) Do not normalise PDF over following observables when projecting PDF into histogram. . Scaling(bool) Apply density-correction scaling (multiply by bin volume), default is true . Extended(bool) Plot event yield instead of probability density (for extended pdfs only). YVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on y axis of ROOT histogram. The YVar() and ZVar() arguments can be supplied with optional Binning() arguments to control the binning of the Y and Z axes, e.g. createHistogram(""histo"",x,Binning(-1,1,20), YVar(y,Binning(-1,1,30)), ZVar(z,Binning(""zbinning""))); RooAbsReal::createHistogramTH1 * createHistogram(RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) constCreate and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables w...Definition RooAbsReal.cxx:1211; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; . ZVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on z axis of ROOT histogram . PyROOT; The RooAbsReal::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:85189,Modifiability,variab,variables,85189,"dvertised via binBoundaries() method) . Binning(const char* name) Apply binning with given name to x axis of histogram . Binning(RooAbsBinning& binning) Apply specified binning to x axis of histogram . Binning(int nbins, [double lo, double hi]) Apply specified binning to x axis of histogram . ConditionalObservables(Args_t &&... argsOrArgSet) Do not normalise PDF over following observables when projecting PDF into histogram. . Scaling(bool) Apply density-correction scaling (multiply by bin volume), default is true . Extended(bool) Plot event yield instead of probability density (for extended pdfs only). YVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on y axis of ROOT histogram. The YVar() and ZVar() arguments can be supplied with optional Binning() arguments to control the binning of the Y and Z axes, e.g. createHistogram(""histo"",x,Binning(-1,1,20), YVar(y,Binning(-1,1,30)), ZVar(z,Binning(""zbinning""))); RooAbsReal::createHistogramTH1 * createHistogram(RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) constCreate and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables w...Definition RooAbsReal.cxx:1211; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; . ZVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on z axis of ROOT histogram . PyROOT; The RooAbsReal::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1291 of file RooAbsReal.cxx. ◆ createHistogram() [2/3]. TH1 * RooAbsReal::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; xvar, . RooLinkedList & ; argList . ); const. Internal method implementing createHistogram. ; Definition at line 1309 of file RooAbsReal.cxx. ◆ createHistogram() [3/3]. TH1 * RooAbsReal::createHistogram ; (; RooStringView ; varNameList, . Int_t ; xbins = 0, . Int_t ; ybins = 0, . Int_t ; zbi",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:86146,Modifiability,variab,variables,86146," a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables w...Definition RooAbsReal.cxx:1211; yDouble_t y[n]Definition legend1.C:17; xDouble_t x[n]Definition legend1.C:17; . ZVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on z axis of ROOT histogram . PyROOT; The RooAbsReal::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1291 of file RooAbsReal.cxx. ◆ createHistogram() [2/3]. TH1 * RooAbsReal::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; xvar, . RooLinkedList & ; argList . ); const. Internal method implementing createHistogram. ; Definition at line 1309 of file RooAbsReal.cxx. ◆ createHistogram() [3/3]. TH1 * RooAbsReal::createHistogram ; (; RooStringView ; varNameList, . Int_t ; xbins = 0, . Int_t ; ybins = 0, . Int_t ; zbins = 0 . ); const. Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ; Parameters. [in]varNameListList of variables to use for x, y, z axis, separated by ':' ; [in]xbinsNumber of bins for first variable ; [in]ybinsNumber of bins for second variable ; [in]zbinsNumber of bins for third variable . ReturnsTH1*, which is one of TH[1-3]. The histogram is owned by the caller.; For a greater degree of control use RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const ; Definition at line 1211 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:86211,Modifiability,variab,variables,86211,"ition legend1.C:17; . ZVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on z axis of ROOT histogram . PyROOT; The RooAbsReal::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1291 of file RooAbsReal.cxx. ◆ createHistogram() [2/3]. TH1 * RooAbsReal::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; xvar, . RooLinkedList & ; argList . ); const. Internal method implementing createHistogram. ; Definition at line 1309 of file RooAbsReal.cxx. ◆ createHistogram() [3/3]. TH1 * RooAbsReal::createHistogram ; (; RooStringView ; varNameList, . Int_t ; xbins = 0, . Int_t ; ybins = 0, . Int_t ; zbins = 0 . ); const. Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ; Parameters. [in]varNameListList of variables to use for x, y, z axis, separated by ':' ; [in]xbinsNumber of bins for first variable ; [in]ybinsNumber of bins for second variable ; [in]zbinsNumber of bins for third variable . ReturnsTH1*, which is one of TH[1-3]. The histogram is owned by the caller.; For a greater degree of control use RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const ; Definition at line 1211 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:86299,Modifiability,variab,variable,86299,"ition legend1.C:17; . ZVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on z axis of ROOT histogram . PyROOT; The RooAbsReal::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1291 of file RooAbsReal.cxx. ◆ createHistogram() [2/3]. TH1 * RooAbsReal::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; xvar, . RooLinkedList & ; argList . ); const. Internal method implementing createHistogram. ; Definition at line 1309 of file RooAbsReal.cxx. ◆ createHistogram() [3/3]. TH1 * RooAbsReal::createHistogram ; (; RooStringView ; varNameList, . Int_t ; xbins = 0, . Int_t ; ybins = 0, . Int_t ; zbins = 0 . ); const. Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ; Parameters. [in]varNameListList of variables to use for x, y, z axis, separated by ':' ; [in]xbinsNumber of bins for first variable ; [in]ybinsNumber of bins for second variable ; [in]zbinsNumber of bins for third variable . ReturnsTH1*, which is one of TH[1-3]. The histogram is owned by the caller.; For a greater degree of control use RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const ; Definition at line 1211 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:86345,Modifiability,variab,variable,86345,"ition legend1.C:17; . ZVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on z axis of ROOT histogram . PyROOT; The RooAbsReal::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1291 of file RooAbsReal.cxx. ◆ createHistogram() [2/3]. TH1 * RooAbsReal::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; xvar, . RooLinkedList & ; argList . ); const. Internal method implementing createHistogram. ; Definition at line 1309 of file RooAbsReal.cxx. ◆ createHistogram() [3/3]. TH1 * RooAbsReal::createHistogram ; (; RooStringView ; varNameList, . Int_t ; xbins = 0, . Int_t ; ybins = 0, . Int_t ; zbins = 0 . ); const. Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ; Parameters. [in]varNameListList of variables to use for x, y, z axis, separated by ':' ; [in]xbinsNumber of bins for first variable ; [in]ybinsNumber of bins for second variable ; [in]zbinsNumber of bins for third variable . ReturnsTH1*, which is one of TH[1-3]. The histogram is owned by the caller.; For a greater degree of control use RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const ; Definition at line 1211 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:86390,Modifiability,variab,variable,86390,"ition legend1.C:17; . ZVar(const RooAbsRealLValue& var,...) Observable to be std::mapped on z axis of ROOT histogram . PyROOT; The RooAbsReal::createHistogram() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 1291 of file RooAbsReal.cxx. ◆ createHistogram() [2/3]. TH1 * RooAbsReal::createHistogram ; (; const char * ; name, . const RooAbsRealLValue & ; xvar, . RooLinkedList & ; argList . ); const. Internal method implementing createHistogram. ; Definition at line 1309 of file RooAbsReal.cxx. ◆ createHistogram() [3/3]. TH1 * RooAbsReal::createHistogram ; (; RooStringView ; varNameList, . Int_t ; xbins = 0, . Int_t ; ybins = 0, . Int_t ; zbins = 0 . ); const. Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ; Parameters. [in]varNameListList of variables to use for x, y, z axis, separated by ':' ; [in]xbinsNumber of bins for first variable ; [in]ybinsNumber of bins for second variable ; [in]zbinsNumber of bins for third variable . ReturnsTH1*, which is one of TH[1-3]. The histogram is owned by the caller.; For a greater degree of control use RooAbsReal::createHistogram(const char *, const RooAbsRealLValue&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) const ; Definition at line 1211 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:87800,Modifiability,config,configuration,87800," 1211 of file RooAbsReal.cxx. ◆ createIntegral() [1/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const char * ; rangeName . ); const. inline . Create integral over observables in iset in range named rangeName. ; Definition at line 207 of file RooAbsReal.h. ◆ createIntegral() [2/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ; Definition at line 211 of file RooAbsReal.h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88447,Modifiability,variab,variables,88447,".h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const Roo",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88808,Modifiability,config,configure,88808,"r any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; No",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:89759,Modifiability,variab,variables,89759,"ain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr<",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:90288,Modifiability,config,configuration,90288,"mdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Inter",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:90980,Modifiability,config,configuration,90980,"tegral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 512 of file RooAbsReal.cxx. ◆ createIntegral() [6/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ; Definition at line 220 of file RooAbsReal.h. ◆ createIntObj(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntObj ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset, . const RooNumIntConfig * ; cfg, . const char * ; rangeName . ); const. protected . Internal utility function for createIntegral() that creates the actual integral object. ; Definition at line 588 of file RooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3903 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:92442,Modifiability,variab,variables,92442,"ooAbsReal.cxx. ◆ createIntRI(). RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3903 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integrals ; [in]condObsConditional observables, which are not integrated for normalisation, even if they are in dependentVars or projectedVars. . ReturnsA pointer to the newly created object, or zero in case of an error. The caller is responsible for deleting the cloneSet (which includes the returned projection object). ; Definition at line 842 of file RooAbsReal.cxx. ◆ createPlotProjection() [2/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; depVars, . const RooArgSet & ; projVars, . RooArgSet *& ; cloneSet . ); const. ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:92508,Modifiability,variab,variables,92508,"t & ; iset, . const RooArgSet & ; nset = {} . ). Utility function for createRunningIntegral. ; It creates an object implementing the standard (analytical) integration technique for calculating the running integral. ; Definition at line 3903 of file RooAbsReal.cxx. ◆ createPlotProjection() [1/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; dependentVars, . const RooArgSet * ; projectedVars, . RooArgSet *& ; cloneSet, . const char * ; rangeName = nullptr, . const RooArgSet * ; condObs = nullptr . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ; Create a new object \( G \) that represents the normalized projection: ; \[; G[x,p] = \frac{\int F[x,y,p] \; \mathrm{d}\{y\}}; {\int F[x,y,p] \; \mathrm{d}\{x\} \, \mathrm{d}\{y\}}; \]. where \( F[x,y,p] \) is the function we represent, and \( \{ p \} \) are the remaining variables (""parameters"").; Parameters. [in]dependentVarsDependent variables over which to normalise, \( \{x\} \). ; [in]projectedVarsVariables to project out, \( \{ y \} \). ; [out]cloneSetWill be set to a RooArgSet*, which will contain a clone of *this plus its projection integral object. The latter will also be returned. The caller takes ownership of this set. ; [in]rangeNameOptional range for projection integrals ; [in]condObsConditional observables, which are not integrated for normalisation, even if they are in dependentVars or projectedVars. . ReturnsA pointer to the newly created object, or zero in case of an error. The caller is responsible for deleting the cloneSet (which includes the returned projection object). ; Definition at line 842 of file RooAbsReal.cxx. ◆ createPlotProjection() [2/2]. const RooAbsReal * RooAbsReal::createPlotProjection ; (; const RooArgSet & ; depVars, . const RooArgSet & ; projVars, . RooArgSet *& ; cloneSet . ); const. Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95141,Modifiability,variab,variables,95141,"ooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3782 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:98267,Modifiability,config,configuration,98267,"wningPtr< RooAbsReal > RooAbsReal::createScanRI ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . Int_t ; numScanBins, . Int_t ; intOrder . ). Utility function for createRunningIntegral that construct an object implementing the numeric scanning technique for calculating the running integral. ; Definition at line 3886 of file RooAbsReal.cxx. ◆ DeclFileName(). static const char * RooAbsReal::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 558 of file RooAbsReal.h. ◆ defaultErrorLevel(). virtual double RooAbsReal::defaultErrorLevel ; (; ); const. inlinevirtual . Reimplemented in RooAddition, RooChi2Var, RooFit::TestStatistics::RooRealL, RooFormulaVar, RooFit::Experimental::RooFuncWrapper, RooNLLVar, RooXYChi2Var, and ProgressMonitor.; Definition at line 248 of file RooAbsReal.h. ◆ defaultIntegratorConfig(). RooNumIntConfig * RooAbsReal::defaultIntegratorConfig ; (; ). static . Returns the default numeric integration configuration for all RooAbsReals. ; Definition at line 3354 of file RooAbsReal.cxx. ◆ derivative() [1/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . const RooArgSet & ; normSet, . Int_t ; order, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 4075 of file RooAbsReal.cxx. ◆ derivative() [2/2]. RooDerivative * RooAbsReal::derivative ; (; RooRealVar & ; obs, . Int_t ; order = 1, . double ; eps = 0.001 . ). Return function representing first, second or third order derivative of this function. ; Definition at line 4063 of file RooAbsReal.cxx. ◆ doEval(). void RooAbsReal::doEval ; (; RooFit::EvalContext & ; ctx); const. virtual . Base function for computing multiple values of a RooAbsReal. ; Parameters. ctxAn evaluation context object . Reimplemented in RooStats::HistFactory::FlexibleInterpVar, ParamHistFunc, PiecewiseInterpolation, RooArgusBG, RooBernstein, RooBifurGauss, RooBM",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:103283,Modifiability,extend,extendedMode,103283,"laVar, RooFracRemainder, RooFit::Experimental::RooFuncWrapper, RooGenericPdf, RooHistFunc, RooHistPdf, RooLinearCombination, RooLinearVar, RooMoment, RooMultiVarGaussian, RooNumConvolution, RooNumConvPdf, RooNumRunningInt, RooPolyFunc, RooPolyVar, RooProdPdf, RooProduct, RooProfileLL, RooProjectedPdf, RooPullVar, RooRangeBoolean, RooRatio, RooRealIntegral, RooRealMPFE, RooRealSumFunc, RooRealSumPdf, RooRealVar, RooRecursiveFraction, RooSecondMoment, RooSimultaneous, RooTruthModel, RooWrapperPdf, RooGenProdProj, RooNormalizedPdf, RooFixedProdPdf, RooHypatia2, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooStats::Heaviside, ProgressMonitor, xRooProjectedPdf, and PdfWrapper. ◆ fillDataHist(). RooDataHist * RooAbsReal::fillDataHist ; (; RooDataHist * ; hist, . const RooArgSet * ; normSet, . double ; scaleFactor, . bool ; correctForBinSize = false, . bool ; showProgress = false . ); const. Fill a RooDataHist with values sampled from this function at the bin centers. ; If extendedMode is true, the p.d.f. values is multiplied by the number of expected events in each bin; An optional scaling by a given scaleFactor can be performed. Returns a pointer to the input RooDataHist, or zero in case of an error.; If correctForBinSize is true the RooDataHist is filled with the functions density (function value times the bin volume) rather than function value.; If showProgress is true a process indicator is printed on stdout in steps of one percent, which is mostly useful for the sampling of expensive functions such as likelihoods ; Definition at line 1152 of file RooAbsReal.cxx. ◆ fillHistogram(). TH1 * RooAbsReal::fillHistogram ; (; TH1 * ; hist, . const RooArgList & ; plotVars, . double ; scaleFactor = 1, . const RooArgSet * ; projectedVars = nullptr, . bool ; scaleForDensity = true, . const RooArgSet * ; condObs = nullptr, . bool ; setError = true . ); const. Fill the ROOT histogram 'hist' with values sampled from this function at the bin centers. ; Our value is calculated",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:104324,Modifiability,variab,variables,104324,"plied by the number of expected events in each bin; An optional scaling by a given scaleFactor can be performed. Returns a pointer to the input RooDataHist, or zero in case of an error.; If correctForBinSize is true the RooDataHist is filled with the functions density (function value times the bin volume) rather than function value.; If showProgress is true a process indicator is printed on stdout in steps of one percent, which is mostly useful for the sampling of expensive functions such as likelihoods ; Definition at line 1152 of file RooAbsReal.cxx. ◆ fillHistogram(). TH1 * RooAbsReal::fillHistogram ; (; TH1 * ; hist, . const RooArgList & ; plotVars, . double ; scaleFactor = 1, . const RooArgSet * ; projectedVars = nullptr, . bool ; scaleForDensity = true, . const RooArgSet * ; condObs = nullptr, . bool ; setError = true . ); const. Fill the ROOT histogram 'hist' with values sampled from this function at the bin centers. ; Our value is calculated by first integrating out any variables in projectedVars and then scaling the result by scaleFactor. Returns a pointer to the input histogram, or zero in case of an error. The input histogram can be any TH1 subclass, and therefore of arbitrary dimension. Variables are matched with the (x,y,...) dimensions of the input histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 975 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs,",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:105515,Modifiability,parameteriz,parameterized,105515,"error. The input histogram can be any TH1 subclass, and therefore of arbitrary dimension. Variables are matched with the (x,y,...) dimensions of the input histogram according to the order in which they appear in the input plotVars list. If scaleForDensity is true the histogram is filled with a the functions density rather than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 975 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 699 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4127 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expr",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:105766,Modifiability,parameteriz,parameterized,105766,"her than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 975 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 699 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4127 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPdf components that have the default 'automatic' interpretation of coefficients (i.e. the interpretation is defined by the observables passed to getVal()). If force is ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:105793,Modifiability,parameteriz,parameterization,105793,"her than the functions value (i.e. the value at the bin center is multiplied with bin volume) ; Definition at line 975 of file RooAbsReal.cxx. ◆ fillTreeBranch(). void RooAbsReal::fillTreeBranch ; (; TTree & ; t). overrideprotectedvirtual . Fill the tree branch that associated with this object with its current value. ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 699 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4127 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPdf components that have the default 'automatic' interpretation of coefficients (i.e. the interpretation is defined by the observables passed to getVal()). If force is ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:109080,Modifiability,config,configuration,109080,"rojectedPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 164 of file RooAbsReal.h. ◆ forceNumInt(). virtual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3963 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullpt",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111061,Modifiability,config,configuration,111061,"gral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to em",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111116,Modifiability,config,configuration,111116,"rator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFun",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111168,Modifiability,config,configuration,111168,"rator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFun",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111217,Modifiability,config,configuration,111217,"rator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented in RooNormalizedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFun",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111446,Modifiability,config,configuration,111446,"izedPdf, ParamHistFunc, PiecewiseInterpolation, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooBinSamplingPdf, RooExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3468 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111501,Modifiability,config,configuration,111501,"oExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3468 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 404 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSe",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111553,Modifiability,config,configuration,111553,"oExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3468 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 404 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSe",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:111602,Modifiability,config,configuration,111602,"oExtendPdf, RooProduct, RooProjectedPdf, RooWrapperPdf, RooFixedProdPdf, RooLagrangianMorphFunc, RooAddModel, RooAddPdf, RooProdPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 349 of file RooAbsReal.cxx. ◆ getForceNumInt(). bool RooAbsReal::getForceNumInt ; (; ); const. inline . Definition at line 174 of file RooAbsReal.h. ◆ getIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ). Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3404 of file RooAbsReal.cxx. ◆ getIntegratorConfig() [2/2]. const RooNumIntConfig * RooAbsReal::getIntegratorConfig ; (; ); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3468 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 404 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSe",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:112418,Modifiability,variab,variable,112418,"); const. Return the numeric integration configuration used for this object. ; If a specialized configuration was associated with this object, that configuration is returned, otherwise the default configuration for all RooAbsReals is returned ; Definition at line 3391 of file RooAbsReal.cxx. ◆ getMaxVal(). Int_t RooAbsReal::getMaxVal ; (; const RooArgSet & ; vars); const. virtual . Advertise capability to determine maximum value of function for given set of observables. ; If no direct generator method is provided, this information will assist the accept/reject generator to operate more efficiently as it can skip the initial trial sampling phase to empirically find the function maximum ; Reimplemented in RooCBShape, RooCrystalBall, RooKeysPdf, RooBinSamplingPdf, RooFFTConvPdf, RooHistFunc, RooHistPdf, RooWrapperPdf, RooLegendre, and RooSpHarmonic.; Definition at line 3468 of file RooAbsReal.cxx. ◆ getPlotLabel(). const char * RooAbsReal::getPlotLabel ; (; ); const. Get the label associated with the variable. ; Definition at line 404 of file RooAbsReal.cxx. ◆ getPropagatedError(). double RooAbsReal::getPropagatedError ; (; const RooFitResult & ; fr, . const RooArgSet & ; nset = {} . ); const. Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ; Estimates the uncertainty \(\sigma_f(x;\theta)\) on a function \(f(x;\theta)\) represented by this RooAbsReal. Here, \(\theta\) is a vector of parameters with uncertainties \(\sigma_\theta\), and \(x\) are usually observables. The uncertainty is estimated by linearly propagating the parameter uncertainties using the correlation matrix from a fit result.; The square of the uncertainty on \(f(x;\theta)\) is calculated as follows: ; \[; \sigma_f(x)^2 = \Delta f_i(x) \cdot \mathrm{Corr}_{i, j} \cdot \Delta f_j(x),; \]. where \( \Delta f_i(x) = \frac{1}{2} \left(f(x;\theta_i + \sigma_{\theta_i}) - f(x; \theta_i - \sigma_{\theta_i}) \right) \) is the vector of function variations when changing the para",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:113730,Modifiability,variab,variable,113730,"f(x;\theta)\) on a function \(f(x;\theta)\) represented by this RooAbsReal. Here, \(\theta\) is a vector of parameters with uncertainties \(\sigma_\theta\), and \(x\) are usually observables. The uncertainty is estimated by linearly propagating the parameter uncertainties using the correlation matrix from a fit result.; The square of the uncertainty on \(f(x;\theta)\) is calculated as follows: ; \[; \sigma_f(x)^2 = \Delta f_i(x) \cdot \mathrm{Corr}_{i, j} \cdot \Delta f_j(x),; \]. where \( \Delta f_i(x) = \frac{1}{2} \left(f(x;\theta_i + \sigma_{\theta_i}) - f(x; \theta_i - \sigma_{\theta_i}) \right) \) is the vector of function variations when changing the parameters one at a time, and \( \mathrm{Corr}_{i,j} = \left(\sigma_{\theta_i} \sigma_{\theta_j}\right)^{-1} \cdot \mathrm{Cov}_{i,j} \) is the correlation matrix from the fit result. ; Definition at line 2557 of file RooAbsReal.cxx. ◆ getTitle(). TString RooAbsReal::getTitle ; (; bool ; appendUnit = false); const. Return this variable's title string. ; If appendUnit is true and this variable has units, also append a string "" (<unit>)"". ; Definition at line 263 of file RooAbsReal.cxx. ◆ getUnit(). const Text_t * RooAbsReal::getUnit ; (; ); const. inline . Definition at line 143 of file RooAbsReal.h. ◆ getVal() [1/2]. double RooAbsReal::getVal ; (; const RooArgSet & ; normalisationSet); const. inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:113788,Modifiability,variab,variable,113788,"s RooAbsReal. Here, \(\theta\) is a vector of parameters with uncertainties \(\sigma_\theta\), and \(x\) are usually observables. The uncertainty is estimated by linearly propagating the parameter uncertainties using the correlation matrix from a fit result.; The square of the uncertainty on \(f(x;\theta)\) is calculated as follows: ; \[; \sigma_f(x)^2 = \Delta f_i(x) \cdot \mathrm{Corr}_{i, j} \cdot \Delta f_j(x),; \]. where \( \Delta f_i(x) = \frac{1}{2} \left(f(x;\theta_i + \sigma_{\theta_i}) - f(x; \theta_i - \sigma_{\theta_i}) \right) \) is the vector of function variations when changing the parameters one at a time, and \( \mathrm{Corr}_{i,j} = \left(\sigma_{\theta_i} \sigma_{\theta_j}\right)^{-1} \cdot \mathrm{Cov}_{i,j} \) is the correlation matrix from the fit result. ; Definition at line 2557 of file RooAbsReal.cxx. ◆ getTitle(). TString RooAbsReal::getTitle ; (; bool ; appendUnit = false); const. Return this variable's title string. ; If appendUnit is true and this variable has units, also append a string "" (<unit>)"". ; Definition at line 263 of file RooAbsReal.cxx. ◆ getUnit(). const Text_t * RooAbsReal::getUnit ; (; ); const. inline . Definition at line 143 of file RooAbsReal.h. ◆ getVal() [1/2]. double RooAbsReal::getVal ; (; const RooArgSet & ; normalisationSet); const. inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implement",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:114893,Modifiability,variab,variables,114893,"nit(). const Text_t * RooAbsReal::getUnit ; (; ); const. inline . Definition at line 143 of file RooAbsReal.h. ◆ getVal() [1/2]. double RooAbsReal::getVal ; (; const RooArgSet & ; normalisationSet); const. inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealMPFE, RooRealVar, RooResolutionModel, RooMomentMorph, RooMomentMorphFunc, RooMomentMorphFuncND, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddPdf, RooErrorVar, and RooRealIntegral.; Definition at line 281 of file RooAbsReal.cxx. ◆ globalSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:115004,Modifiability,variab,variables,115004,"t line 143 of file RooAbsReal.h. ◆ getVal() [1/2]. double RooAbsReal::getVal ; (; const RooArgSet & ; normalisationSet); const. inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealMPFE, RooRealVar, RooResolutionModel, RooMomentMorph, RooMomentMorphFunc, RooMomentMorphFuncND, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddPdf, RooErrorVar, and RooRealIntegral.; Definition at line 281 of file RooAbsReal.cxx. ◆ globalSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at l",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:123020,Modifiability,variab,variables,123020,"immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2988 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to analDeps ; Definition at line 3228 of file RooAbsReal.cxx. ◆ matchArgs() [2/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a, . const RooArgProxy & ; b . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the contents of proxies a,b occur in set 'allDeps' then the arguments held in a,b are copied from allDeps to analDeps ; Definition at line 3245 of file RooAbsReal.cxx. ◆ matchArgs() [3",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:123070,Modifiability,variab,variables,123070,"immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2988 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to analDeps ; Definition at line 3228 of file RooAbsReal.cxx. ◆ matchArgs() [2/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a, . const RooArgProxy & ; b . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the contents of proxies a,b occur in set 'allDeps' then the arguments held in a,b are copied from allDeps to analDeps ; Definition at line 3245 of file RooAbsReal.cxx. ◆ matchArgs() [3",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:129534,Modifiability,variab,variable,129534,"s a RooAbsReal ; Implements RooAbsArg.; Definition at line 239 of file RooAbsReal.cxx. ◆ operator==() [2/2]. bool RooAbsReal::operator== ; (; double ; value); const. Equality operator comparing to a double. ; Definition at line 228 of file RooAbsReal.cxx. ◆ plotAsymOn(). RooPlot * RooAbsReal::plotAsymOn ; (; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Definition at line 2284 of file RooAbsReal.cxx. ◆ plotOn() [1/3]. RooAbsReal::plotOn ; (; RooPlot * ; frame, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {}, . const RooCmdArg & ; arg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:129857,Modifiability,variab,variables,129857,"(; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Definition at line 2284 of file RooAbsReal.cxx. ◆ plotOn() [1/3]. RooAbsReal::plotOn ; (; RooPlot * ; frame, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {}, . const RooCmdArg & ; arg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*,",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:147977,Modifiability,config,configuration,147977,"rg.; Definition at line 568 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAbsTestStatistic, RooAddition, and RooConstraintSum.; Definition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:148169,Modifiability,config,config,148169,"mented in ProgressMonitor, RooAbsTestStatistic, RooAddition, and RooConstraintSum.; Definition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h.",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:148203,Modifiability,config,configuration,148203,"ition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:148248,Modifiability,config,configuration,148248,"ition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooAr",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:148595,Modifiability,variab,variable,148595,"o printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (; const RooArgSet & ; paramVars). Definition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149440,Modifiability,config,configuration,149440,"inition at line 4400 of file RooAbsReal.cxx. ◆ setPlotLabel(). void RooAbsReal::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1B",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149511,Modifiability,config,configuration,149511,"Real::setPlotLabel ; (; const char * ; label). Set the label associated with this variable. ; Definition at line 414 of file RooAbsReal.cxx. ◆ setTreeBranchStatus(). void RooAbsReal::setTreeBranchStatus ; (; TTree & ; t, . bool ; active . ). overrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149757,Modifiability,config,configuration,149757,"verrideprotectedvirtual . (De)Activate associated tree branch ; Implements RooAbsArg.; Definition at line 3198 of file RooAbsReal.cxx. ◆ setUnit(). void RooAbsReal::setUnit ; (; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149828,Modifiability,config,configuration,149828,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:149949,Modifiability,config,configuration,149949,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:150000,Modifiability,config,configuration,150000,"; const char * ; unit). inline . Definition at line 147 of file RooAbsReal.h. ◆ sigma() [1/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs). inline . Definition at line 368 of file RooAbsReal.h. ◆ sigma() [2/2]. RooAbsMoment * RooAbsReal::sigma ; (; RooRealVar & ; obs, . const RooArgSet & ; nset . ). inline . Definition at line 369 of file RooAbsReal.h. ◆ specialIntegratorConfig() [1/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; ); const. Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned. ; Definition at line 3364 of file RooAbsReal.cxx. ◆ specialIntegratorConfig() [2/2]. RooNumIntConfig * RooAbsReal::specialIntegratorConfig ; (; bool ; createOnTheFly). Returns the specialized integrator configuration for this RooAbsReal. ; If this object has no specialized configuration, a null pointer is returned, unless createOnTheFly is true in which case a clone of the default integrator configuration is created, installed as specialized configuration, and returned ; Definition at line 3376 of file RooAbsReal.cxx. ◆ Streamer(). void RooAbsReal::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from TObject.; Reimplemented in RooStats::HistFactory::RooBarlowBeestonLL, RooArgusBG, RooBCPEffDecay, RooBCPGenDecay, RooBDecay, RooBernstein, RooBifurGauss, RooBMixDecay, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDecay, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, RooFunctorPdfBinding, Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:18884,Performance,cache,cache,18884,"ooAbsRealLValue &obs, double xlo, double xhi) const;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; virtual RooPlot * plotSliceOn (RooPlot *frame, const RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the special",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:37104,Performance,optimiz,optimizeCacheMode,37104,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:37164,Performance,cache,cache,37164,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:37175,Performance,optimiz,optimization,37175,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void se",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:37244,Performance,optimiz,optimizeCacheMode,37244," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:37356,Performance,cache,cache,37356," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:37367,Performance,optimiz,optimization,37367," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAnd",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:37488,Performance,cache,cacheList,37488,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:37595,Performance,cache,cached,37595,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:37720,Performance,cache,cacheList,37720,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:37858,Performance,cache,cached,37858,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:38052,Performance,perform,perform,38052,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirt",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:38074,Performance,optimiz,optimization,38074,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirt",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:38373,Performance,cache,cache,38373,"acheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache ()",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:38461,Performance,cache,cache,38461,"rgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TName",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:38596,Performance,cache,caches,38596,"list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtua",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:38672,Performance,cache,cache,38672,". ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:39148,Performance,cache,cacheUniqueSuffix,39148,"const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () cons",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:39328,Performance,cache,cache,39328,"const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () cons",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:51363,Performance,cache,cached,51363,"tatic Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:51404,Performance,cache,cache,51404,"tatic Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; virtual double evaluate () const =0;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:54740,Performance,perform,perform,54740,"bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; virtual RooPlot * plotOn (RooPlot *frame, PlotOpt o) const;  Plotting engine function for internal use. ;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:56787,Performance,optimiz,optimizeDirtyHook,56787,";  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoErr",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:57275,Performance,cache,cached,57275,"id graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Static Protected Member Functions; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Fi",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:60014,Performance,cache,cache,60014,"adBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting.",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:60967,Performance,cache,cache,60967,"AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Private Member Functions; double _DEBUG_getVal (const RooArgSet *normalisationSet) const;  Debug version of getVal(), which is slow and does error checking. ;  . Friends; class AddCacheElem;  ; class BatchInterfaceAccessor;  ; class RooAddHelpers;  ; class RooAddModel;  ; class RooAddPdf;  ; class RooFit::EvalContext;  ; class RooRealBinding;  ; class RooRealSumFunc;  ; class RooRealSumPdf;  ; class RooVectorDataStore;  . Additional Inherited Members;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  . #include <RooAbsReal.h>. Inheritance diagram for RooAbsReal:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Member Typedef Documentation. ◆ EvalErrorIter. typedef std::map<constRooAbsArg*,std::pair<std::string,std::lis",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:65961,Performance,cache,cache,65961," getAnalyticalIntegral, except code zero. ; Reimplemented in RooNormalizedPdf, RooBinSamplingPdf, RooWrapperPdf, RooFixedProdPdf, ParamHistFunc, PiecewiseInterpolation, RooLagrangianMorphFunc, RooParamHistFunc, RooAbsAnaConvPdf, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddModel, RooAddPdf, RooExtendPdf, RooProdPdf, RooProjectedPdf, RooRealSumFunc, RooRealSumPdf, and RooSimultaneous.; Definition at line 378 of file RooAbsReal.cxx. ◆ asTF(). TF1 * RooAbsReal::asTF ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3987 of file RooAbsReal.cxx. ◆ attachToTree(). void RooAbsReal::attachToTree ; (; TTree & ; t, . Int_t ; bufSize = 32000 . ). overrideprotectedvirtual . Attach object to a branch of given TTree. ; By default it will register the internal value cache RooAbsReal::_value as branch buffer for a double tree branch with the same name as this object. If no double branch is found with the name of this object, this method looks for a Float_t Int_t, UChar_t and UInt_t, etc branch. If any of these are found, a TreeReadBuffer that branch is created, and saved in _treeReadBuffer. TreeReadBuffer::operator double() can be used to convert the values. This is used by copyCache(). ; Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3113 of file RooAbsReal.cxx. ◆ attachToVStore(). void RooAbsReal::attachToVStore ; (; RooVectorDataStore & ; vstore). overrideprotectedvirtual . Implements RooAbsArg.; Reimplemented in RooRealVar.; Definition at line 3097 of file RooAbsReal.cxx. ◆ binBoundaries(). std::list< double > * RooAbsReal::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [i",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:70831,Performance,optimiz,optimization,70831,"nts (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedure . InitialHesse(bool flag) Flag controls if HESSE before MIGRAD as well, off by default . Hesse(bool flag) Flag controls if HESSE is run after MIGRAD, on by default . Minos(bool flag) Flag controls if MINOS is run after HESSE, on by default . Minos(const RooArgSet& set) Only run MINOS on given subset of arguments . Save(bool flag) Flag controls if RooFitResult object is produced and returned, off by default . Strategy(Int_t flag) Set Minuit strategy (0 through 2, default is 1). Options to control informational output . Verbose(bool flag) Flag controls if verbose output is printed (NLL, parameter changes during fit . Timer(bool flag) Time CPU and wall clock consumption of fit steps, off by default . PrintLevel(Int_t level) Set Minuit print level (-1 through 3, default is 1). At -1 all RooFit informational messages are suppressed as",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:79649,Performance,cache,cached,79649,"p to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 558 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3622 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 3082 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8ordered arguments. The list of supported command arguments is given in the documentation for RooChi2Var::RooChi2Var(const char name, const char title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, con",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:79690,Performance,cache,cache,79690,"p to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 558 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3622 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 3082 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8ordered arguments. The list of supported command arguments is given in the documentation for RooChi2Var::RooChi2Var(const char name, const char title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, con",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:79738,Performance,cache,cached,79738,"honized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 558 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3622 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 3082 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8ordered arguments. The list of supported command arguments is given in the documentation for RooChi2Var::RooChi2Var(const char name, const char title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCm",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:79813,Performance,cache,cache,79813,"honized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 558 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3622 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 3082 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogram and this function. ; Parameters. arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8ordered arguments. The list of supported command arguments is given in the documentation for RooChi2Var::RooChi2Var(const char name, const char title, RooAbsReal& func, RooDataHist& hdata, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&,const RooCm",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88298,Performance,perform,performed,88298,"set in range named rangeName with integrand normalized over observables in nset. ; Definition at line 211 of file RooAbsReal.h. ◆ createIntegral() [3/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset, . const RooNumIntConfig & ; cfg, . const char * ; rangeName = nullptr . ); const. inline . Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88664,Performance,perform,performed,88664,"in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is aut",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88712,Performance,perform,performed,88712,"in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ; Definition at line 216 of file RooAbsReal.h. ◆ createIntegral() [4/6]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is aut",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:88903,Performance,perform,performed,88903,"it::OwningPtr< RooAbsReal > RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooArgSet * ; nset = nullptr, . const RooNumIntConfig * ; cfg = nullptr, . const char * ; rangeName = nullptr . ); const. virtual . Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. If nset is specified the integrand is request to be normalized over nset (only meaningful when the integrand is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:89608,Performance,perform,performed,89608,"d is a pdf). If rangename is specified the integral is performed over the named range, otherwise it is performed over the domain of each integrated observable. If cfg is specified it will be used to configure any numeric integration aspect of the integral. It will not force the integral to be performed numerically, which is decided automatically by RooRealIntegral. ; Reimplemented in RooAbsRealLValue, RooBinSamplingPdf, and RooRealIntegral.; Definition at line 551 of file RooAbsReal.cxx. ◆ createIntegral() [5/6]. RooAbsReal::createIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ); const. Create an object that represents the integral of the function over one or more observables listed in iset. ; The actual integration calculation is only performed when the returned object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over.; NoteThe integral over a PDF is usually not normalised (i.e., it is usually not 1 when integrating the PDF over the full range). In fact, this integral is used to compute the normalisation of each PDF. See the rf110 tutorial for details on PDF normalisation.; The following named arguments are accepted . Effect on integral creation . NormSet(const RooArgSet&) Specify normalization set, mostly useful when working with PDFs . NumIntConfig(const RooNumIntConfig&) Use given configuration for any numeric integration, if necessary . Range(const char* name) Integrate only over given range. Multiple ranges may be specified by passing multiple Range() arguments . PyROOT; The RooAbsReal::createIntegral() function is pythonized with the command argument pythonization. The keywords must correspond",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:94992,Performance,perform,performed,94992,"bsReal.cxx. ◆ createRunningIntegral() [1/2]. RooFit::OwningPtr< RooAbsReal > RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooArgSet & ; nset = {} . ). Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ; Definition at line 3782 of file RooAbsReal.cxx. ◆ createRunningIntegral() [2/2]. RooAbsReal::createRunningIntegral ; (; const RooArgSet & ; iset, . const RooCmdArg & ; arg1, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). Create an object that represents the running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the us",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95734,Performance,perform,performance,95734,"he running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of int",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:95769,Performance,perform,perform,95769,"he running integral of the function over one or more observables listed in iset, i.e. . \[; \int_{x_\mathrm{lo}}^x f(x') \, \mathrm{d}x'; \]. The actual integration calculation is only performed when the return object is evaluated. The name of the integral object is automatically constructed from the name of the input function, the variables it integrates and the range integrates over. The default strategy to calculate the running integrals is. If the integrand (this object) supports analytical integration, construct an integral object that calculate the running integrals value by calculating the analytical integral each time the running integral object is evaluated; If the integrand (this object) requires numeric integration to construct the running integral create an object of class RooNumRunningInt which first samples the entire function and integrates the sampled function numerically. This method has superior performance as there is no need to perform a full (numeric) integration for each evaluation of the running integral object, but only when one of its parameters has changed. The choice of strategy can be changed with the ScanAll() argument, which forces the use of the scanning technique implemented in RooNumRunningInt for all use cases, and with the ScanNone() argument which forces the 'integrate each evaluation' technique for all use cases. The sampling granularity for the scanning technique can be controlled with the ScanParameters technique which allows to specify the number of samples to be taken, and to which order the resulting running integral should be interpolated. The default values are 1000 samples and 2nd order interpolation.; The following named arguments are accepted . Effect on integral creation . SupNormSet(const RooArgSet&) Observables over which should be normalized in addition to the integration observables . ScanParameters(Int_t nbins, Int_t intOrder) Parameters for scanning technique of making CDF: number of sampled bins and order of int",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:103433,Performance,perform,performed,103433,"Func, RooHistPdf, RooLinearCombination, RooLinearVar, RooMoment, RooMultiVarGaussian, RooNumConvolution, RooNumConvPdf, RooNumRunningInt, RooPolyFunc, RooPolyVar, RooProdPdf, RooProduct, RooProfileLL, RooProjectedPdf, RooPullVar, RooRangeBoolean, RooRatio, RooRealIntegral, RooRealMPFE, RooRealSumFunc, RooRealSumPdf, RooRealVar, RooRecursiveFraction, RooSecondMoment, RooSimultaneous, RooTruthModel, RooWrapperPdf, RooGenProdProj, RooNormalizedPdf, RooFixedProdPdf, RooHypatia2, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooStats::Heaviside, ProgressMonitor, xRooProjectedPdf, and PdfWrapper. ◆ fillDataHist(). RooDataHist * RooAbsReal::fillDataHist ; (; RooDataHist * ; hist, . const RooArgSet * ; normSet, . double ; scaleFactor, . bool ; correctForBinSize = false, . bool ; showProgress = false . ); const. Fill a RooDataHist with values sampled from this function at the bin centers. ; If extendedMode is true, the p.d.f. values is multiplied by the number of expected events in each bin; An optional scaling by a given scaleFactor can be performed. Returns a pointer to the input RooDataHist, or zero in case of an error.; If correctForBinSize is true the RooDataHist is filled with the functions density (function value times the bin volume) rather than function value.; If showProgress is true a process indicator is printed on stdout in steps of one percent, which is mostly useful for the sampling of expensive functions such as likelihoods ; Definition at line 1152 of file RooAbsReal.cxx. ◆ fillHistogram(). TH1 * RooAbsReal::fillHistogram ; (; TH1 * ; hist, . const RooArgList & ; plotVars, . double ; scaleFactor = 1, . const RooArgSet * ; projectedVars = nullptr, . bool ; scaleForDensity = true, . const RooArgSet * ; condObs = nullptr, . bool ; setError = true . ); const. Fill the ROOT histogram 'hist' with values sampled from this function at the bin centers. ; Our value is calculated by first integrating out any variables in projectedVars and then scaling the result ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:106126,Performance,perform,performed,106126,"on at line 3181 of file RooAbsReal.cxx. ◆ findInnerMostIntegration(). void RooAbsReal::findInnerMostIntegration ; (; const RooArgSet & ; allObs, . RooArgSet & ; innerObs, . const char * ; rangeName . ); const. protected . Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ; This function finds in a given set allObs over which integration is requested the largeset subset of observables that can be integrated simultaneously. This subset consists of observables with fixed ranges and observables with parameterized ranges whose parameterization does not depend on any observable that is also integrated. ; Definition at line 699 of file RooAbsReal.cxx. ◆ findRoot(). double RooAbsReal::findRoot ; (; RooRealVar & ; x, . double ; xmin, . double ; xmax, . double ; yval . ). Return value of x (in range xmin,xmax) at which function equals yval. ; (Calculation is performed with Brent root finding algorithm) ; Definition at line 4127 of file RooAbsReal.cxx. ◆ fixAddCoefNormalization(). void RooAbsReal::fixAddCoefNormalization ; (; const RooArgSet & ; addNormSet = RooArgSet(), . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ; If the force flag is false, the normalization choice is only fixed for those RooAddPdf components that have the default 'automatic' interpretation of coefficients (i.e. the interpretation is defined by the observables passed to getVal()). If force is true, also RooAddPdf that already have a fixed interpretation are changed to a new fixed interpretation. ; Definition at line 3726 of file RooAbsReal.cxx. ◆ fixAddCoefRange(). void RooAbsReal::fixAddCoefRange ; (; const char * ; rangeName = nullptr, . bool ; force = true . ). virtual . Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree head",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:109120,Performance,perform,performed,109120,"tual void RooAbsReal::forceNumInt ; (; bool ; flag = true). inlinevirtual . Definition at line 169 of file RooAbsReal.h. ◆ functor(). RooFunctor * RooAbsReal::functor ; (; const RooArgList & ; obs, . const RooArgList & ; pars = RooArgList(), . const RooArgSet & ; nset = RooArgSet() . ); const. Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ; Definition at line 3963 of file RooAbsReal.cxx. ◆ getAnalyticalIntegral(). Int_t RooAbsReal::getAnalyticalIntegral ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const char * ; rangeName = nullptr . ); const. virtual . Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ; 'integSet' is the set of dependents for which integration is requested. The function should copy the subset of dependents it can analytically integrate to anaIntSet and return a unique identification code for this integration configuration. If no integration can be performed, zero should be returned. ; Reimplemented in RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooCBShape, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooGExpModel, RooJohnson, RooKeysPdf, RooLandau, RooLegacyExpPoly, RooLognormal, RooNDKeysPdf, RooNovosibirsk, RooParametricStepFunction, RooPoisson, RooPolynomial, RooPowerSum, RooUniform, RooConvCoefVar, RooEfficiency, RooHistFunc, RooHistPdf, RooMultiVarGaussian, RooPolyVar, RooTruthModel, RooLegendre, RooNonCentralChiSquare, RooSpHarmonic, RooAddition, RooBinSamplingPdf, RooWrapperPdf, and RooFixedProdPdf.; Definition at line 366 of file RooAbsReal.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAbsReal::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. virtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be a",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:114389,Performance,cache,cached,114389," parameters one at a time, and \( \mathrm{Corr}_{i,j} = \left(\sigma_{\theta_i} \sigma_{\theta_j}\right)^{-1} \cdot \mathrm{Cov}_{i,j} \) is the correlation matrix from the fit result. ; Definition at line 2557 of file RooAbsReal.cxx. ◆ getTitle(). TString RooAbsReal::getTitle ; (; bool ; appendUnit = false); const. Return this variable's title string. ; If appendUnit is true and this variable has units, also append a string "" (<unit>)"". ; Definition at line 263 of file RooAbsReal.cxx. ◆ getUnit(). const Text_t * RooAbsReal::getUnit ; (; ); const. inline . Definition at line 143 of file RooAbsReal.h. ◆ getVal() [1/2]. double RooAbsReal::getVal ; (; const RooArgSet & ; normalisationSet); const. inline . Like getVal(const RooArgSet*), but always requires an argument for normalisation. ; Definition at line 126 of file RooAbsReal.h. ◆ getVal() [2/2]. double RooAbsReal::getVal ; (; const RooArgSet * ; normalisationSet = nullptr); const. inline . Evaluate object. ; Returns either cached value or triggers a recalculation. The recalculation happens by calling getValV(), which in the end calls the virtual evaluate() functions of the respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwis",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:115352,Performance,cache,cache,115352," respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealMPFE, RooRealVar, RooResolutionModel, RooMomentMorph, RooMomentMorphFunc, RooMomentMorphFuncND, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddPdf, RooErrorVar, and RooRealIntegral.; Definition at line 281 of file RooAbsReal.cxx. ◆ globalSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 3051 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 395 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 394 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 169 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::inte",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:115379,Performance,cache,cached,115379," respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealMPFE, RooRealVar, RooResolutionModel, RooMomentMorph, RooMomentMorphFunc, RooMomentMorphFuncND, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddPdf, RooErrorVar, and RooRealIntegral.; Definition at line 281 of file RooAbsReal.cxx. ◆ globalSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 3051 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 395 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 394 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 169 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::inte",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:115441,Performance,cache,cache,115441," respective PDFs. Parameters. [in]normalisationSetgetValV() reacts differently depending on the value of the normalisation set. If the set is nullptr, an unnormalised value is returned. . NoteThe normalisation is arbitrary, because it is up to the implementation of the PDF to e.g. leave out normalisation constants for speed reasons. The range of the variables is also ignored.; To normalise the result properly, a RooArgSet has to be passed, which contains the variables to normalise over. These are integrated over their current ranges to compute the normalisation constant, and the unnormalised result is divided by this value. ; Definition at line 103 of file RooAbsReal.h. ◆ getValV(). double RooAbsReal::getValV ; (; const RooArgSet * ; nset = nullptr); const. virtual . Return value of object. ; If the cache is clean, return the cached value, otherwise recalculate on the fly and refill the cache ; Reimplemented in RooConstVar, RooNormalizedPdf, ProgressMonitor, RooAbsHiddenReal, RooConvCoefVar, RooRealMPFE, RooRealVar, RooResolutionModel, RooMomentMorph, RooMomentMorphFunc, RooMomentMorphFuncND, RooAbsCachedPdf, RooAbsCachedReal, RooAbsPdf, RooAddPdf, RooErrorVar, and RooRealIntegral.; Definition at line 281 of file RooAbsReal.cxx. ◆ globalSelectComp(). void RooAbsReal::globalSelectComp ; (; bool ; flag). staticprotected . Global switch controlling the activation of the selectComp() functionality. ; Definition at line 3051 of file RooAbsReal.cxx. ◆ gradient(). virtual void RooAbsReal::gradient ; (; double * ; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 395 of file RooAbsReal.h. ◆ hasGradient(). virtual bool RooAbsReal::hasGradient ; (; ); const. inlinevirtual . Reimplemented in RooFit::Experimental::RooFuncWrapper.; Definition at line 394 of file RooAbsReal.h. ◆ hideOffset(). bool RooAbsReal::hideOffset ; (; ). static . Definition at line 169 of file RooAbsReal.cxx. ◆ integralNameSuffix(). TString RooAbsReal::inte",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:130110,Performance,perform,performed,130110,"1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {}, . const RooCmdArg & ; arg9 = {}, . const RooCmdArg & ; arg10 = {} . ); const. virtual . Plot (project) PDF on specified frame. ; If a PDF is plotted in an empty frame, it will show a unit normalized curve in the frame variable, taken at the present value of other observables defined for this PDF.; Parameters. [in]framepointer to RooPlot ; [in]arg1,arg2,arg3,arg4,arg5,arg6,arg7,arg8,arg9,arg10Ordered arguments. If a PDF is plotted in a frame in which a dataset has already been plotted, it will show a projected curve integrated over all variables that were present in the shown dataset except for the one on the x-axis. The normalization of the curve will also be adjusted to the event count of the plotted dataset. An informational message will be printed for each projection step that is performed.; This function takes the following named arguments . Projection control . Slice(const RooArgSet& set) Override default projection behaviour by omitting observables listed in set from the projection, i.e. by not integrating over these. Slicing is usually only sensible in discrete observables, by e.g. creating a slice of the PDF at the current value of the category observable. Slice(RooCategory& cat, const char* label) Override default projection behaviour by omitting the specified category observable from the projection, i.e., by not integrating over all states of this category. The slice is positioned at the given label value. To pass multiple Slice() commands, please use the Slice(std::map<RooCategory*, std::string> const&) argument explained below. Slice(std::map<RooCategory*, std::string> const&) Omits multiple categories from the projection, as explianed above. Can be used with initializer lists for convenience, e.g. pdf.plotOn(frame, Slic",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:135741,Performance,perform,perform,135741,"nes at end of curve to ensure proper closure. Add DrawOption(""F"") for filled drawing. . FillColor(Int_t color) Select fill color by ROOT color code. Range(const char* name) Only draw curve in range defined by given name. Range(double lo, double hi) Only draw curve in specified range. VLines() Add vertical lines to y=0 at end points of curve. Precision(double eps) Control precision of drawn curve w.r.t to scale of plot, default is 1e-3. Higher precision will result in more and more densely spaced curve points. Invisible(bool flag) Add curve to frame, but do not display. Useful in combination AddTo(). VisualizeError(const RooFitResult& fitres, double Z=1, bool linearMethod=true) Visualize the uncertainty on the parameters, as given in fitres, at 'Z' sigma'. The linear method is fast but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made. Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma' . Details on error band visualization; VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter: See alsoplotOnWithErrorBand(). PyROOT; The RooAbsReal::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented in RooSimultaneous, RooAbsPdf, and RooSimultaneous.; Definition at line 1639 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted da",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:136831,Performance,perform,performed,136831,"form better in the presence of strong correlations, but may take (much) longer to calculate. VisualizeError(const RooFitResult& fitres, const RooArgSet& param, double Z=1, bool linearMethod=true) Visualize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma' . Details on error band visualization; VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter: See alsoplotOnWithErrorBand(). PyROOT; The RooAbsReal::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented in RooSimultaneous, RooAbsPdf, and RooSimultaneous.; Definition at line 1639 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface to modify the default projection behaviour. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1931 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; f",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:136881,Performance,perform,performed,136881,"lize the uncertainty on the subset of parameters 'param', as given in fitres, at 'Z' sigma' . Details on error band visualization; VisualizeError() uses plotOnWithErrorBand(). Documentation of the latter: See alsoplotOnWithErrorBand(). PyROOT; The RooAbsReal::plotOn() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Reimplemented in RooSimultaneous, RooAbsPdf, and RooSimultaneous.; Definition at line 1639 of file RooAbsReal.cxx. ◆ plotOn() [2/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface to modify the default projection behaviour. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1931 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() with named arguments. ; Reimplemented in RooAbsPdf, RooSimultaneous, and RooSimultaneous.; Definition at l",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:140618,Performance,perform,perform,140618,"rom the fit result, and \( Z \) = requested signifance ( \( Z \sigma \) band); The linear method is fast (required 2*N evaluations of the curve, where N is the number of parameters), but may not be accurate in the presence of strong correlations (~>0.9) and at Z>2 due to linear and Gaussian approximations made; Alternatively, a more robust error is calculated using a sampling method. In this method a number of curves is calculated with variations of the parameter values, as drawn from a multi-variate Gaussian p.d.f. that is constructed from the fit results covariance matrix. The error(x) is determined by calculating a central interval that capture N% of the variations for each value of x, where N% is controlled by Z (i.e. Z=1 gives N=68%). The number of sampling curves is chosen to be such that at least 30 curves are expected to be outside the N% interval, and is minimally 100 (e.g. Z=1->Ncurve=100, Z=2->Ncurve=659, Z=3->Ncurve=11111) Intervals from the sampling method can be asymmetric, and may perform better in the presence of strong correlations, but may take (much) longer to calculate. ; Definition at line 2686 of file RooAbsReal.cxx. ◆ plotSamplingHint(). std::list< double > * RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in RooLagrangianMorphFunc, RooAddition, RooFormulaVar, RooProduct, RooRealSumFunc, RooRealSumPdf, ParamHistFunc, PiecewiseInterpolation, RooMomentMorphFunc, RooParametricStepFunction, RooParamHistFunc, RooStepFunction, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooHistFunc, RooHistPdf, RooLinearCombination, RooProdPdf, RooRangeBoolean, RooRealIntegral, and RooWrapperPdf.; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:141787,Performance,perform,perform,141787," RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in RooLagrangianMorphFunc, RooAddition, RooFormulaVar, RooProduct, RooRealSumFunc, RooRealSumPdf, ParamHistFunc, PiecewiseInterpolation, RooMomentMorphFunc, RooParametricStepFunction, RooParamHistFunc, RooStepFunction, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooHistFunc, RooHistPdf, RooLinearCombination, RooProdPdf, RooRangeBoolean, RooRealIntegral, and RooWrapperPdf.; Definition at line 3651 of file RooAbsReal.cxx. ◆ plotSanityChecks(). bool RooAbsReal::plotSanityChecks ; (; RooPlot * ; frame); const. protected . Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ; Definition at line 2945 of file RooAbsReal.cxx. ◆ plotSliceOn(). RooPlot * RooAbsReal::plotSliceOn ; (; RooPlot * ; frame, . const RooArgSet & ; sliceSet, . Option_t * ; drawOptions = ""L"", . double ; scaleFactor = 1.0, . ScaleType ; stype = Relative, . const RooAbsData * ; projData = nullptr . ); const. virtual . Deprecated:OBSOLETE – RETAINED FOR BACKWARD COMPATIBILITY. Use plotOn() with Slice() instead ; Definition at line 2253 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:144911,Performance,cache,caches,144911,"453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 424 of file RooAbsReal.cxx. ◆ redirectServersHook(). bool RooAbsReal::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . Function that is called at the end of redirectServers(). ; Can be overloaded to inject some class-dependent behavior after server redirection, e.g. resetting of caches. The return value is meant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooAbsTestStatistic, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, and RooProjectedPdf.; Definition at line 4550 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 384 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:146738,Performance,cache,cache,146738,"= false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooAddModel, RooAddPdf, and RooSimultaneous.; Definition at line 3442 of file RooAbsReal.cxx. ◆ selectNormalizationRange(). void RooAbsReal::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given normalization range to interpret function value. ; Needed for functions or p.d.f.s whose shape depends on the choice of normalization such as RooAddPdf ; Reimplemented in RooBernstein, RooChebychev, RooAddModel, RooAddPdf, RooProdPdf, and RooSimultaneous.; Definition at line 3455 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 568 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAbsTestStatistic, RooAddition, and RooConstraintSum.; Definition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:54756,Safety,sanity check,sanity check,54756,"bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; virtual RooPlot * plotOn (RooPlot *frame, PlotOpt o) const;  Plotting engine function for internal use. ;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:54788,Safety,safe,safe,54788,"bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; virtual RooPlot * plotOn (RooPlot *frame, PlotOpt o) const;  Plotting engine function for internal use. ;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:69521,Safety,predict,predicted,69521,"lemented in RooLognormal, RooPoisson, RooHistFunc, RooHistPdf, RooBernstein, RooBifurGauss, RooCBShape, RooChebychev, RooExponential, RooGamma, RooGaussian, RooLandau, RooPolynomial, RooUniform, RooEfficiency, and RooPolyVar.; Definition at line 4501 of file RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:69622,Safety,predict,predicted,69622,"v, RooExponential, RooGamma, RooGaussian, RooLandau, RooPolynomial, RooUniform, RooEfficiency, and RooPolyVar.; Definition at line 4501 of file RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:69793,Safety,predict,prediction,69793,"RooAbsReal.cxx. ◆ chi2FitTo() [1/4]. RooFit::OwningPtr< RooFitResult > RooAbsReal::chi2FitTo ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . O",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:69928,Safety,predict,prediction,69928,"t RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Perform a \( \chi^2 \) fit to given histogram. ; By default the fit is executed through the MINUIT commands MIGRAD, HESSE in succession; The following named arguments are supported. Options to control construction of chi2 . Extended(bool flag) Only applicable when fitting a RooAbsPdf. Scale the normalized pdf by the number of events predicted by the model instead of scaling by the total data weight. This imposes a constraint on the predicted number of events analogous to the extended term in a likelihood fit.; If you don't pass this command, an extended fit will be done by default if the pdf makes a prediction on the number of events (in RooFit jargon, ""if the pdf can be extended"").; Passing Extended(true) when the the pdf makes no prediction on the expected number of events will result in error messages, and the chi2 will fall back to the total data weight to scale the normalized pdf.; There are cases where the fit must be done in extended mode. This happens for example when you have a RooAddPdf where the coefficients represent component yields. If the fit is not extended, these coefficients will not be well-defined, as the RooAddPdf always normalizes itself. If you pass Extended(false) in such a case, an error will be printed and you'll most likely get garbage results. . Range(const char* name) Fit only data inside range with given name . Range(double lo, double hi) Fit only data inside given range. A range named ""fit"" is created on the fly on all observables. Multiple comma separated range names can be specified. . NumCPU(int num) Parallelize NLL calculation on num CPUs . Optimize(bool flag) Activate constant term optimization (on by default) . IntegrateBins() Integrate PDF within each bin. This sets the desired precision. Options to control flow of fit procedur",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:141803,Safety,sanity check,sanity check,141803," RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in RooLagrangianMorphFunc, RooAddition, RooFormulaVar, RooProduct, RooRealSumFunc, RooRealSumPdf, ParamHistFunc, PiecewiseInterpolation, RooMomentMorphFunc, RooParametricStepFunction, RooParamHistFunc, RooStepFunction, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooHistFunc, RooHistPdf, RooLinearCombination, RooProdPdf, RooRangeBoolean, RooRealIntegral, and RooWrapperPdf.; Definition at line 3651 of file RooAbsReal.cxx. ◆ plotSanityChecks(). bool RooAbsReal::plotSanityChecks ; (; RooPlot * ; frame); const. protected . Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ; Definition at line 2945 of file RooAbsReal.cxx. ◆ plotSliceOn(). RooPlot * RooAbsReal::plotSliceOn ; (; RooPlot * ; frame, . const RooArgSet & ; sliceSet, . Option_t * ; drawOptions = ""L"", . double ; scaleFactor = 1.0, . ScaleType ; stype = Relative, . const RooAbsData * ; projData = nullptr . ); const. virtual . Deprecated:OBSOLETE – RETAINED FOR BACKWARD COMPATIBILITY. Use plotOn() with Slice() instead ; Definition at line 2253 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:141835,Safety,safe,safe,141835," RooAbsReal::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. virtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented in RooLagrangianMorphFunc, RooAddition, RooFormulaVar, RooProduct, RooRealSumFunc, RooRealSumPdf, ParamHistFunc, PiecewiseInterpolation, RooMomentMorphFunc, RooParametricStepFunction, RooParamHistFunc, RooStepFunction, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooHistFunc, RooHistPdf, RooLinearCombination, RooProdPdf, RooRangeBoolean, RooRealIntegral, and RooWrapperPdf.; Definition at line 3651 of file RooAbsReal.cxx. ◆ plotSanityChecks(). bool RooAbsReal::plotSanityChecks ; (; RooPlot * ; frame); const. protected . Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ; Definition at line 2945 of file RooAbsReal.cxx. ◆ plotSliceOn(). RooPlot * RooAbsReal::plotSliceOn ; (; RooPlot * ; frame, . const RooArgSet & ; sliceSet, . Option_t * ; drawOptions = ""L"", . double ; scaleFactor = 1.0, . ScaleType ; stype = Relative, . const RooAbsData * ; projData = nullptr . ); const. virtual . Deprecated:OBSOLETE – RETAINED FOR BACKWARD COMPATIBILITY. Use plotOn() with Slice() instead ; Definition at line 2253 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:40232,Security,hash,hash,40232,"tCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:144830,Security,inject,inject,144830,"ar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGenericPdf, RooLinearVar, and RooRealVar.; Definition at line 424 of file RooAbsReal.cxx. ◆ redirectServersHook(). bool RooAbsReal::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . Function that is called at the end of redirectServers(). ; Can be overloaded to inject some class-dependent behavior after server redirection, e.g. resetting of caches. The return value is meant to be an error flag, so in case something goes wrong the function should return true. If you overload this function, don't forget to also call the function of the base class.; See alsoredirectServers() For a detailed explanation of the function parameters. ; Reimplemented from RooAbsArg.; Reimplemented in RooAddPdf, RooDerivative, RooProdPdf, RooProfileLL, RooAbsTestStatistic, RooFormulaVar, RooGenericPdf, RooNumConvolution, RooRealIntegral, RooResolutionModel, and RooProjectedPdf.; Definition at line 4550 of file RooAbsReal.cxx. ◆ selectComp(). void RooAbsReal::selectComp ; (; bool ; flag). inline . Definition at line 384 of file RooAbsReal.h. ◆ selectNormalization(). void RooAbsReal::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). protectedvirtual . Interface function to force use of a given set of observables to interpret function value. ; Needed f",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:1474,Testability,log,logging,1474,"it » RooFit Core. ; Abstract base class for objects that represent a real value and implements functionality common to all real-valued objects such as the ability to plot them, to construct integrals of them, the ability to advertise (partial) analytical integrals etc. ; Implementation of RooAbsReal may be derived, thus no interface is provided to modify the contents. PyROOT; Some member functions of RooAbsReal that take a RooCmdArg as argument also support keyword arguments. So far, this applies to RooAbsReal::plotOn, RooAbsReal::createHistogram, RooAbsReal::chi2FitTo, RooAbsReal::createChi2, RooAbsReal::createRunningIntegral and RooAbsReal::createIntegral For example, the following code is equivalent in PyROOT: # Directly passing a RooCmdArg:; var.plotOn(frame, ROOT.RooFit.Components(""background"")); ; # With keyword arguments:; var.plotOn(frame, Components=""background""). Definition at line 59 of file RooAbsReal.h. Classes; class  EvalError;  ; class  EvalErrorContext;  Context to temporarily change the error logging mode as long as the context is alive. More...;  ; struct  GlobalSelectComponentRAII;  ; struct  PlotOpt;  ; class  Ref;  A RooAbsReal::Ref can be constructed from a RooAbsReal& or a double that will be implicitly converted to a RooConstVar&. More...;  . Public Types; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:16160,Testability,log,logEvalError,16160,"s parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; TClass * IsA () const override;  ; virtual bool isBinnedDistribution (const RooArgSet &) const;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override;  Equality operator when comparing to ano",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:27778,Testability,test,testArg,27778,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:27902,Testability,test,testArg,27902,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:27984,Testability,test,testArg,27984,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:28108,Testability,test,testArg,28108,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:28212,Testability,test,testArg,28212,") const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:32867,Testability,test,testArg,32867,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:32953,Testability,test,testArg,32953,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:37622,Testability,test,test,37622,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructo",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:37885,Testability,test,test,37885,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; virtual CacheMode canNodeBeCached () const;  ; virtual void setCacheAndTrackHints (RooArgSet &);  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void set",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:48814,Testability,log,logging,48814,"; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbo",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:48875,Testability,log,logEvalError,48875,"ents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:49036,Testability,log,logging,49036,"ents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:49096,Testability,log,logging,49096,"ents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:49208,Testability,log,logged,49208,"given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:49371,Testability,log,logged,49371," ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:49502,Testability,log,logging,49502,"Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:100341,Testability,log,logging,100341,"ChiSquarePdf, RooDstD0BG, RooExponential, RooGamma, RooGaussian, RooGaussModel, RooJohnson, RooLandau, RooLegacyExpPoly, RooLognormal, RooNovosibirsk, RooPoisson, RooPolynomial, RooPowerSum, RooVoigtian, RooAbsCachedPdf, RooAddition, RooAddModel, RooAddPdf, RooBinSamplingPdf, RooBinWidthFunction, RooConstraintSum, RooGenericPdf, RooHistFunc, RooHistPdf, RooPolyVar, RooProduct, RooRatio, RooRealSumPdf, RooTruthModel, RooNormalizedPdf, RooHypatia2, RooLegendre, RooFormulaVar, and RooFixedProdPdf.; Definition at line 4419 of file RooAbsReal.cxx. ◆ enableOffsetting(). void RooAbsReal::enableOffsetting ; (; bool ; flag). virtual . Reimplemented in RooAbsTestStatistic, and RooRealMPFE.; Definition at line 4560 of file RooAbsReal.cxx. ◆ evalErrorIter(). RooAbsReal::EvalErrorIter RooAbsReal::evalErrorIter ; (; ). static . Definition at line 308 of file RooAbsReal.cxx. ◆ evalErrorLoggingMode(). RooAbsReal::ErrorLoggingMode RooAbsReal::evalErrorLoggingMode ; (; ). static . Return current evaluation error logging mode. ; Definition at line 4378 of file RooAbsReal.cxx. ◆ evaluate(). virtual double RooAbsReal::evaluate ; (; ); const. protectedpure virtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implemented in RooStats::HistFactory::FlexibleInterpVar, RooStats::HistFactory::LinInterpVar, ParamHistFunc, PiecewiseInterpolation, RooStats::HistFactory::RooBarlowBeestonLL, Roo2DKeysPdf, RooArgusBG, RooBernstein, RooBifurGauss, RooBreitWigner, RooBukinPdf, RooCBShape, RooCFunction1Binding< VO, VI >, RooCFunction1PdfBinding< VO, VI >, RooCFunction2Binding< VO, VI1, VI2 >, RooCFunction2PdfBinding< VO, VI1, VI2 >, RooCFunction3Binding< VO, VI1, VI2, VI3 >, RooCFunction3PdfBinding< VO, VI1, VI2, VI3 >, RooCFunction4Binding< VO, VI1, VI2, VI3, VI4 >, RooCFunction4PdfBinding< VO, VI1, VI2, VI3, VI4 >, RooChebychev, RooChiSquarePdf, RooCrystalBall, RooDstD0BG, RooExponential, RooFunctor1DBinding, RooFunctor1DPdfBinding, RooFunctorBinding, Ro",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:121118,Testability,log,logEvalError,121118,"ile RooAbsReal.cxx. ◆ isOffsetting(). virtual bool RooAbsReal::isOffsetting ; (; ); const. inlinevirtual . Reimplemented in RooAbsTestStatistic.; Definition at line 377 of file RooAbsReal.h. ◆ isSelectedComp(). bool RooAbsReal::isSelectedComp ; (; ); const. If true, the current pdf is a selected component (for use in plotting) ; Definition at line 3041 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 452 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 454 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:121157,Testability,log,logEvalError,121157,"ual bool RooAbsReal::isOffsetting ; (; ); const. inlinevirtual . Reimplemented in RooAbsTestStatistic.; Definition at line 377 of file RooAbsReal.h. ◆ isSelectedComp(). bool RooAbsReal::isSelectedComp ; (; ); const. If true, the current pdf is a selected component (for use in plotting) ; Definition at line 3041 of file RooAbsReal.cxx. ◆ isValid(). bool RooAbsReal::isValid ; (; ); const. inlineoverrideprotectedvirtual . Check if current value is valid. ; Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 452 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 454 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error log",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:121526,Testability,log,logEvalError,121526," Reimplemented from RooAbsArg.; Reimplemented in RooRealIntegral.; Definition at line 452 of file RooAbsReal.h. ◆ isValidReal(). virtual bool RooAbsReal::isValidReal ; (; double ; , . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 454 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Defin",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:121746,Testability,log,logged,121746," . bool ; printError = false . ); const. inlineprotectedvirtual . Interface function to check if given value is a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 454 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:121921,Testability,log,logging,121921,"a valid value for this object. Returns true unless overridden. ; Reimplemented in RooAbsRealLValue, RooRealIntegral, RooFormulaVar, and RooGenericPdf.; Definition at line 454 of file RooAbsReal.h. ◆ logEvalError() [1/2]. void RooAbsReal::logEvalError ; (; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:122167,Testability,log,logging,122167,"(; const char * ; message, . const char * ; serverValueString = nullptr . ); const. Log evaluation error message. ; Evaluation errors may be routed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input paramete",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:122308,Testability,log,logEvalError,122308,"ed through a different protocol than generic RooFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2988 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; al",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:122347,Testability,log,logEvalError,122347,"oFit warning message (which go straight through RooMsgService) because evaluation errors can occur in very large numbers in the use of likelihood evaluations. In logEvalError mode, controlled by global method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2988 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArg",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:122543,Testability,log,logging,122543,"al method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2988 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to a",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:122603,Testability,log,logging,122603,"al method enableEvalErrorLogging() messages reported through this function are not printed but all stored in a list, along with server values at the time of reporting. Error messages logged in this way can be printed in a structured way, eliminating duplicates and with the ability to truncate the list by printEvalErrors. This is the standard mode of error logging during MINUIT operations. If enableEvalErrorLogging() is false, all errors reported through this method are passed for immediate printing through RooMsgService. A string with server names and values is constructed automatically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2988 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to a",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:128065,Testability,log,logged,128065,"tralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root ; [in]intNormObsIf true, the moment of the function integrated over all normalization observables is returned. . Definition at line 4110 of file RooAbsReal.cxx. ◆ moment() [2/2]. RooAbsMoment * RooAbsReal::moment ; (; RooRealVar & ; obs, . Int_t ; order, . bool ; central, . bool ; takeRoot . ). Return function representing moment of function of given order. ; Parameters. [in]obsObservable to calculate the moments for ; [in]orderOrder of the moment ; [in]centralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root . Definition at line 4091 of file RooAbsReal.cxx. ◆ numEvalErrorItems(). Int_t RooAbsReal::numEvalErrorItems ; (; ). static . Definition at line 300 of file RooAbsReal.cxx. ◆ numEvalErrors(). Int_t RooAbsReal::numEvalErrors ; (; ). static . Return the number of logged evaluation errors since the last clearing. ; Definition at line 3701 of file RooAbsReal.cxx. ◆ offset(). virtual double RooAbsReal::offset ; (; ); const. inlinevirtual . Reimplemented in RooAbsTestStatistic.; Definition at line 378 of file RooAbsReal.h. ◆ operator==() [1/2]. bool RooAbsReal::operator== ; (; const RooAbsArg & ; other); const. overridevirtual . Equality operator when comparing to another RooAbsArg. ; Only functional when the other arg is a RooAbsReal ; Implements RooAbsArg.; Definition at line 239 of file RooAbsReal.cxx. ◆ operator==() [2/2]. bool RooAbsReal::operator== ; (; double ; value); const. Equality operator comparing to a double. ; Definition at line 228 of file RooAbsReal.cxx. ◆ plotAsymOn(). RooPlot * RooAbsReal::plotAsymOn ; (; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Definition at line 2284 of file RooAbsReal.cxx. ◆ plotOn() [1/3]. RooAbsReal::plotOn ; (; RooPlot * ; frame, . const RooCmdArg & ; arg1 ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:133383,Testability,log,log,133383,"rint details of each error up to numErr messages per p.d.f component. EvalErrorValue(double value) Set curve points at which (pdf) evaluation errors occur to specified value. By default the function value is plotted. Normalization(double scale, ScaleType code) Adjust normalization by given scale factor. Interpretation of number depends on code:; Relative: relative adjustment factor for a normalized function,; NumEvent: scale to match given number of events.; Raw: relative adjustment factor for an un-normalized function. Name(const chat* name) Give curve specified name in frame. Useful if curve is to be referenced later. Asymmetry(const RooCategory& c) Show the asymmetry of the PDF in given two-state category [F(+)-F(-)] / [F(+)+F(-)] rather than the PDF projection. Category must have two states with indices -1 and +1 or three states with indices -1,0 and +1. ShiftToZero(bool flag) Shift entire curve such that lowest visible point is at exactly zero. Mostly useful when plotting \( -\log(L) \) or \( \chi^2 \) distributions. AddTo(const char* name, double_t wgtSelf, double_t wgtOther) Add constructed projection to already existing curve with given name and relative weight factors . Components(const char* names) When plotting sums of PDFs, plot only the named components (e.g. only the signal of a signal+background model). . Components(const RooArgSet& compSet) As above, but pass a RooArgSet of the components themselves. Plotting control . DrawOption(const char* opt) Select ROOT draw option for resulting TGraph object. Currently supported options are ""F"" (fill), ""L"" (line), and ""P"" (points). NoteOption ""P"" will cause RooFit to plot (and treat) this pdf as if it were data! This is intended for plotting ""corrected data""-type pdfs such as ""data-minus-background"" or unfolded datasets. LineStyle(Int_t style) Select line style by ROOT line style code, default is solid. LineColor(Int_t color) Select line color by ROOT color code, default is blue. LineWidth(Int_t width) Select l",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:143154,Testability,log,logged,143154,"t. virtual . Deprecated:OBSOLETE – RETAINED FOR BACKWARD COMPATIBILITY. Use plotOn() with Slice() instead ; Definition at line 2253 of file RooAbsReal.cxx. ◆ preferredObservableScanOrder(). void RooAbsReal::preferredObservableScanOrder ; (; const RooArgSet & ; obs, . RooArgSet & ; orderedObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3770 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3662 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:143469,Testability,log,logged,143469,"deredObs . ); const. virtual . Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ; The observables to be ordered are offered in argument 'obs' and should be copied in their preferred order into argument 'orderedObs', This default implementation indicates no preference and copies the original order of 'obs' into 'orderedObs' ; Reimplemented in RooIntegralMorph, and RooCachedPdf.; Definition at line 3770 of file RooAbsReal.cxx. ◆ printEvalErrors(). void RooAbsReal::printEvalErrors ; (; std::ostream & ; os = std::cout, . Int_t ; maxPerNode = 10000000 . ). static . Print all outstanding logged evaluation error on the given ostream. ; If maxPerNode is zero, only the number of errors for each source (object with unique name) is listed. If maxPerNode is greater than zero, up to maxPerNode detailed error messages are shown per source of errors. A truncation message is shown if there were more errors logged than shown. ; Definition at line 3662 of file RooAbsReal.cxx. ◆ printMultiline(). void RooAbsReal::printMultiline ; (; std::ostream & ; os, . Int_t ; contents, . bool ; verbose = false, . TString ; indent = """" . ); const. overridevirtual . Structure printing. ; Reimplemented from RooAbsArg.; Reimplemented in RooGenericPdf, RooResolutionModel, RooAbsRealLValue, RooFormulaVar, RooRealIntegral, and RooRealVar.; Definition at line 453 of file RooAbsReal.cxx. ◆ printValue(). void RooAbsReal::printValue ; (; std::ostream & ; os); const. overridevirtual . Print object value. ; Reimplemented from RooPrintable.; Reimplemented in RooRealVar.; Definition at line 443 of file RooAbsReal.cxx. ◆ readFromStream(). bool RooAbsReal::readFromStream ; (; std::istream & ; is, . bool ; compact, . bool ; verbose = false . ). overridevirtual . Read object contents from stream (dummy for now) ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, RooErrorVar, RooFormulaVar, RooGe",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:147407,Testability,log,logging,147407,"RooAddPdf ; Reimplemented in RooBernstein, RooChebychev, RooAddModel, RooAddPdf, RooProdPdf, and RooSimultaneous.; Definition at line 3455 of file RooAbsReal.cxx. ◆ setCachedValue(). void RooAbsReal::setCachedValue ; (; double ; value, . bool ; notifyClients = true . ). inlinefinalvirtual . Overwrite the value stored in this object's cache. ; This can be used to fake a computation that resulted in value. Parameters. [in]valueValue to write. ; [in]notifyClientsIf true, notify users of this object that its value changed. This is the default. . Reimplemented from RooAbsArg.; Definition at line 568 of file RooAbsReal.h. ◆ setData(). virtual bool RooAbsReal::setData ; (; RooAbsData & ; , . bool ; = true . ). inlinevirtual . Reimplemented in ProgressMonitor, RooAbsTestStatistic, RooAddition, and RooConstraintSum.; Definition at line 374 of file RooAbsReal.h. ◆ setEvalErrorLoggingMode(). void RooAbsReal::setEvalErrorLoggingMode ; (; RooAbsReal::ErrorLoggingMode ; m). static . Set evaluation error logging mode. ; Options are; PrintErrors - Print each error through RooMsgService() as it occurs CollectErrors - Accumulate errors, but do not print them. A subsequent call to printEvalErrors() will print a summary CountErrors - Accumulate error count, but do not print them. ; Definition at line 4392 of file RooAbsReal.cxx. ◆ setHideOffset(). void RooAbsReal::setHideOffset ; (; bool ; flag). static . Definition at line 168 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [1/2]. void RooAbsReal::setIntegratorConfig ; (; ). Remove the specialized numeric integration configuration associated with this object. ; Definition at line 3428 of file RooAbsReal.cxx. ◆ setIntegratorConfig() [2/2]. void RooAbsReal::setIntegratorConfig ; (; const RooNumIntConfig & ; config). Set the given integrator configuration as default numeric integration configuration for this object. ; Definition at line 3417 of file RooAbsReal.cxx. ◆ setParameterizeIntegral(). void RooAbsReal::setParameterizeIntegral ; (;",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:30316,Usability,clear,clear,30316,"ert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; virtual void printMetaArgs (std::ostream &) const;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashCon",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:30999,Usability,clear,clear,30999,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; TIterator * clientIterator () const R__DEPRECATED(6;  Retrieve a client iterator. ;  ; TIterator Use clients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * valueClientIterator () const R__DEPRECATED(6;  ; TIterator Use valueClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * shapeClientIterator () const R__DEPRECATED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator *",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:31415,Usability,simpl,simple,31415," ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; virtual void translate (RooFit::Detail::CodeSquashContext &ctx) const;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ; RooWorkspace * workspace () const;  ; TIterator * clientIterator () const R__DEPRECATED(6;  Retrieve a client iterator. ;  ; TIterator Use clients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * valueClientIterator () const R__DEPRECATED(6;  ; TIterator Use valueClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * shapeClientIterator () const R__DEPRECATED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () o",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:48442,Usability,clear,clearEvalErrorLog,48442,"_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error o",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:49248,Usability,clear,clearing,49248,"given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:56003,Usability,clear,clearShapeDirty,56003,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:56037,Usability,clear,clearValueAndShapeDirty,56037,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:56079,Usability,clear,clearValueDirty,56079,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:79308,Usability,clear,clearEvalErrorLog,79308,". Warnings(bool flag) Enable or disable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 558 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3622 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 3082 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:79346,Usability,clear,clearEvalErrorLog,79346,"isable MINUIT warnings (enabled by default) . PrintEvalErrors(Int_t numErr) Control number of p.d.f evaluation errors printed per likelihood evaluation. A negative value suppress output completely, a zero value will only print the error count per p.d.f component, a positive value is will print details of each error up to numErr messages per p.d.f component. . PyROOT; The RooAbsReal::chi2FitTo() function is pythonized with the command argument pythonization. The keywords must correspond to the CmdArgs of the function. . Definition at line 4330 of file RooAbsReal.cxx. ◆ Class(). static TClass * RooAbsReal::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooAbsReal::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooAbsReal::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 558 of file RooAbsReal.h. ◆ clearEvalErrorLog(). void RooAbsReal::clearEvalErrorLog ; (; ). static . Clear the stack of evaluation error messages. ; Definition at line 3622 of file RooAbsReal.cxx. ◆ copyCache(). void RooAbsReal::copyCache ; (; const RooAbsArg * ; source, . bool ; valueOnly = false, . bool ; setValDirty = true . ). overrideprotectedvirtual . Copy the cached value of another RooAbsArg to our cache. ; Warning: This function just copies the cached values of source, it is the callers responsibility to make sure the cache is clean. ; Implements RooAbsArg.; Reimplemented in RooAbsRealLValue, and RooRealVar.; Definition at line 3082 of file RooAbsReal.cxx. ◆ createChi2() [1/4]. RooAbsReal::createChi2 ; (; RooDataHist & ; data, . const RooCmdArg & ; arg1 = {}, . const RooCmdArg & ; arg2 = {}, . const RooCmdArg & ; arg3 = {}, . const RooCmdArg & ; arg4 = {}, . const RooCmdArg & ; arg5 = {}, . const RooCmdArg & ; arg6 = {}, . const RooCmdArg & ; arg7 = {}, . const RooCmdArg & ; arg8 = {} . ). virtual . Create a \( \chi^2 \) variable from a histogra",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:123121,Usability,clear,cleared,123121,"atically for error logging purposes, unless a custom string with similar information is passed as argument. ; Definition at line 3545 of file RooAbsReal.cxx. ◆ logEvalError() [2/2]. void RooAbsReal::logEvalError ; (; const RooAbsReal * ; originator, . const char * ; origName, . const char * ; message, . const char * ; serverValueString = nullptr . ). static . Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ; Definition at line 3490 of file RooAbsReal.cxx. ◆ makeProjectionSet(). void RooAbsReal::makeProjectionSet ; (; const RooAbsArg * ; plotVar, . const RooArgSet * ; allVars, . RooArgSet & ; projectedVars, . bool ; silent . ); const. protected . Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ; 'allVars' is the list of variables that must be projected, but may contain variables that we do not depend on. If 'silent' is cleared, warnings about inconsistent input parameters will be printed. ; Definition at line 2988 of file RooAbsReal.cxx. ◆ matchArgs() [1/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the content of proxy 'a' occurs in set 'allDeps' then the argument held in 'a' is copied from allDeps to analDeps ; Definition at line 3228 of file RooAbsReal.cxx. ◆ matchArgs() [2/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgProxy & ; a, . const RooArgProxy & ; b . ); const. protected . Utility function for use in getAnalyticalIntegral(). ; If the contents of proxies a,b occur in set 'allDeps' then the arguments held in a,b are copied from allDeps to analDeps ; Definition at line 3245 of file RooAbsReal.cxx. ◆ matchArgs() [3/5]. bool RooAbsReal::matchArgs ; (; const RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:128105,Usability,clear,clearing,128105,"tralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root ; [in]intNormObsIf true, the moment of the function integrated over all normalization observables is returned. . Definition at line 4110 of file RooAbsReal.cxx. ◆ moment() [2/2]. RooAbsMoment * RooAbsReal::moment ; (; RooRealVar & ; obs, . Int_t ; order, . bool ; central, . bool ; takeRoot . ). Return function representing moment of function of given order. ; Parameters. [in]obsObservable to calculate the moments for ; [in]orderOrder of the moment ; [in]centralIf true, the central moment is given by \( \langle (x- \langle x \rangle )^2 \rangle \) ; [in]takeRootCalculate the square root . Definition at line 4091 of file RooAbsReal.cxx. ◆ numEvalErrorItems(). Int_t RooAbsReal::numEvalErrorItems ; (; ). static . Definition at line 300 of file RooAbsReal.cxx. ◆ numEvalErrors(). Int_t RooAbsReal::numEvalErrors ; (; ). static . Return the number of logged evaluation errors since the last clearing. ; Definition at line 3701 of file RooAbsReal.cxx. ◆ offset(). virtual double RooAbsReal::offset ; (; ); const. inlinevirtual . Reimplemented in RooAbsTestStatistic.; Definition at line 378 of file RooAbsReal.h. ◆ operator==() [1/2]. bool RooAbsReal::operator== ; (; const RooAbsArg & ; other); const. overridevirtual . Equality operator when comparing to another RooAbsArg. ; Only functional when the other arg is a RooAbsReal ; Implements RooAbsArg.; Definition at line 239 of file RooAbsReal.cxx. ◆ operator==() [2/2]. bool RooAbsReal::operator== ; (; double ; value); const. Equality operator comparing to a double. ; Definition at line 228 of file RooAbsReal.cxx. ◆ plotAsymOn(). RooPlot * RooAbsReal::plotAsymOn ; (; RooPlot * ; frame, . const RooAbsCategoryLValue & ; asymCat, . PlotOpt ; o . ); const. protectedvirtual . Definition at line 2284 of file RooAbsReal.cxx. ◆ plotOn() [1/3]. RooAbsReal::plotOn ; (; RooPlot * ; frame, . const RooCmdArg & ; arg1 ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAbsReal.html:137515,Usability,intuit,intuitive,137515," * ; frame, . PlotOpt ; o . ); const. protectedvirtual . Plotting engine function for internal use. ; Plot ourselves on given frame. If frame contains a histogram, all dimensions of the plotted function that occur in the previously plotted dataset are projected via partial integration, otherwise no projections are performed. Optionally, certain projections can be performed by summing over the values present in a provided dataset ('projData'), to correctly project out data dependents that are not properly described by the PDF (e.g. per-event errors).; The functions value can be multiplied with an optional scale factor. The interpretation of the scale factor is unique for generic real functions, for PDFs there are various interpretations possible, which can be selection with 'stype' (see RooAbsPdf::plotOn() for details).; The default projection behaviour can be overridden by supplying an optional set of dependents to project. For most cases, plotSliceOn() and plotProjOn() provide a more intuitive interface to modify the default projection behaviour. ; Reimplemented in RooAbsPdf, and RooSimultaneous.; Definition at line 1931 of file RooAbsReal.cxx. ◆ plotOn() [3/3]. RooPlot * RooAbsReal::plotOn ; (; RooPlot * ; frame, . RooLinkedList & ; cmdList . ); const. virtual . Internal back-end function of plotOn() with named arguments. ; Reimplemented in RooAbsPdf, RooSimultaneous, and RooSimultaneous.; Definition at line 1659 of file RooAbsReal.cxx. ◆ plotOnCompSelect(). void RooAbsReal::plotOnCompSelect ; (; RooArgSet * ; selNodes); const. protected . Helper function for plotting of composite p.d.fs. ; Given a set of selected components that should be plotted, find all nodes that (in)directly depend on these selected nodes. Mark all directly and indirectly selected nodes as 'selected' using the selectComp() method ; Definition at line 1466 of file RooAbsReal.cxx. ◆ plotOnWithErrorBand(). RooPlot * RooAbsReal::plotOnWithErrorBand ; (; RooPlot * ; frame, . const RooFitResult & ",MatchSource.WIKI,doc/v632/classRooAbsReal.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAbsReal.html
https://root.cern/doc/v632/classRooAddPdf.html:5955,Availability,error,error,5955,"on. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; const RooArgSet & getCoefNormalization () const;  ; const char * getCoefRange () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  If all components that depend on obs are binned, so is their sum. ;  ; const RooArgList & pdfList () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ;  ; void resetErrorCounters (Int_t resetValue=10) override;  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooAddPdf with cache-and-track. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor wit",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:6015,Availability,error,error,6015,"on. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; const RooArgSet & getCoefNormalization () const;  ; const char * getCoefRange () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  If all components that depend on obs are binned, so is their sum. ;  ; const RooArgList & pdfList () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ;  ; void resetErrorCounters (Int_t resetValue=10) override;  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooAddPdf with cache-and-track. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor wit",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:13366,Availability,error,error,13366,"for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool removeConstraintsFromPdf=false) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet &, bool, bool=false) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:14821,Availability,error,errors,14821,"se the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specificatio",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:28568,Availability,error,error,28568,"this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:47566,Availability,mask,mask,47566,"s);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const Ro",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:53105,Availability,error,error,53105,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:53194,Availability,error,error,53194,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:53349,Availability,error,error,53349,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:53646,Availability,error,error,53646,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:57730,Availability,error,error,57730,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption s",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:59985,Availability,error,error,59985,"R of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged ev",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60298,Availability,error,error,60298,"ited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbo",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60520,Availability,error,error,60520,"torConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60580,Availability,error,error,60580,"torConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60716,Availability,error,errors,60716,"t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60879,Availability,error,error,60879," ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60986,Availability,error,error,60986,"Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:69359,Availability,error,error,69359," for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:72070,Availability,error,error,72070,"e in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _allExtendable = false;  Flag indicating if all PDF components are extendable. ;  ; RooAICRegistry _codeReg;  ! Registry of component analytical integration codes ;  ; std::vector< double > _coefCache;  ! Transient cache with transformed values of coefficients ;  ; Int_t _coefErrCount;  ! Coefficient error counter ;  ; RooListProxy _coefList;  List of coefficients. ;  ; bool _haveLastCoef = false;  Flag indicating if last PDFs coefficient was supplied in the constructor. ;  ; RooListProxy _pdfList;  List of component PDFs. ;  ; RooObjCacheManager _projCacheMgr;  ; bool _recursive = false;  Flag indicating is fractions are treated recursively. ;  ; RooSetProxy _refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgList * _snormList {nullptr};  ! List of supplemental normalization factors ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization r",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:72778,Availability,error,errors,72778,tected). ;  ; void MakeZombie ();  . Protected Attributes; bool _allExtendable = false;  Flag indicating if all PDF components are extendable. ;  ; RooAICRegistry _codeReg;  ! Registry of component analytical integration codes ;  ; std::vector< double > _coefCache;  ! Transient cache with transformed values of coefficients ;  ; Int_t _coefErrCount;  ! Coefficient error counter ;  ; RooListProxy _coefList;  List of coefficients. ;  ; bool _haveLastCoef = false;  Flag indicating if last PDFs coefficient was supplied in the constructor. ;  ; RooListProxy _pdfList;  List of component PDFs. ;  ; RooObjCacheManager _projCacheMgr;  ; bool _recursive = false;  Flag indicating is fractions are treated recursively. ;  ; RooSetProxy _refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgList * _snormList {nullptr};  ! List of supplemental normalization factors ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;,MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:92400,Availability,error,error,92400,"m if there are multiple. ; Reimplemented from RooAbsReal.; Definition at line 912 of file RooAddPdf.cxx. ◆ printMetaArgs(). void RooAddPdf::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 949 of file RooAddPdf.cxx. ◆ redirectServersHook(). bool RooAddPdf::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . The cache manager. ; Hook function intercepting redirectServer calls.; Discard current normalization object if any server is redirected ; Reimplemented from RooAbsPdf.; Definition at line 955 of file RooAddPdf.cxx. ◆ resetErrorCounters(). void RooAddPdf::resetErrorCounters ; (; Int_t ; resetValue = 10). overridevirtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented from RooAbsPdf.; Definition at line 602 of file RooAddPdf.cxx. ◆ selectNormalization(). void RooAddPdf::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 863 of file RooAddPdf.cxx. ◆ selectNormalizationRange(). void RooAddPdf::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 886 of file RooAddPdf.cxx. ◆ selfNormalized(). bool RooAddPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:92460,Availability,error,error,92460,"m if there are multiple. ; Reimplemented from RooAbsReal.; Definition at line 912 of file RooAddPdf.cxx. ◆ printMetaArgs(). void RooAddPdf::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 949 of file RooAddPdf.cxx. ◆ redirectServersHook(). bool RooAddPdf::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . The cache manager. ; Hook function intercepting redirectServer calls.; Discard current normalization object if any server is redirected ; Reimplemented from RooAbsPdf.; Definition at line 955 of file RooAddPdf.cxx. ◆ resetErrorCounters(). void RooAddPdf::resetErrorCounters ; (; Int_t ; resetValue = 10). overridevirtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented from RooAbsPdf.; Definition at line 602 of file RooAddPdf.cxx. ◆ selectNormalization(). void RooAddPdf::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 863 of file RooAddPdf.cxx. ◆ selectNormalizationRange(). void RooAddPdf::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 886 of file RooAddPdf.cxx. ◆ selfNormalized(). bool RooAddPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:96955,Availability,error,error,96955,d from the _coefList elements to the _coefCache. True by default. ; Definition at line 442 of file RooAddPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 115 of file RooAddPdf.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 116 of file RooAddPdf.h. Member Data Documentation. ◆ _allExtendable. bool RooAddPdf::_allExtendable = false. protected . Flag indicating if all PDF components are extendable. ; Definition at line 136 of file RooAddPdf.h. ◆ _codeReg. RooAICRegistry RooAddPdf::_codeReg. mutableprotected . ! Registry of component analytical integration codes ; Definition at line 129 of file RooAddPdf.h. ◆ _coefCache. std::vector<double> RooAddPdf::_coefCache. mutableprotected . ! Transient cache with transformed values of coefficients ; Definition at line 107 of file RooAddPdf.h. ◆ _coefErrCount. Int_t RooAddPdf::_coefErrCount. mutableprotected . ! Coefficient error counter ; Definition at line 139 of file RooAddPdf.h. ◆ _coefList. RooListProxy RooAddPdf::_coefList. protected . List of coefficients. ; Definition at line 132 of file RooAddPdf.h. ◆ _copyOfLastNormSet. std::unique_ptr<const RooArgSet> RooAddPdf::_copyOfLastNormSet = nullptr. mutableprivate . ! ; Definition at line 146 of file RooAddPdf.h. ◆ _haveLastCoef. bool RooAddPdf::_haveLastCoef = false. protected . Flag indicating if last PDFs coefficient was supplied in the constructor. ; Definition at line 135 of file RooAddPdf.h. ◆ _idOfLastUsedNormSet. RooFit::UniqueId<RooArgSet>::Value_t RooAddPdf::_idOfLastUsedNormSet = RooFit::UniqueId<RooArgSet>::nullval. mutableprivate . ! ; Definition at line 145 of file RooAddPdf.h. ◆ _pdfList. RooListProxy RooAddPdf::_pdfList. protected . List of component PDFs. ; Definition at line 131 of file RooAddPdf.h. ◆ _projCacheMgr. RooObjCacheManager RooAddPdf::_projCacheMgr. mutableprotected . Definition at line 110 of file RooAddPdf.h. ◆ _recursive. bool RooAddPdf::_re,MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:4963,Deployability,integrat,integration,4963," const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; void fixCoefNormalization (const RooArgSet &refCoefNorm);  By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ;  ; void fixCoefRange (const char *rangeName);  By default, fraction coefficients are assumed to refer to the default fit range. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  Force RooRealIntegral to offer all observables for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; const RooArgSet & getCoefNormalization () const;  ; const char * getCoefRange () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  If all components that depend on obs are binned, so is their sum. ;  ; const RooArgList & pdfList () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ;  ; void resetErro",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:8390,Deployability,integrat,integrated,8390,"Extended () const;  If true, PDF can provide extended likelihood term. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:13108,Deployability,configurat,configuration,13108,"n of an event using the algorithm corresponding to the specified code. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool removeConstraintsFromPdf=false) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet &, bool, bool=false) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over obser",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:15577,Deployability,configurat,configuration,15577,"normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages f",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16066,Deployability,configurat,configuration,16066," const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *u",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16186,Deployability,configurat,configuration,16186,"plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *u",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16232,Deployability,configurat,configuration,16232,"plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *u",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16613,Deployability,integrat,integrator,16613,"ect for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooA",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16624,Deployability,configurat,configuration,16624,"ect for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooA",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16753,Deployability,integrat,integrator,16753,"ents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16764,Deployability,configurat,configuration,16764,"ents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:22096,Deployability,configurat,configuration,22096,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:22126,Deployability,integrat,integration,22126,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:23057,Deployability,configurat,configuration,23057,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:23087,Deployability,integrat,integration,23087,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:27201,Deployability,integrat,integration,27201,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:27213,Deployability,configurat,configuration,27213,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:27328,Deployability,integrat,integration,27328,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const overr",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:27340,Deployability,configurat,configuration,27340,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const overr",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30592,Deployability,integrat,integration,30592,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30604,Deployability,configurat,configuration,30604,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30725,Deployability,integrat,integrator,30725,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30736,Deployability,configurat,configuration,30736,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30769,Deployability,integrat,integration,30769,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30781,Deployability,configurat,configuration,30781,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:31191,Deployability,integrat,integrator,31191,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:31202,Deployability,configurat,configuration,31202,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:31332,Deployability,integrat,integrator,31332,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:31343,Deployability,configurat,configuration,31343,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:44129,Deployability,update,updates,44129,"eClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const RooAbsArg &arg) const;  Check if this is serving values to arg. ;  ; bool isValueServer (const char *name) const;  Check if this is serving values to an object with name name. ;  ; bool isShapeServer (const RooAbsArg &arg) const;  Check if this is serving shape to arg. ;  ; bool isShapeServer (const char *name) const;  Check if this is serving shape to an object with name name. ;  ; void leafNodeServerList (RooAbsColl",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:46180,Deployability,integrat,integrated,46180," *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all leaf nodes of the arg tree, starting with ourself as top node. ;  ; void branchNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all branch nodes of the arg tree starting with ourself as top node. ;  ; void treeNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool doBranch=true, bool doLeaf=true, bool valueOnly=false, bool recurseNonDerived=false) const;  Fill supplied list with nodes of the arg tree, following all server links, starting with ourself as top node. ;  ; virtual bool isFundamental () const;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:59515,Deployability,configurat,configuration,59515,"r *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return curren",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60128,Deployability,integrat,integration,60128,"c const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60140,Deployability,configurat,configuration,60140,"c const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:63980,Deployability,update,updateCoefficients,63980,"erbose) ; // WVE DEBUG. ;  ; AddCacheElem * getProjCache (const RooArgSet *nset, const RooArgSet *iset=nullptr) const;  Manager of cache with coefficient projections and transformations. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Calculate and return the current value. ;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  The cache manager. ;  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ; void updateCoefficients (AddCacheElem &cache, const RooArgSet *nset, bool syncCoefValues=true) const;  Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:66808,Deployability,integrat,integrated,66808,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:66866,Deployability,integrat,integration,66866,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:71913,Deployability,integrat,integration,71913,"e in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _allExtendable = false;  Flag indicating if all PDF components are extendable. ;  ; RooAICRegistry _codeReg;  ! Registry of component analytical integration codes ;  ; std::vector< double > _coefCache;  ! Transient cache with transformed values of coefficients ;  ; Int_t _coefErrCount;  ! Coefficient error counter ;  ; RooListProxy _coefList;  List of coefficients. ;  ; bool _haveLastCoef = false;  Flag indicating if last PDFs coefficient was supplied in the constructor. ;  ; RooListProxy _pdfList;  List of component PDFs. ;  ; RooObjCacheManager _projCacheMgr;  ; bool _recursive = false;  Flag indicating is fractions are treated recursively. ;  ; RooSetProxy _refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgList * _snormList {nullptr};  ! List of supplemental normalization factors ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization r",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:73271,Deployability,configurat,configuration,73271,mponent PDFs. ;  ; RooObjCacheManager _projCacheMgr;  ; bool _recursive = false;  Flag indicating is fractions are treated recursively. ;  ; RooSetProxy _refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgList * _snormList {nullptr};  ! List of supplemental normalization factors ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransi,MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:73474,Deployability,integrat,integration,73474,_refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgList * _snormList {nullptr};  ! List of supplemental normalization factors ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ,MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:87007,Deployability,integrat,integrating,87007,"ion of the fraction coefficients is performed in the contextual choice of observables. ; This makes the shape of the p.d.f explicitly dependent on the choice of observables. This method instructs RooAddPdf to freeze the interpretation of the coefficients to be done in the given set of observables. If frozen, fractions are automatically transformed from the reference normalization set to the contextual normalization set by ratios of integrals. ; Definition at line 319 of file RooAddPdf.cxx. ◆ fixCoefRange(). void RooAddPdf::fixCoefRange ; (; const char * ; rangeName). By default, fraction coefficients are assumed to refer to the default fit range. ; This makes the shape of a RooAddPdf explicitly dependent on the range of the observables. Calling this function allows for a range-independent definition of the fractions, because it ties all coefficients to the given named range. If the normalisation range is different from this reference range, the appropriate fraction coefficients are automatically calculated from the reference fractions by integrating over the ranges, and comparing these integrals. ; Definition at line 385 of file RooAddPdf.cxx. ◆ forceAnalyticalInt(). bool RooAddPdf::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Force RooRealIntegral to offer all observables for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooAddPdf.h. ◆ genContext(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars,",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:87293,Deployability,integrat,integration,87293,"ions are automatically transformed from the reference normalization set to the contextual normalization set by ratios of integrals. ; Definition at line 319 of file RooAddPdf.cxx. ◆ fixCoefRange(). void RooAddPdf::fixCoefRange ; (; const char * ; rangeName). By default, fraction coefficients are assumed to refer to the default fit range. ; This makes the shape of a RooAddPdf explicitly dependent on the range of the observables. Calling this function allows for a range-independent definition of the fractions, because it ties all coefficients to the given named range. If the normalisation range is different from this reference range, the appropriate fraction coefficients are automatically calculated from the reference fractions by integrating over the ranges, and comparing these integrals. ; Definition at line 385 of file RooAddPdf.cxx. ◆ forceAnalyticalInt(). bool RooAddPdf::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Force RooRealIntegral to offer all observables for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooAddPdf.h. ◆ genContext(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88177,Deployability,integrat,integration,88177,"al to offer all observables for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooAddPdf.h. ◆ genContext(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88209,Deployability,integrat,integration,88209,"al to offer all observables for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooAddPdf.h. ◆ genContext(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88292,Deployability,integrat,integration,88292,"al to offer all observables for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooAddPdf.h. ◆ genContext(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88406,Deployability,integrat,integrated,88406,"text(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddP",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88519,Deployability,integrat,integrating,88519," = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projection",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88586,Deployability,integrat,integration,88586," = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projection",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88618,Deployability,integrat,integration,88618," = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projection",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:89687,Deployability,integrat,integration,89687,"Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projections and transformations. ; Retrieve cache element for the computation of the PDF normalisation.; Parameters. [in]nsetCurrent normalisation set (integration over these variables yields 1). ; [in]isetIntegration set. Variables to be integrated over (if integrations are performed). If a cache element does not exist, create and fill it on the fly. The cache also contains; Supplemental normalization terms (in case not all added p.d.f.s have the same observables); Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; Projection integrals for similar transformations when a frozen reference range is provided. . Definition at line 406 of file RooAddPdf.cxx. ◆ getValV(). double RooAddPdf::getValV ; (; const RooArgSet * ; set = nullptr); const. overrideprotectedvirtual . Calculate and return the current value. ; Reimplemented from RooAbsPdf.; Definition at line 515 of file RooAddPdf.cxx. ◆ IsA(). TClass * RooAddPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 153 of file RooAddPdf.h. ◆ isBinnedDi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:89774,Deployability,integrat,integrated,89774,"::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projections and transformations. ; Retrieve cache element for the computation of the PDF normalisation.; Parameters. [in]nsetCurrent normalisation set (integration over these variables yields 1). ; [in]isetIntegration set. Variables to be integrated over (if integrations are performed). If a cache element does not exist, create and fill it on the fly. The cache also contains; Supplemental normalization terms (in case not all added p.d.f.s have the same observables); Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; Projection integrals for similar transformations when a frozen reference range is provided. . Definition at line 406 of file RooAddPdf.cxx. ◆ getValV(). double RooAddPdf::getValV ; (; const RooArgSet * ; set = nullptr); const. overrideprotectedvirtual . Calculate and return the current value. ; Reimplemented from RooAbsPdf.; Definition at line 515 of file RooAddPdf.cxx. ◆ IsA(). TClass * RooAddPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 153 of file RooAddPdf.h. ◆ isBinnedDistribution(). bool RooAddPdf::isBinnedDistribution ; (; const RooArgSet & ; obs); const. overridevi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:89794,Deployability,integrat,integrations,89794,"::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projections and transformations. ; Retrieve cache element for the computation of the PDF normalisation.; Parameters. [in]nsetCurrent normalisation set (integration over these variables yields 1). ; [in]isetIntegration set. Variables to be integrated over (if integrations are performed). If a cache element does not exist, create and fill it on the fly. The cache also contains; Supplemental normalization terms (in case not all added p.d.f.s have the same observables); Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; Projection integrals for similar transformations when a frozen reference range is provided. . Definition at line 406 of file RooAddPdf.cxx. ◆ getValV(). double RooAddPdf::getValV ; (; const RooArgSet * ; set = nullptr); const. overrideprotectedvirtual . Calculate and return the current value. ; Reimplemented from RooAbsPdf.; Definition at line 515 of file RooAddPdf.cxx. ◆ IsA(). TClass * RooAddPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 153 of file RooAddPdf.h. ◆ isBinnedDistribution(). bool RooAddPdf::isBinnedDistribution ; (; const RooArgSet & ; obs); const. overridevi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:95264,Deployability,update,updateCoefficients,95264,"n object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooAddPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 153 of file RooAddPdf.h. ◆ translate(). void RooAddPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 548 of file RooAddPdf.cxx. ◆ updateCoefficients(). void RooAddPdf::updateCoefficients ; (; AddCacheElem & ; cache, . const RooArgSet * ; nset, . bool ; syncCoefValues = true . ); const. protected . Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ; param[in] cache The cache element for the given normalization set that stores the supplementary normalization values and projection-related objects. param[in] nset The set of variables to normalize over. param[in] syncCoefValues If the initial values of the coefficients still need to be copied from the _coefList elements to the _coefCache. True by default. ; Definition at line 442 of file RooAddPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 115 of file RooAddPdf.h. ◆ RooAddModel. friend class RooAddMod",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:95302,Deployability,update,updateCoefficients,95302,"om RooAbsPdf. ◆ StreamerNVirtual(). void RooAddPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 153 of file RooAddPdf.h. ◆ translate(). void RooAddPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 548 of file RooAddPdf.cxx. ◆ updateCoefficients(). void RooAddPdf::updateCoefficients ; (; AddCacheElem & ; cache, . const RooArgSet * ; nset, . bool ; syncCoefValues = true . ); const. protected . Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ; param[in] cache The cache element for the given normalization set that stores the supplementary normalization values and projection-related objects. param[in] nset The set of variables to normalize over. param[in] syncCoefValues If the initial values of the coefficients still need to be copied from the _coefList elements to the _coefCache. True by default. ; Definition at line 442 of file RooAddPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 115 of file RooAddPdf.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 116 of file R",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:96629,Deployability,integrat,integration,96629,ions needed in the current use context. ; param[in] cache The cache element for the given normalization set that stores the supplementary normalization values and projection-related objects. param[in] nset The set of variables to normalize over. param[in] syncCoefValues If the initial values of the coefficients still need to be copied from the _coefList elements to the _coefCache. True by default. ; Definition at line 442 of file RooAddPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 115 of file RooAddPdf.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 116 of file RooAddPdf.h. Member Data Documentation. ◆ _allExtendable. bool RooAddPdf::_allExtendable = false. protected . Flag indicating if all PDF components are extendable. ; Definition at line 136 of file RooAddPdf.h. ◆ _codeReg. RooAICRegistry RooAddPdf::_codeReg. mutableprotected . ! Registry of component analytical integration codes ; Definition at line 129 of file RooAddPdf.h. ◆ _coefCache. std::vector<double> RooAddPdf::_coefCache. mutableprotected . ! Transient cache with transformed values of coefficients ; Definition at line 107 of file RooAddPdf.h. ◆ _coefErrCount. Int_t RooAddPdf::_coefErrCount. mutableprotected . ! Coefficient error counter ; Definition at line 139 of file RooAddPdf.h. ◆ _coefList. RooListProxy RooAddPdf::_coefList. protected . List of coefficients. ; Definition at line 132 of file RooAddPdf.h. ◆ _copyOfLastNormSet. std::unique_ptr<const RooArgSet> RooAddPdf::_copyOfLastNormSet = nullptr. mutableprivate . ! ; Definition at line 146 of file RooAddPdf.h. ◆ _haveLastCoef. bool RooAddPdf::_haveLastCoef = false. protected . Flag indicating if last PDFs coefficient was supplied in the constructor. ; Definition at line 135 of file RooAddPdf.h. ◆ _idOfLastUsedNormSet. RooFit::UniqueId<RooArgSet>::Value_t RooAddPdf::_idOfLastUsedNormSet = RooFit::UniqueId<RooArgSet>::nullval. mutableprivate . ,MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:15602,Energy Efficiency,efficient,efficient,15602,"normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages f",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:17925,Energy Efficiency,adapt,adaptor,17925,"ctions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:63045,Energy Efficiency,efficient,efficiently,63045,"TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; bool canComputeBatchWithCuda () const override;  ; void doEval (RooFit::EvalContext &) const override;  Compute addition of PDFs in batches. ;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ;  ; AddCacheElem * getProjCache (const RooArgSet *nset, const RooArgSet *iset=nullptr) const;  Manager of cache with coefficient projections and transformations. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Calculate and return the current value. ;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  The cache manager. ;  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ; void updateCoefficients (AddCache",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:87651,Energy Efficiency,efficient,efficiently,87651,". Calling this function allows for a range-independent definition of the fractions, because it ties all coefficients to the given named range. If the normalisation range is different from this reference range, the appropriate fraction coefficients are automatically calculated from the reference fractions by integrating over the ranges, and comparing these integrals. ; Definition at line 385 of file RooAddPdf.cxx. ◆ forceAnalyticalInt(). bool RooAddPdf::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Force RooRealIntegral to offer all observables for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooAddPdf.h. ◆ genContext(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definiti",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:4963,Integrability,integrat,integration,4963," const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; void fixCoefNormalization (const RooArgSet &refCoefNorm);  By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ;  ; void fixCoefRange (const char *rangeName);  By default, fraction coefficients are assumed to refer to the default fit range. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  Force RooRealIntegral to offer all observables for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; const RooArgSet & getCoefNormalization () const;  ; const char * getCoefRange () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  If all components that depend on obs are binned, so is their sum. ;  ; const RooArgList & pdfList () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ;  ; void resetErro",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:5425,Integrability,depend,depend,5425,"r of events for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; void fixCoefNormalization (const RooArgSet &refCoefNorm);  By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ;  ; void fixCoefRange (const char *rangeName);  By default, fraction coefficients are assumed to refer to the default fit range. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  Force RooRealIntegral to offer all observables for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; const RooArgSet & getCoefNormalization () const;  ; const char * getCoefRange () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  If all components that depend on obs are binned, so is their sum. ;  ; const RooArgList & pdfList () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ;  ; void resetErrorCounters (Int_t resetValue=10) override;  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooAddPdf with cache-and-track. ;  ; void Stre",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:6021,Integrability,message,messages,6021,"on. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; const RooArgSet & getCoefNormalization () const;  ; const char * getCoefRange () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  If all components that depend on obs are binned, so is their sum. ;  ; const RooArgList & pdfList () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ;  ; void resetErrorCounters (Int_t resetValue=10) override;  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooAddPdf with cache-and-track. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor wit",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:8390,Integrability,integrat,integrated,8390,"Extended () const;  If true, PDF can provide extended likelihood term. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:12276,Integrability,interface,interface,12276,"  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual void generateEvent (Int_t code);  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool removeConstraintsFromPdf=false) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet &, bool, bool=false) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual do",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:13372,Integrability,message,message,13372,"for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool removeConstraintsFromPdf=false) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet &, bool, bool=false) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16498,Integrability,message,messages,16498,"tVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analy",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16613,Integrability,integrat,integrator,16613,"ect for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooA",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16753,Integrability,integrat,integrator,16753,"ents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:17915,Integrability,interface,interface,17915,"ctions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:22126,Integrability,integrat,integration,22126,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:23087,Integrability,integrat,integration,23087,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:23308,Integrability,depend,dependentVars,23308,"nction over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooArgSet &nset={});  Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooCmdArg &",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:27201,Integrability,integrat,integration,27201,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:27328,Integrability,integrat,integration,27328,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const overr",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:28497,Integrability,message,message,28497,"this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:28574,Integrability,message,message,28574,"this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30592,Integrability,integrat,integration,30592,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30725,Integrability,integrat,integrator,30725,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30769,Integrability,integrat,integration,30769,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:31191,Integrability,integrat,integrator,31191,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:31332,Integrability,integrat,integrator,31332,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:32735,Integrability,depend,dependent,32735," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:32942,Integrability,depend,dependent,32942," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified obje",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:33698,Integrability,depend,dependsOn,33698,"DataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:33816,Integrability,depend,depend,33816,"DataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:33878,Integrability,depend,dependsOn,33878,"; const std::set< std::string > & attributes () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:34007,Integrability,depend,depend,34007,"; const std::set< std::string > & attributes () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:34087,Integrability,depend,dependsOn,34087,"* cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:34203,Integrability,depend,depend,34203,"* cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:34275,Integrability,depend,dependsOnValue,34275,"t to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:34386,Integrability,depend,depends,34386,"t to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:34455,Integrability,depend,dependsOnValue,34455,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:34577,Integrability,depend,depends,34577,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:35564,Integrability,depend,dependents,35564," bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable lis",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:35754,Integrability,depend,depends,35754,"me) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set o",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:36481,Integrability,depend,dependents,36481,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:38504,Integrability,depend,depend,38504,"connected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; v",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:38910,Integrability,depend,dependents,38910,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:39116,Integrability,depend,dependents,39116,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:40354,Integrability,interface,interface,40354,"y of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os, const char *ind="""");  Hook function interface for object to insert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:43645,Integrability,depend,dependentOverlaps,43645,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:43729,Integrability,depend,dependentOverlaps,43729,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:46180,Integrability,integrat,integrated,46180," *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all leaf nodes of the arg tree, starting with ourself as top node. ;  ; void branchNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all branch nodes of the arg tree starting with ourself as top node. ;  ; void treeNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool doBranch=true, bool doLeaf=true, bool valueOnly=false, bool recurseNonDerived=false) const;  Fill supplied list with nodes of the arg tree, following all server links, starting with ourself as top node. ;  ; virtual bool isFundamental () const;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:47037,Integrability,depend,depend,47037,"tal-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old s",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:47734,Integrability,depend,depend,47734,"Change=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:53111,Integrability,message,message,53111,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:53652,Integrability,message,message,53652,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:54642,Integrability,message,message,54642,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:57736,Integrability,message,message,57736,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption s",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:58109,Integrability,message,message,58109," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char *",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:59991,Integrability,message,messages,59991,"R of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged ev",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60128,Integrability,integrat,integration,60128,"c const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60443,Integrability,message,message,60443,"torConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60534,Integrability,message,messages,60534,"torConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:64620,Integrability,rout,routine,64620,";  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ; void updateCoefficients (AddCacheElem &cache, const RooArgSet *nset, bool syncCoefValues=true) const;  Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization o",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:64786,Integrability,rout,routine,64786,"les for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ; void updateCoefficients (AddCacheElem &cache, const RooArgSet *nset, bool syncCoefValues=true) const;  Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of gi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:66808,Integrability,integrat,integrated,66808,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:66866,Integrability,integrat,integration,66866,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:69373,Integrability,wrap,wrapper,69373," for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:71913,Integrability,integrat,integration,71913,"e in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _allExtendable = false;  Flag indicating if all PDF components are extendable. ;  ; RooAICRegistry _codeReg;  ! Registry of component analytical integration codes ;  ; std::vector< double > _coefCache;  ! Transient cache with transformed values of coefficients ;  ; Int_t _coefErrCount;  ! Coefficient error counter ;  ; RooListProxy _coefList;  List of coefficients. ;  ; bool _haveLastCoef = false;  Flag indicating if last PDFs coefficient was supplied in the constructor. ;  ; RooListProxy _pdfList;  List of component PDFs. ;  ; RooObjCacheManager _projCacheMgr;  ; bool _recursive = false;  Flag indicating is fractions are treated recursively. ;  ; RooSetProxy _refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgList * _snormList {nullptr};  ! List of supplemental normalization factors ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization r",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:73474,Integrability,integrat,integration,73474,_refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgList * _snormList {nullptr};  ! List of supplemental normalization factors ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ,MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:86087,Integrability,depend,dependent,86087," is either the sum of all coefficients or the sum of the components extended terms, multiplied with the fraction that is in the current range w.r.t the reference range. ; Reimplemented from RooAbsPdf.; Definition at line 756 of file RooAddPdf.cxx. ◆ extendMode(). ExtendMode RooAddPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 60 of file RooAddPdf.h. ◆ finalizeConstruction(). void RooAddPdf::finalizeConstruction ; (; ). private . Definition at line 111 of file RooAddPdf.cxx. ◆ fixCoefNormalization(). void RooAddPdf::fixCoefNormalization ; (; const RooArgSet & ; refCoefNorm). By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ; This makes the shape of the p.d.f explicitly dependent on the choice of observables. This method instructs RooAddPdf to freeze the interpretation of the coefficients to be done in the given set of observables. If frozen, fractions are automatically transformed from the reference normalization set to the contextual normalization set by ratios of integrals. ; Definition at line 319 of file RooAddPdf.cxx. ◆ fixCoefRange(). void RooAddPdf::fixCoefRange ; (; const char * ; rangeName). By default, fraction coefficients are assumed to refer to the default fit range. ; This makes the shape of a RooAddPdf explicitly dependent on the range of the observables. Calling this function allows for a range-independent definition of the fractions, because it ties all coefficients to the given named range. If the normalisation range is different from this reference range, the appropriate fraction coefficients are automatically calculated from the reference fractions by integrating over the ranges, and comparing these integrals. ; Definition at line 385 of file ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:86657,Integrability,depend,dependent,86657,"; Definition at line 60 of file RooAddPdf.h. ◆ finalizeConstruction(). void RooAddPdf::finalizeConstruction ; (; ). private . Definition at line 111 of file RooAddPdf.cxx. ◆ fixCoefNormalization(). void RooAddPdf::fixCoefNormalization ; (; const RooArgSet & ; refCoefNorm). By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ; This makes the shape of the p.d.f explicitly dependent on the choice of observables. This method instructs RooAddPdf to freeze the interpretation of the coefficients to be done in the given set of observables. If frozen, fractions are automatically transformed from the reference normalization set to the contextual normalization set by ratios of integrals. ; Definition at line 319 of file RooAddPdf.cxx. ◆ fixCoefRange(). void RooAddPdf::fixCoefRange ; (; const char * ; rangeName). By default, fraction coefficients are assumed to refer to the default fit range. ; This makes the shape of a RooAddPdf explicitly dependent on the range of the observables. Calling this function allows for a range-independent definition of the fractions, because it ties all coefficients to the given named range. If the normalisation range is different from this reference range, the appropriate fraction coefficients are automatically calculated from the reference fractions by integrating over the ranges, and comparing these integrals. ; Definition at line 385 of file RooAddPdf.cxx. ◆ forceAnalyticalInt(). bool RooAddPdf::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Force RooRealIntegral to offer all observables for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooAddPdf.h. ◆ genContext(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to ef",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:87007,Integrability,integrat,integrating,87007,"ion of the fraction coefficients is performed in the contextual choice of observables. ; This makes the shape of the p.d.f explicitly dependent on the choice of observables. This method instructs RooAddPdf to freeze the interpretation of the coefficients to be done in the given set of observables. If frozen, fractions are automatically transformed from the reference normalization set to the contextual normalization set by ratios of integrals. ; Definition at line 319 of file RooAddPdf.cxx. ◆ fixCoefRange(). void RooAddPdf::fixCoefRange ; (; const char * ; rangeName). By default, fraction coefficients are assumed to refer to the default fit range. ; This makes the shape of a RooAddPdf explicitly dependent on the range of the observables. Calling this function allows for a range-independent definition of the fractions, because it ties all coefficients to the given named range. If the normalisation range is different from this reference range, the appropriate fraction coefficients are automatically calculated from the reference fractions by integrating over the ranges, and comparing these integrals. ; Definition at line 385 of file RooAddPdf.cxx. ◆ forceAnalyticalInt(). bool RooAddPdf::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Force RooRealIntegral to offer all observables for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooAddPdf.h. ◆ genContext(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars,",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:87293,Integrability,integrat,integration,87293,"ions are automatically transformed from the reference normalization set to the contextual normalization set by ratios of integrals. ; Definition at line 319 of file RooAddPdf.cxx. ◆ fixCoefRange(). void RooAddPdf::fixCoefRange ; (; const char * ; rangeName). By default, fraction coefficients are assumed to refer to the default fit range. ; This makes the shape of a RooAddPdf explicitly dependent on the range of the observables. Calling this function allows for a range-independent definition of the fractions, because it ties all coefficients to the given named range. If the normalisation range is different from this reference range, the appropriate fraction coefficients are automatically calculated from the reference fractions by integrating over the ranges, and comparing these integrals. ; Definition at line 385 of file RooAddPdf.cxx. ◆ forceAnalyticalInt(). bool RooAddPdf::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Force RooRealIntegral to offer all observables for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooAddPdf.h. ◆ genContext(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88177,Integrability,integrat,integration,88177,"al to offer all observables for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooAddPdf.h. ◆ genContext(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88209,Integrability,integrat,integration,88209,"al to offer all observables for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooAddPdf.h. ◆ genContext(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88292,Integrability,integrat,integration,88292,"al to offer all observables for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooAddPdf.h. ◆ genContext(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88406,Integrability,integrat,integrated,88406,"text(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddP",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88519,Integrability,integrat,integrating,88519," = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projection",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88586,Integrability,integrat,integration,88586," = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projection",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88618,Integrability,integrat,integration,88618," = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projection",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:89687,Integrability,integrat,integration,89687,"Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projections and transformations. ; Retrieve cache element for the computation of the PDF normalisation.; Parameters. [in]nsetCurrent normalisation set (integration over these variables yields 1). ; [in]isetIntegration set. Variables to be integrated over (if integrations are performed). If a cache element does not exist, create and fill it on the fly. The cache also contains; Supplemental normalization terms (in case not all added p.d.f.s have the same observables); Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; Projection integrals for similar transformations when a frozen reference range is provided. . Definition at line 406 of file RooAddPdf.cxx. ◆ getValV(). double RooAddPdf::getValV ; (; const RooArgSet * ; set = nullptr); const. overrideprotectedvirtual . Calculate and return the current value. ; Reimplemented from RooAbsPdf.; Definition at line 515 of file RooAddPdf.cxx. ◆ IsA(). TClass * RooAddPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 153 of file RooAddPdf.h. ◆ isBinnedDi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:89774,Integrability,integrat,integrated,89774,"::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projections and transformations. ; Retrieve cache element for the computation of the PDF normalisation.; Parameters. [in]nsetCurrent normalisation set (integration over these variables yields 1). ; [in]isetIntegration set. Variables to be integrated over (if integrations are performed). If a cache element does not exist, create and fill it on the fly. The cache also contains; Supplemental normalization terms (in case not all added p.d.f.s have the same observables); Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; Projection integrals for similar transformations when a frozen reference range is provided. . Definition at line 406 of file RooAddPdf.cxx. ◆ getValV(). double RooAddPdf::getValV ; (; const RooArgSet * ; set = nullptr); const. overrideprotectedvirtual . Calculate and return the current value. ; Reimplemented from RooAbsPdf.; Definition at line 515 of file RooAddPdf.cxx. ◆ IsA(). TClass * RooAddPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 153 of file RooAddPdf.h. ◆ isBinnedDistribution(). bool RooAddPdf::isBinnedDistribution ; (; const RooArgSet & ; obs); const. overridevi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:89794,Integrability,integrat,integrations,89794,"::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projections and transformations. ; Retrieve cache element for the computation of the PDF normalisation.; Parameters. [in]nsetCurrent normalisation set (integration over these variables yields 1). ; [in]isetIntegration set. Variables to be integrated over (if integrations are performed). If a cache element does not exist, create and fill it on the fly. The cache also contains; Supplemental normalization terms (in case not all added p.d.f.s have the same observables); Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; Projection integrals for similar transformations when a frozen reference range is provided. . Definition at line 406 of file RooAddPdf.cxx. ◆ getValV(). double RooAddPdf::getValV ; (; const RooArgSet * ; set = nullptr); const. overrideprotectedvirtual . Calculate and return the current value. ; Reimplemented from RooAbsPdf.; Definition at line 515 of file RooAddPdf.cxx. ◆ IsA(). TClass * RooAddPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 153 of file RooAddPdf.h. ◆ isBinnedDistribution(). bool RooAddPdf::isBinnedDistribution ; (; const RooArgSet & ; obs); const. overridevi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:90821,Integrability,depend,depend,90821,"che element does not exist, create and fill it on the fly. The cache also contains; Supplemental normalization terms (in case not all added p.d.f.s have the same observables); Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; Projection integrals for similar transformations when a frozen reference range is provided. . Definition at line 406 of file RooAddPdf.cxx. ◆ getValV(). double RooAddPdf::getValV ; (; const RooArgSet * ; set = nullptr); const. overrideprotectedvirtual . Calculate and return the current value. ; Reimplemented from RooAbsPdf.; Definition at line 515 of file RooAddPdf.cxx. ◆ IsA(). TClass * RooAddPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 153 of file RooAddPdf.h. ◆ isBinnedDistribution(). bool RooAddPdf::isBinnedDistribution ; (; const RooArgSet & ; obs); const. overridevirtual . If all components that depend on obs are binned, so is their sum. ; Reimplemented from RooAbsReal.; Definition at line 929 of file RooAddPdf.cxx. ◆ materializeRefCoefNormFromAttribute(). void RooAddPdf::materializeRefCoefNormFromAttribute ; (; ); const. private . Definition at line 345 of file RooAddPdf.cxx. ◆ pdfList(). const RooArgList & RooAddPdf::pdfList ; (; ); const. inline . Definition at line 70 of file RooAddPdf.h. ◆ plotSamplingHint(). std::list< double > * RooAddPdf::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Loop over components for plot sampling hints and merge them if there are multiple. ; Reimplemented from RooAbsReal.; Definition at line 912 of file RooAddPdf.cxx. ◆ printMetaArgs(). void RooAddPdf::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at li",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:92466,Integrability,message,messages,92466,"m if there are multiple. ; Reimplemented from RooAbsReal.; Definition at line 912 of file RooAddPdf.cxx. ◆ printMetaArgs(). void RooAddPdf::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 949 of file RooAddPdf.cxx. ◆ redirectServersHook(). bool RooAddPdf::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . The cache manager. ; Hook function intercepting redirectServer calls.; Discard current normalization object if any server is redirected ; Reimplemented from RooAbsPdf.; Definition at line 955 of file RooAddPdf.cxx. ◆ resetErrorCounters(). void RooAddPdf::resetErrorCounters ; (; Int_t ; resetValue = 10). overridevirtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented from RooAbsPdf.; Definition at line 602 of file RooAddPdf.cxx. ◆ selectNormalization(). void RooAddPdf::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 863 of file RooAddPdf.cxx. ◆ selectNormalizationRange(). void RooAddPdf::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 886 of file RooAddPdf.cxx. ◆ selfNormalized(). bool RooAddPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:96629,Integrability,integrat,integration,96629,ions needed in the current use context. ; param[in] cache The cache element for the given normalization set that stores the supplementary normalization values and projection-related objects. param[in] nset The set of variables to normalize over. param[in] syncCoefValues If the initial values of the coefficients still need to be copied from the _coefList elements to the _coefCache. True by default. ; Definition at line 442 of file RooAddPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 115 of file RooAddPdf.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 116 of file RooAddPdf.h. Member Data Documentation. ◆ _allExtendable. bool RooAddPdf::_allExtendable = false. protected . Flag indicating if all PDF components are extendable. ; Definition at line 136 of file RooAddPdf.h. ◆ _codeReg. RooAICRegistry RooAddPdf::_codeReg. mutableprotected . ! Registry of component analytical integration codes ; Definition at line 129 of file RooAddPdf.h. ◆ _coefCache. std::vector<double> RooAddPdf::_coefCache. mutableprotected . ! Transient cache with transformed values of coefficients ; Definition at line 107 of file RooAddPdf.h. ◆ _coefErrCount. Int_t RooAddPdf::_coefErrCount. mutableprotected . ! Coefficient error counter ; Definition at line 139 of file RooAddPdf.h. ◆ _coefList. RooListProxy RooAddPdf::_coefList. protected . List of coefficients. ; Definition at line 132 of file RooAddPdf.h. ◆ _copyOfLastNormSet. std::unique_ptr<const RooArgSet> RooAddPdf::_copyOfLastNormSet = nullptr. mutableprivate . ! ; Definition at line 146 of file RooAddPdf.h. ◆ _haveLastCoef. bool RooAddPdf::_haveLastCoef = false. protected . Flag indicating if last PDFs coefficient was supplied in the constructor. ; Definition at line 135 of file RooAddPdf.h. ◆ _idOfLastUsedNormSet. RooFit::UniqueId<RooArgSet>::Value_t RooAddPdf::_idOfLastUsedNormSet = RooFit::UniqueId<RooArgSet>::nullval. mutableprivate . ,MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:653,Modifiability,extend,extended,653,". ROOT: RooAddPdf Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooAddPdf Class ReferenceRooFit » RooFit Core. ; Efficient implementation of a sum of PDFs of the form. . \[; \sum_{i=1}^{n} c_i \cdot \mathrm{PDF}_i; \]. or ; \[; c_1\cdot\mathrm{PDF}_1 + c_2\cdot\mathrm{PDF}_2 \; + \; ... \; + \; \left( 1-\sum_{i=1}^{n-1}c_i \right) \cdot \mathrm{PDF}_n; \]. The first form is for extended likelihood fits, where the expected number of events is \( \sum_i c_i \). The coefficients \( c_i \) can either be explicitly provided, or, if all components support extended likelihood fits, they can be calculated from the contribution of each PDF to the total expected number of events.; In the second form, the sum of the coefficients is required to be 1 or less, and the coefficient of the last PDF is calculated automatically from the condition that the sum of all coefficients has to be 1. Recursive coefficients; It is also possible to parameterise the coefficients recursively. \[; \sum_{i=1}^n c_i \prod_{j=1}^{i-1} \left[ (1-c_j) \right] \cdot \mathrm{PDF}_i \\; = c_1 \cdot \mathrm{PDF}_1 + (1-c_1)\, c_2 \cdot \mathrm{PDF}_2 + \ldots + (1-c_1)\ldots(1-c_{n-1}) \cdot 1 \cdot \mathrm{PDF}_n \\; \]. In this form the sum of the coefficients is always less than 1.0 for all possible values of the individual coefficients between 0 and 1. NoteDon't pass the \( n^\mathrm{th} \) coefficient. It is always 1, since the normalisation condition removes one degree of freedom.; RooAddPdf relies on each component PDF to be normalized and will perform no normalization other than calculating the proper last coefficient \( c_n \), if requested. An (enforced) condition for this assumption is that each \( \mathrm{PDF}_i \) is independent",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:828,Modifiability,extend,extended,828,". ROOT: RooAddPdf Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Public Member Functions |; Static Public Member Functions |; Protected Member Functions |; Protected Attributes |; Private Member Functions |; Private Attributes |; Friends |; List of all members ; RooAddPdf Class ReferenceRooFit » RooFit Core. ; Efficient implementation of a sum of PDFs of the form. . \[; \sum_{i=1}^{n} c_i \cdot \mathrm{PDF}_i; \]. or ; \[; c_1\cdot\mathrm{PDF}_1 + c_2\cdot\mathrm{PDF}_2 \; + \; ... \; + \; \left( 1-\sum_{i=1}^{n-1}c_i \right) \cdot \mathrm{PDF}_n; \]. The first form is for extended likelihood fits, where the expected number of events is \( \sum_i c_i \). The coefficients \( c_i \) can either be explicitly provided, or, if all components support extended likelihood fits, they can be calculated from the contribution of each PDF to the total expected number of events.; In the second form, the sum of the coefficients is required to be 1 or less, and the coefficient of the last PDF is calculated automatically from the condition that the sum of all coefficients has to be 1. Recursive coefficients; It is also possible to parameterise the coefficients recursively. \[; \sum_{i=1}^n c_i \prod_{j=1}^{i-1} \left[ (1-c_j) \right] \cdot \mathrm{PDF}_i \\; = c_1 \cdot \mathrm{PDF}_1 + (1-c_1)\, c_2 \cdot \mathrm{PDF}_2 + \ldots + (1-c_1)\ldots(1-c_{n-1}) \cdot 1 \cdot \mathrm{PDF}_n \\; \]. In this form the sum of the coefficients is always less than 1.0 for all possible values of the individual coefficients between 0 and 1. NoteDon't pass the \( n^\mathrm{th} \) coefficient. It is always 1, since the normalisation condition removes one degree of freedom.; RooAddPdf relies on each component PDF to be normalized and will perform no normalization other than calculating the proper last coefficient \( c_n \), if requested. An (enforced) condition for this assumption is that each \( \mathrm{PDF}_i \) is independent",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:2336,Modifiability,extend,extended,2336,"t \mathrm{PDF}_i \\; = c_1 \cdot \mathrm{PDF}_1 + (1-c_1)\, c_2 \cdot \mathrm{PDF}_2 + \ldots + (1-c_1)\ldots(1-c_{n-1}) \cdot 1 \cdot \mathrm{PDF}_n \\; \]. In this form the sum of the coefficients is always less than 1.0 for all possible values of the individual coefficients between 0 and 1. NoteDon't pass the \( n^\mathrm{th} \) coefficient. It is always 1, since the normalisation condition removes one degree of freedom.; RooAddPdf relies on each component PDF to be normalized and will perform no normalization other than calculating the proper last coefficient \( c_n \), if requested. An (enforced) condition for this assumption is that each \( \mathrm{PDF}_i \) is independent of each \( c_i \). Difference between RooAddPdf / RooRealSumFunc / RooRealSumPdf. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definition at line 33 of file RooAddPdf.h. Public Member Functions;  RooAddPdf ();  ;  RooAddPdf (const char *name, const char *title, const RooArgList &pdfList);  Generic constructor from list of extended PDFs. ;  ;  RooAddPdf (const char *name, const char *title, const RooArgList &pdfList, const RooArgList &coefList, bool recursiveFraction=false);  Generic constructor from list of PDFs and list of coefficients. ;  ;  RooAddPdf (const char *name, const char *title, RooAbsPdf &pdf1, RooAbsPdf &pdf2, RooAbsReal &coef1);  Constructor with two PDFs and one coefficient. ;  ;  RooAddPdf (const char *name, const char *title=nullptr);  Dummy constructor. ;  ;  RooAddPdf (const RooAddPdf &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAddPdf () override;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:2647,Modifiability,extend,extended,2647,"al coefficients between 0 and 1. NoteDon't pass the \( n^\mathrm{th} \) coefficient. It is always 1, since the normalisation condition removes one degree of freedom.; RooAddPdf relies on each component PDF to be normalized and will perform no normalization other than calculating the proper last coefficient \( c_n \), if requested. An (enforced) condition for this assumption is that each \( \mathrm{PDF}_i \) is independent of each \( c_i \). Difference between RooAddPdf / RooRealSumFunc / RooRealSumPdf. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definition at line 33 of file RooAddPdf.h. Public Member Functions;  RooAddPdf ();  ;  RooAddPdf (const char *name, const char *title, const RooArgList &pdfList);  Generic constructor from list of extended PDFs. ;  ;  RooAddPdf (const char *name, const char *title, const RooArgList &pdfList, const RooArgList &coefList, bool recursiveFraction=false);  Generic constructor from list of PDFs and list of coefficients. ;  ;  RooAddPdf (const char *name, const char *title, RooAbsPdf &pdf1, RooAbsPdf &pdf2, RooAbsReal &coef1);  Constructor with two PDFs and one coefficient. ;  ;  RooAddPdf (const char *name, const char *title=nullptr);  Dummy constructor. ;  ;  RooAddPdf (const RooAddPdf &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAddPdf () override;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Return analytical integral defined by given scenario code. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Loop over components for plot sampling hints and merge them if there are multiple.",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:4351,Modifiability,extend,extended,4351,"rride;  Return analytical integral defined by given scenario code. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Check if PDF is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; void fixCoefNormalization (const RooArgSet &refCoefNorm);  By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ;  ; void fixCoefRange (const char *rangeName);  By default, fraction coefficients are assumed to refer to the default fit range. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  Force RooRealIntegral to offer all observables for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; const RooArgSet & getCoefNormalization () const;  ; const char * getCoefRange () const;  ; TClass * IsA () const override; ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:4438,Modifiability,extend,extendMode,4438,"e) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Check if PDF is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; void fixCoefNormalization (const RooArgSet &refCoefNorm);  By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ;  ; void fixCoefRange (const char *rangeName);  By default, fraction coefficients are assumed to refer to the default fit range. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  Force RooRealIntegral to offer all observables for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; const RooArgSet & getCoefNormalization () const;  ; const char * getCoefRange () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  If all components that depend on obs are binned, so is their sum. ;  ; co",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:4503,Modifiability,extend,extended,4503,"e) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Check if PDF is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; void fixCoefNormalization (const RooArgSet &refCoefNorm);  By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ;  ; void fixCoefRange (const char *rangeName);  By default, fraction coefficients are assumed to refer to the default fit range. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  Force RooRealIntegral to offer all observables for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; const RooArgSet & getCoefNormalization () const;  ; const char * getCoefRange () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  If all components that depend on obs are binned, so is their sum. ;  ; co",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:6699,Modifiability,inherit,inherited,6699,"tMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ;  ; void resetErrorCounters (Int_t resetValue=10) override;  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooAddPdf with cache-and-track. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbs",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:7451,Modifiability,extend,extended,7451,"r &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; Roo",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:8678,Modifiability,extend,extended,8678,"et &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > g",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:8711,Modifiability,extend,extendedTerm,8711,"ooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdAr",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:8824,Modifiability,extend,extendedTerm,8824,"dArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our d",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:8945,Modifiability,extend,extended,8945,"ntegral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:9113,Modifiability,extend,extendedTerm,9113,"g(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > genera",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:9211,Modifiability,extend,extended,9211,"g(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > genera",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:9803,Modifiability,variab,variables,9803,"ikelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:10137,Modifiability,variab,variables,10137,"log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::Ownin",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:10380,Modifiability,extend,extended,10380," of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distributio",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:10452,Modifiability,variab,variables,10452," of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distributio",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:11297,Modifiability,variab,variables,11297,"our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, double nEvents=0, bool verbose=false, bool autoBinned=true, const char *binnedTag="""", bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual void generateEvent (Int_t code);  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; virtual RooFit::O",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:11485,Modifiability,extend,extended,11485,"ed from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual void generateEvent (Int_t code);  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool re",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:11557,Modifiability,variab,variables,11557,"ed from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, Int_t nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={});  See RooAbsPdf::generate(const RooArgSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooDataSet > generate (GenSpec &) const;  Generate according to GenSpec obtained from prepareMultiGen(). ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual void generateEvent (Int_t code);  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool re",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:13108,Modifiability,config,configuration,13108,"n of an event using the algorithm corresponding to the specified code. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool removeConstraintsFromPdf=false) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet &, bool, bool=false) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over obser",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:14464,Modifiability,extend,extended,14464,"tNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:15577,Modifiability,config,configuration,15577,"normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages f",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16066,Modifiability,config,configuration,16066," const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *u",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16162,Modifiability,config,config,16162,"plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *u",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16186,Modifiability,config,configuration,16186,"plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *u",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16232,Modifiability,config,configuration,16232,"plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *u",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16624,Modifiability,config,configuration,16624,"ect for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooA",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16764,Modifiability,config,configuration,16764,"ents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:16894,Modifiability,inherit,inherited,16894,"lization integral that was last used, if any. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) t",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:17925,Modifiability,adapt,adaptor,17925,"ctions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:17972,Modifiability,variab,variables,17972,"ctions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:19652,Modifiability,variab,variable,19652,"2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooLinkedList &cmdList);  Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create a \( \chi^2 \) variable from a histogram and this function. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataHist &data, const RooLinkedList &cmdList);  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataSet &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create a \( \chi^2 \) from a series of x and y values stored in a dataset. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataSet &data, const RooLinkedList &cmdList);  See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:21333,Modifiability,variab,variables,21333,"inkedList &cmdList);  See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=nullptr) const override;  Create a RooRealVar fundamental object with our properties. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nu",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:22096,Modifiability,config,configuration,22096,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:23057,Modifiability,config,configuration,23057,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:27213,Modifiability,config,configuration,27213,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:27340,Modifiability,config,configuration,27340,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const overr",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:27603,Modifiability,variab,variable,27603," the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation e",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:27852,Modifiability,variab,variable,27852,"th given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; vi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30604,Modifiability,config,configuration,30604,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30701,Modifiability,config,config,30701,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30736,Modifiability,config,configuration,30736,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30781,Modifiability,config,configuration,30781,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30954,Modifiability,variab,variable,30954,"es for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean a",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:31202,Modifiability,config,configuration,31202,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:31343,Modifiability,config,configuration,31343,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:31595,Modifiability,inherit,inherited,31595,"ool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollectio",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:32664,Modifiability,variab,variable,32664," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:32699,Modifiability,variab,variables,32699," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:32871,Modifiability,variab,variable,32871," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified obje",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:32906,Modifiability,variab,variables,32906," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified obje",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:35520,Modifiability,variab,variable,35520," bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable lis",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:36437,Modifiability,variab,variable,36437,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:37630,Modifiability,variab,variables,37630," set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (const Text_t *key) const;  Get string attribute mapped under key 'key'. ;  ; bool getTransientAttribute (const Text_t *name) const;  Check if a named attribute is set. ;  ; RooFit::OwningPtr< RooArgSet > getVariables (bool stripDisconnected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:50102,Modifiability,inherit,inherited,50102,"const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () cons",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:51648,Modifiability,inherit,inherited,51648,"ects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:52741,Modifiability,inherit,inheritance,52741,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:54740,Modifiability,inherit,inherits,54740,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:54857,Modifiability,inherit,inherits,54857,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:58416,Modifiability,inherit,inherited,58416,"id SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator c",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:59240,Modifiability,inherit,inherited,59240,"r *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return curren",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:59515,Modifiability,config,configuration,59515,"r *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return curren",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:59778,Modifiability,inherit,inherited,59778,"R of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged ev",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60140,Modifiability,config,configuration,60140,"c const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:61085,Modifiability,inherit,inherited,61085,");  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static T",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:61331,Modifiability,inherit,inherited,61331,"sages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:61541,Modifiability,inherit,inherited,61541,"sages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:62059,Modifiability,inherit,inherited,62059,"void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; bool canComputeBatchWithCuda () const override;  ; void doEval (RooFit::EvalContext &) const override;  Compute addition of PDFs in batches. ;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ;  ; AddCacheElem * getProjCac",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:64204,Modifiability,extend,extended,64204,"erbose) ; // WVE DEBUG. ;  ; AddCacheElem * getProjCache (const RooArgSet *nset, const RooArgSet *iset=nullptr) const;  Manager of cache with coefficient projections and transformations. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Calculate and return the current value. ;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  The cache manager. ;  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ; void updateCoefficients (AddCacheElem &cache, const RooArgSet *nset, bool syncCoefValues=true) const;  Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:64359,Modifiability,inherit,inherited,64359,"ride;  Calculate and return the current value. ;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  The cache manager. ;  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ; void updateCoefficients (AddCacheElem &cache, const RooArgSet *nset, bool syncCoefValues=true) const;  Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:65592,Modifiability,inherit,inherited,65592,"al std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:66557,Modifiability,parameteriz,parameterized,66557,"  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:69415,Modifiability,inherit,inherited,69415," RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtua",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:71558,Modifiability,inherit,inherited,71558," attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _allExtendable = false;  Flag indicating if all PDF components are extendable. ;  ; RooAICRegistry _codeReg;  ! Registry of component analytical integration codes ;  ; std::vector< double > _coefCache;  ! Transient cache with transformed values of coefficients ;  ; Int_t _coefErrCount;  ! Coefficient error counter ;  ; RooListProxy _coefList;  List of coefficients. ;  ; bool _haveLastCoef = false;  Flag indicating if last PDFs coefficient was supplied in the constructor. ;  ; RooListProxy _pdfList;  List of component PDFs. ;  ; RooObjCacheManager _projCacheMgr;  ; bool _recursive = false;  Flag indicating is fractions are treated recursively. ;  ; RooSetProxy _refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgLi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:71835,Modifiability,extend,extendable,71835,"ster an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _allExtendable = false;  Flag indicating if all PDF components are extendable. ;  ; RooAICRegistry _codeReg;  ! Registry of component analytical integration codes ;  ; std::vector< double > _coefCache;  ! Transient cache with transformed values of coefficients ;  ; Int_t _coefErrCount;  ! Coefficient error counter ;  ; RooListProxy _coefList;  List of coefficients. ;  ; bool _haveLastCoef = false;  Flag indicating if last PDFs coefficient was supplied in the constructor. ;  ; RooListProxy _pdfList;  List of component PDFs. ;  ; RooObjCacheManager _projCacheMgr;  ; bool _recursive = false;  Flag indicating is fractions are treated recursively. ;  ; RooSetProxy _refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgList * _snormList {nullptr};  ! List of supplemental normalization factors ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remainin",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:72718,Modifiability,inherit,inherited,72718,tected). ;  ; void MakeZombie ();  . Protected Attributes; bool _allExtendable = false;  Flag indicating if all PDF components are extendable. ;  ; RooAICRegistry _codeReg;  ! Registry of component analytical integration codes ;  ; std::vector< double > _coefCache;  ! Transient cache with transformed values of coefficients ;  ; Int_t _coefErrCount;  ! Coefficient error counter ;  ; RooListProxy _coefList;  List of coefficients. ;  ; bool _haveLastCoef = false;  Flag indicating if last PDFs coefficient was supplied in the constructor. ;  ; RooListProxy _pdfList;  List of component PDFs. ;  ; RooObjCacheManager _projCacheMgr;  ; bool _recursive = false;  Flag indicating is fractions are treated recursively. ;  ; RooSetProxy _refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgList * _snormList {nullptr};  ! List of supplemental normalization factors ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;,MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:73271,Modifiability,config,configuration,73271,mponent PDFs. ;  ; RooObjCacheManager _projCacheMgr;  ; bool _recursive = false;  Flag indicating is fractions are treated recursively. ;  ; RooSetProxy _refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgList * _snormList {nullptr};  ! List of supplemental normalization factors ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransi,MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:73403,Modifiability,inherit,inherited,73403,_refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgList * _snormList {nullptr};  ! List of supplemental normalization factors ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ,MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:74177,Modifiability,inherit,inherited,74177,"of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:75453,Modifiability,inherit,inherited,75453," RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void finalizeConstruction ();  ; std::pair< const RooArgSet *, AddCacheElem * > getNormAndCache (const RooArgSet *nset) const;  Look up projection cache and per-PDF norm sets. ;  ; void materializeRefCoefNormFromAttribute () const;  ; void setAllExtendable (bool allExtendable);  ; void setRecursiveFraction (bool recursiveFraction);  . Private Attributes; std::unique_ptr< const RooArgSet > _copyOfLastNormSet = nullptr;  ! ;  ; RooFit::UniqueId< RooArgSet >::Value_t _idOfLastUsedNormSet = RooFit::UniqueId<RooArgSet>::nullval;  ! ;  . Friends; class RooAddGenContext;  ; class RooAddModel;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , Col",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:76179,Modifiability,inherit,inherited,76179,"tion cache and per-PDF norm sets. ;  ; void materializeRefCoefNormFromAttribute () const;  ; void setAllExtendable (bool allExtendable);  ; void setRecursiveFraction (bool recursiveFraction);  . Private Attributes; std::unique_ptr< const RooArgSet > _copyOfLastNormSet = nullptr;  ! ;  ; RooFit::UniqueId< RooArgSet >::Value_t _idOfLastUsedNormSet = RooFit::UniqueId<RooArgSet>::nullval;  ! ;  . Friends; class RooAddGenContext;  ; class RooAddModel;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:76297,Modifiability,inherit,inherited,76297,"tion cache and per-PDF norm sets. ;  ; void materializeRefCoefNormFromAttribute () const;  ; void setAllExtendable (bool allExtendable);  ; void setRecursiveFraction (bool recursiveFraction);  . Private Attributes; std::unique_ptr< const RooArgSet > _copyOfLastNormSet = nullptr;  ! ;  ; RooFit::UniqueId< RooArgSet >::Value_t _idOfLastUsedNormSet = RooFit::UniqueId<RooArgSet>::nullval;  ! ;  . Friends; class RooAddGenContext;  ; class RooAddModel;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:76648,Modifiability,inherit,inherited,76648,"tion cache and per-PDF norm sets. ;  ; void materializeRefCoefNormFromAttribute () const;  ; void setAllExtendable (bool allExtendable);  ; void setRecursiveFraction (bool recursiveFraction);  . Private Attributes; std::unique_ptr< const RooArgSet > _copyOfLastNormSet = nullptr;  ! ;  ; RooFit::UniqueId< RooArgSet >::Value_t _idOfLastUsedNormSet = RooFit::UniqueId<RooArgSet>::nullval;  ! ;  . Friends; class RooAddGenContext;  ; class RooAddModel;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:77058,Modifiability,inherit,inherited,77058,"tion cache and per-PDF norm sets. ;  ; void materializeRefCoefNormFromAttribute () const;  ; void setAllExtendable (bool allExtendable);  ; void setRecursiveFraction (bool recursiveFraction);  . Private Attributes; std::unique_ptr< const RooArgSet > _copyOfLastNormSet = nullptr;  ! ;  ; RooFit::UniqueId< RooArgSet >::Value_t _idOfLastUsedNormSet = RooFit::UniqueId<RooArgSet>::nullval;  ! ;  . Friends; class RooAddGenContext;  ; class RooAddModel;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:77696,Modifiability,inherit,inherited,77696,"ctivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:78018,Modifiability,inherit,inherited,78018," = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:78124,Modifiability,inherit,inherited,78124," = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:78310,Modifiability,inherit,inherited,78310,"as = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddPdf.h>. Inheritance diagram for RooAddPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:78536,Modifiability,inherit,inherited,78536,";   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddPdf.h>. Inheritance diagram for RooAddPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAddPdf() [1/6]. RooAddPdf::RooAddPdf ; (; ). inline . Definition at line 36 of file RooAddPdf.h. ◆ RooAddPdf() [2/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title = nullptr . ). Dummy constructor. ; Definition at line 99 of file RooAddPdf.cxx. ◆ RooAddPdf() [3/6]. ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:78663,Modifiability,inherit,inherited,78663,";   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddPdf.h>. Inheritance diagram for RooAddPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAddPdf() [1/6]. RooAddPdf::RooAddPdf ; (; ). inline . Definition at line 36 of file RooAddPdf.h. ◆ RooAddPdf() [2/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title = nullptr . ). Dummy constructor. ; Definition at line 99 of file RooAddPdf.cxx. ◆ RooAddPdf() [3/6]. ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:79031,Modifiability,inherit,inherited,79031,"L << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddPdf.h>. Inheritance diagram for RooAddPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAddPdf() [1/6]. RooAddPdf::RooAddPdf ; (; ). inline . Definition at line 36 of file RooAddPdf.h. ◆ RooAddPdf() [2/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title = nullptr . ). Dummy constructor. ; Definition at line 99 of file RooAddPdf.cxx. ◆ RooAddPdf() [3/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; pdf2, . RooAbsReal & ; coef1 . ). Constructor with two PDFs and one coefficient. ; Definition at line 136 of file RooAddPdf.cxx. ◆ RooAddPdf() [4/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:79200,Modifiability,inherit,inherited,79200,"trolling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddPdf.h>. Inheritance diagram for RooAddPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAddPdf() [1/6]. RooAddPdf::RooAddPdf ; (; ). inline . Definition at line 36 of file RooAddPdf.h. ◆ RooAddPdf() [2/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title = nullptr . ). Dummy constructor. ; Definition at line 99 of file RooAddPdf.cxx. ◆ RooAddPdf() [3/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; pdf2, . RooAbsReal & ; coef1 . ). Constructor with two PDFs and one coefficient. ; Definition at line 136 of file RooAddPdf.cxx. ◆ RooAddPdf() [4/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList . ). Generic constructor from list of extended PDFs. ; There are no coefficients as the expected nu",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:80150,Modifiability,extend,extended,80150,"ies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddPdf.h>. Inheritance diagram for RooAddPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAddPdf() [1/6]. RooAddPdf::RooAddPdf ; (; ). inline . Definition at line 36 of file RooAddPdf.h. ◆ RooAddPdf() [2/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title = nullptr . ). Dummy constructor. ; Definition at line 99 of file RooAddPdf.cxx. ◆ RooAddPdf() [3/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; pdf2, . RooAbsReal & ; coef1 . ). Constructor with two PDFs and one coefficient. ; Definition at line 136 of file RooAddPdf.cxx. ◆ RooAddPdf() [4/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList . ). Generic constructor from list of extended PDFs. ; There are no coefficients as the expected number of events from each components determine the relative weight of the PDFs.; All PDFs must inherit from RooAbsPdf. ; Definition at line 257 of file RooAddPdf.cxx. ◆ RooAddPdf() [5/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList, . const RooArgList & ; inCoefList, . bool ; recursiveFractions = false . ). Generic constructor from list of PDFs and list of coefficients. ; Each pdf list element (i) is paired with coefficient list element (i). The number of coefficients must be either equal to the number of PDFs, in which case extended MLL fitting is enabled, or be one less.; All PDFs must inherit from RooAbsPdf. All coefficients must inherit from RooAbsReal; If the recursiveFraction flag is true, the coefficients are interpreted as recursive coefficients as explained in the class description. ; Definition at line 159 of file RooAddPdf.cxx. ◆ RooAddPdf() [6/6]",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:80305,Modifiability,inherit,inherit,80305,"oAddPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAddPdf() [1/6]. RooAddPdf::RooAddPdf ; (; ). inline . Definition at line 36 of file RooAddPdf.h. ◆ RooAddPdf() [2/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title = nullptr . ). Dummy constructor. ; Definition at line 99 of file RooAddPdf.cxx. ◆ RooAddPdf() [3/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; pdf2, . RooAbsReal & ; coef1 . ). Constructor with two PDFs and one coefficient. ; Definition at line 136 of file RooAddPdf.cxx. ◆ RooAddPdf() [4/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList . ). Generic constructor from list of extended PDFs. ; There are no coefficients as the expected number of events from each components determine the relative weight of the PDFs.; All PDFs must inherit from RooAbsPdf. ; Definition at line 257 of file RooAddPdf.cxx. ◆ RooAddPdf() [5/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList, . const RooArgList & ; inCoefList, . bool ; recursiveFractions = false . ). Generic constructor from list of PDFs and list of coefficients. ; Each pdf list element (i) is paired with coefficient list element (i). The number of coefficients must be either equal to the number of PDFs, in which case extended MLL fitting is enabled, or be one less.; All PDFs must inherit from RooAbsPdf. All coefficients must inherit from RooAbsReal; If the recursiveFraction flag is true, the coefficients are interpreted as recursive coefficients as explained in the class description. ; Definition at line 159 of file RooAddPdf.cxx. ◆ RooAddPdf() [6/6]. RooAddPdf::RooAddPdf ; (; const RooAddPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 290 of file RooAddPdf.cxx. ◆ ~RooAddPd",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:80801,Modifiability,extend,extended,80801,"har * ; name, . const char * ; title, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; pdf2, . RooAbsReal & ; coef1 . ). Constructor with two PDFs and one coefficient. ; Definition at line 136 of file RooAddPdf.cxx. ◆ RooAddPdf() [4/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList . ). Generic constructor from list of extended PDFs. ; There are no coefficients as the expected number of events from each components determine the relative weight of the PDFs.; All PDFs must inherit from RooAbsPdf. ; Definition at line 257 of file RooAddPdf.cxx. ◆ RooAddPdf() [5/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList, . const RooArgList & ; inCoefList, . bool ; recursiveFractions = false . ). Generic constructor from list of PDFs and list of coefficients. ; Each pdf list element (i) is paired with coefficient list element (i). The number of coefficients must be either equal to the number of PDFs, in which case extended MLL fitting is enabled, or be one less.; All PDFs must inherit from RooAbsPdf. All coefficients must inherit from RooAbsReal; If the recursiveFraction flag is true, the coefficients are interpreted as recursive coefficients as explained in the class description. ; Definition at line 159 of file RooAddPdf.cxx. ◆ RooAddPdf() [6/6]. RooAddPdf::RooAddPdf ; (; const RooAddPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 290 of file RooAddPdf.cxx. ◆ ~RooAddPdf(). RooAddPdf::~RooAddPdf ; (; ). inlineoverride . Definition at line 45 of file RooAddPdf.h. Member Function Documentation. ◆ analyticalIntegralWN(). double RooAddPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Return analytical integral defined by given scenario code. ; Reimplemented from RooAbsPdf.; Definition at line 698 of file RooAddPdf.cxx. ◆ binBoundaries(). std::lis",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:80865,Modifiability,inherit,inherit,80865,"oAbsReal & ; coef1 . ). Constructor with two PDFs and one coefficient. ; Definition at line 136 of file RooAddPdf.cxx. ◆ RooAddPdf() [4/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList . ). Generic constructor from list of extended PDFs. ; There are no coefficients as the expected number of events from each components determine the relative weight of the PDFs.; All PDFs must inherit from RooAbsPdf. ; Definition at line 257 of file RooAddPdf.cxx. ◆ RooAddPdf() [5/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList, . const RooArgList & ; inCoefList, . bool ; recursiveFractions = false . ). Generic constructor from list of PDFs and list of coefficients. ; Each pdf list element (i) is paired with coefficient list element (i). The number of coefficients must be either equal to the number of PDFs, in which case extended MLL fitting is enabled, or be one less.; All PDFs must inherit from RooAbsPdf. All coefficients must inherit from RooAbsReal; If the recursiveFraction flag is true, the coefficients are interpreted as recursive coefficients as explained in the class description. ; Definition at line 159 of file RooAddPdf.cxx. ◆ RooAddPdf() [6/6]. RooAddPdf::RooAddPdf ; (; const RooAddPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 290 of file RooAddPdf.cxx. ◆ ~RooAddPdf(). RooAddPdf::~RooAddPdf ; (; ). inlineoverride . Definition at line 45 of file RooAddPdf.h. Member Function Documentation. ◆ analyticalIntegralWN(). double RooAddPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Return analytical integral defined by given scenario code. ; Reimplemented from RooAbsPdf.; Definition at line 698 of file RooAddPdf.cxx. ◆ binBoundaries(). std::list< double > * RooAddPdf::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, .",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:80911,Modifiability,inherit,inherit,80911,"f.cxx. ◆ RooAddPdf() [4/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList . ). Generic constructor from list of extended PDFs. ; There are no coefficients as the expected number of events from each components determine the relative weight of the PDFs.; All PDFs must inherit from RooAbsPdf. ; Definition at line 257 of file RooAddPdf.cxx. ◆ RooAddPdf() [5/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . const RooArgList & ; inPdfList, . const RooArgList & ; inCoefList, . bool ; recursiveFractions = false . ). Generic constructor from list of PDFs and list of coefficients. ; Each pdf list element (i) is paired with coefficient list element (i). The number of coefficients must be either equal to the number of PDFs, in which case extended MLL fitting is enabled, or be one less.; All PDFs must inherit from RooAbsPdf. All coefficients must inherit from RooAbsReal; If the recursiveFraction flag is true, the coefficients are interpreted as recursive coefficients as explained in the class description. ; Definition at line 159 of file RooAddPdf.cxx. ◆ RooAddPdf() [6/6]. RooAddPdf::RooAddPdf ; (; const RooAddPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 290 of file RooAddPdf.cxx. ◆ ~RooAddPdf(). RooAddPdf::~RooAddPdf ; (; ). inlineoverride . Definition at line 45 of file RooAddPdf.h. Member Function Documentation. ◆ analyticalIntegralWN(). double RooAddPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Return analytical integral defined by given scenario code. ; Reimplemented from RooAbsPdf.; Definition at line 698 of file RooAddPdf.cxx. ◆ binBoundaries(). std::list< double > * RooAddPdf::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Loop over components for plot sampling hints and merge them if ther",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:84984,Modifiability,extend,extended,84984,"ct that returns the integral. ; This is used to build the computation graph for the final likelihood. ; Reimplemented from RooAbsPdf.; Definition at line 790 of file RooAddPdf.cxx. ◆ DeclFileName(). static const char * RooAddPdf::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 153 of file RooAddPdf.h. ◆ doEval(). void RooAddPdf::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute addition of PDFs in batches. ; Reimplemented from RooAbsReal.; Definition at line 555 of file RooAddPdf.cxx. ◆ evaluate(). double RooAddPdf::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 121 of file RooAddPdf.h. ◆ expectedEvents(). double RooAddPdf::expectedEvents ; (; const RooArgSet * ; nset); const. overridevirtual . Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ; Return the number of expected events, which is either the sum of all coefficients or the sum of the components extended terms, multiplied with the fraction that is in the current range w.r.t the reference range. ; Reimplemented from RooAbsPdf.; Definition at line 756 of file RooAddPdf.cxx. ◆ extendMode(). ExtendMode RooAddPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 60 of file RooAddPdf.h. ◆ finalizeConstruction(). void RooAddPdf::finalizeConstruction ; (; ). private . Definition at line 111 of file RooAddPdf.cxx. ◆ fixCoefNormalization(). void RooAddPdf::fixCoefNormalization ; (; const RooArgSet & ; refCoefNorm). By default the interpretation of the fraction coefficients is performed i",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:85168,Modifiability,extend,extended,85168,"line 790 of file RooAddPdf.cxx. ◆ DeclFileName(). static const char * RooAddPdf::DeclFileName ; (; ). inlinestatic . ReturnsName of the file containing the class declaration ; Definition at line 153 of file RooAddPdf.h. ◆ doEval(). void RooAddPdf::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute addition of PDFs in batches. ; Reimplemented from RooAbsReal.; Definition at line 555 of file RooAddPdf.cxx. ◆ evaluate(). double RooAddPdf::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 121 of file RooAddPdf.h. ◆ expectedEvents(). double RooAddPdf::expectedEvents ; (; const RooArgSet * ; nset); const. overridevirtual . Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ; Return the number of expected events, which is either the sum of all coefficients or the sum of the components extended terms, multiplied with the fraction that is in the current range w.r.t the reference range. ; Reimplemented from RooAbsPdf.; Definition at line 756 of file RooAddPdf.cxx. ◆ extendMode(). ExtendMode RooAddPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 60 of file RooAddPdf.h. ◆ finalizeConstruction(). void RooAddPdf::finalizeConstruction ; (; ). private . Definition at line 111 of file RooAddPdf.cxx. ◆ fixCoefNormalization(). void RooAddPdf::fixCoefNormalization ; (; const RooArgSet & ; refCoefNorm). By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ; This makes the shape of the p.d.f explicitly dependent on the choice of observables. This method instructs ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:85350,Modifiability,extend,extendMode,85350," RooAddPdf.h. ◆ doEval(). void RooAddPdf::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute addition of PDFs in batches. ; Reimplemented from RooAbsReal.; Definition at line 555 of file RooAddPdf.cxx. ◆ evaluate(). double RooAddPdf::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 121 of file RooAddPdf.h. ◆ expectedEvents(). double RooAddPdf::expectedEvents ; (; const RooArgSet * ; nset); const. overridevirtual . Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ; Return the number of expected events, which is either the sum of all coefficients or the sum of the components extended terms, multiplied with the fraction that is in the current range w.r.t the reference range. ; Reimplemented from RooAbsPdf.; Definition at line 756 of file RooAddPdf.cxx. ◆ extendMode(). ExtendMode RooAddPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 60 of file RooAddPdf.h. ◆ finalizeConstruction(). void RooAddPdf::finalizeConstruction ; (; ). private . Definition at line 111 of file RooAddPdf.cxx. ◆ fixCoefNormalization(). void RooAddPdf::fixCoefNormalization ; (; const RooArgSet & ; refCoefNorm). By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ; This makes the shape of the p.d.f explicitly dependent on the choice of observables. This method instructs RooAddPdf to freeze the interpretation of the coefficients to be done in the given set of observables. If frozen, fractions are automatically transformed from the reference normalization set to the contextu",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:85386,Modifiability,extend,extendMode,85386,"ooAddPdf::doEval ; (; RooFit::EvalContext & ; ctx); const. overrideprotectedvirtual . Compute addition of PDFs in batches. ; Reimplemented from RooAbsReal.; Definition at line 555 of file RooAddPdf.cxx. ◆ evaluate(). double RooAddPdf::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 121 of file RooAddPdf.h. ◆ expectedEvents(). double RooAddPdf::expectedEvents ; (; const RooArgSet * ; nset); const. overridevirtual . Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ; Return the number of expected events, which is either the sum of all coefficients or the sum of the components extended terms, multiplied with the fraction that is in the current range w.r.t the reference range. ; Reimplemented from RooAbsPdf.; Definition at line 756 of file RooAddPdf.cxx. ◆ extendMode(). ExtendMode RooAddPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 60 of file RooAddPdf.h. ◆ finalizeConstruction(). void RooAddPdf::finalizeConstruction ; (; ). private . Definition at line 111 of file RooAddPdf.cxx. ◆ fixCoefNormalization(). void RooAddPdf::fixCoefNormalization ; (; const RooArgSet & ; refCoefNorm). By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ; This makes the shape of the p.d.f explicitly dependent on the choice of observables. This method instructs RooAddPdf to freeze the interpretation of the coefficients to be done in the given set of observables. If frozen, fractions are automatically transformed from the reference normalization set to the contextual normalization set by ratios o",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:85470,Modifiability,extend,extended,85470,"rtual . Compute addition of PDFs in batches. ; Reimplemented from RooAbsReal.; Definition at line 555 of file RooAddPdf.cxx. ◆ evaluate(). double RooAddPdf::evaluate ; (; ); const. inlineoverrideprotectedvirtual . Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 121 of file RooAddPdf.h. ◆ expectedEvents(). double RooAddPdf::expectedEvents ; (; const RooArgSet * ; nset); const. overridevirtual . Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ; Return the number of expected events, which is either the sum of all coefficients or the sum of the components extended terms, multiplied with the fraction that is in the current range w.r.t the reference range. ; Reimplemented from RooAbsPdf.; Definition at line 756 of file RooAddPdf.cxx. ◆ extendMode(). ExtendMode RooAddPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 60 of file RooAddPdf.h. ◆ finalizeConstruction(). void RooAddPdf::finalizeConstruction ; (; ). private . Definition at line 111 of file RooAddPdf.cxx. ◆ fixCoefNormalization(). void RooAddPdf::fixCoefNormalization ; (; const RooArgSet & ; refCoefNorm). By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ; This makes the shape of the p.d.f explicitly dependent on the choice of observables. This method instructs RooAddPdf to freeze the interpretation of the coefficients to be done in the given set of observables. If frozen, fractions are automatically transformed from the reference normalization set to the contextual normalization set by ratios of integrals. ; Definition at line 319 of file RooAddPdf.cxx. ◆ fixCoefRange(). ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88384,Modifiability,variab,variables,88384,"text(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddP",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:89710,Modifiability,variab,variables,89710,"Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projections and transformations. ; Retrieve cache element for the computation of the PDF normalisation.; Parameters. [in]nsetCurrent normalisation set (integration over these variables yields 1). ; [in]isetIntegration set. Variables to be integrated over (if integrations are performed). If a cache element does not exist, create and fill it on the fly. The cache also contains; Supplemental normalization terms (in case not all added p.d.f.s have the same observables); Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; Projection integrals for similar transformations when a frozen reference range is provided. . Definition at line 406 of file RooAddPdf.cxx. ◆ getValV(). double RooAddPdf::getValV ; (; const RooArgSet * ; set = nullptr); const. overrideprotectedvirtual . Calculate and return the current value. ; Reimplemented from RooAbsPdf.; Definition at line 515 of file RooAddPdf.cxx. ◆ IsA(). TClass * RooAddPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 153 of file RooAddPdf.h. ◆ isBinnedDi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:95559,Modifiability,extend,extended,95559,"ashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 548 of file RooAddPdf.cxx. ◆ updateCoefficients(). void RooAddPdf::updateCoefficients ; (; AddCacheElem & ; cache, . const RooArgSet * ; nset, . bool ; syncCoefValues = true . ); const. protected . Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ; param[in] cache The cache element for the given normalization set that stores the supplementary normalization values and projection-related objects. param[in] nset The set of variables to normalize over. param[in] syncCoefValues If the initial values of the coefficients still need to be copied from the _coefList elements to the _coefCache. True by default. ; Definition at line 442 of file RooAddPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 115 of file RooAddPdf.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 116 of file RooAddPdf.h. Member Data Documentation. ◆ _allExtendable. bool RooAddPdf::_allExtendable = false. protected . Flag indicating if all PDF components are extendable. ; Definition at line 136 of file RooAddPdf.h. ◆ _codeReg. RooAICRegistry Ro",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:95858,Modifiability,variab,variables,95858,"late calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 548 of file RooAddPdf.cxx. ◆ updateCoefficients(). void RooAddPdf::updateCoefficients ; (; AddCacheElem & ; cache, . const RooArgSet * ; nset, . bool ; syncCoefValues = true . ); const. protected . Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ; param[in] cache The cache element for the given normalization set that stores the supplementary normalization values and projection-related objects. param[in] nset The set of variables to normalize over. param[in] syncCoefValues If the initial values of the coefficients still need to be copied from the _coefList elements to the _coefCache. True by default. ; Definition at line 442 of file RooAddPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 115 of file RooAddPdf.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 116 of file RooAddPdf.h. Member Data Documentation. ◆ _allExtendable. bool RooAddPdf::_allExtendable = false. protected . Flag indicating if all PDF components are extendable. ; Definition at line 136 of file RooAddPdf.h. ◆ _codeReg. RooAICRegistry RooAddPdf::_codeReg. mutableprotected . ! Registry of component analytical integration codes ; Definition at line 129 of file RooAddPdf.h. ◆ _coefCache. std::vector<double> RooAddPdf::_coefCache. mutableprotected . ! Transient cache with transformed values of coefficients ; Definition at line 107 of file",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:96469,Modifiability,extend,extendable,96469,"nt values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ; param[in] cache The cache element for the given normalization set that stores the supplementary normalization values and projection-related objects. param[in] nset The set of variables to normalize over. param[in] syncCoefValues If the initial values of the coefficients still need to be copied from the _coefList elements to the _coefCache. True by default. ; Definition at line 442 of file RooAddPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 115 of file RooAddPdf.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 116 of file RooAddPdf.h. Member Data Documentation. ◆ _allExtendable. bool RooAddPdf::_allExtendable = false. protected . Flag indicating if all PDF components are extendable. ; Definition at line 136 of file RooAddPdf.h. ◆ _codeReg. RooAICRegistry RooAddPdf::_codeReg. mutableprotected . ! Registry of component analytical integration codes ; Definition at line 129 of file RooAddPdf.h. ◆ _coefCache. std::vector<double> RooAddPdf::_coefCache. mutableprotected . ! Transient cache with transformed values of coefficients ; Definition at line 107 of file RooAddPdf.h. ◆ _coefErrCount. Int_t RooAddPdf::_coefErrCount. mutableprotected . ! Coefficient error counter ; Definition at line 139 of file RooAddPdf.h. ◆ _coefList. RooListProxy RooAddPdf::_coefList. protected . List of coefficients. ; Definition at line 132 of file RooAddPdf.h. ◆ _copyOfLastNormSet. std::unique_ptr<const RooArgSet> RooAddPdf::_copyOfLastNormSet = nullptr. mutableprivate . ! ; Definition at line 146 of file RooAddPdf.h. ◆ _haveLastCoef. bool RooAddPdf::_haveLastCoef = false. protected . Flag indicating if last PDFs coefficient was supplied in the constructor. ; Defin",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:1808,Performance,perform,perform,1808,"ort extended likelihood fits, they can be calculated from the contribution of each PDF to the total expected number of events.; In the second form, the sum of the coefficients is required to be 1 or less, and the coefficient of the last PDF is calculated automatically from the condition that the sum of all coefficients has to be 1. Recursive coefficients; It is also possible to parameterise the coefficients recursively. \[; \sum_{i=1}^n c_i \prod_{j=1}^{i-1} \left[ (1-c_j) \right] \cdot \mathrm{PDF}_i \\; = c_1 \cdot \mathrm{PDF}_1 + (1-c_1)\, c_2 \cdot \mathrm{PDF}_2 + \ldots + (1-c_1)\ldots(1-c_{n-1}) \cdot 1 \cdot \mathrm{PDF}_n \\; \]. In this form the sum of the coefficients is always less than 1.0 for all possible values of the individual coefficients between 0 and 1. NoteDon't pass the \( n^\mathrm{th} \) coefficient. It is always 1, since the normalisation condition removes one degree of freedom.; RooAddPdf relies on each component PDF to be normalized and will perform no normalization other than calculating the proper last coefficient \( c_n \), if requested. An (enforced) condition for this assumption is that each \( \mathrm{PDF}_i \) is independent of each \( c_i \). Difference between RooAddPdf / RooRealSumFunc / RooRealSumPdf. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definition at line 33 of file RooAddPdf.h. Public Member Functions;  RooAddPdf ();  ;  RooAddPdf (const char *name, const char *title, const RooArgList &pdfList);  Generic constructor from list of extended PDFs. ;  ;  RooAddPdf (const char *name, const char *title, const RooArgList &pdfList, const RooArgList &coefList, bool recursiveFraction=false);  Generic constructor fr",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:4656,Performance,perform,performed,4656," override;  ; bool checkObservables (const RooArgSet *nset) const override;  Check if PDF is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; void fixCoefNormalization (const RooArgSet &refCoefNorm);  By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ;  ; void fixCoefRange (const char *rangeName);  By default, fraction coefficients are assumed to refer to the default fit range. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  Force RooRealIntegral to offer all observables for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; const RooArgSet & getCoefNormalization () const;  ; const char * getCoefRange () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  If all components that depend on obs are binned, so is their sum. ;  ; const RooArgList & pdfList () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  L",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:5181,Performance,perform,performed,5181,"ct that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; void fixCoefNormalization (const RooArgSet &refCoefNorm);  By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ;  ; void fixCoefRange (const char *rangeName);  By default, fraction coefficients are assumed to refer to the default fit range. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  Force RooRealIntegral to offer all observables for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; const RooArgSet & getCoefNormalization () const;  ; const char * getCoefRange () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  If all components that depend on obs are binned, so is their sum. ;  ; const RooArgList & pdfList () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ;  ; void resetErrorCounters (Int_t resetValue=10) override;  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; bool selfNormalized () co",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:6305,Performance,cache,cache-and-track,6305,"const char * getCoefRange () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  If all components that depend on obs are binned, so is their sum. ;  ; const RooArgList & pdfList () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ;  ; void resetErrorCounters (Int_t resetValue=10) override;  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooAddPdf with cache-and-track. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; vir",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:30468,Performance,cache,cache,30468,"st RooAbsArg &other) const override;  Equality operator when comparing to another RooAbsArg. ;  ; bool operator== (double value) const;  Equality operator comparing to a double. ;  ; virtual RooPlot * plotSliceOn (RooPlot *frame, const RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the special",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:47942,Performance,optimiz,optimizeCacheMode,47942,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:48002,Performance,cache,cache,48002,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:48013,Performance,optimiz,optimization,48013,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:48082,Performance,optimiz,optimizeCacheMode,48082," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:48194,Performance,cache,cache,48194," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:48205,Performance,optimiz,optimization,48205," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:48326,Performance,cache,cacheList,48326,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:48433,Performance,cache,cached,48433,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:48558,Performance,cache,cacheList,48558,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void s",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:48696,Performance,cache,cached,48696,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void s",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:48890,Performance,perform,perform,48890,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCach",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:48912,Performance,optimiz,optimization,48912,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCach",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:49111,Performance,cache,cache,49111,"nition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (R",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:49199,Performance,cache,cache,49199,"ache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TName",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:49334,Performance,cache,caches,49334,"vables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtua",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:49410,Performance,cache,cache,49410," and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:49886,Performance,cache,cacheUniqueSuffix,49886,"const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () cons",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:50066,Performance,cache,cache,50066,"const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () cons",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:63278,Performance,cache,cache,63278,"td::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Member Functions; bool canComputeBatchWithCuda () const override;  ; void doEval (RooFit::EvalContext &) const override;  Compute addition of PDFs in batches. ;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ;  ; AddCacheElem * getProjCache (const RooArgSet *nset, const RooArgSet *iset=nullptr) const;  Manager of cache with coefficient projections and transformations. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Calculate and return the current value. ;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  The cache manager. ;  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ; void updateCoefficients (AddCacheElem &cache, const RooArgSet *nset, bool syncCoefValues=true) const;  Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the var",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:63532,Performance,cache,cache,63532,"in multi-line collection printing to given amount. ;  . Protected Member Functions; bool canComputeBatchWithCuda () const override;  ; void doEval (RooFit::EvalContext &) const override;  Compute addition of PDFs in batches. ;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ;  ; AddCacheElem * getProjCache (const RooArgSet *nset, const RooArgSet *iset=nullptr) const;  Manager of cache with coefficient projections and transformations. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Calculate and return the current value. ;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  The cache manager. ;  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ; void updateCoefficients (AddCacheElem &cache, const RooArgSet *nset, bool syncCoefValues=true) const;  Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_pt",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:64014,Performance,cache,cache,64014,"erbose) ; // WVE DEBUG. ;  ; AddCacheElem * getProjCache (const RooArgSet *nset, const RooArgSet *iset=nullptr) const;  Manager of cache with coefficient projections and transformations. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Calculate and return the current value. ;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  The cache manager. ;  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ; void updateCoefficients (AddCacheElem &cache, const RooArgSet *nset, bool syncCoefValues=true) const;  Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:64121,Performance,cache,cache,64121,"erbose) ; // WVE DEBUG. ;  ; AddCacheElem * getProjCache (const RooArgSet *nset, const RooArgSet *iset=nullptr) const;  Manager of cache with coefficient projections and transformations. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Calculate and return the current value. ;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  The cache manager. ;  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ; void updateCoefficients (AddCacheElem &cache, const RooArgSet *nset, bool syncCoefValues=true) const;  Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:65485,Performance,cache,cached,65485,"onstructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createInt",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:65895,Performance,cache,cached,65895," const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:65936,Performance,cache,cache,65936," const *normSet) const;  Checks if normSet is the currently active normalization set of this PDF, meaning is exactly the same object as the one the _normSet member points to (or both are nullptr). ;  ; double normalizeWithNaNPacking (double rawVal, double normVal) const;  ; RooPlot * plotOn (RooPlot *frame, PlotOpt o) const override;  Plot oneself on 'frame'. ;  ; Int_t * randomizeProtoOrder (Int_t nProto, Int_t nGen, bool resample=false) const;  Return lookup table with randomized order for nProto prototype events. ;  ; virtual bool syncNormalization (const RooArgSet *dset, bool adjustProxies=true) const;  Verify that the normalization integral cached with this PDF is valid for given set of normalization observables. ;  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:69032,Performance,perform,perform,69032,"onst RooArgProxy &c, const RooArgProxy &d) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< s",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:70511,Performance,optimiz,optimizeDirtyHook,70511,";  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoErr",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:70999,Performance,cache,cached,70999,"id graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _allExtendable = false;  Flag indicating if all PDF components are extendable. ;  ; RooAICRegistry _codeReg;  ! Registry of component analytical integration codes ;  ; std::vector< double > _coefCache;  ! Transient cache w",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:71983,Performance,cache,cache,71983,"e in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  . Protected Attributes; bool _allExtendable = false;  Flag indicating if all PDF components are extendable. ;  ; RooAICRegistry _codeReg;  ! Registry of component analytical integration codes ;  ; std::vector< double > _coefCache;  ! Transient cache with transformed values of coefficients ;  ; Int_t _coefErrCount;  ! Coefficient error counter ;  ; RooListProxy _coefList;  List of coefficients. ;  ; bool _haveLastCoef = false;  Flag indicating if last PDFs coefficient was supplied in the constructor. ;  ; RooListProxy _pdfList;  List of component PDFs. ;  ; RooObjCacheManager _projCacheMgr;  ; bool _recursive = false;  Flag indicating is fractions are treated recursively. ;  ; RooSetProxy _refCoefNorm;  Reference observable set for coefficient interpretation. ;  ; TNamed * _refCoefRangeName = nullptr;  Reference range name for coefficient interpretation. ;  ; RooArgList * _snormList {nullptr};  ! List of supplemental normalization factors ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization r",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:75014,Performance,cache,cache,75014,"adBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void finalizeConstruction ();  ; std::pair< const RooArgSet *, AddCacheElem * > getNormAndCache (const RooArgSet *nset) const;  Look up projection cache and per-PDF norm sets. ;  ; void materializeRefCoefNormFromAttribute () const;  ; void setAllExtendable (bool allExtendable);  ; void setRecursiveFraction (bool recursiveFraction);  . Private Attributes; std::unique_ptr< const RooArgSet > _copyOfLastNormSet = nullptr;  ! ;  ; RooFit::UniqueId< RooArgSet >::Value_t _idOfLast",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:75686,Performance,cache,cache,75686," {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Private Member Functions; void finalizeConstruction ();  ; std::pair< const RooArgSet *, AddCacheElem * > getNormAndCache (const RooArgSet *nset) const;  Look up projection cache and per-PDF norm sets. ;  ; void materializeRefCoefNormFromAttribute () const;  ; void setAllExtendable (bool allExtendable);  ; void setRecursiveFraction (bool recursiveFraction);  . Private Attributes; std::unique_ptr< const RooArgSet > _copyOfLastNormSet = nullptr;  ! ;  ; RooFit::UniqueId< RooArgSet >::Value_t _idOfLastUsedNormSet = RooFit::UniqueId<RooArgSet>::nullval;  ! ;  . Friends; class RooAddGenContext;  ; class RooAddModel;  . Additional Inherited Members;  Public Types inherited from RooAbsPdf; enum  ExtendMode { CanNotBeExtended; , CanBeExtended; , MustBeExtended; };  ;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using val",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:79115,Performance,cache,cache,79115,"L << ( 3 )); };  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ;  Static Protected Attributes inherited from RooAbsPdf; static TString _normRangeOverride;  ; static Int_t _verboseEval = 0;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . #include <RooAddPdf.h>. Inheritance diagram for RooAddPdf:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooAddPdf() [1/6]. RooAddPdf::RooAddPdf ; (; ). inline . Definition at line 36 of file RooAddPdf.h. ◆ RooAddPdf() [2/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title = nullptr . ). Dummy constructor. ; Definition at line 99 of file RooAddPdf.cxx. ◆ RooAddPdf() [3/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ; title, . RooAbsPdf & ; pdf1, . RooAbsPdf & ; pdf2, . RooAbsReal & ; coef1 . ). Constructor with two PDFs and one coefficient. ; Definition at line 136 of file RooAddPdf.cxx. ◆ RooAddPdf() [4/6]. RooAddPdf::RooAddPdf ; (; const char * ; name, . const char * ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:85989,Performance,perform,performed,85989,"r extended likelihood calculation, which is the sum of all coefficients. ; Return the number of expected events, which is either the sum of all coefficients or the sum of the components extended terms, multiplied with the fraction that is in the current range w.r.t the reference range. ; Reimplemented from RooAbsPdf.; Definition at line 756 of file RooAddPdf.cxx. ◆ extendMode(). ExtendMode RooAddPdf::extendMode ; (; ); const. inlineoverridevirtual . Returns ability of PDF to provide extended likelihood terms. ; Possible answers are in the enumerator RooAbsPdf::ExtendMode. This default implementation always returns CanNotBeExtended. ; Reimplemented from RooAbsPdf.; Definition at line 60 of file RooAddPdf.h. ◆ finalizeConstruction(). void RooAddPdf::finalizeConstruction ; (; ). private . Definition at line 111 of file RooAddPdf.cxx. ◆ fixCoefNormalization(). void RooAddPdf::fixCoefNormalization ; (; const RooArgSet & ; refCoefNorm). By default the interpretation of the fraction coefficients is performed in the contextual choice of observables. ; This makes the shape of the p.d.f explicitly dependent on the choice of observables. This method instructs RooAddPdf to freeze the interpretation of the coefficients to be done in the given set of observables. If frozen, fractions are automatically transformed from the reference normalization set to the contextual normalization set by ratios of integrals. ; Definition at line 319 of file RooAddPdf.cxx. ◆ fixCoefRange(). void RooAddPdf::fixCoefRange ; (; const char * ; rangeName). By default, fraction coefficients are assumed to refer to the default fit range. ; This makes the shape of a RooAddPdf explicitly dependent on the range of the observables. Calling this function allows for a range-independent definition of the fractions, because it ties all coefficients to the given named range. If the normalisation range is different from this reference range, the appropriate fraction coefficients are automatically calculated from the",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:88133,Performance,perform,performed,88133," forceAnalyticalInt(). bool RooAddPdf::forceAnalyticalInt ; (; const RooAbsArg & ; ); const. inlineoverridevirtual . Force RooRealIntegral to offer all observables for internal integration. ; Reimplemented from RooAbsReal.; Definition at line 50 of file RooAddPdf.h. ◆ genContext(). RooAbsGenContext * RooAddPdf::genContext ; (; const RooArgSet & ; vars, . const RooDataSet * ; prototype = nullptr, . const RooArgSet * ; auxProto = nullptr, . bool ; verbose = false . ); const. overrideprotectedvirtual . Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ; Reimplemented from RooAbsPdf.; Definition at line 901 of file RooAddPdf.cxx. ◆ getAnalyticalIntegralWN(). Int_t RooAddPdf::getAnalyticalIntegralWN ; (; RooArgSet & ; allVars, . RooArgSet & ; analVars, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Determine which part (if any) of given integral can be performed analytically. ; If any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; ns",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:89158,Performance,cache,cache,89158,"any analytical integration is possible, return integration scenario code; RooAddPdf queries each component PDF for its analytical integration capability of the requested set ('allVars'). It finds the largest common set of variables that can be integrated by all components. If such a set exists, it reconfirms that each component is capable of analytically integrating the common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projections and transformations. ; Retrieve cache element for the computation of the PDF normalisation.; Parameters. [in]nsetCurrent normalisation set (integration over these variables yields 1). ; [in]isetIntegration set. Variables to be integrated over (if integrations are performed). If a cache element does not exist, create and fill it on the fly. The cache also contains; Supplemental normalization terms (in case not all added p.d.f.s have the same observables); Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; Projection integrals for similar transformati",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:89512,Performance,cache,cache,89512,"e common set, and combines the components individual integration codes into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projections and transformations. ; Retrieve cache element for the computation of the PDF normalisation.; Parameters. [in]nsetCurrent normalisation set (integration over these variables yields 1). ; [in]isetIntegration set. Variables to be integrated over (if integrations are performed). If a cache element does not exist, create and fill it on the fly. The cache also contains; Supplemental normalization terms (in case not all added p.d.f.s have the same observables); Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; Projection integrals for similar transformations when a frozen reference range is provided. . Definition at line 406 of file RooAddPdf.cxx. ◆ getValV(). double RooAddPdf::getValV ; (; const RooArgSet * ; set = nullptr); const. overrideprotectedvirtual . Calculate and return the current value. ; Reimplemented from RooAbsPdf.; Definition at line 515 of file RooAddPdf.cxx. ◆ IsA(). TClass * RooAddPdf::IsA ; (; ); con",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:89579,Performance,cache,cache,89579,"s into a single integration code valid for RooAddPdf. ; Reimplemented from RooAbsReal.; Definition at line 631 of file RooAddPdf.cxx. ◆ getCoefNormalization(). const RooArgSet & RooAddPdf::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projections and transformations. ; Retrieve cache element for the computation of the PDF normalisation.; Parameters. [in]nsetCurrent normalisation set (integration over these variables yields 1). ; [in]isetIntegration set. Variables to be integrated over (if integrations are performed). If a cache element does not exist, create and fill it on the fly. The cache also contains; Supplemental normalization terms (in case not all added p.d.f.s have the same observables); Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; Projection integrals for similar transformations when a frozen reference range is provided. . Definition at line 406 of file RooAddPdf.cxx. ◆ getValV(). double RooAddPdf::getValV ; (; const RooArgSet * ; set = nullptr); const. overrideprotectedvirtual . Calculate and return the current value. ; Reimplemented from RooAbsPdf.; Definition at line 515 of file RooAddPdf.cxx. ◆ IsA(). TClass * RooAddPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ;",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:89811,Performance,perform,performed,89811,"::getCoefNormalization ; (; ); const. Definition at line 335 of file RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projections and transformations. ; Retrieve cache element for the computation of the PDF normalisation.; Parameters. [in]nsetCurrent normalisation set (integration over these variables yields 1). ; [in]isetIntegration set. Variables to be integrated over (if integrations are performed). If a cache element does not exist, create and fill it on the fly. The cache also contains; Supplemental normalization terms (in case not all added p.d.f.s have the same observables); Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; Projection integrals for similar transformations when a frozen reference range is provided. . Definition at line 406 of file RooAddPdf.cxx. ◆ getValV(). double RooAddPdf::getValV ; (; const RooArgSet * ; set = nullptr); const. overrideprotectedvirtual . Calculate and return the current value. ; Reimplemented from RooAbsPdf.; Definition at line 515 of file RooAddPdf.cxx. ◆ IsA(). TClass * RooAddPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 153 of file RooAddPdf.h. ◆ isBinnedDistribution(). bool RooAddPdf::isBinnedDistribution ; (; const RooArgSet & ; obs); const. overridevi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:89828,Performance,cache,cache,89828,"le RooAddPdf.cxx. ◆ getCoefRange(). const char * RooAddPdf::getCoefRange ; (; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projections and transformations. ; Retrieve cache element for the computation of the PDF normalisation.; Parameters. [in]nsetCurrent normalisation set (integration over these variables yields 1). ; [in]isetIntegration set. Variables to be integrated over (if integrations are performed). If a cache element does not exist, create and fill it on the fly. The cache also contains; Supplemental normalization terms (in case not all added p.d.f.s have the same observables); Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; Projection integrals for similar transformations when a frozen reference range is provided. . Definition at line 406 of file RooAddPdf.cxx. ◆ getValV(). double RooAddPdf::getValV ; (; const RooArgSet * ; set = nullptr); const. overrideprotectedvirtual . Calculate and return the current value. ; Reimplemented from RooAbsPdf.; Definition at line 515 of file RooAddPdf.cxx. ◆ IsA(). TClass * RooAddPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 153 of file RooAddPdf.h. ◆ isBinnedDistribution(). bool RooAddPdf::isBinnedDistribution ; (; const RooArgSet & ; obs); const. overridevirtual . If all components that depend on obs are binned, so is th",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:89893,Performance,cache,cache,89893,"(; ); const. inline . Definition at line 83 of file RooAddPdf.h. ◆ getNormAndCache(). std::pair< const RooArgSet *, AddCacheElem * > RooAddPdf::getNormAndCache ; (; const RooArgSet * ; nset); const. private . Look up projection cache and per-PDF norm sets. ; If a PDF doesn't have a special norm set, use the defaultNorm. If defaultNorm == nullptr, use the member _normSet. ; Definition at line 458 of file RooAddPdf.cxx. ◆ getProjCache(). AddCacheElem * RooAddPdf::getProjCache ; (; const RooArgSet * ; nset, . const RooArgSet * ; iset = nullptr . ); const. protected . Manager of cache with coefficient projections and transformations. ; Retrieve cache element for the computation of the PDF normalisation.; Parameters. [in]nsetCurrent normalisation set (integration over these variables yields 1). ; [in]isetIntegration set. Variables to be integrated over (if integrations are performed). If a cache element does not exist, create and fill it on the fly. The cache also contains; Supplemental normalization terms (in case not all added p.d.f.s have the same observables); Projection integrals to calculate transformed fraction coefficients when a frozen reference frame is provided; Projection integrals for similar transformations when a frozen reference range is provided. . Definition at line 406 of file RooAddPdf.cxx. ◆ getValV(). double RooAddPdf::getValV ; (; const RooArgSet * ; set = nullptr); const. overrideprotectedvirtual . Calculate and return the current value. ; Reimplemented from RooAbsPdf.; Definition at line 515 of file RooAddPdf.cxx. ◆ IsA(). TClass * RooAddPdf::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsPdf.; Definition at line 153 of file RooAddPdf.h. ◆ isBinnedDistribution(). bool RooAddPdf::isBinnedDistribution ; (; const RooArgSet & ; obs); const. overridevirtual . If all components that depend on obs are binned, so is their sum. ; Reimplemented from RooAbsReal.; Definition at line 929 of file R",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:92075,Performance,cache,cache,92075,"e 345 of file RooAddPdf.cxx. ◆ pdfList(). const RooArgList & RooAddPdf::pdfList ; (; ); const. inline . Definition at line 70 of file RooAddPdf.h. ◆ plotSamplingHint(). std::list< double > * RooAddPdf::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Loop over components for plot sampling hints and merge them if there are multiple. ; Reimplemented from RooAbsReal.; Definition at line 912 of file RooAddPdf.cxx. ◆ printMetaArgs(). void RooAddPdf::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 949 of file RooAddPdf.cxx. ◆ redirectServersHook(). bool RooAddPdf::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . The cache manager. ; Hook function intercepting redirectServer calls.; Discard current normalization object if any server is redirected ; Reimplemented from RooAbsPdf.; Definition at line 955 of file RooAddPdf.cxx. ◆ resetErrorCounters(). void RooAddPdf::resetErrorCounters ; (; Int_t ; resetValue = 10). overridevirtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented from RooAbsPdf.; Definition at line 602 of file RooAddPdf.cxx. ◆ selectNormalization(). void RooAddPdf::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 863 of file RooAddPdf.cxx. ◆ selectNormalizationRange(). void RooAddPdf::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:93933,Performance,cache,cache-and-track,93933," of file RooAddPdf.cxx. ◆ selectNormalizationRange(). void RooAddPdf::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 886 of file RooAddPdf.cxx. ◆ selfNormalized(). bool RooAddPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 55 of file RooAddPdf.h. ◆ setAllExtendable(). void RooAddPdf::setAllExtendable ; (; bool ; allExtendable). inlineprivate . Definition at line 151 of file RooAddPdf.h. ◆ setCacheAndTrackHints(). void RooAddPdf::setCacheAndTrackHints ; (; RooArgSet & ; trackNodes). overridevirtual . Label OK'ed components of a RooAddPdf with cache-and-track. ; Reimplemented from RooAbsArg.; Definition at line 938 of file RooAddPdf.cxx. ◆ setRecursiveFraction(). void RooAddPdf::setRecursiveFraction ; (; bool ; recursiveFraction). inlineprivate . Definition at line 150 of file RooAddPdf.h. ◆ Streamer(). void RooAddPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooAddPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 153 of file RooAddPdf.h. ◆ translate(). void RooAddPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:95343,Performance,cache,cache,95343,"om RooAbsPdf. ◆ StreamerNVirtual(). void RooAddPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 153 of file RooAddPdf.h. ◆ translate(). void RooAddPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 548 of file RooAddPdf.cxx. ◆ updateCoefficients(). void RooAddPdf::updateCoefficients ; (; AddCacheElem & ; cache, . const RooArgSet * ; nset, . bool ; syncCoefValues = true . ); const. protected . Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ; param[in] cache The cache element for the given normalization set that stores the supplementary normalization values and projection-related objects. param[in] nset The set of variables to normalize over. param[in] syncCoefValues If the initial values of the coefficients still need to be copied from the _coefList elements to the _coefCache. True by default. ; Definition at line 442 of file RooAddPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 115 of file RooAddPdf.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 116 of file R",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:95476,Performance,cache,cache,95476,"ashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 548 of file RooAddPdf.cxx. ◆ updateCoefficients(). void RooAddPdf::updateCoefficients ; (; AddCacheElem & ; cache, . const RooArgSet * ; nset, . bool ; syncCoefValues = true . ); const. protected . Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ; param[in] cache The cache element for the given normalization set that stores the supplementary normalization values and projection-related objects. param[in] nset The set of variables to normalize over. param[in] syncCoefValues If the initial values of the coefficients still need to be copied from the _coefList elements to the _coefCache. True by default. ; Definition at line 442 of file RooAddPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 115 of file RooAddPdf.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 116 of file RooAddPdf.h. Member Data Documentation. ◆ _allExtendable. bool RooAddPdf::_allExtendable = false. protected . Flag indicating if all PDF components are extendable. ; Definition at line 136 of file RooAddPdf.h. ◆ _codeReg. RooAICRegistry Ro",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:95693,Performance,cache,cache,95693,"de represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 548 of file RooAddPdf.cxx. ◆ updateCoefficients(). void RooAddPdf::updateCoefficients ; (; AddCacheElem & ; cache, . const RooArgSet * ; nset, . bool ; syncCoefValues = true . ); const. protected . Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ; param[in] cache The cache element for the given normalization set that stores the supplementary normalization values and projection-related objects. param[in] nset The set of variables to normalize over. param[in] syncCoefValues If the initial values of the coefficients still need to be copied from the _coefList elements to the _coefCache. True by default. ; Definition at line 442 of file RooAddPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 115 of file RooAddPdf.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 116 of file RooAddPdf.h. Member Data Documentation. ◆ _allExtendable. bool RooAddPdf::_allExtendable = false. protected . Flag indicating if all PDF components are extendable. ; Definition at line 136 of file RooAddPdf.h. ◆ _codeReg. RooAICRegistry RooAddPdf::_codeReg. mutableprotected . ! Registry of component analytical integration codes ; Definition at line 129 of file RooAddPdf.h. ◆ _coefCache. std::vector<double> RooAddPdf::_coefCache. mutabl",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:95703,Performance,cache,cache,95703,"de represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 548 of file RooAddPdf.cxx. ◆ updateCoefficients(). void RooAddPdf::updateCoefficients ; (; AddCacheElem & ; cache, . const RooArgSet * ; nset, . bool ; syncCoefValues = true . ); const. protected . Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ; param[in] cache The cache element for the given normalization set that stores the supplementary normalization values and projection-related objects. param[in] nset The set of variables to normalize over. param[in] syncCoefValues If the initial values of the coefficients still need to be copied from the _coefList elements to the _coefCache. True by default. ; Definition at line 442 of file RooAddPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 115 of file RooAddPdf.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 116 of file RooAddPdf.h. Member Data Documentation. ◆ _allExtendable. bool RooAddPdf::_allExtendable = false. protected . Flag indicating if all PDF components are extendable. ; Definition at line 136 of file RooAddPdf.h. ◆ _codeReg. RooAICRegistry RooAddPdf::_codeReg. mutableprotected . ! Registry of component analytical integration codes ; Definition at line 129 of file RooAddPdf.h. ◆ _coefCache. std::vector<double> RooAddPdf::_coefCache. mutabl",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:96781,Performance,cache,cache,96781,ted objects. param[in] nset The set of variables to normalize over. param[in] syncCoefValues If the initial values of the coefficients still need to be copied from the _coefList elements to the _coefCache. True by default. ; Definition at line 442 of file RooAddPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddGenContext. friend class RooAddGenContext. friend . Definition at line 115 of file RooAddPdf.h. ◆ RooAddModel. friend class RooAddModel. friend . Definition at line 116 of file RooAddPdf.h. Member Data Documentation. ◆ _allExtendable. bool RooAddPdf::_allExtendable = false. protected . Flag indicating if all PDF components are extendable. ; Definition at line 136 of file RooAddPdf.h. ◆ _codeReg. RooAICRegistry RooAddPdf::_codeReg. mutableprotected . ! Registry of component analytical integration codes ; Definition at line 129 of file RooAddPdf.h. ◆ _coefCache. std::vector<double> RooAddPdf::_coefCache. mutableprotected . ! Transient cache with transformed values of coefficients ; Definition at line 107 of file RooAddPdf.h. ◆ _coefErrCount. Int_t RooAddPdf::_coefErrCount. mutableprotected . ! Coefficient error counter ; Definition at line 139 of file RooAddPdf.h. ◆ _coefList. RooListProxy RooAddPdf::_coefList. protected . List of coefficients. ; Definition at line 132 of file RooAddPdf.h. ◆ _copyOfLastNormSet. std::unique_ptr<const RooArgSet> RooAddPdf::_copyOfLastNormSet = nullptr. mutableprivate . ! ; Definition at line 146 of file RooAddPdf.h. ◆ _haveLastCoef. bool RooAddPdf::_haveLastCoef = false. protected . Flag indicating if last PDFs coefficient was supplied in the constructor. ; Definition at line 135 of file RooAddPdf.h. ◆ _idOfLastUsedNormSet. RooFit::UniqueId<RooArgSet>::Value_t RooAddPdf::_idOfLastUsedNormSet = RooFit::UniqueId<RooArgSet>::nullval. mutableprivate . ! ; Definition at line 145 of file RooAddPdf.h. ◆ _pdfList. RooListProxy RooAddPdf::_pdfList. protected . List of component PDFs. ; Definition at line 131 of file RooAddPdf.h. ◆,MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:14323,Safety,safe,safely,14323,"log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (pr",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:69048,Safety,sanity check,sanity check,69048,"onst RooArgProxy &c, const RooArgProxy &d) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< s",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:69080,Safety,safe,safe,69080,"onst RooArgProxy &c, const RooArgProxy &d) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< s",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:50970,Security,hash,hash,50970,"tCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:8231,Testability,log,log,8231,"st char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelih",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:9022,Testability,log,log,9022,"ntegral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:9288,Testability,log,log,9288,"g(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooFitResult > fitTo (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Fit PDF to given dataset. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > generate (const RooArgSet &whatVars, const RooDataSet &prototype, Int_t nEvents=0, bool verbose=false, bool randProtoOrder=false, bool resampleProto=false) const;  Generate a new dataset using a prototype dataset as a model, with values of the variables in whatVars sampled from our distribution. ;  ; RooFit::OwningPtr< RooDataSet > genera",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:13313,Testability,log,log,13313,"for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool removeConstraintsFromPdf=false) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet &, bool, bool=false) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:13414,Testability,log,log,13414,"for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool removeConstraintsFromPdf=false) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet &, bool, bool=false) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:28471,Testability,log,logEvalError,28471,"this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:38874,Testability,test,testArg,38874,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:38998,Testability,test,testArg,38998,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:39080,Testability,test,testArg,39080,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:39204,Testability,test,testArg,39204,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:39308,Testability,test,testArg,39308,") const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:43705,Testability,test,testArg,43705,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:43791,Testability,test,testArg,43791,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:48460,Testability,test,test,48460,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:48723,Testability,test,test,48723,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void s",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60304,Testability,log,logging,60304,"ited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbo",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60365,Testability,log,logEvalError,60365,"torConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60526,Testability,log,logging,60526,"torConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60586,Testability,log,logging,60586,"torConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60698,Testability,log,logged,60698,"t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60861,Testability,log,logged,60861," ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60992,Testability,log,logging,60992,"Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:63667,Testability,test,test,63667,"lContext &) const override;  Compute addition of PDFs in batches. ;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; RooAbsGenContext * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ;  ; AddCacheElem * getProjCache (const RooArgSet *nset, const RooArgSet *iset=nullptr) const;  Manager of cache with coefficient projections and transformations. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Calculate and return the current value. ;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  The cache manager. ;  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ; void updateCoefficients (AddCacheElem &cache, const RooArgSet *nset, bool syncCoefValues=true) const;  Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:63883,Testability,test,test,63883,"text * genContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false) const override;  Return specialized context to efficiently generate toy events from RooAddPdfs return RooAbsPdf::genContext(vars,prototype,auxProto,verbose) ; // WVE DEBUG. ;  ; AddCacheElem * getProjCache (const RooArgSet *nset, const RooArgSet *iset=nullptr) const;  Manager of cache with coefficient projections and transformations. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Calculate and return the current value. ;  ; bool redirectServersHook (const RooAbsCollection &, bool, bool, bool) override;  The cache manager. ;  ; void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ;  ; void selectNormalizationRange (const char *rangeName=nullptr, bool force=false) override;  Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ;  ; void updateCoefficients (AddCacheElem &cache, const RooArgSet *nset, bool syncCoefValues=true) const;  Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the current use context. ;  ;  Protected Member Functions inherited from RooAbsPdf;  RooAbsPdf (const RooAbsPdf &other, const char *name=nullptr);  Copy constructor. ;  ; virtual std::unique_ptr< RooAbsReal > createNLLImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the NLL creation routine. ;  ; virtual std::unique_ptr< RooFitResult > fitToImpl (RooAbsData &data, const RooLinkedList &cmdList);  Protected implementation of the likelihood fitting routine. ;  ; bool isActiveNormSet (RooArgSet const *normSet) const;  Checks i",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:92770,Testability,test,test,92770,"RooAbsArg.; Definition at line 949 of file RooAddPdf.cxx. ◆ redirectServersHook(). bool RooAddPdf::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . The cache manager. ; Hook function intercepting redirectServer calls.; Discard current normalization object if any server is redirected ; Reimplemented from RooAbsPdf.; Definition at line 955 of file RooAddPdf.cxx. ◆ resetErrorCounters(). void RooAddPdf::resetErrorCounters ; (; Int_t ; resetValue = 10). overridevirtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented from RooAbsPdf.; Definition at line 602 of file RooAddPdf.cxx. ◆ selectNormalization(). void RooAddPdf::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 863 of file RooAddPdf.cxx. ◆ selectNormalizationRange(). void RooAddPdf::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 886 of file RooAddPdf.cxx. ◆ selfNormalized(). bool RooAddPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 55 of file RooAddPdf.h. ◆ setAllExtendable(). void RooAddPdf::setAllExtendable ; (; bool ; allExtendable). inlineprivate . Definition at line 151 of file RooAddPdf.h. ◆ setCacheAndTrackHints(). ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:93137,Testability,test,test,93137,"ation object if any server is redirected ; Reimplemented from RooAbsPdf.; Definition at line 955 of file RooAddPdf.cxx. ◆ resetErrorCounters(). void RooAddPdf::resetErrorCounters ; (; Int_t ; resetValue = 10). overridevirtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented from RooAbsPdf.; Definition at line 602 of file RooAddPdf.cxx. ◆ selectNormalization(). void RooAddPdf::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of observables for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 863 of file RooAddPdf.cxx. ◆ selectNormalizationRange(). void RooAddPdf::selectNormalizationRange ; (; const char * ; rangeName = nullptr, . bool ; force = false . ). overrideprotectedvirtual . Interface function used by test statistics to freeze choice of range for interpretation of fraction coefficients. ; Reimplemented from RooAbsReal.; Definition at line 886 of file RooAddPdf.cxx. ◆ selfNormalized(). bool RooAddPdf::selfNormalized ; (; ); const. inlineoverridevirtual . Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ; Always returns false, unless a PDF overrides this function. ; Reimplemented from RooAbsPdf.; Definition at line 55 of file RooAddPdf.h. ◆ setAllExtendable(). void RooAddPdf::setAllExtendable ; (; bool ; allExtendable). inlineprivate . Definition at line 151 of file RooAddPdf.h. ◆ setCacheAndTrackHints(). void RooAddPdf::setCacheAndTrackHints ; (; RooArgSet & ; trackNodes). overridevirtual . Label OK'ed components of a RooAddPdf with cache-and-track. ; Reimplemented from RooAbsArg.; Definition at line 938 of file RooAddPdf.cxx. ◆ setRecursiveFraction(). void RooAddPdf::setRecursiveFraction ; (; bool ; recursiveFraction). inlineprivate . Definition at line 150 of ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:5816,Usability,intuit,intuitively,5816,"e assumed to refer to the default fit range. ;  ; bool forceAnalyticalInt (const RooAbsArg &) const override;  Force RooRealIntegral to offer all observables for internal integration. ;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Determine which part (if any) of given integral can be performed analytically. ;  ; const RooArgSet & getCoefNormalization () const;  ; const char * getCoefRange () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  If all components that depend on obs are binned, so is their sum. ;  ; const RooArgList & pdfList () const;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ;  ; void resetErrorCounters (Int_t resetValue=10) override;  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooAddPdf with cache-and-track. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *na",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:6652,Usability,simpl,simple,6652,"* plotSamplingHint (RooAbsRealLValue &obs, double xlo, double xhi) const override;  Loop over components for plot sampling hints and merge them if there are multiple. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ;  ; void resetErrorCounters (Int_t resetValue=10) override;  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooAddPdf with cache-and-track. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsPdf;  RooAbsPdf ();  Default constructor. ;  ;  RooAbsPdf (const char *name, const char *title, double minVal, double maxVal);  Constructor with name, title, and plot range. ;  ;  RooAbsPdf (const char *name, const char *title=nullptr);  Constructor with name and title only. ;  ;  ~RooAbsPdf () override;  Destructor. ;  ; virtual RooAbsGenContext * autoGenContext (const RooArgSet &vars, const RooDataSet *prototype=nullptr, const RooArgSet *auxProto=nullptr, bool verbose=false, bool autoBinned=true, const char *binnedTag="""") const;  ; virtual RooAbsGenContext * binnedGenContext (const RooArgSet &vars, bool verbose=false) const;  Return a binned generator context. ;  ; bool canBeExtended () const;  If true, PDF can provide extended likelihood term. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const Ro",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:41358,Usability,clear,clear,41358,"r *ind="""");  Hook function interface for object to insert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; RooWorkspace * workspace () const;  ; TIterator * cli",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:42041,Usability,clear,clear,42041,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; RooWorkspace * workspace () const;  ; TIterator * clientIterator () const R__DEPRECATED(6;  Retrieve a client iterator. ;  ; TIterator Use clients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * valueClientIterator () const R__DEPRECATED(6;  ; TIterator Use valueClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * shapeClientIterator () const R__DEPRECATED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter ",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:59932,Usability,clear,clearEvalErrorLog,59932,"R of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged ev",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:60738,Usability,clear,clearing,60738,"t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:69727,Usability,clear,clearShapeDirty,69727,"oPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:69761,Usability,clear,clearValueAndShapeDirty,69761,"oPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:69803,Usability,clear,clearValueDirty,69803,"oPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:91710,Usability,intuit,intuitively,91710,"Pdf::isBinnedDistribution ; (; const RooArgSet & ; obs); const. overridevirtual . If all components that depend on obs are binned, so is their sum. ; Reimplemented from RooAbsReal.; Definition at line 929 of file RooAddPdf.cxx. ◆ materializeRefCoefNormFromAttribute(). void RooAddPdf::materializeRefCoefNormFromAttribute ; (; ); const. private . Definition at line 345 of file RooAddPdf.cxx. ◆ pdfList(). const RooArgList & RooAddPdf::pdfList ; (; ); const. inline . Definition at line 70 of file RooAddPdf.h. ◆ plotSamplingHint(). std::list< double > * RooAddPdf::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Loop over components for plot sampling hints and merge them if there are multiple. ; Reimplemented from RooAbsReal.; Definition at line 912 of file RooAddPdf.cxx. ◆ printMetaArgs(). void RooAddPdf::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooAddPdf to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 949 of file RooAddPdf.cxx. ◆ redirectServersHook(). bool RooAddPdf::redirectServersHook ; (; const RooAbsCollection & ; newServerList, . bool ; mustReplaceAll, . bool ; nameChange, . bool ; isRecursiveStep . ). overrideprotectedvirtual . The cache manager. ; Hook function intercepting redirectServer calls.; Discard current normalization object if any server is redirected ; Reimplemented from RooAbsPdf.; Definition at line 955 of file RooAddPdf.cxx. ◆ resetErrorCounters(). void RooAddPdf::resetErrorCounters ; (; Int_t ; resetValue = 10). overridevirtual . Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ; Reimplemented from RooAbsPdf.; Definition at line 602 of file RooAddPdf.cxx. ◆ selectNormalization(). void RooAddPdf::selectNormalization ; (; const RooArgSet * ; depSet = nullptr, . bool ; force = false . ). o",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooAddPdf.html:94712,Usability,simpl,simple,94712,"dPdf::setAllExtendable ; (; bool ; allExtendable). inlineprivate . Definition at line 151 of file RooAddPdf.h. ◆ setCacheAndTrackHints(). void RooAddPdf::setCacheAndTrackHints ; (; RooArgSet & ; trackNodes). overridevirtual . Label OK'ed components of a RooAddPdf with cache-and-track. ; Reimplemented from RooAbsArg.; Definition at line 938 of file RooAddPdf.cxx. ◆ setRecursiveFraction(). void RooAddPdf::setRecursiveFraction ; (; bool ; recursiveFraction). inlineprivate . Definition at line 150 of file RooAddPdf.h. ◆ Streamer(). void RooAddPdf::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsPdf. ◆ StreamerNVirtual(). void RooAddPdf::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 153 of file RooAddPdf.h. ◆ translate(). void RooAddPdf::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 548 of file RooAddPdf.cxx. ◆ updateCoefficients(). void RooAddPdf::updateCoefficients ; (; AddCacheElem & ; cache, . const RooArgSet * ; nset, . bool ; syncCoefValues = true . ); const. protected . Update the coefficient values in the given cache element: calculate new remainder fraction, normalize fractions obtained from extended ML terms to unity, and multiply the various range and dimensional corrections needed in the curre",MatchSource.WIKI,doc/v632/classRooAddPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooAddPdf.html
https://root.cern/doc/v632/classRooRealSumFunc.html:15147,Availability,error,error,15147,"ine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:34690,Availability,mask,mask,34690,"s);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const Ro",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:40229,Availability,error,error,40229,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:40318,Availability,error,error,40318,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:40473,Availability,error,error,40473,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:40770,Availability,error,error,40770,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:44854,Availability,error,error,44854,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption s",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:46648,Availability,error,error,46648,"t char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last cle",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:46961,Availability,error,error,46961,"ct on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbo",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47183,Availability,error,error,47183,"treamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47243,Availability,error,error,47243,"treamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47379,Availability,error,errors,47379,"c bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47542,Availability,error,error,47542," ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47649,Availability,error,error,47649,"Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:58713,Availability,error,error,58713,"bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:64160,Availability,error,error,64160,"o. ; Reimplemented from RooAbsReal.; Definition at line 136 of file RooRealSumFunc.cxx. ◆ binBoundaries(). std::list< double > * RooRealSumFunc::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 142 of file RooRealSumFunc.cxx. ◆ canNodeBeCached(). CacheMode RooRealSumFunc::canNodeBeCached ; (; ); const. inlineoverridevirtual . Reimplemented from RooAbsArg.; Definition at line 58 of file RooRealSumFunc.h. ◆ checkObservables(). bool RooRealSumFunc::checkObservables ; (; const RooArgSet * ; nset); const. overridevirtual . Overloadable function in which derived classes can implement consistency checks of the variables. ; If this function returns true, indicating an error, the fitter or generator will abort. ; Reimplemented from RooAbsArg.; Definition at line 123 of file RooRealSumFunc.cxx. ◆ Class(). static TClass * RooRealSumFunc::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooRealSumFunc::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooRealSumFunc::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file RooRealSumFunc.h. ◆ clone(). TObject * RooRealSumFunc::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 33 of file RooRealSumFunc.h. ◆ coefList(). const RooArgList & RooRealSumFunc::coefList ; (; ); const. inline . Definition at line 45 of file RooRealSumFunc.h. ◆ compileForNormSet(). std::unique_ptr< RooAbsArg > RooRealSumFunc::compileForNormSet ; (; RooArgSet const & ; normSet, . RooFit::Detail::CompileContext & ; ctx . ); ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:8453,Deployability,configurat,configuration,8453,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:8483,Deployability,integrat,integration,8483,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:9414,Deployability,configurat,configuration,9414,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:9444,Deployability,integrat,integration,9444,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:13676,Deployability,integrat,integration,13676,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:13688,Deployability,configurat,configuration,13688,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:13803,Deployability,integrat,integration,13803,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:13815,Deployability,configurat,configuration,13815,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:17666,Deployability,integrat,integration,17666,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:17678,Deployability,configurat,configuration,17678,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:17799,Deployability,integrat,integrator,17799,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:17810,Deployability,configurat,configuration,17810,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:17843,Deployability,integrat,integration,17843,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:17855,Deployability,configurat,configuration,17855,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:18265,Deployability,integrat,integrator,18265,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:18276,Deployability,configurat,configuration,18276,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:18406,Deployability,integrat,integrator,18406,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:18417,Deployability,configurat,configuration,18417,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:31253,Deployability,update,updates,31253,"eClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const RooAbsArg &arg) const;  Check if this is serving values to arg. ;  ; bool isValueServer (const char *name) const;  Check if this is serving values to an object with name name. ;  ; bool isShapeServer (const RooAbsArg &arg) const;  Check if this is serving shape to arg. ;  ; bool isShapeServer (const char *name) const;  Check if this is serving shape to an object with name name. ;  ; void leafNodeServerList (RooAbsColl",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:33304,Deployability,integrat,integrated,33304," *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all leaf nodes of the arg tree, starting with ourself as top node. ;  ; void branchNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all branch nodes of the arg tree starting with ourself as top node. ;  ; void treeNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool doBranch=true, bool doLeaf=true, bool valueOnly=false, bool recurseNonDerived=false) const;  Fill supplied list with nodes of the arg tree, following all server links, starting with ourself as top node. ;  ; virtual bool isFundamental () const;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:46791,Deployability,integrat,integration,46791,"int extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:46803,Deployability,configurat,configuration,46803,"int extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:49427,Deployability,integrat,integration,49427,destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveLastCoef;  The integration cache manager. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttrib,MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:49621,Deployability,integrat,integration,49621,d *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveLastCoef;  The integration cache manager. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ;,MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:55485,Deployability,integrat,integrated,55485,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:55543,Deployability,integrat,integration,55543,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:70628,Deployability,integrat,integration,70628,"efines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 117 of file RooRealSumFunc.cxx. Member Data Documentation. ◆ _coefList. RooListProxy RooRealSumFunc::_coefList. protected . List of coefficients. ; Definition at line 71 of file RooRealSumFunc.h. ◆ _doFloor. bool RooRealSumFunc::_doFloor = false. protected . Introduce floor at zero in pdf. ; Definition at line 73 of file RooRealSumFunc.h. ◆ _doFloorGlobal. bool RooRealSumFunc::_doFloorGlobal = false. staticprotected . Global flag for introducing floor at zero in pdf. ; Definition at line 75 of file RooRealSumFunc.h. ◆ _funcList. RooListProxy RooRealSumFunc::_funcList. protected . List of component FUNCs. ; Definition at line 70 of file RooRealSumFunc.h. ◆ _haveLastCoef. bool RooRealSumFunc::_haveLastCoef. protected . The integration cache manager. ; Definition at line 68 of file RooRealSumFunc.h. ◆ _haveWarned. bool RooRealSumFunc::_haveWarned {false}. mutableprotected . ! ; Definition at line 74 of file RooRealSumFunc.h. ◆ _normIntMgr. RooObjCacheManager RooRealSumFunc::_normIntMgr. mutableprotected . Definition at line 66 of file RooRealSumFunc.h. Libraries for RooRealSumFunc:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealSumFunc.h; roofit/roofitcore/src/RooRealSumFunc.cxx. RooRealSumFunc. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:4282,Energy Efficiency,adapt,adaptor,4282,"ctions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:66602,Energy Efficiency,efficient,efficient,66602,"this PDF / function / constant. Needs to be overridden by all derived classes. ; Implements RooAbsReal.; Definition at line 112 of file RooRealSumFunc.cxx. ◆ forceAnalyticalInt(). bool RooRealSumFunc::forceAnalyticalInt ; (; const RooAbsArg & ; arg); const. inlineoverridevirtual . Reimplemented from RooAbsReal.; Definition at line 39 of file RooRealSumFunc.h. ◆ funcList(). const RooArgList & RooRealSumFunc::funcList ; (; ); const. inline . Definition at line 44 of file RooRealSumFunc.h. ◆ getAnalyticalIntegralWN(). Int_t RooRealSumFunc::getAnalyticalIntegralWN ; (; RooArgSet & ; allDeps, . RooArgSet & ; analDeps, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ; For certain operator p.d.f it is useful to overload this function rather than analyticalIntegralWN() as the additional normalization information may be useful in determining a more efficient decomposition of the requested integral. ; Reimplemented from RooAbsReal.; Definition at line 129 of file RooRealSumFunc.cxx. ◆ getFloor(). bool RooRealSumFunc::getFloor ; (; ); const. inline . Definition at line 54 of file RooRealSumFunc.h. ◆ getFloorGlobal(). static bool RooRealSumFunc::getFloorGlobal ; (; ). inlinestatic . Definition at line 56 of file RooRealSumFunc.h. ◆ IsA(). TClass * RooRealSumFunc::IsA ; (; ); const. inlineoverridevirtual . ReturnsTClass describing current object ; Reimplemented from RooAbsReal.; Definition at line 78 of file RooRealSumFunc.h. ◆ isBinnedDistribution(). bool RooRealSumFunc::isBinnedDistribution ; (; const RooArgSet & ; ); const. overridevirtual . Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ; Reimplemented from RooAbsReal.; Definition at line 148 of file RooRealSumFunc.cxx. ◆ plotSamplingHint(). std::list< double > * RooRealSum",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:4272,Integrability,interface,interface,4272,"ctions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:8483,Integrability,integrat,integration,8483,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:9444,Integrability,integrat,integration,9444,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:9665,Integrability,depend,dependentVars,9665,"nction over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooArgSet &nset={});  Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooCmdArg &",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:13676,Integrability,integrat,integration,13676,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:13803,Integrability,integrat,integration,13803,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:15076,Integrability,message,message,15076,"ine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:15153,Integrability,message,message,15153,"ine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:17666,Integrability,integrat,integration,17666,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:17799,Integrability,integrat,integrator,17799,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:17843,Integrability,integrat,integration,17843,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:18265,Integrability,integrat,integrator,18265,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:18406,Integrability,integrat,integrator,18406,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:19809,Integrability,depend,dependent,19809," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPri",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:20016,Integrability,depend,dependent,20016," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether w",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:20822,Integrability,depend,dependsOn,20822,"erver nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:20940,Integrability,depend,depend,20940,"erver nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:21002,Integrability,depend,dependsOn,21002,"nst;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:21131,Integrability,depend,depend,21131,"nst;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:21211,Integrability,depend,dependsOn,21211,"* cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:21327,Integrability,depend,depend,21327,"* cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:21399,Integrability,depend,dependsOnValue,21399,"t to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:21510,Integrability,depend,depends,21510,"t to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:21579,Integrability,depend,dependsOnValue,21579,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:21701,Integrability,depend,depends,21701,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:22688,Integrability,depend,dependents,22688," bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable lis",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:22878,Integrability,depend,depends,22878,"me) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set o",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:23605,Integrability,depend,dependents,23605,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:25628,Integrability,depend,depend,25628,"connected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; v",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:26034,Integrability,depend,dependents,26034,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:26240,Integrability,depend,dependents,26240,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:27478,Integrability,interface,interface,27478,"y of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os, const char *ind="""");  Hook function interface for object to insert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:30769,Integrability,depend,dependentOverlaps,30769,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:30853,Integrability,depend,dependentOverlaps,30853,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:33304,Integrability,integrat,integrated,33304," *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all leaf nodes of the arg tree, starting with ourself as top node. ;  ; void branchNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all branch nodes of the arg tree starting with ourself as top node. ;  ; void treeNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool doBranch=true, bool doLeaf=true, bool valueOnly=false, bool recurseNonDerived=false) const;  Fill supplied list with nodes of the arg tree, following all server links, starting with ourself as top node. ;  ; virtual bool isFundamental () const;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:34161,Integrability,depend,depend,34161,"tal-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old s",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:34858,Integrability,depend,depend,34858,"Change=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:40235,Integrability,message,message,40235,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:40776,Integrability,message,message,40776,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:41766,Integrability,message,message,41766,"ssue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class shou",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:44860,Integrability,message,message,44860,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption s",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:45233,Integrability,message,message,45233," Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char *",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:46654,Integrability,message,messages,46654,"t char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last cle",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:46791,Integrability,integrat,integration,46791,"int extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47106,Integrability,message,message,47106,"treamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47197,Integrability,message,messages,47197,"treamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:49427,Integrability,integrat,integration,49427,destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveLastCoef;  The integration cache manager. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttrib,MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:49621,Integrability,integrat,integration,49621,d *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveLastCoef;  The integration cache manager. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ;,MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:55485,Integrability,integrat,integrated,55485,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:55543,Integrability,integrat,integration,55543,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:58727,Integrability,wrap,wrapper,58727,"bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:70628,Integrability,integrat,integration,70628,"efines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 117 of file RooRealSumFunc.cxx. Member Data Documentation. ◆ _coefList. RooListProxy RooRealSumFunc::_coefList. protected . List of coefficients. ; Definition at line 71 of file RooRealSumFunc.h. ◆ _doFloor. bool RooRealSumFunc::_doFloor = false. protected . Introduce floor at zero in pdf. ; Definition at line 73 of file RooRealSumFunc.h. ◆ _doFloorGlobal. bool RooRealSumFunc::_doFloorGlobal = false. staticprotected . Global flag for introducing floor at zero in pdf. ; Definition at line 75 of file RooRealSumFunc.h. ◆ _funcList. RooListProxy RooRealSumFunc::_funcList. protected . List of component FUNCs. ; Definition at line 70 of file RooRealSumFunc.h. ◆ _haveLastCoef. bool RooRealSumFunc::_haveLastCoef. protected . The integration cache manager. ; Definition at line 68 of file RooRealSumFunc.h. ◆ _haveWarned. bool RooRealSumFunc::_haveWarned {false}. mutableprotected . ! ; Definition at line 74 of file RooRealSumFunc.h. ◆ _normIntMgr. RooObjCacheManager RooRealSumFunc::_normIntMgr. mutableprotected . Definition at line 66 of file RooRealSumFunc.h. Libraries for RooRealSumFunc:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealSumFunc.h; roofit/roofitcore/src/RooRealSumFunc.cxx. RooRealSumFunc. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:1365,Modifiability,variab,variables,1365,"ll members ; RooRealSumFunc Class Reference. . Definition at line 26 of file RooRealSumFunc.h. Public Member Functions;  RooRealSumFunc ();  ;  RooRealSumFunc (const char *name, const char *title);  ;  RooRealSumFunc (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList);  ;  RooRealSumFunc (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  ;  RooRealSumFunc (const RooRealSumFunc &other, const char *name=nullptr);  ;  ~RooRealSumFunc () override;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Overloadable function in which derived classes can implement consistency checks of the variables. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; double evaluate () const override;  Evaluate this PDF / function / constant. Needs to be overridden by all derived classes. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getFloor () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const overr",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:3251,Modifiability,inherit,inherited,3251," derived classes, this always returns false. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumFunc to more intuitively reflect the contents of the product operator construction. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  ; void setFloor (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified var",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:4282,Modifiability,adapt,adaptor,4282,"ctions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:4329,Modifiability,variab,variables,4329,"ctions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:6009,Modifiability,variab,variable,6009,"2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooLinkedList &cmdList);  Perform a 2-D \( \chi^2 \) fit using a series of x and y values stored in the dataset xydata. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create a \( \chi^2 \) variable from a histogram and this function. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataHist &data, const RooLinkedList &cmdList);  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataSet &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create a \( \chi^2 \) from a series of x and y values stored in a dataset. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createChi2 (RooDataSet &data, const RooLinkedList &cmdList);  See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:7690,Modifiability,variab,variables,7690,"inkedList &cmdList);  See RooAbsReal::createChi2(RooDataSet&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&,const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsArg > createFundamental (const char *newname=nullptr) const override;  Create a RooRealVar fundamental object with our properties. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nu",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:8453,Modifiability,config,configuration,8453,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:9414,Modifiability,config,configuration,9414,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:13688,Modifiability,config,configuration,13688,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:13815,Modifiability,config,configuration,13815,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool h",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:14078,Modifiability,variab,variable,14078," the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ;",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:14327,Modifiability,variab,variable,14327,"th given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAb",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:17678,Modifiability,config,configuration,17678,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:17775,Modifiability,config,config,17775,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:17810,Modifiability,config,configuration,17810,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:17855,Modifiability,config,configuration,17855,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:18028,Modifiability,variab,variable,18028,"es for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean a",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:18276,Modifiability,config,configuration,18276,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:18417,Modifiability,config,configuration,18417,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:18669,Modifiability,inherit,inherited,18669,"ool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollectio",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:19738,Modifiability,variab,variable,19738," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPri",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:19773,Modifiability,variab,variables,19773," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPri",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:19945,Modifiability,variab,variable,19945," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether w",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:19980,Modifiability,variab,variables,19980," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether w",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:22644,Modifiability,variab,variable,22644," bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable lis",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:23561,Modifiability,variab,variable,23561,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:24754,Modifiability,variab,variables,24754," set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (const Text_t *key) const;  Get string attribute mapped under key 'key'. ;  ; bool getTransientAttribute (const Text_t *name) const;  Check if a named attribute is set. ;  ; RooFit::OwningPtr< RooArgSet > getVariables (bool stripDisconnected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:37226,Modifiability,inherit,inherited,37226,"const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () cons",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:38772,Modifiability,inherit,inherited,38772,"ects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:39865,Modifiability,inherit,inheritance,39865,"  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract. ;  ; virtual void AppendPad (Option_t *option="""");  Append graphics object to current pad. ;  ; virtual void Browse (TBrowser *b);  Browse object. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in de",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:41864,Modifiability,inherit,inherits,41864,"e) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:41981,Modifiability,inherit,inherits,41981,"t be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info message. ;  ; virtual Bool_t InheritsFrom (const char *classname) const;  Returns kTRUE if object inherits from class ""classname"". ;  ; virtual Bool_t InheritsFrom (const TClass *cl) const;  Returns kTRUE if object inherits from TClass cl. ;  ; virtual void Inspect () const;  Dump contents of this object in a graphics canvas. ;  ; void InvertBit (UInt_t f);  ; Bool_t IsDestructed () const;  IsDestructed. ;  ; virtual Bool_t IsEqual (const TObject *obj) const;  Default equal comparison (objects are equal if they have the same address in memory). ;  ; virtual Bool_t IsFolder () const;  Returns kTRUE in case object contains browsable objects (like containers or lists of other objects). ;  ; R__ALWAYS_INLINE Bool_t IsOnHeap () const;  ; R__ALWAYS_INLINE Bool_t IsZombie () const;  ; void MayNotUse (const char *method) const;  Use this method to signal that a method (defined in a base class) may not be called in a derived class (in principle against good design since a child class should not provide less functionality than its parent, however, sometimes it is necessary). ;  ; virtual Bool_t Notify ();  This method must be overridden to handle object notification (the base ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:45540,Modifiability,inherit,inherited,45540,"id SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of eva",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:46441,Modifiability,inherit,inherited,46441,"t char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last cle",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:46803,Modifiability,config,configuration,46803,"int extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47748,Modifiability,inherit,inherited,47748,");  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static T",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47994,Modifiability,inherit,inherited,47994,"sages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:48204,Modifiability,inherit,inherited,48204,"sages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given am",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:48722,Modifiability,inherit,inherited,48722,void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveLastCoef;  The integration cache manager. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _pl,MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:49550,Modifiability,inherit,inherited,49550,d *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveLastCoef;  The integration cache manager. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ;,MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:50324,Modifiability,inherit,inherited,50324,"RooObjCacheManager _normIntMgr;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:51600,Modifiability,inherit,inherited,51600," RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:51810,Modifiability,inherit,inherited,51810," bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:52178,Modifiability,inherit,inherited,52178,"is object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherit",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:52347,Modifiability,inherit,inherited,52347,"component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:52449,Modifiability,inherit,inherited,52449,"onst RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsO",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:52800,Modifiability,inherit,inherited,52800,"onst RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsO",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:53210,Modifiability,inherit,inherited,53210,"onst RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsO",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:53848,Modifiability,inherit,inherited,53848,"ctivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherited from TObject; enum  { ;   kIsOnHeap = 0x01000000; , kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree bran",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:54170,Modifiability,inherit,inherited,54170,"kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString int",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:54269,Modifiability,inherit,inherited,54269,"kNotDeleted = 0x02000000; , kZombie = 0x04000000; , kInconsistent = 0x08000000; , ;   kBitMask = 0x00ffffff. };  ; enum  { kSingleKey = (1ULL << ( 0 )); , kOverwrite = (1ULL << ( 1 )); , kWriteDelete = (1ULL << ( 2 )); };  ; enum  EDeprecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString int",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:55234,Modifiability,parameteriz,parameterized,55234," , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:58769,Modifiability,inherit,inherited,58769," general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtua",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:60912,Modifiability,inherit,inherited,60912," attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooRealSumFunc.h>. Inheritance diagram for RooRealSumFunc:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooRealSumFunc() [1/5]. RooRealSumFunc::RooRealSumFunc ; (; ). Definition at line 45 of file RooRealSumFunc.cxx. ◆ RooRealSumFunc() [2/5]. RooRealSumFunc::RooRealSumFunc ; (; const char * ; name, . const char * ; title . ). Definition at line 53 of fi",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:61130,Modifiability,inherit,inherited,61130," the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooRealSumFunc.h>. Inheritance diagram for RooRealSumFunc:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooRealSumFunc() [1/5]. RooRealSumFunc::RooRealSumFunc ; (; ). Definition at line 45 of file RooRealSumFunc.cxx. ◆ RooRealSumFunc() [2/5]. RooRealSumFunc::RooRealSumFunc ; (; const char * ; name, . const char * ; title . ). Definition at line 53 of file RooRealSumFunc.cxx. ◆ RooRealSumFunc() [3/5]. RooRealSumFunc::RooRealSumFunc ; (; const char * ; name, . const char * ; title, . const RooArgList & ; funcList, . const RooArgList & ; coefList . ).",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:61316,Modifiability,inherit,inherited,61316," registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; static void ioStreamerPass2Finalize ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  . #include <RooRealSumFunc.h>. Inheritance diagram for RooRealSumFunc:. This browser is not able to show SVG: try Firefox, Chrome, Safari, or Opera instead.; [legend]; Constructor & Destructor Documentation. ◆ RooRealSumFunc() [1/5]. RooRealSumFunc::RooRealSumFunc ; (; ). Definition at line 45 of file RooRealSumFunc.cxx. ◆ RooRealSumFunc() [2/5]. RooRealSumFunc::RooRealSumFunc ; (; const char * ; name, . const char * ; title . ). Definition at line 53 of file RooRealSumFunc.cxx. ◆ RooRealSumFunc() [3/5]. RooRealSumFunc::RooRealSumFunc ; (; const char * ; name, . const char * ; title, . const RooArgList & ; funcList, . const RooArgList & ; coefList . ). Definition at line 79 of file RooRealSumFunc.cxx. ◆ RooRealSumFunc() [4/5]. RooRealSumFunc::RooRealSumFunc ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; func1, . RooAbsReal & ; func2, . RooAbsReal &",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:64102,Modifiability,variab,variables,64102,"is functions will only be called with codes returned by getAnalyticalIntegral, except code zero. ; Reimplemented from RooAbsReal.; Definition at line 136 of file RooRealSumFunc.cxx. ◆ binBoundaries(). std::list< double > * RooRealSumFunc::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 142 of file RooRealSumFunc.cxx. ◆ canNodeBeCached(). CacheMode RooRealSumFunc::canNodeBeCached ; (; ); const. inlineoverridevirtual . Reimplemented from RooAbsArg.; Definition at line 58 of file RooRealSumFunc.h. ◆ checkObservables(). bool RooRealSumFunc::checkObservables ; (; const RooArgSet * ; nset); const. overridevirtual . Overloadable function in which derived classes can implement consistency checks of the variables. ; If this function returns true, indicating an error, the fitter or generator will abort. ; Reimplemented from RooAbsArg.; Definition at line 123 of file RooRealSumFunc.cxx. ◆ Class(). static TClass * RooRealSumFunc::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooRealSumFunc::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooRealSumFunc::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file RooRealSumFunc.h. ◆ clone(). TObject * RooRealSumFunc::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 33 of file RooRealSumFunc.h. ◆ coefList(). const RooArgList & RooRealSumFunc::coefList ; (; ); const. inline . Definition at line 45 of file RooRealSumFunc.h. ◆ compileForNormSet(). std::unique_ptr< RooAbsArg > RooRealSumFunc::comp",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:17542,Performance,cache,cache,17542,"lot (project) PDF on specified frame. ;  ; virtual RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const;  Internal back-end function of plotOn() with named arguments. ;  ; virtual RooPlot * plotSliceOn (RooPlot *frame, const RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the special",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:35066,Performance,optimiz,optimizeCacheMode,35066,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:35126,Performance,cache,cache,35126,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:35137,Performance,optimiz,optimization,35137,"sArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:35206,Performance,optimiz,optimizeCacheMode,35206," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:35318,Performance,cache,cache,35318," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:35329,Performance,optimiz,optimization,35329," a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:35450,Performance,cache,cacheList,35450,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:35557,Performance,cache,cached,35557,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:35682,Performance,cache,cacheList,35682,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void s",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:35820,Performance,cache,cached,35820,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void s",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:36014,Performance,perform,perform,36014,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCach",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:36036,Performance,optimiz,optimization,36036,"eChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCach",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:36235,Performance,cache,cache,36235,"nition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (R",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:36323,Performance,cache,cache,36323,"ache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TName",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:36458,Performance,cache,caches,36458,"vables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtua",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:36534,Performance,cache,cache,36534," and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:37010,Performance,cache,cacheUniqueSuffix,37010,"const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () cons",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:37190,Performance,cache,cache,37190,"const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void setValueDirty ();  Mark the element dirty. This forces a re-evaluation when a value is requested. ;  ; void setShapeDirty ();  Notify that a shape-like property (e.g. binning) has changed. ;  ; const char * aggregateCacheUniqueSuffix () const;  ; virtual const char * cacheUniqueSuffix () const;  ; void wireAllCaches ();  ; RooExpensiveObjectCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () cons",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:49439,Performance,cache,cache,49439,destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveLastCoef;  The integration cache manager. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttrib,MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:51161,Performance,cache,cache,51161,"adBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ; std::size_t _dataToken = std::numeric_limits<std::size_t>::max();  In which workspace do I live, if any. ;  ; bool _deleteWatch = false;  ; RooExpensiveObjectCache * _eocache {nullptr};  Prohibit server redirects – Debugging tool. ;  ; bool _fast = false;  ; bool _isConstant = false;  De-duplicated name pointer. This will be equal for all objects with the same name. ;  ; bool _localNoInhibitDirty = false;  Cached isConstant status. ;  ; RooWorkspace * _myws = nullptr;  Prevent 'AlwaysDirty' mode for this node. ;  ; const TNamed * _namePtr = nullptr;  Pointer to global cache manager for any expensive components created by this object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protect",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:52262,Performance,cache,cache,52262,"is object. ;  ; OperMode _operMode = Auto;  ; RooArgSet * _ownedComponents = nullptr;  ; bool _prohibitServerRedirect = false;  Set of owned component. ;  ; RooRefArray _proxyList;  ; ProxyListCache _proxyListCache;  ; RefCountList_t _serverList;  ; bool _shapeDirty = true;  ; std::map< std::string, std::string > _stringAttrib;  ; bool _valueDirty = true;  ;  Protected Attributes inherited from TNamed; TString fName;  ; TString fTitle;  . Static Protected Attributes; static bool _doFloorGlobal = false;  Global flag for introducing floor at zero in pdf. ;  ;  Static Protected Attributes inherited from RooAbsReal; static Int_t _evalErrorCount = 0;  ; static std::map< const RooAbsArg *, std::pair< std::string, std::list< EvalError > > > _evalErrorList;  ; static ErrorLoggingMode _evalErrorMode = RooAbsReal::PrintErrors;  ; static bool _globalSelectComp = false;  ; static bool _hideOffset = true;  Offset hiding flag. ;  ;  Static Protected Attributes inherited from RooAbsArg; static bool _inhibitDirty;  ; static bool _verboseDirty;  cache of the list of proxies. Avoids type casting. ;  ;  Static Protected Attributes inherited from RooPrintable; static Int_t _nameLength;  . Additional Inherited Members;  Public Types inherited from RooAbsReal; enum  ErrorLoggingMode { PrintErrors; , CollectErrors; , CountErrors; , Ignore; };  ; typedef std::map< constRooAbsArg *, std::pair< std::string, std::list< EvalError > > >::const_iterator EvalErrorIter;  ; enum  ScaleType { Raw; , Relative; , NumEvent; , RelativeExpected; };  ; using value_type = double;  ;  Public Types inherited from RooAbsArg; enum  CacheMode { Always =0; , NotAdvised =1; , Never =2; };  ; enum  ConstOpCode { Activate =0; , DeActivate =1; , ConfigChange =2; , ValueChange =3; };  ; enum  OperMode { Auto =0; , AClean =1; , ADirty =2; };  ; using RefCountList_t = RooSTLRefCountList< RooAbsArg >;  ; using RefCountListLegacyIterator_t = TIteratorToSTLInterface< RefCountList_t::Container_t >;  ;  Public Types inherit",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:54572,Performance,cache,cached,54572,"ecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:54613,Performance,cache,cache,54613,"ecatedStatusBits { kObjInCanvas = (1ULL << ( 3 )); };  ; enum  EStatusBits { ;   kCanDelete = (1ULL << ( 0 )); , kMustCleanup = (1ULL << ( 3 )); , kIsReferenced = (1ULL << ( 4 )); , kHasUUID = (1ULL << ( 5 )); , ;   kCannotPick = (1ULL << ( 6 )); , kNoContextMenu = (1ULL << ( 8 )); , kInvalidObject = (1ULL << ( 13 )). };  ;  Public Types inherited from RooPrintable; enum  ContentsOption { ;   kName =1; , kClassName =2; , kValue =4; , kArgs =8; , ;   kExtras =16; , kAddress =32; , kTitle =64; , kCollectionHeader =128. };  ; enum  StyleOption { ;   kInline =1; , kSingleLine =2; , kStandard =3; , kVerbose =4; , ;   kTreeStructure =5. };  ;  Protected Types inherited from TObject; enum  { kOnlyPrepStep = (1ULL << ( 3 )); };  ;  Protected Member Functions inherited from RooAbsReal; void attachToTree (TTree &t, Int_t bufSize=32000) override;  Attach object to a branch of given TTree. ;  ; void attachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:57818,Performance,perform,perform,57818,"bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; virtual RooPlot * plotOn (RooPlot *frame, PlotOpt o) const;  Plotting engine function for internal use. ;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:59865,Performance,optimiz,optimizeDirtyHook,59865,";  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoErr",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:60353,Performance,cache,cached,60353,"id graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forward a change in the cached normalization argset to all the registered proxies. ;  ; void setShapeDirty (const RooAbsArg *source);  Notify that a shape-like property (e.g. binning) has changed. ;  ; void setValueDirty (const RooAbsArg *source);  Force element to re-evaluate itself when a value is requested. ;  ; void unRegisterProxy (RooArgProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooListProxy &proxy);  Remove proxy from proxy list. ;  ; void unRegisterProxy (RooSetProxy &proxy);  Remove proxy from proxy list. ;  ;  Protected Member Functions inherited from TObject; virtual void DoError (int level, const char *location, const char *fmt, va_list va) const;  Interface to ErrorHandler (protected). ;  ; void MakeZombie ();  ;  Static Protected Member Functions inherited from RooAbsReal; static void globalSelectComp (bool flag);  Global switch controlling the activation of the selectComp() functionality. ;  ;  Static Protected Member Functions inherited from RooAbsArg; st",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:70640,Performance,cache,cache,70640,"efines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 117 of file RooRealSumFunc.cxx. Member Data Documentation. ◆ _coefList. RooListProxy RooRealSumFunc::_coefList. protected . List of coefficients. ; Definition at line 71 of file RooRealSumFunc.h. ◆ _doFloor. bool RooRealSumFunc::_doFloor = false. protected . Introduce floor at zero in pdf. ; Definition at line 73 of file RooRealSumFunc.h. ◆ _doFloorGlobal. bool RooRealSumFunc::_doFloorGlobal = false. staticprotected . Global flag for introducing floor at zero in pdf. ; Definition at line 75 of file RooRealSumFunc.h. ◆ _funcList. RooListProxy RooRealSumFunc::_funcList. protected . List of component FUNCs. ; Definition at line 70 of file RooRealSumFunc.h. ◆ _haveLastCoef. bool RooRealSumFunc::_haveLastCoef. protected . The integration cache manager. ; Definition at line 68 of file RooRealSumFunc.h. ◆ _haveWarned. bool RooRealSumFunc::_haveWarned {false}. mutableprotected . ! ; Definition at line 74 of file RooRealSumFunc.h. ◆ _normIntMgr. RooObjCacheManager RooRealSumFunc::_normIntMgr. mutableprotected . Definition at line 66 of file RooRealSumFunc.h. Libraries for RooRealSumFunc:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealSumFunc.h; roofit/roofitcore/src/RooRealSumFunc.cxx. RooRealSumFunc. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:57834,Safety,sanity check,sanity check,57834,"bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; virtual RooPlot * plotOn (RooPlot *frame, PlotOpt o) const;  Plotting engine function for internal use. ;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:57866,Safety,safe,safe,57866,"bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgSet &set) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgsByName (const RooArgSet &allArgs, RooArgSet &matchedArgs, const TList &nameList) const;  Check if allArgs contains matching elements for each name in nameList. ;  ; virtual RooPlot * plotAsymOn (RooPlot *frame, const RooAbsCategoryLValue &asymCat, PlotOpt o) const;  ; virtual RooPlot * plotOn (RooPlot *frame, PlotOpt o) const;  Plotting engine function for internal use. ;  ; void plotOnCompSelect (RooArgSet *selNodes) const;  Helper function for plotting of composite p.d.fs. ;  ; RooPlot * plotOnWithErrorBand (RooPlot *frame, const RooFitResult &fr, double Z, const RooArgSet *params, const RooLinkedList &argList, bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:64196,Safety,abort,abort,64196,"o. ; Reimplemented from RooAbsReal.; Definition at line 136 of file RooRealSumFunc.cxx. ◆ binBoundaries(). std::list< double > * RooRealSumFunc::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 142 of file RooRealSumFunc.cxx. ◆ canNodeBeCached(). CacheMode RooRealSumFunc::canNodeBeCached ; (; ); const. inlineoverridevirtual . Reimplemented from RooAbsArg.; Definition at line 58 of file RooRealSumFunc.h. ◆ checkObservables(). bool RooRealSumFunc::checkObservables ; (; const RooArgSet * ; nset); const. overridevirtual . Overloadable function in which derived classes can implement consistency checks of the variables. ; If this function returns true, indicating an error, the fitter or generator will abort. ; Reimplemented from RooAbsArg.; Definition at line 123 of file RooRealSumFunc.cxx. ◆ Class(). static TClass * RooRealSumFunc::Class ; (; ). static . ReturnsTClass describing this class . ◆ Class_Name(). static const char * RooRealSumFunc::Class_Name ; (; ). static . ReturnsName of this class . ◆ Class_Version(). static constexpr Version_t RooRealSumFunc::Class_Version ; (; ). inlinestaticconstexpr . ReturnsVersion of this class ; Definition at line 78 of file RooRealSumFunc.h. ◆ clone(). TObject * RooRealSumFunc::clone ; (; const char * ; newname); const. inlineoverridevirtual . Implements RooAbsArg.; Definition at line 33 of file RooRealSumFunc.h. ◆ coefList(). const RooArgList & RooRealSumFunc::coefList ; (; ); const. inline . Definition at line 45 of file RooRealSumFunc.h. ◆ compileForNormSet(). std::unique_ptr< RooAbsArg > RooRealSumFunc::compileForNormSet ; (; RooArgSet const & ; normSet, . RooFit::Detail::CompileContext & ; ctx . ); ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:38094,Security,hash,hash,38094,"tCache & expensiveObjectCache () const;  ; virtual void setExpensiveObjectCache (RooExpensiveObjectCache &cache);  ;  Public Member Functions inherited from TNamed;  TNamed ();  ;  TNamed (const char *name, const char *title);  ;  TNamed (const TNamed &named);  TNamed copy ctor. ;  ;  TNamed (const TString &name, const TString &title);  ; virtual ~TNamed ();  TNamed destructor. ;  ; void Clear (Option_t *option="""") override;  Set name and title to empty strings (""""). ;  ; TObject * Clone (const char *newname="""") const override;  Make a clone of an object using the Streamer facility. ;  ; Int_t Compare (const TObject *obj) const override;  Compare two TNamed objects. ;  ; void Copy (TObject &named) const override;  Copy this to obj. ;  ; virtual void FillBuffer (char *&buffer);  Encode TNamed into output buffer. ;  ; const char * GetName () const override;  Returns name of object. ;  ; const char * GetTitle () const override;  Returns title of object. ;  ; ULong_t Hash () const override;  Return hash value for this object. ;  ; TClass * IsA () const override;  ; Bool_t IsSortable () const override;  ; void ls (Option_t *option="""") const override;  List TNamed name and title. ;  ; TNamed & operator= (const TNamed &rhs);  TNamed assignment operator. ;  ; void Print (Option_t *option="""") const override;  Print TNamed name and title. ;  ; virtual void SetTitle (const char *title="""");  Set the title of the TNamed. ;  ; virtual Int_t Sizeof () const;  Return size of the TNamed part of the TObject. ;  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from TObject;  TObject ();  TObject constructor. ;  ;  TObject (const TObject &object);  TObject copy ctor. ;  ; virtual ~TObject ();  TObject destructor. ;  ; void AbstractMethod (const char *method) const;  Use this method to implement an ""abstract"" method that you don't want to leave purely abstract",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:15050,Testability,log,logEvalError,15050,"ine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual double getValV (const RooArgSet *normalisationSet=nullptr) const;  Return value of object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:25998,Testability,test,testArg,25998,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:26122,Testability,test,testArg,26122,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:26204,Testability,test,testArg,26204,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:26328,Testability,test,testArg,26328,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:26432,Testability,test,testArg,26432,") const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:30829,Testability,test,testArg,30829,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:30915,Testability,test,testArg,30915,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:35584,Testability,test,test,35584,"th 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:35847,Testability,test,test,35847,"ooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList, RooLinkedList &processedNodes);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; virtual void constOptimizeTestStatistic (ConstOpCode opcode, bool doAlsoTrackingOpt=true);  Interface function signaling a request to perform constant term optimization. ;  ; bool isShapeDirty () const;  ; bool isValueDirty () const;  ; bool isValueDirtyAndClear () const;  ; bool isValueOrShapeDirtyAndClear () const;  ; void registerCache (RooAbsCache &cache);  Register RooAbsCache with this object. ;  ; void unRegisterCache (RooAbsCache &cache);  Unregister a RooAbsCache. Called from the RooAbsCache destructor. ;  ; Int_t numCaches () const;  Return number of registered caches. ;  ; RooAbsCache * getCache (Int_t index) const;  Return registered cache object by index. ;  ; OperMode operMode () const;  Query the operation mode of this node. ;  ; void setOperMode (OperMode mode, bool recurseADirty=true);  Set the operation mode of this node. ;  ; void s",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:46967,Testability,log,logging,46967,"ct on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbo",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47028,Testability,log,logEvalError,47028,"treamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47189,Testability,log,logging,47189,"treamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47249,Testability,log,logging,47249,"treamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47361,Testability,log,logged,47361,"c bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47524,Testability,log,logged,47524," ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47655,Testability,log,logging,47655,"Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:2719,Usability,intuit,intuitively,2719,"o be overridden by all derived classes. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Variant of getAnalyticalIntegral that is also passed the normalization set that should be applied to the integrand of which the integral is requested. ;  ; bool getFloor () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumFunc to more intuitively reflect the contents of the product operator construction. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  ; void setFloor (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~R",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:3204,Usability,simpl,simple,3204,"ed to the integrand of which the integral is requested. ;  ; bool getFloor () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumFunc to more intuitively reflect the contents of the product operator construction. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  ; void setFloor (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext &ctx) const override;  This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ;  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:28482,Usability,clear,clear,28482,"r *ind="""");  Hook function interface for object to insert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; RooWorkspace * workspace () const;  ; TIterator * cli",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:29165,Usability,clear,clear,29165,"bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setDataToken (std::size_t index);  Sets the token for retrieving results in the BatchMode. For internal use only. ;  ; void setLocalNoDirtyInhibit (bool flag) const;  ; void SetName (const char *name) override;  Set the name of the TNamed. ;  ; void SetNameTitle (const char *name, const char *title) override;  Set all the TNamed parameters (name and title). ;  ; void setProhibitServerRedirect (bool flag);  ; void setStringAttribute (const Text_t *key, const Text_t *value);  Associate string 'value' to this object under key 'key'. ;  ; void setTransientAttribute (const Text_t *name, bool value=true);  Set (default) or clear a named boolean attribute of this object. ;  ; void setWorkspace (RooWorkspace &ws);  ; const std::map< std::string, std::string > & stringAttributes () const;  ; const std::set< std::string > & transientAttributes () const;  ; RooWorkspace * workspace () const;  ; TIterator * clientIterator () const R__DEPRECATED(6;  Retrieve a client iterator. ;  ; TIterator Use clients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * valueClientIterator () const R__DEPRECATED(6;  ; TIterator Use valueClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * shapeClientIterator () const R__DEPRECATED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter ",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:46595,Usability,clear,clearEvalErrorLog,46595,"t char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last cle",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:47401,Usability,clear,clearing,47401,"c bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:59081,Usability,clear,clearShapeDirty,59081,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:59115,Usability,clear,clearValueAndShapeDirty,59115,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:59157,Usability,clear,clearValueDirty,59157,"eName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ;  ; bool inhibitDirty () const;  Delete watch flag. ;  ; virtual void ioStreamerPass2 ();  Method called by workspace container to finalize schema evolution issues that cannot be handled in a single ioStreamer pass. ;  ; virtual void operModeHook ();  ; virtual void optimizeDirtyHook (const RooArgSet *);  ; void printAttribList (std::ostream &os) const;  Transient boolean attributes (not copied in ctor) ;  ; void registerProxy (RooArgProxy &proxy);  Register an RooArgProxy in the proxy list. ;  ; void registerProxy (RooListProxy &proxy);  Register an RooListProxy in the proxy list. ;  ; void registerProxy (RooSetProxy &proxy);  Register an RooSetProxy in the proxy list. ;  ; void setProxyNormSet (const RooArgSet *nset);  Forw",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:68204,Usability,intuit,intuitively,68204,"n(). bool RooRealSumFunc::isBinnedDistribution ; (; const RooArgSet & ; ); const. overridevirtual . Tests if the distribution is binned. Unless overridden by derived classes, this always returns false. ; Reimplemented from RooAbsReal.; Definition at line 148 of file RooRealSumFunc.cxx. ◆ plotSamplingHint(). std::list< double > * RooRealSumFunc::plotSamplingHint ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ; Parameters. [in]obsObservable to retrieve sampling hint for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 154 of file RooRealSumFunc.cxx. ◆ printMetaArgs(). void RooRealSumFunc::printMetaArgs ; (; std::ostream & ; os); const. overridevirtual . Customized printing of arguments of a RooRealSumFunc to more intuitively reflect the contents of the product operator construction. ; Reimplemented from RooAbsArg.; Definition at line 168 of file RooRealSumFunc.cxx. ◆ setCacheAndTrackHints(). void RooRealSumFunc::setCacheAndTrackHints ; (; RooArgSet & ; trackNodes). overridevirtual . Reimplemented from RooAbsArg.; Definition at line 160 of file RooRealSumFunc.cxx. ◆ setFloor(). void RooRealSumFunc::setFloor ; (; bool ; flag). inline . Definition at line 53 of file RooRealSumFunc.h. ◆ setFloorGlobal(). static void RooRealSumFunc::setFloorGlobal ; (; bool ; flag). inlinestatic . Definition at line 55 of file RooRealSumFunc.h. ◆ Streamer(). void RooRealSumFunc::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooRealSumFunc::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file RooRealSumFunc.h. ◆ translate(). void RooRealSumFunc::translate ; (; RooFit::Detai",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumFunc.html:69374,Usability,simpl,simple,69374," 168 of file RooRealSumFunc.cxx. ◆ setCacheAndTrackHints(). void RooRealSumFunc::setCacheAndTrackHints ; (; RooArgSet & ; trackNodes). overridevirtual . Reimplemented from RooAbsArg.; Definition at line 160 of file RooRealSumFunc.cxx. ◆ setFloor(). void RooRealSumFunc::setFloor ; (; bool ; flag). inline . Definition at line 53 of file RooRealSumFunc.h. ◆ setFloorGlobal(). static void RooRealSumFunc::setFloorGlobal ; (; bool ; flag). inlinestatic . Definition at line 55 of file RooRealSumFunc.h. ◆ Streamer(). void RooRealSumFunc::Streamer ; (; TBuffer & ; R__b). overridevirtual . Stream an object of class TObject. ; Reimplemented from RooAbsReal. ◆ StreamerNVirtual(). void RooRealSumFunc::StreamerNVirtual ; (; TBuffer & ; ClassDef_StreamerNVirtual_b). inline . Definition at line 78 of file RooRealSumFunc.h. ◆ translate(). void RooRealSumFunc::translate ; (; RooFit::Detail::CodeSquashContext & ; ctx); const. overridevirtual . This function defines a translation for each RooAbsReal based object that can be used to express the class as simple C++ code. ; The function adds the code represented by each class as an std::string (that is later concatenated with code strings from translate calls) to form the C++ code that AD tools can understand. Any class that wants to support AD, has to implement this function.; Parameters. [in]ctxAn object to manage auxiliary information for code-squashing. Also takes the code string that this class outputs into the squashed code through the 'addToCodeBody' function. . Reimplemented from RooAbsArg.; Definition at line 117 of file RooRealSumFunc.cxx. Member Data Documentation. ◆ _coefList. RooListProxy RooRealSumFunc::_coefList. protected . List of coefficients. ; Definition at line 71 of file RooRealSumFunc.h. ◆ _doFloor. bool RooRealSumFunc::_doFloor = false. protected . Introduce floor at zero in pdf. ; Definition at line 73 of file RooRealSumFunc.h. ◆ _doFloorGlobal. bool RooRealSumFunc::_doFloorGlobal = false. staticprotected . Global f",MatchSource.WIKI,doc/v632/classRooRealSumFunc.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumFunc.html
https://root.cern/doc/v632/classRooRealSumPdf.html:12791,Availability,error,error,12791,"for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool removeConstraintsFromPdf=false) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet &, bool, bool=false) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  I",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:14392,Availability,error,errors,14392,"rmObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specificatio",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:15626,Availability,error,error,15626," const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherit",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:15686,Availability,error,error,15686," const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherit",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:28311,Availability,error,error,28311,"this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:47359,Availability,mask,mask,47359,"s);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old server. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables);  Activate cache mode optimization with given definition of observables. ;  ; virtual void optimizeCacheMode (const RooArgSet &observables, RooArgSet &optNodes, RooLinkedList &processedNodes);  Activate cache mode optimization with given definition of observables. ;  ; bool findConstantNodes (const RooArgSet &observables, RooArgSet &cacheList);  Find branch nodes with all-constant parameters, and add them to the list of nodes that can be cached with a dataset in a test statistic calculation. ;  ; bool findConstantNodes (const Ro",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:52898,Availability,error,error,52898,"ject. May be overridden for another default action. ;  ; ULong_t CheckedHash ();  Check and record whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:52987,Availability,error,error,52987,"ecord whether this class has a consistent Hash/RecursiveRemove setup (*) and then return the regular Hash value for this object. ;  ; virtual const char * ClassName () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:53142,Availability,error,error,53142,"Name () const;  Returns name of class to which the object belongs. ;  ; virtual void Delete (Option_t *option="""");  Delete this object. ;  ; virtual Int_t DistancetoPrimitive (Int_t px, Int_t py);  Computes distance from point (px,py) to the object. ;  ; virtual void Draw (Option_t *option="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:53439,Availability,error,error,53439,"ption="""");  Default Draw method for all objects. ;  ; virtual void DrawClass () const;  Draw class inheritance tree of the class to which this object belongs. ;  ; virtual TObject * DrawClone (Option_t *option="""") const;  Draw a clone of this object in the current selected pad with: gROOT->SetSelectedPad(c1). ;  ; virtual void Dump () const;  Dump contents of object on stdout. ;  ; virtual void Error (const char *method, const char *msgfmt,...) const;  Issue error message. ;  ; virtual void Execute (const char *method, const char *params, Int_t *error=nullptr);  Execute method on this object with the given parameter string, e.g. ;  ; virtual void Execute (TMethod *method, TObjArray *params, Int_t *error=nullptr);  Execute method on this object with parameters stored in the TObjArray. ;  ; virtual void ExecuteEvent (Int_t event, Int_t px, Int_t py);  Execute action corresponding to an event at (px,py). ;  ; virtual void Fatal (const char *method, const char *msgfmt,...) const;  Issue fatal error message. ;  ; virtual TObject * FindObject (const char *name) const;  Must be redefined in derived classes. ;  ; virtual TObject * FindObject (const TObject *obj) const;  Must be redefined in derived classes. ;  ; virtual Option_t * GetDrawOption () const;  Get option used by the graphics system to draw this object. ;  ; virtual const char * GetIconName () const;  Returns mime type name of object. ;  ; virtual char * GetObjectInfo (Int_t px, Int_t py) const;  Returns string containing info about the object at position (px,py). ;  ; virtual Option_t * GetOption () const;  ; virtual UInt_t GetUniqueID () const;  Return the unique object id. ;  ; virtual Bool_t HandleTimer (TTimer *timer);  Execute action in response of a timer timing out. ;  ; Bool_t HasInconsistentHash () const;  Return true is the type of this object is known to have an inconsistent setup for Hash and RecursiveRemove (i.e. ;  ; virtual void Info (const char *method, const char *msgfmt,...) const;  Issue info ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:57523,Availability,error,error,57523,"n object drawn in a pad to the top of the display list. ;  ; virtual Int_t Read (const char *name);  Read contents of object with specified name from the current directory. ;  ; virtual void RecursiveRemove (TObject *obj);  Recursively remove this object from a list. ;  ; void ResetBit (UInt_t f);  ; virtual void SaveAs (const char *filename="""", Option_t *option="""") const;  Save this object in the file specified by filename. ;  ; virtual void SavePrimitive (std::ostream &out, Option_t *option="""");  Save a primitive as a C++ statement(s) on output stream ""out"". ;  ; void SetBit (UInt_t f);  ; void SetBit (UInt_t f, Bool_t set);  Set or unset the user status bits as specified in f. ;  ; virtual void SetDrawOption (Option_t *option="""");  Set drawing option for object. ;  ; virtual void SetUniqueID (UInt_t uid);  Set the unique object id. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; virtual void SysError (const char *method, const char *msgfmt,...) const;  Issue system error message. ;  ; R__ALWAYS_INLINE Bool_t TestBit (UInt_t f) const;  ; Int_t TestBits (UInt_t f) const;  ; virtual void UseCurrentStyle ();  Set current style settings in this object This function is called when either TCanvas::UseCurrentStyle or TROOT::ForceStyle have been invoked. ;  ; virtual void Warning (const char *method, const char *msgfmt,...) const;  Issue warning message. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0);  Write this object to the current directory. ;  ; virtual Int_t Write (const char *name=nullptr, Int_t option=0, Int_t bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption s",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:59855,Availability,error,error,59855,"n'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged ev",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60168,Availability,error,error,60168,"ited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbo",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60390,Availability,error,error,60390,"torConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60450,Availability,error,error,60450,"torConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Versi",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60586,Availability,error,errors,60586,"t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version (",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60749,Availability,error,error,60749," ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get st",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60856,Availability,error,error,60856,"Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions inherited from RooAbsArg; static void setDirtyInhibit (bool flag);  Control global dirty inhibit mode. ;  ; static void verboseDirty (bool flag);  Activate verbose messaging related to dirty flag propagation. ;  ;  Static Public Member Functions inherited from TNamed; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ;  Static Public Member Functions inherited from TObject; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static Longptr_t GetDtorOnly ();  Return destructor only flag. ;  ; static Bool_t GetObjectStat ();  Get status of object stat flag. ;  ; static void SetDtorOnly (void *obj);  Set destructor only flag. ;  ; static void SetObjectStat (Bo",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:62846,Availability,error,errors,62846,;  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; bool _extended;  Allow use as extended p.d.f. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ! The integration cache manager ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plot,MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:75964,Availability,error,error,75964,"bool method1) const;  Plot function or PDF on frame with support for visualization of the uncertainty encoded in the given fit result fr. ;  ; bool plotSanityChecks (RooPlot *frame) const;  Utility function for plotOn(), perform general sanity check on frame to ensure safe plotting operations. ;  ; bool redirectServersHook (const RooAbsCollection &newServerList, bool mustReplaceAll, bool nameChange, bool isRecursiveStep) override;  Function that is called at the end of redirectServers(). ;  ; virtual void selectNormalization (const RooArgSet *depSet=nullptr, bool force=false);  Interface function to force use of a given set of observables to interpret function value. ;  ; virtual void selectNormalizationRange (const char *rangeName=nullptr, bool force=false);  Interface function to force use of a given normalization range to interpret function value. ;  ; void setTreeBranchStatus (TTree &t, bool active) override;  (De)Activate associated tree branch ;  ; void syncCache (const RooArgSet *set=nullptr) override;  ; double traceEval (const RooArgSet *set) const;  Calculate current value of object, with error tracing wrapper. ;  ;  Protected Member Functions inherited from RooAbsArg; void attachToStore (RooAbsDataStore &store);  Attach this argument to the data store such that it reads data from there. ;  ; TString cleanBranchName () const;  Construct a mangled name from the actual name that is free of any math symbols that might be interpreted by TTree. ;  ; void clearShapeDirty () const;  ; void clearValueAndShapeDirty () const;  ; void clearValueDirty () const;  ; virtual void getObservablesHook (const RooArgSet *, RooArgSet *) const;  ; virtual void getParametersHook (const RooArgSet *, RooArgSet *, bool) const;  ; void graphVizAddConnections (std::set< std::pair< RooAbsArg *, RooAbsArg * > > &);  Utility function that inserts all point-to-point client-server connections between any two RooAbsArgs in the expression tree headed by this object in the linkSet argument. ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:2916,Deployability,integrat,integrations,2916,"e above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definition at line 24 of file RooRealSumPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooRealSumPdf ();  Default constructor coverity[UNINIT_CTOR]. ;  ;  RooRealSumPdf (const char *name, const char *title);  Constructor with name and title. ;  ;  RooRealSumPdf (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList, bool extended=false);  Constructor for a PDF from a list of functions and coefficients. ;  ;  RooRealSumPdf (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ;  ;  RooRealSumPdf (const RooRealSumPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implement analytical integrations by deferring integration of component functions to integrators of components. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Check if FUNC is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &) const override;",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:2942,Deployability,integrat,integration,2942,"e above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definition at line 24 of file RooRealSumPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooRealSumPdf ();  Default constructor coverity[UNINIT_CTOR]. ;  ;  RooRealSumPdf (const char *name, const char *title);  Constructor with name and title. ;  ;  RooRealSumPdf (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList, bool extended=false);  Constructor for a PDF from a list of functions and coefficients. ;  ;  RooRealSumPdf (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ;  ;  RooRealSumPdf (const RooRealSumPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implement analytical integrations by deferring integration of component functions to integrators of components. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Check if FUNC is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &) const override;",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:2980,Deployability,integrat,integrators,2980,"e above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definition at line 24 of file RooRealSumPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooRealSumPdf ();  Default constructor coverity[UNINIT_CTOR]. ;  ;  RooRealSumPdf (const char *name, const char *title);  Constructor with name and title. ;  ;  RooRealSumPdf (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList, bool extended=false);  Constructor for a PDF from a list of functions and coefficients. ;  ;  RooRealSumPdf (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ;  ;  RooRealSumPdf (const RooRealSumPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implement analytical integrations by deferring integration of component functions to integrators of components. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Check if FUNC is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &) const override;",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:7585,Deployability,integrat,integrated,7585,"Extended () const;  If true, PDF can provide extended likelihood term. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:12533,Deployability,configurat,configuration,12533,"n of an event using the algorithm corresponding to the specified code. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool removeConstraintsFromPdf=false) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet &, bool, bool=false) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over obser",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:13622,Deployability,integrat,integrating,13622,"bilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:15148,Deployability,configurat,configuration,15148,"normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverr",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:15809,Deployability,configurat,configuration,15809,"onst. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *u",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:15929,Deployability,configurat,configuration,15929,"* prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *u",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:15975,Deployability,configurat,configuration,15975,"* prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *u",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:16356,Deployability,integrat,integrator,16356,"nt="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooA",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:16367,Deployability,configurat,configuration,16367,"nt="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooA",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:16496,Deployability,integrat,integrator,16496,"e;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:16507,Deployability,configurat,configuration,16507,"e;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:21839,Deployability,configurat,configuration,21839,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:21869,Deployability,integrat,integration,21869,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:22800,Deployability,configurat,configuration,22800,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:22830,Deployability,integrat,integration,22830,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:26944,Deployability,integrat,integration,26944,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:26956,Deployability,configurat,configuration,26956,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:27071,Deployability,integrat,integration,27071,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const overr",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:27083,Deployability,configurat,configuration,27083,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const overr",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30335,Deployability,integrat,integration,30335,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30347,Deployability,configurat,configuration,30347,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30468,Deployability,integrat,integrator,30468,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30479,Deployability,configurat,configuration,30479,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30512,Deployability,integrat,integration,30512,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30524,Deployability,configurat,configuration,30524,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30934,Deployability,integrat,integrator,30934,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30945,Deployability,configurat,configuration,30945,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:31075,Deployability,integrat,integrator,31075,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:31086,Deployability,configurat,configuration,31086,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:43922,Deployability,update,updates,43922,"eClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const RooAbsArg &arg) const;  Check if this is serving values to arg. ;  ; bool isValueServer (const char *name) const;  Check if this is serving values to an object with name name. ;  ; bool isShapeServer (const RooAbsArg &arg) const;  Check if this is serving shape to arg. ;  ; bool isShapeServer (const char *name) const;  Check if this is serving shape to an object with name name. ;  ; void leafNodeServerList (RooAbsColl",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:45973,Deployability,integrat,integrated,45973," *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all leaf nodes of the arg tree, starting with ourself as top node. ;  ; void branchNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all branch nodes of the arg tree starting with ourself as top node. ;  ; void treeNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool doBranch=true, bool doLeaf=true, bool valueOnly=false, bool recurseNonDerived=false) const;  Fill supplied list with nodes of the arg tree, following all server links, starting with ourself as top node. ;  ; virtual bool isFundamental () const;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:59385,Deployability,configurat,configuration,59385,"bufsize=0) const;  Write this object to the current directory. ;  ;  Public Member Functions inherited from RooPrintable;  RooPrintable ();  ; virtual ~RooPrintable ();  ; virtual StyleOption defaultPrintStyle (Option_t *opt) const;  ; virtual void printExtras (std::ostream &os) const;  Interface to print extras of object. ;  ; virtual void printStream (std::ostream &os, Int_t contents, StyleOption style, TString indent="""") const;  Print description of object on ostream, printing contents set by contents integer, which is interpreted as an OR of 'enum ContentsOptions' values and in the style given by 'enum StyleOption'. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  . Static Public Member Functions; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:59998,Deployability,integrat,integration,59998,"  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:60010,Deployability,configurat,configuration,60010,"  ; static const char * DeclFileName ();  ; static bool getFloorGlobal ();  ; static void setFloorGlobal (bool flag);  ;  Static Public Member Functions inherited from RooAbsPdf; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static RooNumGenConfig * defaultGeneratorConfig ();  Returns the default numeric MC generator configuration for all RooAbsReals. ;  ; static int verboseEval ();  Return global level of verbosity for p.d.f. evaluations. ;  ; static void verboseEval (Int_t stat);  Change global level of verbosity for p.d.f. evaluations. ;  ;  Static Public Member Functions inherited from RooAbsReal; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static void clearEvalErrorLog ();  Clear the stack of evaluation error messages. ;  ; static const char * DeclFileName ();  ; static RooNumIntConfig * defaultIntegratorConfig ();  Returns the default numeric integration configuration for all RooAbsReals. ;  ; static EvalErrorIter evalErrorIter ();  ; static ErrorLoggingMode evalErrorLoggingMode ();  Return current evaluation error logging mode. ;  ; static bool hideOffset ();  ; static void logEvalError (const RooAbsReal *originator, const char *origName, const char *message, const char *serverValueString=nullptr);  Interface to insert remote error logging messages received by RooRealMPFE into current error logging stream. ;  ; static Int_t numEvalErrorItems ();  ; static Int_t numEvalErrors ();  Return the number of logged evaluation errors since the last clearing. ;  ; static void printEvalErrors (std::ostream &os=std::cout, Int_t maxPerNode=10000000);  Print all outstanding logged evaluation error on the given ostream. ;  ; static void setEvalErrorLoggingMode (ErrorLoggingMode m);  Set evaluation error logging mode. ;  ; static void setHideOffset (bool flag);  ;  Static Public Member Functions in",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:62733,Deployability,integrat,integration,62733,;  Set destructor only flag. ;  ; static void SetObjectStat (Bool_t stat);  Turn on/off tracking of objects in the TObjectTable. ;  ;  Static Public Member Functions inherited from RooPrintable; static TClass * Class ();  ; static const char * Class_Name ();  ; static constexpr Version_t Class_Version ();  ; static const char * DeclFileName ();  ; static std::ostream & defaultPrintStream (std::ostream *os=nullptr);  Return a reference to the current default stream to use in Print(). ;  ; static void nameFieldLength (Int_t newLen);  Set length of field reserved from printing name of RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; bool _extended;  Allow use as extended p.d.f. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ! The integration cache manager ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plot,MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:63339,Deployability,configurat,configuration,63339, RooAbsArgs in multi-line collection printing to given amount. ;  . Protected Attributes; RooListProxy _coefList;  List of coefficients. ;  ; bool _doFloor = false;  Introduce floor at zero in pdf. ;  ; bool _extended;  Allow use as extended p.d.f. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ! The integration cache manager ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransi,MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:63542,Deployability,integrat,integration,63542,or = false;  Introduce floor at zero in pdf. ;  ; bool _extended;  Allow use as extended p.d.f. ;  ; RooListProxy _funcList;  List of component FUNCs. ;  ; bool _haveWarned {false};  ! ;  ; RooObjCacheManager _normIntMgr;  ! The integration cache manager ;  ;  Protected Attributes inherited from RooAbsPdf; Int_t _errorCount = 0;  Number of errors remaining to print. ;  ; Int_t _negCount = 0;  Number of negative probabilities remaining to print. ;  ; RooAbsReal * _norm = nullptr;  ; RooObjCacheManager _normMgr;  ; TString _normRange;  Normalization range. ;  ; RooArgSet const * _normSet = nullptr;  Normalization integral (owned by _normMgr) ;  ; double _rawValue = 0;  ; bool _selectComp = false;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; std::unique_ptr< RooNumGenConfig > _specGeneratorConfig;  ! MC generator configuration specific for this object ;  ; Int_t _traceCount = 0;  Number of traces remaining to print. ;  ;  Protected Attributes inherited from RooAbsReal; bool _forceNumInt = false;  Force numerical integration if flag set. ;  ; TString _label;  Plot label for objects value. ;  ; RooFit::UniqueId< RooArgSet >::Value_t _lastNormSetId = RooFit::UniqueId<RooArgSet>::nullval;  Component selection flag for RooAbsPdf::plotCompOn. ;  ; Int_t _plotBins = 100;  Number of plot bins. ;  ; double _plotMax = 0.0;  Maximum of plot range. ;  ; double _plotMin = 0.0;  Minimum of plot range. ;  ; bool _selectComp = true;  A buffer for reading values from trees. ;  ; std::unique_ptr< RooNumIntConfig > _specIntegratorConfig;  ; std::unique_ptr< TreeReadBuffer > _treeReadBuffer;  ; TString _unit;  Unit for objects value. ;  ; double _value = 0.0;  Cache for current value of object. ;  ;  Protected Attributes inherited from RooAbsArg; std::set< std::string > _boolAttrib;  ; std::set< std::string > _boolAttribTransient;  ; std::vector< RooAbsCache * > _cacheList;  ; RefCountList_t _clientList;  ; RefCountList_t _clientListShape;  ; RefCountList_t _clientListValue;  ,MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:72845,Deployability,integrat,integrated,72845,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:72903,Deployability,integrat,integration,72903,"ttachToVStore (RooVectorDataStore &vstore) override;  ; void copyCache (const RooAbsArg *source, bool valueOnly=false, bool setValDirty=true) override;  Copy the cached value of another RooAbsArg to our cache. ;  ; RooFit::OwningPtr< RooAbsReal > createIntObj (const RooArgSet &iset, const RooArgSet *nset, const RooNumIntConfig *cfg, const char *rangeName) const;  Internal utility function for createIntegral() that creates the actual integral object. ;  ; void fillTreeBranch (TTree &t) override;  Fill the tree branch that associated with this object with its current value. ;  ; void findInnerMostIntegration (const RooArgSet &allObs, RooArgSet &innerObs, const char *rangeName) const;  Utility function for createIntObj() that aids in the construct of recursive integrals over functions with multiple observables with parameterized ranges. ;  ; TString integralNameSuffix (const RooArgSet &iset, const RooArgSet *nset=nullptr, const char *rangeName=nullptr, bool omitEmpty=false) const;  Construct string with unique suffix name to give to integral object that encodes integrated observables, normalization observables and the integration range name. ;  ; bool isValid () const override;  Check if current value is valid. ;  ; virtual bool isValidReal (double, bool printError=false) const;  Interface function to check if given value is a valid value for this object. Returns true unless overridden. ;  ; void makeProjectionSet (const RooAbsArg *plotVar, const RooArgSet *allVars, RooArgSet &projectedVars, bool silent) const;  Utility function for plotOn() that constructs the set of observables to project when plotting ourselves as function of 'plotVar'. ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matchArgs (const RooArgSet &allDeps, RooArgSet &numDeps, const RooArgProxy &a, const RooArgProxy &b) const;  Utility function for use in getAnalyticalIntegral(). ;  ; bool matc",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:81497,Deployability,integrat,integrations,81497,"nts) . Definition at line 129 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [4/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; func1, . RooAbsReal & ; func2, . RooAbsReal & ; coef1 . ). Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ; The input coefficients and functions are allowed to be negative but the resulting sum is not, which is enforced at runtime. ; Definition at line 91 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [5/5]. RooRealSumPdf::RooRealSumPdf ; (; const RooRealSumPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 186 of file RooRealSumPdf.cxx. Member Function Documentation. ◆ analyticalIntegralWN() [1/2]. double RooRealSumPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implement analytical integrations by deferring integration of component functions to integrators of components. ; Reimplemented from RooAbsPdf.; Definition at line 444 of file RooRealSumPdf.cxx. ◆ analyticalIntegralWN() [2/2]. double RooRealSumPdf::analyticalIntegralWN ; (; RooAbsReal const & ; caller, . RooObjCacheManager & ; normIntMgr, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName, . bool ; hasWarnedBefore . ). staticprivate . Definition at line 449 of file RooRealSumPdf.cxx. ◆ binBoundaries() [1/2]. std::list< double > * RooRealSumPdf::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 561 of file RooRealSumPdf.cxx. ◆",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:81523,Deployability,integrat,integration,81523,"nts) . Definition at line 129 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [4/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; func1, . RooAbsReal & ; func2, . RooAbsReal & ; coef1 . ). Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ; The input coefficients and functions are allowed to be negative but the resulting sum is not, which is enforced at runtime. ; Definition at line 91 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [5/5]. RooRealSumPdf::RooRealSumPdf ; (; const RooRealSumPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 186 of file RooRealSumPdf.cxx. Member Function Documentation. ◆ analyticalIntegralWN() [1/2]. double RooRealSumPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implement analytical integrations by deferring integration of component functions to integrators of components. ; Reimplemented from RooAbsPdf.; Definition at line 444 of file RooRealSumPdf.cxx. ◆ analyticalIntegralWN() [2/2]. double RooRealSumPdf::analyticalIntegralWN ; (; RooAbsReal const & ; caller, . RooObjCacheManager & ; normIntMgr, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName, . bool ; hasWarnedBefore . ). staticprivate . Definition at line 449 of file RooRealSumPdf.cxx. ◆ binBoundaries() [1/2]. std::list< double > * RooRealSumPdf::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 561 of file RooRealSumPdf.cxx. ◆",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:81561,Deployability,integrat,integrators,81561,"nts) . Definition at line 129 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [4/5]. RooRealSumPdf::RooRealSumPdf ; (; const char * ; name, . const char * ; title, . RooAbsReal & ; func1, . RooAbsReal & ; func2, . RooAbsReal & ; coef1 . ). Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ; The input coefficients and functions are allowed to be negative but the resulting sum is not, which is enforced at runtime. ; Definition at line 91 of file RooRealSumPdf.cxx. ◆ RooRealSumPdf() [5/5]. RooRealSumPdf::RooRealSumPdf ; (; const RooRealSumPdf & ; other, . const char * ; name = nullptr . ). Copy constructor. ; Definition at line 186 of file RooRealSumPdf.cxx. Member Function Documentation. ◆ analyticalIntegralWN() [1/2]. double RooRealSumPdf::analyticalIntegralWN ; (; Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName = nullptr . ); const. overridevirtual . Implement analytical integrations by deferring integration of component functions to integrators of components. ; Reimplemented from RooAbsPdf.; Definition at line 444 of file RooRealSumPdf.cxx. ◆ analyticalIntegralWN() [2/2]. double RooRealSumPdf::analyticalIntegralWN ; (; RooAbsReal const & ; caller, . RooObjCacheManager & ; normIntMgr, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . Int_t ; code, . const RooArgSet * ; normSet, . const char * ; rangeName, . bool ; hasWarnedBefore . ). staticprivate . Definition at line 449 of file RooRealSumPdf.cxx. ◆ binBoundaries() [1/2]. std::list< double > * RooRealSumPdf::binBoundaries ; (; RooAbsRealLValue & ; obs, . double ; xlo, . double ; xhi . ); const. overridevirtual . Retrieve bin boundaries if this distribution is binned in obs. ; Parameters. [in]obsObservable to retrieve boundaries for. ; [in]xloBeginning of range. ; [in]xhiEnd of range. . ReturnsThe caller owns the returned std::list. ; Reimplemented from RooAbsReal.; Definition at line 561 of file RooRealSumPdf.cxx. ◆",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:94306,Deployability,integrat,integration,94306,"f.cxx. ◆ translateImpl(). std::string RooRealSumPdf::translateImpl ; (; RooFit::Detail::CodeSquashContext & ; ctx, . RooAbsArg const * ; klass, . RooArgList const & ; funcList, . RooArgList const & ; coefList, . bool ; normalize = false . ). staticprivate . Definition at line 302 of file RooRealSumPdf.cxx. Friends And Related Symbol Documentation. ◆ RooAddition. friend class RooAddition. friend . Definition at line 99 of file RooRealSumPdf.h. ◆ RooAddPdf. friend class RooAddPdf. friend . Definition at line 98 of file RooRealSumPdf.h. ◆ RooRealSumFunc. friend class RooRealSumFunc. friend . Definition at line 100 of file RooRealSumPdf.h. Member Data Documentation. ◆ _coefList. RooListProxy RooRealSumPdf::_coefList. protected . List of coefficients. ; Definition at line 89 of file RooRealSumPdf.h. ◆ _doFloor. bool RooRealSumPdf::_doFloor = false. protected . Introduce floor at zero in pdf. ; Definition at line 92 of file RooRealSumPdf.h. ◆ _doFloorGlobal. bool RooRealSumPdf::_doFloorGlobal = false. staticprotected . Global flag for introducing floor at zero in pdf. ; Definition at line 94 of file RooRealSumPdf.h. ◆ _extended. bool RooRealSumPdf::_extended. protected . Allow use as extended p.d.f. ; Definition at line 90 of file RooRealSumPdf.h. ◆ _funcList. RooListProxy RooRealSumPdf::_funcList. protected . List of component FUNCs. ; Definition at line 88 of file RooRealSumPdf.h. ◆ _haveWarned. bool RooRealSumPdf::_haveWarned {false}. mutableprotected . ! ; Definition at line 93 of file RooRealSumPdf.h. ◆ _normIntMgr. RooObjCacheManager RooRealSumPdf::_normIntMgr. mutableprotected . ! The integration cache manager ; Definition at line 85 of file RooRealSumPdf.h. Libraries for RooRealSumPdf:. [legend]; The documentation for this class was generated from the following files:; roofit/roofitcore/inc/RooRealSumPdf.h; roofit/roofitcore/src/RooRealSumPdf.cxx. RooRealSumPdf. ROOT v6-32 - Reference Guide Generated on Fri Nov 1 2024 15:10:42 (GVA Time) using Doxygen 1.9.8   ; . ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:15173,Energy Efficiency,efficient,efficient,15173,"normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverr",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:17668,Energy Efficiency,adapt,adaptor,17668,"ctions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:894,Integrability,depend,dependents,894,". ROOT: RooRealSumPdf Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; RooRealSumPdf Class ReferenceRooFit » RooFit Core. ; Implements a PDF constructed from a sum of functions: . \[; \mathrm{PDF}(x) = \frac{ \sum_{i=1}^{n-1} \mathrm{coef}_i * \mathrm{func}_i(x) + \left[ 1 - \sum_{i=1}^{n-1} \mathrm{coef}_i \right] * \mathrm{func}_n(x) }; {\sum_{i=1}^{n-1} \mathrm{coef}_i * \int \mathrm{func}_i(x)dx + \left[ 1 - \sum_{i=1}^{n-1} \mathrm{coef}_i \right] * \int \mathrm{func}_n(x) dx }; \]. where \(\mathrm{coef}_i\) and \(\mathrm{func}_i\) are RooAbsReal objects, and \( x \) is the collection of dependents. In the present version \(\mathrm{coef}_i\) may not depend on \( x \), but this limitation could be removed should the need arise.; If the number of coefficients is one less than the number of functions, the PDF is assumed to be normalised. Due to this additional constraint, \(\mathrm{coef}_n\) is computed from the other coefficients. Extending the PDF; If an \( n^\mathrm{th} \) coefficient is provided, the PDF can be used as an extended PDF, i.e. the total number of events will be measured in addition to the fractions of the various functions. This requires setting the last argument of the constructor to true. NoteFor the RooAddPdf, the extension happens automatically. Difference to RooAddPdf / RooRealSumFunc. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definitio",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:957,Integrability,depend,depend,957,". ROOT: RooRealSumPdf Class Reference. ; ROOT  ; . v6-32. Reference Guide ; .  . Loading...; Searching...; No Matches. List of all members |; Classes |; Public Member Functions |; Static Public Member Functions |; Protected Attributes |; Static Protected Attributes |; Private Member Functions |; Static Private Member Functions |; Friends |; List of all members ; RooRealSumPdf Class ReferenceRooFit » RooFit Core. ; Implements a PDF constructed from a sum of functions: . \[; \mathrm{PDF}(x) = \frac{ \sum_{i=1}^{n-1} \mathrm{coef}_i * \mathrm{func}_i(x) + \left[ 1 - \sum_{i=1}^{n-1} \mathrm{coef}_i \right] * \mathrm{func}_n(x) }; {\sum_{i=1}^{n-1} \mathrm{coef}_i * \int \mathrm{func}_i(x)dx + \left[ 1 - \sum_{i=1}^{n-1} \mathrm{coef}_i \right] * \int \mathrm{func}_n(x) dx }; \]. where \(\mathrm{coef}_i\) and \(\mathrm{func}_i\) are RooAbsReal objects, and \( x \) is the collection of dependents. In the present version \(\mathrm{coef}_i\) may not depend on \( x \), but this limitation could be removed should the need arise.; If the number of coefficients is one less than the number of functions, the PDF is assumed to be normalised. Due to this additional constraint, \(\mathrm{coef}_n\) is computed from the other coefficients. Extending the PDF; If an \( n^\mathrm{th} \) coefficient is provided, the PDF can be used as an extended PDF, i.e. the total number of events will be measured in addition to the fractions of the various functions. This requires setting the last argument of the constructor to true. NoteFor the RooAddPdf, the extension happens automatically. Difference to RooAddPdf / RooRealSumFunc. RooAddPdf is a PDF of PDFs, i.e. its components need to be normalised and non-negative.; RooRealSumPdf is a PDF of functions, i.e., its components can be negative, but their sum cannot be. The normalisation is computed automatically, unless the PDF is extended (see above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definitio",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:2916,Integrability,integrat,integrations,2916,"e above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definition at line 24 of file RooRealSumPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooRealSumPdf ();  Default constructor coverity[UNINIT_CTOR]. ;  ;  RooRealSumPdf (const char *name, const char *title);  Constructor with name and title. ;  ;  RooRealSumPdf (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList, bool extended=false);  Constructor for a PDF from a list of functions and coefficients. ;  ;  RooRealSumPdf (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ;  ;  RooRealSumPdf (const RooRealSumPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implement analytical integrations by deferring integration of component functions to integrators of components. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Check if FUNC is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &) const override;",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:2942,Integrability,integrat,integration,2942,"e above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definition at line 24 of file RooRealSumPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooRealSumPdf ();  Default constructor coverity[UNINIT_CTOR]. ;  ;  RooRealSumPdf (const char *name, const char *title);  Constructor with name and title. ;  ;  RooRealSumPdf (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList, bool extended=false);  Constructor for a PDF from a list of functions and coefficients. ;  ;  RooRealSumPdf (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ;  ;  RooRealSumPdf (const RooRealSumPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implement analytical integrations by deferring integration of component functions to integrators of components. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Check if FUNC is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &) const override;",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:2980,Integrability,integrat,integrators,2980,"e above).; RooRealSumFunc is a sum of functions. It is neither normalised, nor need it be positive. . Definition at line 24 of file RooRealSumPdf.h. Classes; class  CacheElem;  . Public Member Functions;  RooRealSumPdf ();  Default constructor coverity[UNINIT_CTOR]. ;  ;  RooRealSumPdf (const char *name, const char *title);  Constructor with name and title. ;  ;  RooRealSumPdf (const char *name, const char *title, const RooArgList &funcList, const RooArgList &coefList, bool extended=false);  Constructor for a PDF from a list of functions and coefficients. ;  ;  RooRealSumPdf (const char *name, const char *title, RooAbsReal &func1, RooAbsReal &func2, RooAbsReal &coef1);  Construct p.d.f consisting of \( \mathrm{coef}_1 * \mathrm{func}_1 + (1-\mathrm{coef}_1) * \mathrm{func}_2 \). ;  ;  RooRealSumPdf (const RooRealSumPdf &other, const char *name=nullptr);  Copy constructor. ;  ; double analyticalIntegralWN (Int_t code, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Implement analytical integrations by deferring integration of component functions to integrators of components. ;  ; std::list< double > * binBoundaries (RooAbsRealLValue &, double, double) const override;  Retrieve bin boundaries if this distribution is binned in obs. ;  ; CacheMode canNodeBeCached () const override;  ; bool checkObservables (const RooArgSet *nset) const override;  Check if FUNC is valid for given normalization set. ;  ; TObject * clone (const char *newname) const override;  ; const RooArgList & coefList () const;  ; std::unique_ptr< RooAbsArg > compileForNormSet (RooArgSet const &normSet, RooFit::Detail::CompileContext &ctx) const override;  ; std::unique_ptr< RooAbsReal > createExpectedEventsFunc (const RooArgSet *nset) const override;  Returns an object that represents the expected number of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &) const override;",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:4782,Integrability,depend,depend,4782,"er of events for a given normalization set, similar to how createIntegral() returns an object that returns the integral. ;  ; void doEval (RooFit::EvalContext &) const override;  Base function for computing multiple values of a RooAbsReal. ;  ; double evaluate () const override;  Calculate the current value. ;  ; double expectedEvents (const RooArgSet *nset) const override;  Return expected number of events for extended likelihood calculation, which is the sum of all coefficients. ;  ; ExtendMode extendMode () const override;  Returns ability of PDF to provide extended likelihood terms. ;  ; bool forceAnalyticalInt (const RooAbsArg &arg) const override;  ; const RooArgList & funcList () const;  ; Int_t getAnalyticalIntegralWN (RooArgSet &allVars, RooArgSet &numVars, const RooArgSet *normSet, const char *rangeName=nullptr) const override;  Advertise that all integrals can be handled internally. ;  ; bool getFloor () const;  ; TClass * IsA () const override;  ; bool isBinnedDistribution (const RooArgSet &obs) const override;  Check if all components that depend on obs are binned. ;  ; std::list< double > * plotSamplingHint (RooAbsRealLValue &, double, double) const override;  Interface for returning an optional hint for initial sampling points when constructing a curve projected on observable obs. ;  ; void printMetaArgs (std::ostream &os) const override;  Customized printing of arguments of a RooRealSumPdf to more intuitively reflect the contents of the product operator construction. ;  ; bool selfNormalized () const override;  Shows if a PDF is self-normalized, which means that no attempt is made to add a normalization term. ;  ; void setCacheAndTrackHints (RooArgSet &) override;  Label OK'ed components of a RooRealSumPdf with cache-and-track. ;  ; void setFloor (bool flag);  ; void Streamer (TBuffer &) override;  Stream an object of class TObject. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void translate (RooFit::Detail::CodeSquashContext",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:7585,Integrability,integrat,integrated,7585,"Extended () const;  If true, PDF can provide extended likelihood term. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooArgSet &nset=RooArgSet());  Create a cumulative distribution function of this p.d.f in terms of the observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createCdf (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; template<typename... CmdArgs_t> ; RooFit::OwningPtr< RooAbsReal > createNLL (RooAbsData &data, CmdArgs_t const &... cmdArgs);  Construct representation of -log(L) of PDF with given dataset. ;  ; virtual RooAbsPdf * createProjection (const RooArgSet &iset);  Return a p.d.f that represent a projection of this p.d.f integrated over given observables. ;  ; RooFit::OwningPtr< RooAbsReal > createScanCdf (const RooArgSet &iset, const RooArgSet &nset, Int_t numScanBins, Int_t intOrder);  ; double expectedEvents (const RooArgSet &nset) const;  Return expected number of events to be used in calculation of extended likelihood. ;  ; double extendedTerm (double sumEntries, double expected, double sumEntriesW2=0.0, bool doOffset=false) const;  ; double extendedTerm (double sumEntries, RooArgSet const *nset, double sumEntriesW2=0.0, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; double extendedTerm (RooAbsData const &data, bool weightSquared, bool doOffset=false) const;  Return the extended likelihood term ( \( N_\mathrm{expect} - N_\mathrm{observed} \cdot \log(N_\mathrm{expect} \)) of this PDF for the given number of observed events. ;  ; template<typename... CmdArgs_t> ; ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:11701,Integrability,interface,interface,11701,"  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, bool expectedData=false, bool extended=false) const;  Generate a new dataset containing the specified variables with events sampled from our distribution. ;  ; virtual RooFit::OwningPtr< RooDataHist > generateBinned (const RooArgSet &whatVars, double nEvents, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}) const;  As RooAbsPdf::generateBinned(const RooArgSet&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&, const RooCmdArg&,const RooCmdArg&) const. ;  ; virtual void generateEvent (Int_t code);  Interface for generation of an event using the algorithm corresponding to the specified code. ;  ; virtual RooFit::OwningPtr< RooDataSet > generateSimGlobal (const RooArgSet &whatVars, Int_t nEvents);  Special generator interface for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool removeConstraintsFromPdf=false) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet &, bool, bool=false) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual do",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:12797,Integrability,message,message,12797,"for generation of 'global observables' – for RooStats tools. ;  ; RooArgSet * getAllConstraints (const RooArgSet &observables, RooArgSet &constrainedParams, bool stripDisconnected=true, bool removeConstraintsFromPdf=false) const;  This helper function finds and collects all constraints terms of all component p.d.f.s and returns a RooArgSet with all those terms. ;  ; virtual RooArgSet * getConstraints (const RooArgSet &, RooArgSet &, bool, bool=false) const;  ; virtual Int_t getGenerator (const RooArgSet &directVars, RooArgSet &generateVars, bool staticInitOK=true) const;  Load generatedVars with the subset of directVars that we can generate events for, and return a code that specifies the generator algorithm we will use. ;  ; const RooNumGenConfig * getGeneratorConfig () const;  Return the numeric MC generator configuration used for this object. ;  ; void getLogProbabilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  I",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:13622,Integrability,integrat,integrating,13622,"bilities (std::span< const double > pdfValues, double *output) const;  ; virtual double getLogVal (const RooArgSet *set=nullptr) const;  Return the log of the current value with given normalization An error message is printed if the argument of the log is negative. ;  ; double getNorm (const RooArgSet &nset) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; virtual double getNorm (const RooArgSet *set=nullptr) const;  Get normalisation term needed to normalise the raw values returned by getVal(). ;  ; const RooAbsReal * getNormIntegral (const RooArgSet &nset) const;  ; virtual const RooAbsReal * getNormObj (const RooArgSet *set, const RooArgSet *iset, const TNamed *rangeName=nullptr) const;  Return pointer to RooAbsReal object that implements calculation of integral over observables iset in range rangeName, optionally taking the integrand normalized over observables nset. ;  ; double getValV (const RooArgSet *set=nullptr) const override;  Return current value, normalized by integrating over the observables in nset. ;  ; virtual void initGenerator (Int_t code);  Interface for one-time initialization to setup the generator for the specified code. ;  ; virtual bool isDirectGenSafe (const RooAbsArg &arg) const;  Check if given observable can be safely generated using the pdfs internal generator mechanism (if that existsP). ;  ; bool mustBeExtended () const;  If true PDF must provide extended likelihood term. ;  ; const char * normRange () const;  ; virtual RooPlot * paramOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Add a box with parameter values (and errors) to the specified frame. ;  ; RooPlot * plotOn (RooPlot *frame, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:15692,Integrability,message,messages,15692," const RooCmdArg &arg8={}, const RooCmdArg &arg9={}, const RooCmdArg &arg10={}) const override;  Helper calling plotOn(RooPlot*, RooLinkedList&) const. ;  ; RooPlot * plotOn (RooPlot *frame, RooLinkedList &cmdList) const override;  Plot (project) PDF on specified frame. ;  ; GenSpec * prepareMultiGen (const RooArgSet &whatVars, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={});  Prepare GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherit",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:16241,Integrability,message,messages,16241," GenSpec configuration object for efficient generation of multiple datasets from identical specification. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analy",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:16356,Integrability,integrat,integrator,16356,"nt="""") const override;  Print multi line detailed information of this RooAbsPdf. ;  ; void printValue (std::ostream &os) const override;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooA",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:16496,Integrability,integrat,integrator,16496,"e;  Print value of p.d.f, also print normalization integral that was last used, if any. ;  ; virtual void resetErrorCounters (Int_t resetValue=10);  Reset error counter to given value, limiting the number of future error messages for this pdf to 'resetValue'. ;  ; void setGeneratorConfig ();  Remove the specialized numeric MC generator configuration associated with this object. ;  ; void setGeneratorConfig (const RooNumGenConfig &config);  Set the given configuration as default numeric MC generator configuration for this object. ;  ; void setNormRange (const char *rangeName);  ; void setNormRangeOverride (const char *rangeName);  ; void setTraceCounter (Int_t value, bool allNodes=false);  Reset trace counter to given value, limiting the number of future trace messages for this pdf to 'value'. ;  ; RooNumGenConfig * specialGeneratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumGenConfig * specialGeneratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ;  Public Member Functions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with give",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:17658,Integrability,interface,interface,17658,"ctions inherited from RooAbsReal;  RooAbsReal ();  coverity[UNINIT_CTOR] Default constructor ;  ;  RooAbsReal (const char *name, const char *title, const char *unit="""");  Constructor with unit label. ;  ;  RooAbsReal (const char *name, const char *title, double minVal, double maxVal, const char *unit="""");  Constructor with plot range and unit label. ;  ;  RooAbsReal (const RooAbsReal &other, const char *name=nullptr);  Copy constructor. ;  ;  ~RooAbsReal () override;  Destructor. ;  ; virtual double analyticalIntegral (Int_t code, const char *rangeName=nullptr) const;  Implements the actual analytical integral(s) advertised by getAnalyticalIntegral. ;  ; TF1 * asTF (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a ROOT TF1,2,3 object bound to this RooAbsReal with given definition of observables and parameters. ;  ; RooFit::OwningPtr< RooAbsFunc > bindVars (const RooArgSet &vars, const RooArgSet *nset=nullptr, bool clipInvalid=false) const;  Create an interface adaptor f(vars) that binds us to the specified variables (in arbitrary order). ;  ; virtual std::string buildCallToAnalyticIntegral (Int_t code, const char *rangeName, RooFit::Detail::CodeSquashContext &ctx) const;  This function defines the analytical integral translation for the class. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooCmdArg &arg1={}, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={});  Perform a \( \chi^2 \) fit to given histogram. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataHist &data, const RooLinkedList &cmdList);  Calls RooAbsReal::createChi2(RooDataSet& data, const RooLinkedList& cmdList) and returns fit result. ;  ; virtual RooFit::OwningPtr< RooFitResult > chi2FitTo (RooDataSet &xydata, const RooCmdArg &arg1={}, const RooCmdArg &arg2={},",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:21869,Integrability,integrat,integration,21869,"f this function. ;  ; TH1 * createHistogram (const char *name, const RooAbsRealLValue &xvar, RooLinkedList &argList) const;  Internal method implementing createHistogram. ;  ; TH1 * createHistogram (RooStringView varNameList, Int_t xbins=0, Int_t ybins=0, Int_t zbins=0) const;  Create and fill a ROOT histogram TH1, TH2 or TH3 with the values of this function for the variables with given names. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const char *rangeName) const;  Create integral over observables in iset in range named rangeName. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet &nset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullpt",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:22830,Integrability,integrat,integration,22830,"ntegral over observables in iset in range named rangeName with integrand normalized over observables in nset while using specified configuration for any numeric integration. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooArgSet *nset=nullptr, const RooNumIntConfig *cfg=nullptr, const char *rangeName=nullptr) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:23051,Integrability,depend,dependentVars,23051,"nction over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooCmdArg &arg1, const RooCmdArg &arg2={}, const RooCmdArg &arg3={}, const RooCmdArg &arg4={}, const RooCmdArg &arg5={}, const RooCmdArg &arg6={}, const RooCmdArg &arg7={}, const RooCmdArg &arg8={}) const;  Create an object that represents the integral of the function over one or more observables listed in iset. ;  ; RooFit::OwningPtr< RooAbsReal > createIntegral (const RooArgSet &iset, const RooNumIntConfig &cfg, const char *rangeName=nullptr) const;  Create integral over observables in iset in range named rangeName using specified configuration for any numeric integration. ;  ; RooFit::OwningPtr< RooAbsReal > createIntRI (const RooArgSet &iset, const RooArgSet &nset={});  Utility function for createRunningIntegral. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &dependentVars, const RooArgSet *projectedVars, RooArgSet *&cloneSet, const char *rangeName=nullptr, const RooArgSet *condObs=nullptr) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; const RooAbsReal * createPlotProjection (const RooArgSet &depVars, const RooArgSet &projVars, RooArgSet *&cloneSet) const;  Utility function for plotOn() that creates a projection of a function or p.d.f to be plotted on a RooPlot. ;  ; virtual RooFit::OwningPtr< RooAbsReal > createProfile (const RooArgSet &paramsOfInterest);  Create a RooProfileLL object that eliminates all nuisance parameters in the present function. ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooArgSet &nset={});  Calls createRunningIntegral(const RooArgSet&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&, const RooCmdArg&) ;  ; RooFit::OwningPtr< RooAbsReal > createRunningIntegral (const RooArgSet &iset, const RooCmdArg &",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:26944,Integrability,integrat,integration,26944,"et &addNormSet=RooArgSet(), bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:27071,Integrability,integrat,integration,27071,"e headed by this object to the given set of observables. ;  ; virtual void fixAddCoefRange (const char *rangeName=nullptr, bool force=true);  Fix the interpretation of the coefficient of any RooAddPdf component in the expression tree headed by this object to the given set of observables. ;  ; virtual void forceNumInt (bool flag=true);  ; RooFunctor * functor (const RooArgList &obs, const RooArgList &pars=RooArgList(), const RooArgSet &nset=RooArgSet()) const;  Return a RooFunctor object bound to this RooAbsReal with given definition of observables and parameters. ;  ; virtual Int_t getAnalyticalIntegral (RooArgSet &allVars, RooArgSet &analVars, const char *rangeName=nullptr) const;  Interface function getAnalyticalIntergral advertises the analytical integrals that are supported. ;  ; bool getForceNumInt () const;  ; RooNumIntConfig * getIntegratorConfig ();  Return the numeric integration configuration used for this object. ;  ; const RooNumIntConfig * getIntegratorConfig () const;  Return the numeric integration configuration used for this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const overr",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:28240,Integrability,message,message,28240,"this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:28317,Integrability,message,message,28317,"this object. ;  ; virtual Int_t getMaxVal (const RooArgSet &vars) const;  Advertise capability to determine maximum value of function for given set of observables. ;  ; const char * getPlotLabel () const;  Get the label associated with the variable. ;  ; double getPropagatedError (const RooFitResult &fr, const RooArgSet &nset={}) const;  Propagates parameter uncertainties to an uncertainty estimate for this RooAbsReal. ;  ; TString getTitle (bool appendUnit=false) const;  Return this variable's title string. ;  ; const Text_t * getUnit () const;  ; double getVal (const RooArgSet &normalisationSet) const;  Like getVal(const RooArgSet*), but always requires an argument for normalisation. ;  ; double getVal (const RooArgSet *normalisationSet=nullptr) const;  Evaluate object. ;  ; virtual void gradient (double *) const;  ; virtual bool hasGradient () const;  ; bool isIdentical (const RooAbsArg &other, bool assumeSameType=false) const override;  ; virtual bool isOffsetting () const;  ; bool isSelectedComp () const;  If true, the current pdf is a selected component (for use in plotting) ;  ; void logEvalError (const char *message, const char *serverValueString=nullptr) const;  Log evaluation error message. ;  ; virtual double maxVal (Int_t code) const;  Return maximum value for set of observables identified by code assigned in getMaxVal. ;  ; RooAbsMoment * mean (RooRealVar &obs);  ; RooAbsMoment * mean (RooRealVar &obs, const RooArgSet &nset);  ; virtual Int_t minTrialSamples (const RooArgSet &) const;  ; RooAbsMoment * moment (RooRealVar &obs, const RooArgSet &normObs, Int_t order, bool central, bool takeRoot, bool intNormObs);  Return function representing moment of p.d.f (normalized w.r.t given observables) of given order. ;  ; RooAbsMoment * moment (RooRealVar &obs, Int_t order, bool central, bool takeRoot);  Return function representing moment of function of given order. ;  ; virtual double offset () const;  ; bool operator== (const RooAbsArg &other) const override; ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30335,Integrability,integrat,integration,30335,"st RooArgSet &sliceSet, Option_t *drawOptions=""L"", double scaleFactor=1.0, ScaleType stype=Relative, const RooAbsData *projData=nullptr) const;  ; virtual void preferredObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30468,Integrability,integrat,integrator,30468,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30512,Integrability,integrat,integration,30512,"dObservableScanOrder (const RooArgSet &obs, RooArgSet &orderedObs) const;  Interface method for function objects to indicate their preferred order of observables for scanning their values into a (multi-dimensional) histogram or RooDataSet. ;  ; void printMultiline (std::ostream &os, Int_t contents, bool verbose=false, TString indent="""") const override;  Structure printing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an objec",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:30934,Integrability,integrat,integrator,30934,"ing. ;  ; void printValue (std::ostream &os) const override;  Print object value. ;  ; bool readFromStream (std::istream &is, bool compact, bool verbose=false) override;  Read object contents from stream (dummy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedC",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:31075,Integrability,integrat,integrator,31075,"mmy for now) ;  ; void selectComp (bool flag);  ; void setCachedValue (double value, bool notifyClients=true) final;  Overwrite the value stored in this object's cache. ;  ; virtual bool setData (RooAbsData &, bool=true);  ; void setIntegratorConfig ();  Remove the specialized numeric integration configuration associated with this object. ;  ; void setIntegratorConfig (const RooNumIntConfig &config);  Set the given integrator configuration as default numeric integration configuration for this object. ;  ; void setParameterizeIntegral (const RooArgSet &paramVars);  ; void setPlotLabel (const char *label);  Set the label associated with this variable. ;  ; void setUnit (const char *unit);  ; RooAbsMoment * sigma (RooRealVar &obs);  ; RooAbsMoment * sigma (RooRealVar &obs, const RooArgSet &nset);  ; RooNumIntConfig * specialIntegratorConfig () const;  Returns the specialized integrator configuration for this RooAbsReal. ;  ; RooNumIntConfig * specialIntegratorConfig (bool createOnTheFly);  Returns the specialized integrator configuration for this RooAbsReal. ;  ; void StreamerNVirtual (TBuffer &ClassDef_StreamerNVirtual_b);  ; void writeToStream (std::ostream &os, bool compact) const override;  Write object contents to stream (dummy for now) ;  ;  Public Member Functions inherited from RooAbsArg;  RooAbsArg ();  Default constructor. ;  ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:32478,Integrability,depend,dependent,32478," ;  RooAbsArg (const char *name, const char *title);  Create an object with the specified name and descriptive title. ;  ;  RooAbsArg (const RooAbsArg &other, const char *name=nullptr);  Copy constructor transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPri",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:32685,Integrability,depend,dependent,32685," transfers all boolean and string properties of the original object. ;  ;  ~RooAbsArg () override;  Destructor. ;  ; bool addOwnedComponents (const RooAbsCollection &comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooAbsCollection &&comps);  Take ownership of the contents of 'comps'. ;  ; bool addOwnedComponents (RooArgList &&comps);  Take ownership of the contents of 'comps'. ;  ; template<typename... Args_t> ; bool addOwnedComponents (std::unique_ptr< Args_t >... comps);  ; virtual void applyWeightSquared (bool flag);  Disables or enables the usage of squared weights. ;  ; void attachArgs (const RooAbsCollection &set);  Bind this node to objects in set. ;  ; void attachDataSet (const RooAbsData &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; void attachDataStore (const RooAbsDataStore &set);  Replace server nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether w",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:33491,Integrability,depend,dependsOn,33491,"erver nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:33609,Integrability,depend,depend,33609,"erver nodes with names matching the dataset variable names with those data set variables, making this PDF directly dependent on the dataset. ;  ; const std::set< std::string > & attributes () const;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:33671,Integrability,depend,dependsOn,33671,"nst;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:33800,Integrability,depend,depend,33800,"nst;  ; virtual bool canComputeBatchWithCuda () const;  ; TObject * Clone (const char *newname=nullptr) const override;  Make a clone of an object using the Streamer facility. ;  ; virtual RooAbsArg * cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depLis",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:33880,Integrability,depend,dependsOn,33880,"* cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:33996,Integrability,depend,depend,33996,"* cloneTree (const char *newname=nullptr) const;  Clone tree expression of objects. ;  ; Int_t Compare (const TObject *other) const override;  Utility function used by TCollection::Sort to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:34068,Integrability,depend,dependsOnValue,34068,"t to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:34179,Integrability,depend,depends,34179,"t to compare contained TObjects We implement comparison by name, resulting in alphabetical sorting by object name. ;  ; std::size_t dataToken () const;  Returns the token for retrieving results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgS",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:34248,Integrability,depend,dependsOnValue,34248,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:34370,Integrability,depend,depends,34370,"ing results in the BatchMode. For internal use only. ;  ; Int_t defaultPrintContents (Option_t *opt) const override;  Define default contents to print. ;  ; bool dependsOn (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) the specified object. ;  ; bool dependsOn (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) any object in the specified collection. ;  ; bool dependsOn (TNamed const *namePtr, const RooAbsArg *ignoreArg=nullptr, bool valueOnly=false) const;  Test whether we depend on (ie, are served by) an object with a specific name. ;  ; bool dependsOnValue (const RooAbsArg &server, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values served from the object passed as server. ;  ; bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:35357,Integrability,depend,dependents,35357," bool dependsOnValue (const RooAbsCollection &serverList, const RooAbsArg *ignoreArg=nullptr) const;  Check whether this object depends on values from an element in the serverList. ;  ; bool getAttribute (const Text_t *name) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable lis",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:35547,Integrability,depend,depends,35547,"me) const;  Check if a named attribute is set. By default, all attributes are unset. ;  ; RooFit::OwningPtr< RooArgSet > getComponents () const;  Create a RooArgSet with all components (branch nodes) of the expression tree headed by this object. ;  ; bool getObservables (const RooAbsCollection *depList, RooArgSet &outputSet, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData &data) const;  Return the observables of this pdf given the observables defined by data. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set o",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:36274,Integrability,depend,dependents,36274,"oArgSet > getObservables (const RooAbsData *data) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet &set, bool valueOnly=true) const;  Given a set of possible observables, return the observables that this PDF depends on. ;  ; RooFit::OwningPtr< RooArgSet > getObservables (const RooArgSet *depList, bool valueOnly=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that match any of the names the args in the supplied argset. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData &data, bool stripDisconnected=true) const;  Return the parameters of this p.d.f when used in conjunction with dataset 'data'. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooAbsData *data, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names of the variable list of the supplied data set (the dependents). ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet &observables, bool stripDisconnected=true) const;  Return the parameters of the p.d.f given the provided set of observables. ;  ; RooFit::OwningPtr< RooArgSet > getParameters (const RooArgSet *observables, bool stripDisconnected=true) const;  Create a list of leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; virtual bool getParameters (const RooArgSet *observables, RooArgSet &outputSet, bool stripDisconnected=true) const;  Fills a list with leaf nodes in the arg tree starting with ourself as top node that don't match any of the names the args in the supplied argset. ;  ; RooAbsProxy * getProxy (Int_t index) const;  Return the nth proxy from the proxy list. ;  ; const Text_t * getStringAttribute (",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:38297,Integrability,depend,depend,38297,"connected=true) const;  Return RooArgSet with all variables (tree leaf nodes of expression tree) ;  ; void graphVizTree (const char *fileName, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Create a GraphViz .dot file visualizing the expression tree headed by this RooAbsArg object. ;  ; void graphVizTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; v",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:38703,Integrability,depend,dependents,38703,"izTree (std::ostream &os, const char *delimiter=""\n"", bool useTitle=false, bool useLatex=false);  Write the GraphViz representation of the expression tree headed by this RooAbsArg object to the given ostream. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:38909,Integrability,depend,dependents,38909,"am. ;  ; bool hasClients () const;  ; bool hasDataToken () const;  ; virtual bool hasRange (const char *) const;  ; virtual bool importWorkspaceHook (RooWorkspace &ws);  ; virtual bool inRange (const char *) const;  ; virtual bool isCategory () const;  ; bool isConstant () const;  Check if the ""Constant"" attribute is set. ;  ; virtual bool isDerived () const;  Does value or shape of this arg depend on any other arg? ;  ; virtual bool isReducerNode () const;  ; bool IsSortable () const override;  ; bool localNoDirtyInhibit () const;  ; const TNamed * namePtr () const;  De-duplicated pointer to this object's name. ;  ; Int_t numProxies () const;  Return the number of registered proxies. ;  ; bool observableOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; bool observableOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  Test if any of the dependents of the arg tree (as determined by getObservables) overlaps with those of the testArg. ;  ; RooAbsArg & operator= (const RooAbsArg &other)=delete;  ; bool overlaps (const RooAbsArg &testArg, bool valueOnly=false) const;  Test if any of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::o",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:40147,Integrability,interface,interface,40147,"y of the nodes of tree are shared with that of the given tree. ;  ; const RooArgSet * ownedComponents () const;  ; void Print (Option_t *options=nullptr) const override;  Print the object to the defaultPrintStream(). ;  ; void printAddress (std::ostream &os) const override;  Print address of this RooAbsArg. ;  ; void printArgs (std::ostream &os) const override;  Print object arguments, ie its proxies. ;  ; void printClassName (std::ostream &os) const override;  Print object class name. ;  ; void printCompactTree (const char *indent="""", const char *fileName=nullptr, const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on stdout, or to file if filename is specified. ;  ; void printCompactTree (std::ostream &os, const char *indent="""", const char *namePat=nullptr, RooAbsArg *client=nullptr);  Print tree structure of expression tree on given ostream. ;  ; virtual void printCompactTreeHook (std::ostream &os, const char *ind="""");  Hook function interface for object to insert additional information when printed in the context of a tree structure. ;  ; void printComponentTree (const char *indent="""", const char *namePat=nullptr, Int_t nLevel=999);  Print tree structure of expression tree on given ostream, only branch nodes are printed. ;  ; void printDirty (bool depth=true) const;  Print information about current value dirty state information. ;  ; void printName (std::ostream &os) const override;  Print object name. ;  ; void printTitle (std::ostream &os) const override;  Print object title. ;  ; void printTree (std::ostream &os, TString indent="""") const override;  Print object tree structure. ;  ; bool recursiveCheckObservables (const RooArgSet *nset) const;  Recursively call checkObservables on all nodes in the expression tree. ;  ; void removeStringAttribute (const Text_t *key);  Delete a string attribute with a given key. ;  ; void resetDataToken ();  ; void setAttribute (const Text_t *name, bool value=true);  Set (default) or ",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:43438,Integrability,depend,dependentOverlaps,43438,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:43522,Integrability,depend,dependentOverlaps,43522,"TED(6;  ; TIterator Use shapeClients () and begin();  ; TIterator Use end () or range-based loops."") ;  ; TIterator * serverIterator () const R__DEPRECATED(6;  ; TIterator Use servers () and begin();  ; TIterator Use end () or range-based loops."") ;  ; RooFIter valueClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use valueClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter shapeClientMIterator () const R__DEPRECATED(6;  ; RooFIter Use shapeClients () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFIter serverMIterator () const R__DEPRECATED(6;  ; RooFIter Use servers () and begin();  ; RooFIter Use end () or range-based loops."") ;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet &set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooAbsData *set) const;  ; RooFit::OwningPtr< RooArgSet > getDependents (const RooArgSet *depList) const;  ; bool dependentOverlaps (const RooAbsData *dset, const RooAbsArg &testArg) const;  ; bool dependentOverlaps (const RooArgSet *depList, const RooAbsArg &testArg) const;  ; bool checkDependents (const RooArgSet *nset) const;  ; bool recursiveCheckDependents (const RooArgSet *nset) const;  ; const RefCountList_t & clients () const;  List of all clients of this object. ;  ; const RefCountList_t & valueClients () const;  List of all value clients of this object. Value clients receive value updates. ;  ; const RefCountList_t & shapeClients () const;  List of all shape clients of this object. ;  ; const RefCountList_t & servers () const;  List of all servers of this object. ;  ; RooAbsArg * findServer (const char *name) const;  Return server of this with name name. Returns nullptr if not found. ;  ; RooAbsArg * findServer (const RooAbsArg &arg) const;  Return server of this that has the same name as arg. Returns nullptr if not found. ;  ; RooAbsArg * findServer (Int_t index) const;  Return i-th server from server list. ;  ; bool isValueServer (const Ro",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:45973,Integrability,integrat,integrated,45973," *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all leaf nodes of the arg tree, starting with ourself as top node. ;  ; void branchNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool recurseNonDerived=false) const;  Fill supplied list with all branch nodes of the arg tree starting with ourself as top node. ;  ; void treeNodeServerList (RooAbsCollection *list, const RooAbsArg *arg=nullptr, bool doBranch=true, bool doLeaf=true, bool valueOnly=false, bool recurseNonDerived=false) const;  Fill supplied list with nodes of the arg tree, following all server links, starting with ourself as top node. ;  ; virtual bool isFundamental () const;  Is this object a fundamental type that can be added to a dataset? Fundamental-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
https://root.cern/doc/v632/classRooRealSumPdf.html:46830,Integrability,depend,depend,46830,"tal-type subclasses override this method to return true. ;  ; virtual bool isLValue () const;  Is this argument an l-value, i.e., can it appear on the left-hand side of an assignment expression? LValues are also special since they can potentially be analytically integrated and generated. ;  ; bool redirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool isRecursionStep=false);  Replace all direct servers of this object with the new servers in newServerList. ;  ; bool redirectServers (std::unordered_map< RooAbsArg *, RooAbsArg * > const &replacements);  Replace some servers of this object. ;  ; bool recursiveRedirectServers (const RooAbsCollection &newServerList, bool mustReplaceAll=false, bool nameChange=false, bool recurseInNewSet=true);  Recursively replace all servers with the new servers in newSet. ;  ; virtual void serverNameChangeHook (const RooAbsArg *, const RooAbsArg *);  ; void addServer (RooAbsArg &server, bool valueProp=true, bool shapeProp=false, std::size_t refCount=1);  Register another RooAbsArg as a server to us, ie, declare that we depend on it. ;  ; void addServerList (RooAbsCollection &serverList, bool valueProp=true, bool shapeProp=false);  Register a list of RooAbsArg as servers to us by calling addServer() for each arg in the list. ;  ; void replaceServer (RooAbsArg &oldServer, RooAbsArg &newServer, bool valueProp, bool shapeProp);  Replace 'oldServer' with 'newServer', specifying whether the new server has value or shape server properties. ;  ; void changeServer (RooAbsArg &server, bool valueProp, bool shapeProp);  Change dirty flag propagation mask for specified server. ;  ; void removeServer (RooAbsArg &server, bool force=false);  Unregister another RooAbsArg as a server to us, ie, declare that we no longer depend on its value and shape. ;  ; RooAbsArg * findNewServer (const RooAbsCollection &newSet, bool nameChange) const;  Find the new server in the specified set that matches the old s",MatchSource.WIKI,doc/v632/classRooRealSumPdf.html,root-project,root,v6-32-06,https://root.cern,https://root.cern/doc/v632/classRooRealSumPdf.html
